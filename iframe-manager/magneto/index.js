// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"gIJED":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "bebc91dccb5f5641";
module.bundle.HMR_BUNDLE_ID = "392f686499845d23";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws;
    try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        if (e.message) console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"23Crz":[function(require,module,exports) {
/* eslint-disable no-console */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>MagnetoProvider);
var _objectSpread = require("@swc/helpers/_/_object_spread");
var _objectSpreadProps = require("@swc/helpers/_/_object_spread_props");
var _utils = require("../../utils/utils");
var _newRelic = require("./utils/analytics/new-relic/new-relic");
var _newRelicDefault = parcelHelpers.interopDefault(_newRelic);
var _oztam = require("./utils/analytics/oztam/oztam");
var _oztamDefault = parcelHelpers.interopDefault(_oztam);
var _vimondPlayerEvents = require("./utils/analytics/vimond-player-events");
var _vimondPlayerEventsDefault = parcelHelpers.interopDefault(_vimondPlayerEvents);
// import YouboraAdapter from './utils/analytics/youbora/youbora6';
var _youbora7 = require("./utils/analytics/youbora/youbora7");
var _youbora7Default = parcelHelpers.interopDefault(_youbora7);
var _user = require("./utils/user");
var _userDefault = parcelHelpers.interopDefault(_user);
var _getAsset = require("./utils/get-asset");
var _getAssetDefault = parcelHelpers.interopDefault(_getAsset);
var _utils1 = require("./utils/utils");
class MagnetoProvider {
    /**
     * @typedef {import('../../app/get-asset').GetAssetRequest} GetAssetRequest
     * @typedef {import('../../app/get-asset').GetAssetResponse} GetAssetResponse
     */ /**
     * @param {GetAssetRequest} args requested asset and device information
     * @returns {GetAssetResponse} streams for the requested asset
     */ async getAsset(args) {
        this.getAssetArgs = args;
        const { brand, partnerId } = args.deviceInfo.glassConfigure;
        if (this.user === null) // Only create new user instance if we haven't one already.
        this.user = new (0, _userDefault.default)(partnerId, brand);
        this.asset = await (0, _getAssetDefault.default)((0, _objectSpreadProps._)((0, _objectSpread._)({}, args), {
            config: this.config,
            user: this.user
        }));
        return this.asset;
    }
    onProviderEvent(event) {
        var _this_videoElement;
        console.log("MagnetoProvider Event", event.type, event.detail, (_this_videoElement = this.videoElement) === null || _this_videoElement === void 0 ? void 0 : _this_videoElement.currentTime);
    }
    monitoringSetup(videoElement) {
        var _this_config_oztam, _this_config, _this_config_oztam1, _this_config1;
        this.monitoringTeardown(false);
        this.videoElement = videoElement;
        this.user.setVideoElement(videoElement);
        this.debuglisteners = window.isConsoleEnabled ? {
            // html5 video events
            ended: this.onProviderEvent.bind(this),
            error: this.onProviderEvent.bind(this),
            loadedmetadata: this.onProviderEvent.bind(this),
            pause: this.onProviderEvent.bind(this),
            play: this.onProviderEvent.bind(this),
            playing: this.onProviderEvent.bind(this),
            seeked: this.onProviderEvent.bind(this),
            seeking: this.onProviderEvent.bind(this),
            timeupdate: this.onProviderEvent.bind(this),
            waiting: this.onProviderEvent.bind(this),
            // AAMP events
            bitrateChanged: this.onProviderEvent.bind(this),
            id3Metadata: this.onProviderEvent.bind(this)
        } : {};
        this.listeners = {
            play: this.onPlay.bind(this),
            loadedmetadata: this.onLoadedMetadata.bind(this),
            ended: this.onEnded.bind(this),
            tracksChanged: this.onTracksChanged.bind(this)
        };
        for(const key in this.listeners)this.videoElement.addEventListener(key, this.listeners[key]);
        for(const key in this.debuglisteners)this.videoElement.addEventListener(key, this.debuglisteners[key]);
        const getAssetArgs = this.getAssetArgs || {};
        this.newRelicAdapter = new (0, _newRelicDefault.default)(videoElement, getAssetArgs, this.asset);
        if (((_this_config = this.config) === null || _this_config === void 0 ? void 0 : (_this_config_oztam = _this_config.oztam) === null || _this_config_oztam === void 0 ? void 0 : _this_config_oztam.isEnabled) || window.localStorage.getItem("OZTAM_ENABLED") === "true" || false) this.oztamAdapter = new (0, _oztamDefault.default)(videoElement, getAssetArgs, this.asset, (_this_config1 = this.config) === null || _this_config1 === void 0 ? void 0 : (_this_config_oztam1 = _this_config1.oztam) === null || _this_config_oztam1 === void 0 ? void 0 : _this_config_oztam1.isProduction);
        const isVimondPlayerEventsEnabled = true;
        if (isVimondPlayerEventsEnabled) this.vimondAdapter = new (0, _vimondPlayerEventsDefault.default)(videoElement, getAssetArgs, this.asset, this.user);
        this.youboraAdapter = new (0, _youbora7Default.default)(videoElement, getAssetArgs, this.asset);
    }
    monitoringTeardown(resetAsset = true) {
        var _this_newRelicAdapter, _this_oztamAdapter, _this_vimondAdapter, _this_youboraAdapter;
        // Detach your listeners, send your final heartbeats, etc.
        if (this.videoElement) {
            var _this_videoElement, _this_videoElement1;
            for(const key in this.listeners)(_this_videoElement = this.videoElement) === null || _this_videoElement === void 0 ? void 0 : _this_videoElement.removeEventListener(key, this.listeners[key]);
            for(const key in this.debuglisteners)(_this_videoElement1 = this.videoElement) === null || _this_videoElement1 === void 0 ? void 0 : _this_videoElement1.removeEventListener(key, this.debuglisteners[key]);
        }
        (_this_newRelicAdapter = this.newRelicAdapter) === null || _this_newRelicAdapter === void 0 ? void 0 : _this_newRelicAdapter.teardown();
        this.newRelicAdapter = null;
        (_this_oztamAdapter = this.oztamAdapter) === null || _this_oztamAdapter === void 0 ? void 0 : _this_oztamAdapter.teardown();
        this.oztamAdapter = null;
        (_this_vimondAdapter = this.vimondAdapter) === null || _this_vimondAdapter === void 0 ? void 0 : _this_vimondAdapter.teardown();
        this.vimondAdapter = null;
        (_this_youboraAdapter = this.youboraAdapter) === null || _this_youboraAdapter === void 0 ? void 0 : _this_youboraAdapter.teardown();
        this.youboraAdapter = null;
        this.videoElement = null;
        // reset stashed variables
        if (resetAsset) {
            this.asset = null;
            this.getAssetArgs = null;
        }
    }
    onPlay(payload) {
        this.currentStream = payload.detail.stream;
        const [currentPlayStream, ...overflow] = this.asset.playResponse.streams.filter((stream)=>{
            var _this_videoElement_currentSrc, _this_videoElement;
            return stream && ((_this_videoElement = this.videoElement) === null || _this_videoElement === void 0 ? void 0 : (_this_videoElement_currentSrc = _this_videoElement.currentSrc) === null || _this_videoElement_currentSrc === void 0 ? void 0 : _this_videoElement_currentSrc.indexOf(stream.manifest)) > -1;
        });
        if (!currentPlayStream) {
            console.error("currentPlayStream not found", currentPlayStream);
            return;
        } else if (overflow.length > 0) {
            console.error("more than one currentPlayStream found", overflow);
            return;
        }
        console.debug(`currentPlayStream=${JSON.stringify(currentPlayStream)}`); // eslint-disable-line no-console
        this.currentPlayStream = currentPlayStream;
        if (this.vimondAdapter) this.vimondAdapter.playStream = currentPlayStream;
        if (this.youboraAdapter) this.youboraAdapter.playStream = currentPlayStream;
    }
    onEnded() {
        this.currentPlayStream = null;
        this.videoAdBreaks = null;
    }
    onTracksChanged(payload) {
        if (payload.detail.tracks) this.youboraAdapter.tracks = payload.detail.tracks;
    }
    async onLoadedMetadata() {
        if (this.currentStream.autoPlay) {
            var _this_currentPlayStream;
            console.info(`autoplaying, no need to hit adTrackingUrl ${(_this_currentPlayStream = this.currentPlayStream) === null || _this_currentPlayStream === void 0 ? void 0 : _this_currentPlayStream.adTrackingUrl}`);
            this.setVideoAdBreaksCallback([]);
            return;
        }
        const url = (0, _utils.addProxyIp)(this.currentPlayStream.adTrackingUrl);
        console.info(`sending request to adTrackingUrl ${url}`);
        this.videoAdBreaks = await (0, _utils1.fetchWithTimeoutAndRetry)(url, {}, 10000).then((response)=>{
            if (response.ok) return response.json();
            else throw `Unable to get adTracking responseBody. ${url} ${response.status} ${response.statusText}`;
        }).then((responseBody)=>{
            // set MagnetoProvider.videoAdBreaks
            this.videoAdBreaks = (0, _utils1.getVideoAdBreaks)(responseBody);
            // set player.videoAdBreaks
            this.setVideoAdBreaksCallback(this.videoAdBreaks);
        }).catch((error)=>{
            console.error("adTrackingUrl failed to return", error);
            this.setVideoAdBreaksCallback(null, error);
        });
    }
    constructor(config){
        this.config = config;
        this.user = null;
        this.asset = [];
    }
}

},{"@swc/helpers/_/_object_spread":"lupAG","@swc/helpers/_/_object_spread_props":"8Y68S","../../utils/utils":"fvIy3","./utils/analytics/new-relic/new-relic":"gvmQ8","./utils/analytics/oztam/oztam":"gLRdZ","./utils/analytics/vimond-player-events":"hi9WM","./utils/analytics/youbora/youbora7":"eOZuI","./utils/user":"erYsf","./utils/get-asset":"1ECAn","./utils/utils":"4bxdT","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"lupAG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_object_spread", ()=>_object_spread);
parcelHelpers.export(exports, "_", ()=>_object_spread);
var _definePropertyJs = require("./_define_property.js");
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
        ownKeys.forEach(function(key) {
            (0, _definePropertyJs._define_property)(target, key, source[key]);
        });
    }
    return target;
}

},{"./_define_property.js":"9kWBJ","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"9kWBJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_define_property", ()=>_define_property);
parcelHelpers.export(exports, "_", ()=>_define_property);
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"840Gs":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"8Y68S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_object_spread_props", ()=>_object_spread_props);
parcelHelpers.export(exports, "_", ()=>_object_spread_props);
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    else ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
    return target;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"fvIy3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addProxyIp", ()=>addProxyIp);
parcelHelpers.export(exports, "getVideoPositionFromContentPosition", ()=>getVideoPositionFromContentPosition);
const PROXY_IP = window.localStorage.getItem("PROXY_IP") || "";
function addProxyIp(url, proxyIp = PROXY_IP) {
    if (proxyIp && url && !url.includes(proxyIp)) return `${proxyIp}${url}`;
    return url;
}
function getVideoPositionFromContentPosition(contentPositionMilliseconds, adBreaks) {
    let videoPositionMilliseconds = contentPositionMilliseconds;
    for (const adBreak of adBreaks){
        for (const ad of adBreak.ads)if (ad.startTime < videoPositionMilliseconds) videoPositionMilliseconds += ad.duration;
    }
    return videoPositionMilliseconds;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"gvmQ8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>NewRelicAdapter);
var _newrelicVideoCore = require("newrelic-video-core");
var _magnetoHtml5Tracker = require("./magnetoHtml5Tracker");
var _magnetoHtml5TrackerDefault = parcelHelpers.interopDefault(_magnetoHtml5Tracker);
class NewRelicAdapter {
    teardown() {
        (0, _newrelicVideoCore.Core).getTrackers().forEach((tracker)=>{
            (0, _newrelicVideoCore.Core).removeTracker(tracker);
        });
        this.videoElement = null;
    }
    constructor(videoElement, getAssetArgs, asset){
        var _getAssetArgs_deviceInfo, _getAssetArgs_deviceInfo1, _asset_playResponse_youbora, _getAssetArgs_deviceInfo2, _getAssetArgs_deviceInfo3, _getAssetArgs_deviceInfo4, _getAssetArgs_deviceInfo5, _getAssetArgs_deviceInfo6, _getAssetArgs_deviceInfo7, _getAssetArgs_deviceInfo8, _getAssetArgs_deviceInfo9, _getAssetArgs_deviceInfo10, _getAssetArgs_deviceInfo11, _getAssetArgs_deviceInfo12, _getAssetArgs_deviceInfo13, _getAssetArgs_deviceInfo14, _getAssetArgs_deviceInfo15, _getAssetArgs_deviceInfo16, _getAssetArgs_glassContentOptions, _getAssetArgs_glassContentOptions1, _getAssetArgs_glassContentOptions2, _asset_playResponse_youbora1, _asset_playResponse_playerEventRequest_body_progress, _asset_playResponse_playerEventRequest_body, _asset_playResponse_playerEventRequest, _asset_playResponse_youbora2, _asset_playResponse_playerEventRequest_body_progress1, _asset_playResponse_playerEventRequest_body1, _asset_playResponse_playerEventRequest1;
        const backend = new (0, _newrelicVideoCore.NRInsightsBackend)("2115113", "NRII-xiMD2VbD5SyajC7DPPRKsnGUe82JBjFg");
        (0, _newrelicVideoCore.Core).setBackend(backend);
        if (window.isConsoleEnabled) (0, _newrelicVideoCore.Log).level = (0, _newrelicVideoCore.Log).Levels.ALL;
        this.myTracker = new (0, _magnetoHtml5TrackerDefault.default)(videoElement);
        this.myTracker.playSessionCustomData = {
            appName: (_getAssetArgs_deviceInfo = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo === void 0 ? void 0 : _getAssetArgs_deviceInfo.appName,
            appVersion: (_getAssetArgs_deviceInfo1 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo1 === void 0 ? void 0 : _getAssetArgs_deviceInfo1.appVersion,
            userId: ((_asset_playResponse_youbora = asset.playResponse.youbora) === null || _asset_playResponse_youbora === void 0 ? void 0 : _asset_playResponse_youbora["user.name"]) || "",
            playerName: (_getAssetArgs_deviceInfo2 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo2 === void 0 ? void 0 : _getAssetArgs_deviceInfo2.playerName,
            playerVersion: (_getAssetArgs_deviceInfo3 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo3 === void 0 ? void 0 : _getAssetArgs_deviceInfo3.playerVersion,
            uuid: (_getAssetArgs_deviceInfo4 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo4 === void 0 ? void 0 : _getAssetArgs_deviceInfo4.uuid,
            osName: (_getAssetArgs_deviceInfo5 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo5 === void 0 ? void 0 : _getAssetArgs_deviceInfo5.glassConfigure.osName,
            osVersion: (_getAssetArgs_deviceInfo6 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo6 === void 0 ? void 0 : _getAssetArgs_deviceInfo6.glassConfigure.osVersion,
            skyAccountId: (_getAssetArgs_deviceInfo7 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo7 === void 0 ? void 0 : _getAssetArgs_deviceInfo7.glassConfigure.accountId,
            xboServiceAccountId: (_getAssetArgs_deviceInfo8 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo8 === void 0 ? void 0 : _getAssetArgs_deviceInfo8.glassConfigure.xboServiceAccountId,
            deviceBrand: (_getAssetArgs_deviceInfo9 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo9 === void 0 ? void 0 : _getAssetArgs_deviceInfo9.glassConfigure.brand,
            deviceCategory: (_getAssetArgs_deviceInfo10 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo10 === void 0 ? void 0 : _getAssetArgs_deviceInfo10.glassConfigure.category,
            deviceCountryCode: (_getAssetArgs_deviceInfo11 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo11 === void 0 ? void 0 : _getAssetArgs_deviceInfo11.glassConfigure.countryCode,
            deviceEstbMacAddress: (_getAssetArgs_deviceInfo12 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo12 === void 0 ? void 0 : _getAssetArgs_deviceInfo12.glassConfigure.estbMacAddress,
            deviceManufacturer: (_getAssetArgs_deviceInfo13 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo13 === void 0 ? void 0 : _getAssetArgs_deviceInfo13.glassConfigure.manufacturer,
            deviceModel: (_getAssetArgs_deviceInfo14 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo14 === void 0 ? void 0 : _getAssetArgs_deviceInfo14.glassConfigure.model,
            devicePartnerId: (_getAssetArgs_deviceInfo15 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo15 === void 0 ? void 0 : _getAssetArgs_deviceInfo15.glassConfigure.partnerId,
            deviceType: ((_getAssetArgs_deviceInfo16 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo16 === void 0 ? void 0 : _getAssetArgs_deviceInfo16.glassConfigure.brand) === "SOIP-PCK" ? "stb" : "tv",
            locator: getAssetArgs.glassAssetLocator,
            assetType: (_getAssetArgs_glassContentOptions = getAssetArgs.glassContentOptions) === null || _getAssetArgs_glassContentOptions === void 0 ? void 0 : _getAssetArgs_glassContentOptions.assetType,
            connectionType: (_getAssetArgs_glassContentOptions1 = getAssetArgs.glassContentOptions) === null || _getAssetArgs_glassContentOptions1 === void 0 ? void 0 : _getAssetArgs_glassContentOptions1.connectionType,
            networkConnectionType: (_getAssetArgs_glassContentOptions2 = getAssetArgs.glassContentOptions) === null || _getAssetArgs_glassContentOptions2 === void 0 ? void 0 : _getAssetArgs_glassContentOptions2.connectionType,
            playServiceSessionId: asset.playResponse.sessionId,
            contentId: ((_asset_playResponse_youbora1 = asset.playResponse.youbora) === null || _asset_playResponse_youbora1 === void 0 ? void 0 : _asset_playResponse_youbora1["content.id"]) || ((_asset_playResponse_playerEventRequest = asset.playResponse.playerEventRequest) === null || _asset_playResponse_playerEventRequest === void 0 ? void 0 : (_asset_playResponse_playerEventRequest_body = _asset_playResponse_playerEventRequest.body) === null || _asset_playResponse_playerEventRequest_body === void 0 ? void 0 : (_asset_playResponse_playerEventRequest_body_progress = _asset_playResponse_playerEventRequest_body.progress) === null || _asset_playResponse_playerEventRequest_body_progress === void 0 ? void 0 : _asset_playResponse_playerEventRequest_body_progress.assetId),
            contentTitle: ((_asset_playResponse_youbora2 = asset.playResponse.youbora) === null || _asset_playResponse_youbora2 === void 0 ? void 0 : _asset_playResponse_youbora2["content.title"]) || ((_asset_playResponse_playerEventRequest1 = asset.playResponse.playerEventRequest) === null || _asset_playResponse_playerEventRequest1 === void 0 ? void 0 : (_asset_playResponse_playerEventRequest_body1 = _asset_playResponse_playerEventRequest1.body) === null || _asset_playResponse_playerEventRequest_body1 === void 0 ? void 0 : (_asset_playResponse_playerEventRequest_body_progress1 = _asset_playResponse_playerEventRequest_body1.progress) === null || _asset_playResponse_playerEventRequest_body_progress1 === void 0 ? void 0 : _asset_playResponse_playerEventRequest_body_progress1.title)
        };
        (0, _newrelicVideoCore.Core).addTracker(this.myTracker);
        // Send a sample event
        // myTracker.send('SAMPLE_ACTION', {num: 1});
        this.videoElement = videoElement;
    }
}

},{"newrelic-video-core":"9khXO","./magnetoHtml5Tracker":"7wdyd","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"9khXO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Constants", ()=>(0, _constantsDefault.default));
parcelHelpers.export(exports, "Chrono", ()=>(0, _chronoDefault.default));
parcelHelpers.export(exports, "Log", ()=>(0, _logDefault.default));
parcelHelpers.export(exports, "Emitter", ()=>(0, _emitterDefault.default));
parcelHelpers.export(exports, "Tracker", ()=>(0, _trackerDefault.default));
parcelHelpers.export(exports, "VideoTracker", ()=>(0, _videotrackerDefault.default));
parcelHelpers.export(exports, "VideoTrackerState", ()=>(0, _videotrackerstateDefault.default));
parcelHelpers.export(exports, "Core", ()=>(0, _coreDefault.default));
parcelHelpers.export(exports, "Backend", ()=>(0, _backendDefault.default));
parcelHelpers.export(exports, "NRInsightsBackend", ()=>(0, _nrinsightsbackendDefault.default));
parcelHelpers.export(exports, "version", ()=>version);
var _backend = require("./backend");
var _backendDefault = parcelHelpers.interopDefault(_backend);
var _nrinsightsbackend = require("./plugins/nrinsightsbackend");
var _nrinsightsbackendDefault = parcelHelpers.interopDefault(_nrinsightsbackend);
var _core = require("./core");
var _coreDefault = parcelHelpers.interopDefault(_core);
var _constants = require("./constants");
var _constantsDefault = parcelHelpers.interopDefault(_constants);
var _chrono = require("./chrono");
var _chronoDefault = parcelHelpers.interopDefault(_chrono);
var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _emitter = require("./emitter");
var _emitterDefault = parcelHelpers.interopDefault(_emitter);
var _tracker = require("./tracker");
var _trackerDefault = parcelHelpers.interopDefault(_tracker);
var _videotracker = require("./videotracker");
var _videotrackerDefault = parcelHelpers.interopDefault(_videotracker);
var _videotrackerstate = require("./videotrackerstate");
var _videotrackerstateDefault = parcelHelpers.interopDefault(_videotrackerstate);
var _packageJson = require("../package.json");
var _packageJsonDefault = parcelHelpers.interopDefault(_packageJson);
const version = (0, _packageJsonDefault.default).version;

},{"./backend":"hgF9I","./plugins/nrinsightsbackend":"7EUmj","./core":"eCjiR","./constants":"6t0C7","./chrono":"3bS4O","./log":"bJWc8","./emitter":"6sh7M","./tracker":"b8FBd","./videotracker":"3f2Cb","./videotrackerstate":"1EKA3","../package.json":"9P0RW","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"hgF9I":[function(require,module,exports) {
/**
 * Backend class provides the basic logic to create event backends.
 * This class is intended to be subclassed, not directly used.
 * 
 * @class Backend
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Backend {
    /**
     * Sends given event (to be overwritten by a subclass).
     * @param {String} event Event to send.
     * @param {Object} data Data associated to the event.
     */ send(event, data) {
        data = Object.assign(data || {}, this._attributes);
    }
    /**
     * Store custom attribute.
     * @param {String} key Attribute name.
     * @param {Object} value Attribute value.
     */ setAttribute(key, value) {
        this._attributes[key] = value;
    }
    /**
     * Store custom attribute list.
     * @param {Object} attr Attributes.
     */ setAttributes(attr) {
        this._attributes.append(attr);
    }
    constructor(){
        /**
         * Custom attributes
         * @private
         */ this._attributes = {};
    }
}
exports.default = Backend;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"7EUmj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _backend = require("../backend");
var _backendDefault = parcelHelpers.interopDefault(_backend);
var _log = require("../log");
var _logDefault = parcelHelpers.interopDefault(_log);
/**
 * Implements a New Relic Insights API backend. For a description of what is a Backend, see {@link Backend}.
 * It must be initialized using a New Relic Account ID and an Insights API insert key.
 *
 * @example
 * let backend = new nrvideo.NRInsightsBackend("ACCOUNT ID", "API KEY")
 * nrvideo.Core.setBackend(backend)
 *
 * @extends Backend
 */ class NRInsightsBackend extends (0, _backendDefault.default) {
    send(event, data) {
        super.send(event, data);
        if (this._eventBuffer.length < 500) {
            data = this.generateAttributes(data);
            data["eventType"] = this._eventType;
            data["actionName"] = event;
            // Mechanism to avoid having two events with the same timestamp
            let timestamp = Date.now();
            if (timestamp > this._lastTimestamp) {
                data["timestamp"] = timestamp;
                this._lastTimestamp = timestamp;
            } else {
                this._lastTimestamp++;
                data["timestamp"] = this._lastTimestamp;
            }
            this._eventBuffer.push(data);
        }
    }
    generateAttributes(data) {
        data["pageUrl"] = window.location.href;
        data["currentUrl"] = window.location.origin + window.location.pathname;
        data["referrerUrl"] = document.referrer;
        let OSName = "Unknown";
        if (navigator.userAgent.indexOf("Win") != -1) OSName = "Windows";
        else if (navigator.userAgent.indexOf("Android") != -1) OSName = "Android";
        else if (navigator.userAgent.indexOf("Mac") != -1) OSName = "Mac";
        else if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) OSName = "iOS";
        else if (navigator.userAgent.indexOf("Linux") != -1) OSName = "Linux";
        else if (navigator.userAgent.indexOf("X11") != -1) OSName = "UNIX";
        data["userAgentOS"] = OSName;
        let agentName = "Unknown";
        if (navigator.userAgent.indexOf("Chrome") != -1) agentName = "Chrome";
        else if (navigator.userAgent.indexOf("Firefox") != -1) agentName = "Firefox";
        else if (navigator.userAgent.indexOf("MSIE") != -1) agentName = "IE";
        else if (navigator.userAgent.indexOf("Edge") != -1) agentName = "Microsoft Edge";
        else if (navigator.userAgent.indexOf("Safari") != -1) agentName = "Safari";
        else if (navigator.userAgent.indexOf("Opera") != -1) agentName = "Opera";
        data["userAgentName"] = agentName;
        if (!data["deviceType"]) {
            let deviceType = "Unknown";
            if (navigator.userAgent.match(/Tablet|iPad/i)) deviceType = "Tablet";
            else if (navigator.userAgent.match(/Mobile|Windows Phone|Lumia|Android|webOS|iPhone|iPod|Blackberry|PlayBook|BB10|Opera Mini|\bCrMo\/|Opera Mobi/i)) deviceType = "Mobile";
            else if (window.cast != undefined) deviceType = "Cast";
            else deviceType = "Desktop";
            data["deviceType"] = deviceType;
        }
        return data;
    }
    harvestHandler(source) {
        if (source == NRInsightsBackend.Source.TIMER && this._harvestLocked) {
            (0, _logDefault.default).debug("Harvest still locked, abort");
            return;
        }
        this._harvestLocked = true;
        if (this._eventBuffer.length > 0) {
            (0, _logDefault.default).debug("Push events to Insights = ", this._eventBuffer);
            this.pushEventToInsights(this._eventBuffer.pop());
        } else this._harvestLocked = false;
    }
    pushEventToInsights(ev) {
        const requestOptions = {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-Insert-Key": this._apiKey
            },
            body: JSON.stringify(ev)
        };
        const url = "https://insights-collector.newrelic.com/v1/accounts/" + this._accountId + "/events";
        fetch(url, requestOptions).then((response)=>response.json()).then((data)=>this.insightsRequestResponse(data)).catch((error)=>{
            (0, _logDefault.default).error("Error:", error, ev);
            // Put back the event and abort current fetch process
            this._eventBuffer.push(ev);
            this._harvestLocked = false;
        });
    }
    insightsRequestResponse(data) {
        // Send next event
        this.harvestHandler(NRInsightsBackend.Source.FETCH);
    }
    /**
     * Constructor, receives account ID, API Key and (optionally) an event type.
     *
     * @param {String} [accountId] Insights Account ID.
     * @param {String} [apiKey] Insights API Key.
     * @param {String} [eventType] Insights event type. Default 'BrowserVideo'.
     */ constructor(accountId, apiKey, eventType = "BrowserVideo"){
        super();
        /**
         * Insights account ID.
         * @private
         */ this._accountId = accountId;
        /**
         * Insights API Key.
         * @private
         */ this._apiKey = apiKey;
        /**
         * Insights event type.
         * @private
         */ this._eventType = eventType;
        /**
         * Buffer to store events.
         * @private
         */ this._eventBuffer = [];
        /**
         * Harvest timer lock.
         * @private
         */ this._harvestLocked = false;
        /**
         * Last timestamp.
         * @private
         */ this._lastTimestamp = 0;
        // Define harvest timer handler
        setInterval(()=>{
            this.harvestHandler(NRInsightsBackend.Source.TIMER);
        }, 10000);
    }
}
NRInsightsBackend.Source = {
    TIMER: "TIMER",
    FETCH: "FETCH"
};
exports.default = NRInsightsBackend;

},{"../backend":"hgF9I","../log":"bJWc8","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"bJWc8":[function(require,module,exports) {
/**
 * Static Log class
 *
 * @class
 * @static
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Log {
    /**
   * Sends an error console log.
   * @param {...any} [msg] Message to show
   * @static
   */ static error(...msg) {
        _report(msg, Log.Levels.ERROR, "darkred");
    }
    /**
   * Sends a warning console log.
   * @method Log.warn
   * @static
   * @param {...any} msg Message to show
   */ static warn(...msg) {
        _report(msg, Log.Levels.WARNING, "darkorange");
    }
    /**
   * Sends a notice console log.
   * @method Log.notice
   * @static
   * @param {...any} msg Message to show
   */ static notice(...msg) {
        _report([].slice.call(arguments), Log.Levels.NOTICE, "darkcyan");
    }
    /**
   * Sends a debug message to console.
   * @method Log.debug
   * @static
   * @param {...any} msg Message to show
   */ static debug(...msg) {
        _report(msg, Log.Levels.DEBUG, "indigo");
    }
    /**
   * This utility method will add most of the HTML5 common event listeners to the player sent.
   * Events will be reported as DEBUG level messages.
   *
   * @example
   * // Already included events:
   * ['canplay', 'buffering', 'waiting', 'ended', 'play', 'playing', 'pause', 'resume', 'error',
   * 'abort', 'seek', 'seeking', 'seeked', 'stalled', 'dispose', 'loadeddata', 'loadstart',
   * 'loadedmetadata']
   *
   * @method Log.debugCommonVideoEvents
   * @static
   * @param {object|function} o Object to attach the events.
   * @param {array} [extraEvents]
   * An array of extra events to watch. ie:  ['timeupdate', 'progress'].
   * If the first item is null, no common events will be added.
   * @param {function} [report] Callback function called to report events.
   * Default calls Log.debug()
   */ static debugCommonVideoEvents(o, extraEvents, report) {
        try {
            if (Log.level <= Log.Levels.DEBUG) {
                report = report || function(e) {
                    Log.debug("Event: " + e.type);
                };
                var playerEvents = [
                    "canplay",
                    "buffering",
                    "waiting",
                    "ended",
                    "play",
                    "playing",
                    "pause",
                    "resume",
                    "error",
                    "abort",
                    "seek",
                    "seeking",
                    "seeked",
                    "stalled",
                    "dispose",
                    "loadeddata",
                    "loadstart",
                    "loadedmetadata"
                ];
                if (extraEvents) {
                    if (extraEvents[0] === null) {
                        extraEvents.shift();
                        playerEvents = extraEvents;
                    } else playerEvents = playerEvents.concat(extraEvents);
                }
                for(var i = 0; i < playerEvents.length; i++){
                    if (typeof o === "function") o.call(window, playerEvents[i], report);
                    else if (o.on) o.on(playerEvents[i], report);
                    else if (o.addEventListener) o.addEventListener(playerEvents[i], report);
                    else if (o.addEventHandler) o.addEventHandler(playerEvents[i], report);
                    else Log.warn("debugCommonVideoEvents: No common listener function found for ", o);
                }
            }
        } catch (err) {
            Log.warn(err);
        }
    }
}
/**
 * Enum for log levels
 * @enum {integer}
 * @static
 * @var
 */ Log.Levels = {
    /** No console outputs */ SILENT: 5,
    /** Console will show errors */ ERROR: 4,
    /** Console will show warnings */ WARNING: 3,
    /** Console will show notices (ie: life-cyrcle logs) */ NOTICE: 2,
    /** Console will show debug messages. */ DEBUG: 1,
    /** Show all messages. */ ALL: 0
};
/**
   * Only logs of this imporance or higher will be shown.
   * @example Log.level = Log.Levels.ALL
   * @default Log.Levels.ERROR
   * @static
   */ Log.level = Log.Levels.ERROR;
/**
   * If true, logs will be outputed with colors.
   * @default true
   * @static
   */ Log.colorful = true;
/**
   * If true, logs will include the time mark.
   * @default true
   * @static
   */ Log.includeTime = true;
/**
   * Prefix included at the start of every log.
   * @default '[New Relic]'
   * @static
   */ Log.prefix = "[nrvideo]";
// PRIVATE MEMBERS
/**
 * Returns a console message
 *
 * @private
 * @param {array} msg Message array, error object or array of messages.
 * @param {Log.Level} [level=Log.Levels.NOTICE] Defines the level of the error sent.
 * Only errors with higher or equal level than Log.logLevel will be displayed.
 * @param {string} [color='darkgreen'] Color of the header
 * @see {@link Log.level}
 */ function _report(msg, level, color) {
    level = level || Log.Levels.NOTICE;
    color = color || "darkcyan";
    var prefix = Log.prefix;
    if (Log.includeTime) prefix += _getCurrentTime() + " ";
    prefix += _level2letter(level) + ":";
    // Show messages in actual console if level is enought
    if (Log.level <= level && level !== Log.Levels.SILENT) {
        if (!Log.colorful || typeof document !== "undefined" && document.documentMode) // document.documentMode exits only in IE
        _plainReport(msg, prefix);
        else {
            // choose log method
            var logMethod;
            if (level === Log.Levels.ERROR && console.error) logMethod = console.error;
            else if (level === Log.Levels.WARNING && console.warn) logMethod = console.warn;
            else if (level === Log.Levels.DEBUG && console.debug) {
                // NOTE: for some reason console.debug doesn't work on CAF Receivers.
                if (window.cast == undefined) logMethod = console.debug;
                else logMethod = console.log;
            } else logMethod = console.log;
            // print message
            prefix = "%c" + prefix;
            msg.splice(0, 0, prefix, "color: " + color);
            logMethod.apply(console, msg);
        }
    }
}
/**
 * Returns the current time in format hh:mm:ss.mmm (with trailing 0s)
 * @private
 * @return {string} Current time.
 */ function _getCurrentTime() {
    var d = new Date();
    var hh = ("0" + d.getDate()).slice(-2);
    var mm = ("0" + d.getMinutes()).slice(-2);
    var ss = ("0" + d.getSeconds()).slice(-2);
    var mmm = ("00" + d.getMilliseconds()).slice(-3);
    return "[" + hh + ":" + mm + ":" + ss + "." + mmm + "]";
}
/**
 * Returns a console message without style
 *
 * @private
 * @param {(string|object|array)} msg Message string, object or array of messages.
 * @param {string} prefix Prefix of the message.
 */ function _plainReport(msg, prefix) {
    if (msg instanceof Array) for(var m in msg)_plainReport(msg[m], prefix);
    else if (typeof msg === "string") console.log(prefix + " " + msg);
    else {
        console.log(prefix + "\u21B5");
        console.log(msg);
    }
}
const _letters = {
    4: "e",
    3: "w",
    2: "n",
    1: "d" // Debug
};
/**
 * Transforms a level to a letter to identify every message.
 *
 * @private
 * @param {sLog.Level} level Level of the message
 */ function _level2letter(level) {
    return _letters[level];
}
/**
 * This function is automatically executed at load.
 * Will search inside window.location.search for attribute 'nrvideo-debug=X'.
 * X can have one of these values, that will modify Log.Levels.
 * 5: SILENT,
 * 4: ERROR,
 * 3: WARNING,
 * 2: NOTICE,
 * 1: DEBUG,
 *
 * If nrvideo-colors=false is present, Log.colorful will be set to false.
 *
 * @private
 */ function _loadLevelFromUrl() {
    if (typeof window !== "undefined" && window.location && window.location.search) {
        var m = /\?.*&*nrvideo-debug=(.+)/i.exec(window.location.search);
        if (m !== null) {
            if (m[1] === "true") Log.level = Log.Levels.ALL;
            else Log.level = m[1];
        }
        var m2 = /\?.*&*nrvideo-colors=false/i.exec(window.location.search);
        if (m2 !== null) Log.colorful = false;
    }
}
// Execute load level
_loadLevelFromUrl();
exports.default = Log;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"eCjiR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _backend = require("./backend");
var _backendDefault = parcelHelpers.interopDefault(_backend);
/**
 * Static class that sums up core functionalities of the library.
 * @static
 */ class Core {
    /**
   * Add a tracker to the system. Trackers added will start reporting its events to NR's backend.
   *
   * @param {(Emitter|Tracker)} tracker Tracker instance to add.
   */ static addTracker(tracker) {
        if (tracker.on && tracker.emit) {
            trackers.push(tracker);
            tracker.on("*", eventHandler);
            if (typeof tracker.trackerInit == "function") tracker.trackerInit();
        } else (0, _logDefault.default).error("Tried to load a non-tracker.", tracker);
    }
    /**
   * Disposes and remove given tracker. Removes its listeners.
   *
   * @param {Tracker} tracker Tracker to remove.
   */ static removeTracker(tracker) {
        tracker.off("*", eventHandler);
        tracker.dispose();
        let index = trackers.indexOf(tracker);
        if (index !== -1) trackers.splice(index, 1);
    }
    /**
   * Returns the array of trackers.
   *
   * @returns {Tracker[]} Array of trackers.
   */ static getTrackers() {
        return trackers;
    }
    /**
   * Returns the current backend.
   *
   * @returns {Backend} The current backend.
   */ static getBackend() {
        return backend;
    }
    /**
   * Sets the current backend.
   * @param {Backend} backendInstance Backend instance.
   */ static setBackend(backendInstance) {
        backend = backendInstance;
    }
    /**
   * Sends given event using the appropriate backend.
   * @param {String} event Event to send.
   * @param {Object} data Data associated to the event.
   */ static send(event, data) {
        if (Core.getBackend() == undefined || !(Core.getBackend() instanceof (0, _backendDefault.default))) {
            // Use the default backend (NR Agent)
            if (typeof newrelic !== "undefined" && newrelic.addPageAction) newrelic.addPageAction(event, data);
            else if (!isErrorShown) {
                (0, _logDefault.default).error("newrelic.addPageAction() is not available.", "In order to use NewRelic Video you will need New Relic Browser Agent.");
                isErrorShown = true;
            }
        } else // Use the user-defined backend
        Core.getBackend().send(event, data);
    }
    /**
   * Sends an error event. This may be used for external errors launched by the app, the network or
   * any external factor. Note that errors within the player are normally reported with
   * tracker.sendError, so this method should not be used to report those.
   *
   * @param {object} att attributes to be sent along the error.
   */ static sendError(att) {
        Core.send("ERROR", att);
    }
}
let trackers = [];
let backend;
let isErrorShown = false;
/**
 * Logs and sends given event.
 *
 * @private
 * @param {Event} e Event
 */ function eventHandler(e) {
    let data = cleanData(e.data);
    if ((0, _logDefault.default).level <= (0, _logDefault.default).Levels.DEBUG) (0, _logDefault.default).notice("Sent", e.type, data);
    else (0, _logDefault.default).notice("Sent", e.type);
    Core.send(e.type, data);
}
/**
 * Cleans given object, removing all items with value === null.
 * @private
 * @param {Object} data Data to clean
 * @returns {Object} Cleaned object
 */ function cleanData(data) {
    let ret = {};
    for(let i in data)if (data[i] !== null && typeof data[i] !== "undefined") ret[i] = data[i];
    return ret;
}
exports.default = Core;

},{"./log":"bJWc8","./backend":"hgF9I","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"6t0C7":[function(require,module,exports) {
/**
 * Constants for the library.
 * @class Constants
 * @static
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Constants {
}
/**
 * Enum for types/positions of ads.
 * @example var type = Constants.AdPositions.PRE
 * @enum {String}
 */ Constants.AdPositions = {
    /** For ads shown before the content. */ PRE: "pre",
    /** For ads shown during the content. */ MID: "mid",
    /** For ads shown after the content. */ POST: "post"
};
exports.default = Constants;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"3bS4O":[function(require,module,exports) {
/**
 * This class calculates time lapses between two points on time.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Chrono {
    /** Reset chrono values. */ reset() {
        /** Start time */ this.startTime = 0;
        /** Stop time */ this.stopTime = 0;
        /**
     * If you set an offset in a chrono, its value will be added getDeltaTime and stop.
     *
     * @example
     * let chrono = new Chrono()
     * chrono.offset = 500
     * chrono.start()
     * process.sleep(500)
     * chrono.stop() // Will return 1000
     *
     * @type {number}
     */ this.offset = 0;
    }
    /**
   * Returns the time between start() and the last stop() in ms. Returns null if start wasn't
   * called.
   * @return {(number|null)} Time lapse in ms.
   */ getDeltaTime() {
        if (this.startTime) return this.offset + (new Date().getTime() - this.startTime);
        else return null;
    }
    /**
   * Starts the chrono.
   */ start() {
        this.startTime = new Date().getTime();
        this.stopTime = 0;
    }
    /**
   * Stops the timer and returns delta time.
   * @return {(number|null)} Returns the delta time
   */ stop() {
        this.stopTime = new Date().getTime();
        return this.getDeltaTime();
    }
    /**
   * Creates a copy of the chrono.
   * @returns {Chrono} Cloned chrono
   */ clone() {
        var chrono = new Chrono();
        chrono.startTime = this.startTime;
        chrono.stopTime = this.stopTime;
        chrono.offset = this.offset;
        return chrono;
    }
    /**
   * Constructor
   */ constructor(){
        this.reset();
    }
}
exports.default = Chrono;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"6sh7M":[function(require,module,exports) {
/**
 * This base class implements a basic behavior of listeners and events. Extend this object to have
 * this feature built-in inside your classes.
 *
 * @class Emitter
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Emitter {
    /**
   * Sets a listener to a given event. Use {@link emit} to trigger those events.
   * Pass '*' to listen ALL events.
   *
   * @param {string} event Name of the event.
   * @param {function} callback Callback of the event. Receives event and data.
   * @return this
   */ on(event, callback) {
        this._listeners = this._listeners || {};
        if (typeof callback === "function") {
            this._listeners[event] = this._listeners[event] || [];
            this._listeners[event].push(callback);
            return this;
        }
    }
    /**
   * Removes given callback from the listeners of this object.
   *
   * @param {string} event Name of the event.
   * @param {function} callback Callback of the event.
   * @return this
   */ off(event, callback) {
        this._listeners = this._listeners || {};
        if (this._listeners[event]) {
            var index = this._listeners[event].indexOf(callback);
            if (index !== -1) this._listeners[event].splice(index, 1);
        }
        return this;
    }
    /**
   * Emits given event, triggering all the associated callbacks.
   *
   * @param {string} event Name of the event.
   * @param {object} [data] Custom data to be sent to the callbacks.
   * @return this
   */ emit(event, data) {
        this._listeners = this._listeners || {};
        data = data || {};
        if (Array.isArray(this._listeners[event])) this._listeners[event].forEach((callback)=>{
            callback.call(this, {
                type: event,
                data: data,
                target: this
            });
        });
        if (Array.isArray(this._listeners["*"])) this._listeners["*"].forEach((callback)=>{
            callback.call(this, {
                type: event,
                data: data,
                target: this
            });
        });
        return this;
    }
}
exports.default = Emitter;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"b8FBd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _packageJson = require("../package.json");
var _packageJsonDefault = parcelHelpers.interopDefault(_packageJson);
var _emitter = require("./emitter");
var _emitterDefault = parcelHelpers.interopDefault(_emitter);
var _chrono = require("./chrono");
var _chronoDefault = parcelHelpers.interopDefault(_chrono);
/**
 * Tracker class provides the basic logic to extend Newrelic's Browser Agent capabilities.
 * Trackers are designed to listen third party elements (like video tags, banners, etc.) and send
 * information over to Browser Agent. Extend this class to create your own tracker, override
 * registerListeners and unregisterListeners for full coverage!
 *
 * @example
 * Tracker instances should be added to Core library to start sending data:
 * nrvideo.Core.addTracker(new Tracker())
 *
 * @extends Emitter
 */ class Tracker extends (0, _emitterDefault.default) {
    /**
   * Set options for the Tracker.
   *
   * @param {Object} [options] Options for the tracker.
   * @param {number} [options.heartbeat] Set time between heartbeats. See {@link heartbeat}.
   * @param {Object} [options.customData] Set custom data. See {@link customData}.
   * @param {Tracker} [options.parentTracker] Set parent tracker. See {@link parentTracker}.
   */ setOptions(options) {
        if (options) {
            if (options.parentTracker) this.parentTracker = options.parentTracker;
            if (options.customData) this.customData = options.customData;
            if (options.heartbeat) this.heartbeat = options.heartbeat;
        }
    }
    /**
   * Prepares tracker to dispose. Calls {@see unregisterListeners} and drops references.
   */ dispose() {
        this.unregisterListeners();
    }
    /**
   * Override this method to register listeners to third party elements.
   *
   * @example
   * class SpecificTracker extends Tracker {
   *  registerListeners() {
   *    this.player.on('play', () => this.playHandler)
   *  }
   *
   *  playHandler() {
   *    this.emit(Tracker.Events.REQUESTED)
   *  }
   * }
   */ registerListeners() {}
    /**
   * Override this method to unregister listeners to third party elements created with
   * {@see registerListeners}.
   *
   * @example
   * class SpecificTracker extends Tracker {
   *  registerListeners() {
   *    this.player.on('play', () => this.playHandler)
   *  }
   *
   *  unregisterListeners() {
   *    this.player.off('play', () => this.playHandler)
   *  }
   *
   *  playHandler() {
   *    this.emit(Tracker.Events.REQUESTED)
   *  }
   * }
   */ unregisterListeners() {}
    /**
   * Returns heartbeat time interval. 30000 (30s) if not set. See {@link setOptions}.
   * @return {number} Heartbeat interval in ms.
   * @final
   */ getHeartbeat() {
        if (this.heartbeat) return this.heartbeat;
        else if (this.parentTracker && this.parentTracker.heartbeat) return this.parentTracker.heartbeat;
        else return 30000;
    }
    /**
   * Starts heartbeating. Interval period set by options.heartbeat. Min 5000 ms.
   * This method is automaticaly called by the tracker once sendRequest is called.
   */ startHeartbeat() {
        this._heartbeatInterval = setInterval(this.sendHeartbeat.bind(this), Math.max(this.getHeartbeat(), 5000));
    }
    /**
   * Stops heartbeating. This method is automaticaly called by the tracker.
   */ stopHeartbeat() {
        if (this._heartbeatInterval) clearInterval(this._heartbeatInterval);
    }
    /**
   * Heartbeating allows you to call this function each X milliseconds, defined by
   * {@link getHeartbeat}. This is useful to send regular events to track changes.
   *
   * By default it will send {@link Tracker.Events.HEARTBEAT}.
   * To start heartbeating use {@link startHeartbeat} and to stop them use {@link stopHeartbeat}.
   *
   * @example
   * Override this method to define your own Heartbeat reporting.
   *
   * class TrackerChild extends Tracker {
   *  sendHeartbeat (att) {
   *    this.send('MY_HEARBEAT_EVENT')
   *  }
   * }
   *
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendHeartbeat(att) {
        this.send(Tracker.Events.HEARTBEAT, att);
    }
    /**
   * Override this method to return attributes for actions.
   *
   * @example
   * class SpecificTracker extends Tracker {
   *  getAttributes(att) {
   *    att = att || {}
   *    att.information = 'something'
   *    return att
   *  }
   * }
   *
   * @param {object} [att] Collection of key value attributes
   * @return {object} Filled attributes
   * @final
   */ getAttributes(att) {
        att = att || {};
        att.trackerName = this.getTrackerName();
        att.trackerVersion = this.getTrackerVersion();
        att.coreVersion = (0, _packageJsonDefault.default).version;
        att.timeSinceTrackerReady = this._trackerReadyChrono.getDeltaTime();
        for(let key in this.customData)att[key] = this.customData[key];
        if (document.hidden != undefined) att.isBackgroundEvent = document.hidden;
        return att;
    }
    /** Override to change of the Version of tracker. ie: '1.0.1' */ getTrackerVersion() {
        return (0, _packageJsonDefault.default).version;
    }
    /** Override to change of the Name of the tracker. ie: 'custom-html5' */ getTrackerName() {
        return "base-tracker";
    }
    /**
   * Send given event. Will automatically call {@see getAttributes} to fill information.
   * Internally, this will call {@see Emitter#emit}, so you could listen any event fired.
   *
   * @example
   * tracker.send('BANNER_CLICK', { url: 'http....' })
   *
   * @param {string} event Event name
   * @param {object} [att] Key:value dictionary filled with attributes.
   */ send(event, att) {
        this.emit(event, this.getAttributes(att));
    }
    /**
   * Constructor, receives options. You should call {@see registerListeners} after this.
   *
   * @param {Object} [options] Options for the tracker. See {@link setOptions}.
   */ constructor(options){
        super();
        /**
     * If you add something to this custom dictionary it will be added to every action. If you set
     * any value, it will always override the values returned by the getters.
     *
     * @example
     * If you define tracker.customData.contentTitle = 'a' and tracker.getTitle() returns 'b'.
     * 'a' will prevail.
     */ this.customData = {};
        /**
     * Set time between hearbeats, in ms.
     */ this.heartbeat = null;
        /**
     * Another Tracker instance. Useful to relate ad Trackers to their parent content Trackers.
     * @type Tracker
     */ this.parentTracker = null;
        /**
     * Chrono that counts time since this class was instantiated.
     * @private
     */ this._trackerReadyChrono = new (0, _chronoDefault.default)();
        this._trackerReadyChrono.start();
        options = options || {};
        this.setOptions(options);
    }
}
/**
 * Enumeration of events fired by this class.
 *
 * @static
 * @memberof Tracker
 * @enum {string}
 */ Tracker.Events = {
    /** The heartbeat event is sent once every 30 seconds while the video is playing. */ HEARTBEAT: "HEARTBEAT"
};
exports.default = Tracker;

},{"../package.json":"9P0RW","./emitter":"6sh7M","./chrono":"3bS4O","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"9P0RW":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"newrelic-video-core","version":"0.33.0","description":"New Relic video tracking core library","main":"src/index.js","scripts":{"build":"webpack --mode production","build:dev":"webpack --mode development","watch":"webpack --mode production --progress --color --watch","watch:dev":"webpack --progress --color --watch","clean":"rm -rf dist coverage doc","test":"nyc --reporter=html --reporter=text mocha --require @babel/register","doc":"jsdoc -c jsdoc.json -d documentation","deploy":"node scripts/deploy.js"},"repository":{"type":"git","url":"https://github.com/newrelic/video-core-js"},"author":"Jordi Aguilar","contributors":["Andreu Santar\xe9n Llop"],"license":"MIT","devDependencies":{"@babel/core":"^7.24.5","@babel/plugin-transform-modules-commonjs":"^7.24.1","@babel/preset-env":"^7.24.5","@babel/register":"^7.24.6","aws-sdk":"^2.920.0","babel-loader":"^9.1.3","chai":"^4.3.4","diff":"^5.0.0","mocha":"^10.4.0","nyc":"^15.1.0","sinon":"^2.4.1","webpack":"^5.91.0","webpack-cli":"^4.9.2"}}');

},{}],"3f2Cb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _tracker = require("./tracker");
var _trackerDefault = parcelHelpers.interopDefault(_tracker);
var _videotrackerstate = require("./videotrackerstate");
var _videotrackerstateDefault = parcelHelpers.interopDefault(_videotrackerstate);
/**
 * Base video tracker class provides extensible tracking over video elements. See {@link Tracker}.
 * Extend this class to create your own video tracker class. Override getter methods and
 * registerListeners/unregisterListeners to provide full integration with your video experience.
 *
 * @example
 * Tracker instances should be added to Core library to start sending data:
 * nrvideo.Core.addTracker(new Tracker())
 *
 * @extends Tracker
 */ class VideoTracker extends (0, _trackerDefault.default) {
    /**
   * Set options for the Tracker.
   *
   * @param {Object} [options] Options for the tracker.
   * @param {Boolean} [options.isAd] True if the tracker is tracking ads. See {@link setIsAd}.
   * @param {number} [options.heartbeat] Set time between heartbeats. See {@link heartbeat}.
   * @param {Object} [options.customData] Set custom data. See {@link customData}.
   * @param {Tracker} [options.parentTracker] Set parent tracker. See {@link parentTracker}.
   * @param {Tracker} [options.adsTracker] Set ads tracker. See {@link adsTracker}.
   * @param {Object} [options.tag] DOM element to track. See {@link setPlayer}.
   */ setOptions(options) {
        if (options) {
            if (options.adsTracker) this.setAdsTracker(options.adsTracker);
            if (typeof options.isAd === "boolean") this.setIsAd(options.isAd);
            (0, _trackerDefault.default).prototype.setOptions.apply(this, arguments);
        }
    }
    /**
   * Set a player and/or a tag. If there was one already defined, it will call dispose() first.
   * Will call this.registerListeners() afterwards.
   *
   * @param {Object|string} player New player to save as this.player. If a string is passed,
   * document.getElementById will be called.
   * @param {DOMObject|string} [tag] Optional DOMElement to save as this.tag. If a string is passed,
   * document.getElementById will be called.
   */ setPlayer(player, tag) {
        if (this.player || this.tag) this.dispose();
        if (typeof document !== "undefined" && document.getElementById) {
            if (typeof player === "string") player = document.getElementById(player);
            if (typeof tag === "string") tag = document.getElementById(tag);
        }
        tag = tag || player // if no tag is passed, use player as both.
        ;
        this.player = player;
        this.tag = tag;
        this.registerListeners();
    }
    /** Returns true if the tracker is currently on ads. */ isAd() {
        return this.state.isAd();
    }
    /** Sets if the tracker is currenlty tracking ads */ setIsAd(isAd) {
        this.state.setIsAd(isAd);
    }
    /**
   * Use this function to set up a child ad tracker. You will be able to access it using
   * this.adsTracker.
   *
   * @param {Tracker} tracker Ad tracker to add
   */ setAdsTracker(tracker) {
        this.disposeAdsTracker() // dispose current one
        ;
        if (tracker) {
            this.adsTracker = tracker;
            this.adsTracker.setIsAd(true);
            this.adsTracker.parentTracker = this;
            this.adsTracker.on("*", funnelAdEvents.bind(this));
        }
    }
    /**
   * Dispose current adsTracker.
   */ disposeAdsTracker() {
        if (this.adsTracker) {
            this.adsTracker.off("*", funnelAdEvents);
            this.adsTracker.dispose();
        }
    }
    /**
   * Prepares tracker to dispose. Calls unregisterListener and drops references to player and tag.
   */ dispose() {
        this.stopHeartbeat();
        this.disposeAdsTracker();
        this.unregisterListeners();
        this.player = null;
        this.tag = null;
    }
    /**
   * Override this method to register listeners to player/tag.
   * @example
   * class SpecificTracker extends Tracker {
   *  registerListeners() {
   *    this.player.on('play', () => this.playHandler)
   *  }
   *
   *  playHandler() {
   *    this.send(VideoTracker.Events.REQUESTED)
   *  }
   * }
   */ registerListeners() {}
    /**
   * Override this method to unregister listeners to player/tag created in registerListeners
   * @example
   * class SpecificTracker extends Tracker {
   *  registerListeners() {
   *    this.player.on('play', () => this.playHandler)
   *  }
   *
   *  unregisterListeners() {
   *    this.player.off('play', () => this.playHandler)
   *  }
   *
   *  playHandler() {
   *    this.send(VideoTracker.Events.REQUESTED)
   *  }
   * }
   */ unregisterListeners() {}
    /**
   * Trackers will generate unique id's for every new video iteration. If you have your own unique
   * view value, you can override this method to return it.
   * If the tracker has a parentTracker defined, parent viewId will be used.
   */ getViewId() {
        if (this.parentTracker) return this.parentTracker.getViewId();
        else return this.state.getViewId();
    }
    /**
   * Trackers will generate unique id's for every new video session. If you have your own unique
   * view value, you can override this method to return it.
   * If the tracker has a parentTracker defined, parent viewId will be used.
   */ getViewSession() {
        if (this.parentTracker) return this.parentTracker.getViewSession();
        else return this.state.getViewSession();
    }
    /** Override to return the Id of the video. */ getVideoId() {
        return null;
    }
    /** Override to return Title of the video. */ getTitle() {
        return null;
    }
    /** Override to return True if the video is live. */ isLive() {
        return null;
    }
    /** Override to return Bitrate (in bits) of the video. */ getBitrate() {
        return null;
    }
    /** Calculates consumed bitrate using webkitVideoDecodedByteCount. */ getWebkitBitrate() {
        if (this.tag && this.tag.webkitVideoDecodedByteCount) {
            let bitrate;
            if (this._lastWebkitBitrate) {
                bitrate = this.tag.webkitVideoDecodedByteCount;
                let delta = bitrate - this._lastWebkitBitrate;
                let seconds = this.getHeartbeat() / 1000;
                bitrate = Math.round(delta / seconds * 8);
            }
            this._lastWebkitBitrate = this.tag.webkitVideoDecodedByteCount;
            return bitrate || null;
        }
    }
    /** Override to return Name of the rendition (ie: 1080p). */ getRenditionName() {
        return null;
    }
    /** Override to return Target Bitrate of the rendition. */ getRenditionBitrate() {
        return null;
    }
    /**
   * This method will return 'up', 'down' or null depending on if the bitrate of the rendition
   * have changed from the last time it was called.
   *
   * @param {boolean} [saveNewRendition=false] If true, current rendition will be stored to be used
   * the next time this method is called. This allows you to call this.getRenditionShift() without
   * saving the current rendition and thus preventing interferences with RENDITION_CHANGE events.
   */ getRenditionShift(saveNewRendition) {
        let current = this.getRenditionBitrate();
        let last;
        if (this.isAd()) {
            last = this._lastAdRendition;
            if (saveNewRendition) this._lastAdRendition = current;
        } else {
            last = this._lastRendition;
            if (saveNewRendition) this._lastRendition = current;
        }
        if (!current || !last) return null;
        else {
            if (current > last) return "up";
            else if (current < last) return "down";
            else return null;
        }
    }
    /** Override to return renidtion actual Height (before re-scaling). */ getRenditionHeight() {
        return this.tag ? this.tag.videoHeight : null;
    }
    /** Override to return rendition actual Width (before re-scaling). */ getRenditionWidth() {
        return this.tag ? this.tag.videoWidth : null;
    }
    /** Override to return Duration of the video, in ms. */ getDuration() {
        return this.tag ? this.tag.duration : null;
    }
    /** Override to return Playhead (currentTime) of the video, in ms. */ getPlayhead() {
        return this.tag ? this.tag.currentTime : null;
    }
    /**
   * Override to return Language of the video. We recommend using locale notation, ie: en_US.
   * {@see https://gist.github.com/jacobbubu/1836273}
   */ getLanguage() {
        return null;
    }
    /** Override to return URL of the resource being played. */ getSrc() {
        return this.tag ? this.tag.currentSrc : null;
    }
    /** Override to return Playrate (speed) of the video. ie: 1.0, 0.5, 1.25... */ getPlayrate() {
        return this.tag ? this.tag.playbackRate : null;
    }
    /** Override to return True if the video is currently muted. */ isMuted() {
        return this.tag ? this.tag.muted : null;
    }
    /** Override to return True if the video is currently fullscreen. */ isFullscreen() {
        return null;
    }
    /** Override to return the CDN serving the content. */ getCdn() {
        return null;
    }
    /** Override to return the Name of the player. */ getPlayerName() {
        return this.getTrackerName();
    }
    /** Override to return the Version of the player. */ getPlayerVersion() {
        return null;
    }
    /** Override to return current FPS (Frames per second). */ getFps() {
        return null;
    }
    /**
   * Override to return if the player was autoplayed. By default: this.tag.autoplay
   */ isAutoplayed() {
        return this.tag ? this.tag.autoplay : null;
    }
    /**
   * Override to return the player preload attribute. By default: this.tag.preload
   */ getPreload() {
        return this.tag ? this.tag.preload : null;
    }
    // Only for ads
    /**
   * Override to return Quartile of the ad. 0 before first, 1 after first quartile, 2 after
   * midpoint, 3 after third quartile, 4 when completed.
   */ getAdQuartile() {
        return null;
    }
    /**
   * Override to return the position of the ad. Use {@link Constants.AdPositions} enum
   * to fill this data.
   */ getAdPosition() {
        if (this.parentTracker) return this.parentTracker.state.isStarted ? "mid" : "pre";
        else return null;
    }
    /**
   * Override to return the ad partner. ie: ima, freewheel...
   */ getAdPartner() {
        return null;
    }
    /**
   * Override to return the creative id of the ad.
   */ getAdCreativeId() {
        return null;
    }
    /**
   * Do NOT override. This method fills all the appropiate attributes for tracked video.
   *
   * @param {object} [att] Collection of key value attributes
   * @return {object} Filled attributes
   * @final
   */ getAttributes(att) {
        att = (0, _trackerDefault.default).prototype.getAttributes.apply(this, arguments);
        if (typeof att.isAd === "undefined") att.isAd = this.isAd();
        att.viewSession = this.getViewSession();
        att.viewId = this.getViewId();
        att.playerName = this.getPlayerName();
        att.playerVersion = this.getPlayerVersion();
        try {
            att.pageUrl = window.location.href;
        } catch (err) {}
        if (this.isAd()) {
            att.adId = this.getVideoId();
            att.adTitle = this.getTitle();
            att.adBitrate = this.getBitrate() || this.getWebkitBitrate();
            att.adRenditionName = this.getRenditionName();
            att.adRenditionBitrate = this.getRenditionBitrate();
            att.adRenditionHeight = this.getRenditionHeight();
            att.adRenditionWidth = this.getRenditionWidth();
            att.adDuration = this.getDuration();
            att.adPlayhead = this.getPlayhead();
            att.adLanguage = this.getLanguage();
            att.adSrc = this.getSrc();
            att.adCdn = this.getCdn();
            att.adIsMuted = this.isMuted();
            att.adFps = this.getFps();
            // ad exclusives
            att.adQuartile = this.getAdQuartile();
            att.adPosition = this.getAdPosition();
            att.adCreativeId = this.getAdCreativeId();
            att.adPartner = this.getAdPartner();
        } else {
            att.contentId = this.getVideoId();
            att.contentTitle = this.getTitle();
            att.contentIsLive = this.isLive();
            att.contentBitrate = this.getBitrate() || this.getWebkitBitrate();
            att.contentRenditionName = this.getRenditionName();
            att.contentRenditionBitrate = this.getRenditionBitrate();
            att.contentRenditionHeight = this.getRenditionHeight();
            att.contentRenditionWidth = this.getRenditionWidth();
            att.contentDuration = this.getDuration();
            att.contentPlayhead = this.getPlayhead();
            att.contentLanguage = this.getLanguage();
            att.contentSrc = this.getSrc();
            att.contentPlayrate = this.getPlayrate();
            att.contentIsFullscreen = this.isFullscreen();
            att.contentIsMuted = this.isMuted();
            att.contentCdn = this.getCdn();
            att.contentIsAutoplayed = this.isAutoplayed();
            att.contentPreload = this.getPreload();
            att.contentFps = this.getFps();
            if (this.adsTracker != null && this.adsTracker.state.totalAdPlaytime > 0) att.totalAdPlaytime = this.adsTracker.state.totalAdPlaytime;
        }
        this.state.getStateAttributes(att);
        for(let key in this.customData)att[key] = this.customData[key];
        return att;
    }
    /**
   * Sends custom event and registers a timeSince attribute.
   * @param {Object} [actionName] Custom action name.
   * @param {Object} [timeSinceAttName] Custom timeSince attribute name.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendCustom(actionName, timeSinceAttName, att) {
        att = att || {};
        this.send(actionName, att);
        this.state.setTimeSinceAttribute(timeSinceAttName);
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendPlayerReady(att) {
        if (this.state.goPlayerReady()) {
            att = att || {};
            this.send(VideoTracker.Events.PLAYER_READY, att);
        }
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners. Calls
   * {@link startHeartbeat}.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendRequest(att) {
        if (this.state.goRequest()) {
            let ev = this.isAd() ? VideoTracker.Events.AD_REQUEST : VideoTracker.Events.CONTENT_REQUEST;
            this.send(ev, att);
            this.startHeartbeat();
            this.state.goHeartbeat();
        }
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendStart(att) {
        if (this.state.goStart()) {
            let ev;
            if (this.isAd()) {
                ev = VideoTracker.Events.AD_START;
                if (this.parentTracker) this.parentTracker.state.isPlaying = false;
            } else ev = VideoTracker.Events.CONTENT_START;
            this.send(ev, att);
        }
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners. Calls
   * {@link stopHeartbeat}.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendEnd(att) {
        if (this.state.goEnd()) {
            att = att || {};
            let ev;
            if (this.isAd()) {
                ev = VideoTracker.Events.AD_END;
                att.timeSinceAdRequested = this.state.timeSinceRequested.getDeltaTime();
                att.timeSinceAdStarted = this.state.timeSinceStarted.getDeltaTime();
                if (this.parentTracker) this.parentTracker.state.isPlaying = true;
            } else {
                ev = VideoTracker.Events.CONTENT_END;
                att.timeSinceRequested = this.state.timeSinceRequested.getDeltaTime();
                att.timeSinceStarted = this.state.timeSinceStarted.getDeltaTime();
            }
            this.stopHeartbeat();
            this.send(ev, att);
            if (this.parentTracker && this.isAd()) this.parentTracker.state.goLastAd();
            this.state.goViewCountUp();
            this.state.totalPlaytime = 0;
        }
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendPause(att) {
        if (this.state.goPause()) {
            let ev = this.isAd() ? VideoTracker.Events.AD_PAUSE : VideoTracker.Events.CONTENT_PAUSE;
            this.send(ev, att);
        }
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendResume(att) {
        if (this.state.goResume()) {
            att = att || {};
            let ev;
            if (this.isAd()) {
                ev = VideoTracker.Events.AD_RESUME;
                att.timeSinceAdPaused = this.state.timeSincePaused.getDeltaTime();
            } else {
                ev = VideoTracker.Events.CONTENT_RESUME;
                att.timeSincePaused = this.state.timeSincePaused.getDeltaTime();
            }
            this.send(ev, att);
        }
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendBufferStart(att) {
        if (this.state.goBufferStart()) {
            att = att || {};
            let ev;
            if (this.isAd()) ev = VideoTracker.Events.AD_BUFFER_START;
            else ev = VideoTracker.Events.CONTENT_BUFFER_START;
            att = this.buildBufferAttributes(att);
            this._lastBufferType = att.bufferType;
            this.send(ev, att);
        }
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendBufferEnd(att) {
        if (this.state.goBufferEnd()) {
            att = att || {};
            let ev;
            if (this.isAd()) {
                ev = VideoTracker.Events.AD_BUFFER_END;
                att.timeSinceAdBufferBegin = this.state.timeSinceBufferBegin.getDeltaTime();
            } else {
                ev = VideoTracker.Events.CONTENT_BUFFER_END;
                att.timeSinceBufferBegin = this.state.timeSinceBufferBegin.getDeltaTime();
            }
            att = this.buildBufferAttributes(att);
            // Set the bufferType attribute of the last BUFFER_START
            if (this._lastBufferType != null) att.bufferType = this._lastBufferType;
            this.send(ev, att);
            this.state.initialBufferingHappened = true;
        }
    }
    buildBufferAttributes(att) {
        if (att.timeSinceStarted == undefined || att.timeSinceStarted < 100) att.isInitialBuffering = !this.state.initialBufferingHappened;
        else att.isInitialBuffering = false;
        att.bufferType = this.state.calculateBufferType(att.isInitialBuffering);
        att.timeSinceResumed = this.state.timeSinceResumed.getDeltaTime();
        att.timeSinceSeekEnd = this.state.timeSinceSeekEnd.getDeltaTime();
        return att;
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendSeekStart(att) {
        if (this.state.goSeekStart()) {
            let ev;
            if (this.isAd()) ev = VideoTracker.Events.AD_SEEK_START;
            else ev = VideoTracker.Events.CONTENT_SEEK_START;
            this.send(ev, att);
        }
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendSeekEnd(att) {
        if (this.state.goSeekEnd()) {
            att = att || {};
            let ev;
            if (this.isAd()) {
                ev = VideoTracker.Events.AD_SEEK_END;
                att.timeSinceAdSeekBegin = this.state.timeSinceSeekBegin.getDeltaTime();
            } else {
                ev = VideoTracker.Events.CONTENT_SEEK_END;
                att.timeSinceSeekBegin = this.state.timeSinceSeekBegin.getDeltaTime();
            }
            this.send(ev, att);
        }
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   * @param {String} att.state Download requires a string to distinguish different states.
   */ sendDownload(att) {
        att = att || {};
        if (!att.state) (0, _logDefault.default).warn("Called sendDownload without { state: xxxxx }.");
        this.send(VideoTracker.Events.DOWNLOAD, att);
        this.state.goDownload();
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendError(att) {
        att = att || {};
        att.isAd = this.isAd();
        this.state.goError();
        let ev = this.isAd() ? VideoTracker.Events.AD_ERROR : VideoTracker.Events.CONTENT_ERROR;
        this.send(ev, att);
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendRenditionChanged(att) {
        att = att || {};
        att.timeSinceLastRenditionChange = this.state.timeSinceLastRenditionChange.getDeltaTime();
        att.shift = this.getRenditionShift(true);
        let ev;
        if (this.isAd()) ev = VideoTracker.Events.AD_RENDITION_CHANGE;
        else ev = VideoTracker.Events.CONTENT_RENDITION_CHANGE;
        this.send(ev, att);
        this.state.goRenditionChange();
    }
    /**
   * Sends associated event and changes view state. Heartbeat will automatically be sent every
   * 10 seconds. There's no need to call this manually.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   * @param {number} att.url Url of the clicked ad.
   *
   */ sendHeartbeat(att) {
        if (this.state.isRequested) {
            let ev;
            if (this.isAd()) ev = VideoTracker.Events.AD_HEARTBEAT;
            else ev = VideoTracker.Events.CONTENT_HEARTBEAT;
            this.send(ev, att);
            this.state.goHeartbeat();
        }
    }
    // Only ads
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendAdBreakStart(att) {
        if (this.isAd() && this.state.goAdBreakStart()) {
            this.state.totalAdPlaytime = 0;
            if (this.parentTracker) this.parentTracker.state.isPlaying = false;
            this.send(VideoTracker.Events.AD_BREAK_START, att);
        }
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   */ sendAdBreakEnd(att) {
        if (this.isAd() && this.state.goAdBreakEnd()) {
            att = att || {};
            att.timeSinceAdBreakBegin = this.state.timeSinceAdBreakStart.getDeltaTime();
            this.send(VideoTracker.Events.AD_BREAK_END, att);
            // Just in case AD_END not arriving, because of an AD_ERROR
            if (this.parentTracker) this.parentTracker.state.isPlaying = true;
            this.stopHeartbeat();
            if (this.parentTracker && this.isAd()) this.parentTracker.state.goLastAd();
        }
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   * @param {number} att.quartile Number of the quartile.
   */ sendAdQuartile(att) {
        if (this.isAd()) {
            att = att || {};
            if (!att.quartile) (0, _logDefault.default).warn("Called sendAdQuartile without { quartile: xxxxx }.");
            att.timeSinceLastAdQuartile = this.state.timeSinceLastAdQuartile.getDeltaTime();
            this.send(VideoTracker.Events.AD_QUARTILE, att);
            this.state.goAdQuartile();
        }
    }
    /**
   * Sends associated event and changes view state. An internal state machine will prevent
   * duplicated events. Should be associated to an event using registerListeners.
   * @param {Object} [att] Collection of key:value attributes to send with the request.
   * @param {number} att.url Url of the clicked ad.
   */ sendAdClick(att) {
        if (this.isAd()) {
            att = att || {};
            if (!att.url) (0, _logDefault.default).warn("Called sendAdClick without { url: xxxxx }.");
            this.send(VideoTracker.Events.AD_CLICK, att);
        }
    }
    /**
   * Constructor, receives player and options.
   * Lifecycle: constructor > {@link setOptions} > {@link setPlayer} > {@link registerListeners}.
   *
   * @param {Object} [player] Player to track. See {@link setPlayer}.
   * @param {Object} [options] Options for the tracker. See {@link setOptions}.
   */ constructor(player, options){
        super();
        /**
     * TrackerState instance. Stores the state of the view. Tracker will automatically update the
     * state of its instance, so there's no need to modify/interact with it manually.
     * @type TrackerState
     */ this.state = new (0, _videotrackerstateDefault.default)();
        /**
     * Another Tracker instance to track ads.
     * @type Tracker
     */ this.adsTracker = null;
        /**
     * Last bufferType value.
     * @private
     */ this._lastBufferType = null;
        options = options || {};
        this.setOptions(options);
        if (player) this.setPlayer(player, options.tag);
        (0, _logDefault.default).notice("Tracker " + this.getTrackerName() + " v" + this.getTrackerVersion() + " is ready.");
    }
}
/**
 * Enumeration of events fired by this class.
 *
 * @static
 * @memberof VideoTracker
 * @enum {String}
 */ VideoTracker.Events = {
    // Player
    /** The player is ready to start sending events. */ PLAYER_READY: "PLAYER_READY",
    /** Downloading data. */ DOWNLOAD: "DOWNLOAD",
    /** An error happened */ ERROR: "ERROR",
    // Video
    /** Content video has been requested. */ CONTENT_REQUEST: "CONTENT_REQUEST",
    /** Content video started (first frame shown). */ CONTENT_START: "CONTENT_START",
    /** Content video ended. */ CONTENT_END: "CONTENT_END",
    /** Content video paused. */ CONTENT_PAUSE: "CONTENT_PAUSE",
    /** Content video resumed. */ CONTENT_RESUME: "CONTENT_RESUME",
    /** Content video seek started */ CONTENT_SEEK_START: "CONTENT_SEEK_START",
    /** Content video seek ended. */ CONTENT_SEEK_END: "CONTENT_SEEK_END",
    /** Content video beffering started */ CONTENT_BUFFER_START: "CONTENT_BUFFER_START",
    /** Content video buffering ended */ CONTENT_BUFFER_END: "CONTENT_BUFFER_END",
    /** Content video heartbeat, en event that happens once every 30 seconds while the video is playing. */ CONTENT_HEARTBEAT: "CONTENT_HEARTBEAT",
    /** Content video stream qwuality changed. */ CONTENT_RENDITION_CHANGE: "CONTENT_RENDITION_CHANGE",
    /** Content video error. */ CONTENT_ERROR: "CONTENT_ERROR",
    // Ads only
    /** Ad video has been requested. */ AD_REQUEST: "AD_REQUEST",
    /** Ad video started (first frame shown). */ AD_START: "AD_START",
    /** Ad video ended. */ AD_END: "AD_END",
    /** Ad video paused. */ AD_PAUSE: "AD_PAUSE",
    /** Ad video resumed. */ AD_RESUME: "AD_RESUME",
    /** Ad video seek started */ AD_SEEK_START: "AD_SEEK_START",
    /** Ad video seek ended */ AD_SEEK_END: "AD_SEEK_END",
    /** Ad video beffering started */ AD_BUFFER_START: "AD_BUFFER_START",
    /** Ad video beffering ended */ AD_BUFFER_END: "AD_BUFFER_END",
    /** Ad video heartbeat, en event that happens once every 30 seconds while the video is playing. */ AD_HEARTBEAT: "AD_HEARTBEAT",
    /** Ad video stream qwuality changed. */ AD_RENDITION_CHANGE: "AD_RENDITION_CHANGE",
    /** Ad video error. */ AD_ERROR: "AD_ERROR",
    /** Ad break (a block of ads) started. */ AD_BREAK_START: "AD_BREAK_START",
    /** Ad break ended. */ AD_BREAK_END: "AD_BREAK_END",
    /** Ad quartile happened. */ AD_QUARTILE: "AD_QUARTILE",
    /** Ad has been clicked. */ AD_CLICK: "AD_CLICK"
};
// Private members
function funnelAdEvents(e) {
    this.send(e.type, e.data);
}
exports.default = VideoTracker;

},{"./log":"bJWc8","./tracker":"b8FBd","./videotrackerstate":"1EKA3","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"1EKA3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chrono = require("./chrono");
var _chronoDefault = parcelHelpers.interopDefault(_chrono);
var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
/**
 * State machine for a VideoTracker and its monitored video.
 */ class VideoTrackerState {
    /** Resets all flags and chronos. */ reset() {
        /**
     * Unique identifier of the view.
     * @private
     */ this._viewSession = null;
        /**
     * Number of views seen.
     * @private
     */ this._viewCount = 0;
        /**
     * True if it is tracking ads.
     * @private
     */ this._isAd = false;
        /**
     * Number of errors fired. 'End' resets it.
     */ this.numberOfErrors = 0;
        /**
     * Number of ads shown.
     */ this.numberOfAds = 0;
        /**
     * Number of videos played.
     */ this.numberOfVideos = 0;
        /**
     * The amount of ms the user has been watching content (not paused, not buffering, not ads...)
     */ this.totalPlaytime = 0;
        /**
     * The amount of ms the user has been watching ads during an ad break.
     */ this.totalAdPlaytime = 0;
        /** True if you are in the middle of an ad break. */ this.isAdBreak = false;
        /** True if initial buffering event already happened. */ this.initialBufferingHappened = false;
        this.resetFlags();
        this.resetChronos();
    }
    /** Resets flags. */ resetFlags() {
        /** True once the player has finished loading. */ this.isPlayerReady = false;
        /** True if the video has been user-requested to play. ie: user cicks play. */ this.isRequested = false;
        /** True if the video has starting playing. ie: actual images/audio showing in screen. */ this.isStarted = false;
        /** True if the video is paused. */ this.isPaused = false;
        /** True if the video is performing a seek action. */ this.isSeeking = false;
        /** True if the video is currently buffering. */ this.isBuffering = false;
        /** True if the video is currently playing (not buffering, not paused...) */ this.isPlaying = false;
    }
    /** Resets chronos. */ resetChronos() {
        /** Chrono that counts time since last requested event. */ this.timeSinceRequested = new (0, _chronoDefault.default)();
        /** Chrono that counts time since last start event. */ this.timeSinceStarted = new (0, _chronoDefault.default)();
        /** Chrono that counts time since last pause event. */ this.timeSincePaused = new (0, _chronoDefault.default)();
        /** Chrono that counts time since last seeking start event. */ this.timeSinceSeekBegin = new (0, _chronoDefault.default)();
        /** Chrono that counts time since last buffering start event. */ this.timeSinceBufferBegin = new (0, _chronoDefault.default)();
        /** Chrono that counts time since last ad break start event. */ this.timeSinceAdBreakStart = new (0, _chronoDefault.default)();
        /** Chrono that counts time since last download event. */ this.timeSinceLastDownload = new (0, _chronoDefault.default)();
        /** Chrono that counts time since last heartbeat. */ this.timeSinceLastHeartbeat = new (0, _chronoDefault.default)();
        /** Chrono that counts time since last rendition change. */ this.timeSinceLastRenditionChange = new (0, _chronoDefault.default)();
        /** Ads only. Chrono that counts time since last ad quartile. */ this.timeSinceLastAdQuartile = new (0, _chronoDefault.default)();
        /** Content only. Chrono that counts time since last AD_END. */ this.timeSinceLastAd = new (0, _chronoDefault.default)();
        /** Chrono that counts time since last *_RESUME. Only for buffering events. */ this.timeSinceResumed = new (0, _chronoDefault.default)();
        /** Chrono that counts time since last *_SEEK_END. Only for buffering events. */ this.timeSinceSeekEnd = new (0, _chronoDefault.default)();
        /** Chrono that counts the ammount of time the video have been playing since the last event. */ this.playtimeSinceLastEvent = new (0, _chronoDefault.default)();
        /** A dictionary containing the custom timeSince attributes. */ this.customTimeSinceAttributes = {};
    }
    /** Returns true if the tracker is currently on ads. */ isAd() {
        return this._isAd;
    }
    /** Sets if the tracker is currenlty tracking ads */ setIsAd(isAd) {
        this._isAd = isAd;
    }
    /**
   * Set the Chrono for the custom attribute
   * 
   * @param {object} name Time since attribute name.
   */ setTimeSinceAttribute(name) {
        this.customTimeSinceAttributes[name] = new (0, _chronoDefault.default)();
        this.customTimeSinceAttributes[name].start();
    }
    /**
   * Delete a time since attribute
   * 
   * @param {object} name Time since attribute name.
   */ removeTimeSinceAttribute(name) {
        delete this.customTimeSinceAttributes[name];
    }
    /**
   * Returns a random-generated view Session ID, useful to sort by views.
   */ getViewSession() {
        if (!this._viewSession) {
            let time = new Date().getTime();
            let random = Math.random().toString(36).substring(2) + Math.random().toString(36).substring(2);
            this._viewSession = time + "-" + random;
        }
        return this._viewSession;
    }
    /**
   * Returns a random-generated view Session ID, plus a view count, allowing you to distinguish
   * between two videos played in the same session.
   */ getViewId() {
        return this.getViewSession() + "-" + this._viewCount;
    }
    /**
   * Fills given object with state-based attributes.
   *
   * @param {object} att Collection fo key value attributes
   * @return {object} Filled attributes
   */ getStateAttributes(att) {
        att = att || {};
        if (this.isAd()) {
            if (this.isRequested) {
                att.timeSinceAdRequested = this.timeSinceRequested.getDeltaTime();
                att.timeSinceLastAdHeartbeat = this.timeSinceLastHeartbeat.getDeltaTime();
            }
            if (this.isStarted) att.timeSinceAdStarted = this.timeSinceStarted.getDeltaTime();
            if (this.isPaused) att.timeSinceAdPaused = this.timeSincePaused.getDeltaTime();
            if (this.isBuffering) att.timeSinceAdBufferBegin = this.timeSinceBufferBegin.getDeltaTime();
            if (this.isSeeking) att.timeSinceAdSeekBegin = this.timeSinceSeekBegin.getDeltaTime();
            if (this.isAdBreak) att.timeSinceAdBreakBegin = this.timeSinceAdBreakStart.getDeltaTime();
            att.numberOfAds = this.numberOfAds;
        } else {
            if (this.isRequested) {
                att.timeSinceRequested = this.timeSinceRequested.getDeltaTime();
                att.timeSinceLastHeartbeat = this.timeSinceLastHeartbeat.getDeltaTime();
            }
            if (this.isStarted) att.timeSinceStarted = this.timeSinceStarted.getDeltaTime();
            if (this.isPaused) att.timeSincePaused = this.timeSincePaused.getDeltaTime();
            if (this.isBuffering) att.timeSinceBufferBegin = this.timeSinceBufferBegin.getDeltaTime();
            if (this.isSeeking) att.timeSinceSeekBegin = this.timeSinceSeekBegin.getDeltaTime();
            att.timeSinceLastAd = this.timeSinceLastAd.getDeltaTime();
            att.numberOfVideos = this.numberOfVideos;
        }
        att.numberOfErrors = this.numberOfErrors;
        // Playtime
        if (!this.isAd()) {
            if (this.playtimeSinceLastEvent.startTime > 0) att.playtimeSinceLastEvent = this.playtimeSinceLastEvent.getDeltaTime();
            else att.playtimeSinceLastEvent = 0;
            if (this.isPlaying) this.playtimeSinceLastEvent.start();
            else this.playtimeSinceLastEvent.reset();
            this.totalPlaytime += att.playtimeSinceLastEvent;
            att.totalPlaytime = this.totalPlaytime;
        }
        for (const [key, value] of Object.entries(this.customTimeSinceAttributes))att[key] = value.getDeltaTime();
        return att;
    }
    /**
   * Calculate the bufferType attribute.
   * 
   * @param {boolean} isInitialBuffering Is initial buffering event.
   */ calculateBufferType(isInitialBuffering) {
        let bufferType = "";
        if (isInitialBuffering) bufferType = "initial";
        else if (this.isSeeking) bufferType = "seek";
        else if (this.isPaused) bufferType = "pause";
        else // If none of the above is true, it is a connection buffering
        bufferType = "connection";
        (0, _logDefault.default).debug("Buffer Type = " + bufferType);
        return bufferType;
    }
    /**
   * Augments view count. This will be called with each *_START and *_END.
   */ goViewCountUp() {
        this._viewCount++;
    }
    /**
   * Checks flags and changes state.
   * @returns {boolean} True if the state changed.
   */ goPlayerReady() {
        if (!this.isPlayerReady) {
            this.isPlayerReady = true;
            return true;
        } else return false;
    }
    /**
   * Checks flags and changes state
   * @returns {boolean} True if the state changed.
   */ goRequest() {
        if (!this.isRequested) {
            this.isRequested = true;
            this.timeSinceLastAd.reset();
            this.timeSinceRequested.start();
            return true;
        } else return false;
    }
    /**
   * Checks flags and changes state
   * @returns {boolean} True if the state changed.
   */ goStart() {
        if (this.isRequested && !this.isStarted) {
            if (this.isAd()) this.numberOfAds++;
            else this.numberOfVideos++;
            this.isStarted = true;
            this.isPlaying = true;
            this.timeSinceStarted.start();
            this.playtimeSinceLastEvent.start();
            return true;
        } else return false;
    }
    /**
   * Checks flags and changes state
   * @returns {boolean} True if the state changed.
   */ goEnd() {
        if (this.isRequested) {
            this.numberOfErrors = 0;
            this.resetFlags();
            this.timeSinceRequested.stop();
            this.timeSinceStarted.stop();
            this.playtimeSinceLastEvent.stop();
            return true;
        } else return false;
    }
    /**
   * Checks flags and changes state
   * @returns {boolean} True if the state changed.
   */ goPause() {
        if (this.isStarted && !this.isPaused) {
            this.isPaused = true;
            this.isPlaying = false;
            this.timeSincePaused.start();
            this.playtimeSinceLastEvent.stop();
            this.timeSinceResumed.reset();
            return true;
        } else return false;
    }
    /**
   * Checks flags and changes state
   * @returns {boolean} True if the state changed.
   */ goResume() {
        if (this.isStarted && this.isPaused) {
            this.isPaused = false;
            this.isPlaying = true;
            this.timeSincePaused.stop();
            this.timeSinceResumed.start();
            return true;
        } else return false;
    }
    /**
   * Checks flags and changes state
   * @returns {boolean} True if the state changed.
   */ goBufferStart() {
        if (this.isRequested && !this.isBuffering) {
            this.isBuffering = true;
            this.isPlaying = false;
            this.timeSinceBufferBegin.start();
            return true;
        } else return false;
    }
    /**
   * Checks flags and changes state
   * @returns {boolean} True if the state changed.
   */ goBufferEnd() {
        if (this.isRequested && this.isBuffering) {
            this.isBuffering = false;
            this.isPlaying = true;
            this.timeSinceBufferBegin.stop();
            return true;
        } else return false;
    }
    /**
   * Checks flags and changes state
   * @returns {boolean} True if the state changed.
   */ goSeekStart() {
        if (this.isStarted && !this.isSeeking) {
            this.isSeeking = true;
            this.isPlaying = false;
            this.timeSinceSeekBegin.start();
            this.timeSinceSeekEnd.reset();
            return true;
        } else return false;
    }
    /**
   * Checks flags and changes state
   * @returns {boolean} True if the state changed.
   */ goSeekEnd() {
        if (this.isStarted && this.isSeeking) {
            this.isSeeking = false;
            this.isPlaying = true;
            this.timeSinceSeekBegin.stop();
            this.timeSinceSeekEnd.start();
            return true;
        } else return false;
    }
    /**
   * Checks flags and changes state
   * @returns {boolean} True if the state changed.
   */ goAdBreakStart() {
        if (!this.isAdBreak) {
            this.isAdBreak = true;
            this.timeSinceAdBreakStart.start();
            return true;
        } else return false;
    }
    /**
   * Checks flags and changes state
   * @returns {boolean} True if the state changed.
   */ goAdBreakEnd() {
        if (this.isAdBreak) {
            this.isRequested = false;
            this.isAdBreak = false;
            this.totalAdPlaytime = this.timeSinceAdBreakStart.getDeltaTime();
            this.timeSinceAdBreakStart.stop();
            return true;
        } else return false;
    }
    /**
   * Restarts download chrono.
   */ goDownload() {
        this.timeSinceLastDownload.start();
    }
    /**
   * Restarts heartbeat chrono.
   */ goHeartbeat() {
        this.timeSinceLastHeartbeat.start();
    }
    /**
   * Restarts rendition change chrono.
   */ goRenditionChange() {
        this.timeSinceLastRenditionChange.start();
    }
    /**
   * Restarts ad quartile chrono.
   */ goAdQuartile() {
        this.timeSinceLastAdQuartile.start();
    }
    /**
   * Increments error counter.
   */ goError() {
        this.numberOfErrors++;
    }
    /**
   * Restarts last ad chrono.
   */ goLastAd() {
        this.timeSinceLastAd.start();
    }
    /** Constructor */ constructor(){
        this.reset();
        /**
     * Time when the VideoTrackerState was initializated.
     * @private
     */ this._createdAt = Date.now();
    }
}
exports.default = VideoTrackerState;

},{"./chrono":"3bS4O","./log":"bJWc8","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"7wdyd":[function(require,module,exports) {
// based on https://github.com/newrelic/video-html5-js/blob/master/src/tracker.js
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// import {VideoTracker, Log} from 'newrelic-video-core';
parcelHelpers.export(exports, "default", ()=>MagnetoHtml5Tracker);
var _objectSpread = require("@swc/helpers/_/_object_spread");
var _objectWithoutProperties = require("@swc/helpers/_/_object_without_properties");
var _newrelicVideoCore = require("newrelic-video-core");
class MagnetoHtml5Tracker extends (0, _newrelicVideoCore.VideoTracker) {
    registerListeners() {
        this.listeners = {
            loadstart: this.onDownload.bind(this),
            loadedmetadata: this.onDownload.bind(this),
            loadeddata: this.onDownload.bind(this),
            canplay: this.onDownload.bind(this),
            play: this.onPlay.bind(this),
            playing: this.onPlaying.bind(this),
            pause: this.onPause.bind(this),
            seeking: this.onSeeking.bind(this),
            seeked: this.onSeeked.bind(this),
            error: this.onError.bind(this),
            ended: this.onEnded.bind(this),
            waiting: this.onWaiting.bind(this),
            anomalyReport: this.onAnomalyReport.bind(this),
            bitrateChanged: this.onBitrateChanged.bind(this),
            blocked: this.onBlocked.bind(this),
            drmMetadata: this.onDrmMetadata.bind(this),
            timeupdate: this.onTimeupdate.bind(this),
            tuneMetricsData: this.onTuneMetricsData.bind(this)
        };
        for(const key in this.listeners)this.player.addEventListener(key, this.listeners[key]);
    // Log.debugCommonVideoEvents(this.player); // enable for local only, do not commit, otherwise duplicate logs will appear
    }
    unregisterListeners() {
        for(const key in this.listeners)this.player.removeEventListener(key, this.listeners[key]);
    }
    getCdn() {
        return null;
    }
    getDuration() {
        var _this_player;
        return ((_this_player = this.player) === null || _this_player === void 0 ? void 0 : _this_player.duration) * 1000;
    }
    getFps() {
        var _this_player;
        return (_this_player = this.player) === null || _this_player === void 0 ? void 0 : _this_player.videoFramerate;
    }
    getLanguage() {
        return null;
    }
    getPlayhead() {
        var _this_player;
        return ((_this_player = this.player) === null || _this_player === void 0 ? void 0 : _this_player.currentTime) * 1000;
    }
    getPlayerName() {
        return null;
    }
    getPlayerVersion() {
        return null;
    }
    getPlayrate() {
        var _this_player;
        return (_this_player = this.player) === null || _this_player === void 0 ? void 0 : _this_player.playbackRate;
    }
    getPreload() {
        return null;
    }
    getBitrate() {
        return null;
    }
    getRenditionName() {
        return null;
    }
    getRenditionBitrate() {
        var _this_player;
        return (_this_player = this.player) === null || _this_player === void 0 ? void 0 : _this_player.videoBitrate;
    }
    getRenditionHeight() {
        var _this_player;
        return (_this_player = this.player) === null || _this_player === void 0 ? void 0 : _this_player.videoHeight;
    }
    getRenditionWidth() {
        var _this_player;
        return (_this_player = this.player) === null || _this_player === void 0 ? void 0 : _this_player.videoWidth;
    }
    getSrc() {
        var _this_player;
        return (_this_player = this.player) === null || _this_player === void 0 ? void 0 : _this_player.currentSrc;
    }
    getTitle() {
        return null;
    }
    getTrackerName() {
        return "magnetoHtml5";
    }
    // currently set by newrelic-video-core
    // getTrackerVersion() {
    //     return '0.1.1';
    // }
    getVideoId() {
        return null;
    }
    isAutoplayed() {
        return null;
    }
    isFullscreen() {
        return null;
    }
    isLive() {
        return null;
    }
    isMuted() {
        return null;
    }
    onBlocked({ detail }) {
        if (this.isVideoSessionActive) {
            if ((detail === null || detail === void 0 ? void 0 : detail.blocked) !== this.blocked) {
                const eventName = (detail === null || detail === void 0 ? void 0 : detail.blocked) ? "PARENTAL_CONTROL_BLOCK" : "PARENTAL_CONTROL_UNBLOCK";
                this.send(eventName, addPrefixToAllKeys(detail || {}, "parentalControl."));
            }
            this.blocked = detail === null || detail === void 0 ? void 0 : detail.blocked;
        }
    }
    onBitrateChanged() {
        this.sendRenditionChanged();
    }
    onDownload(e) {
        this.sendDownload({
            state: e.type
        });
    }
    onPlay(payload) {
        var _payload_detail_recovery, _payload_detail, _payload_detail_recovery1, _payload_detail1;
        this.isVideoSessionActive = true;
        // all values in customData must be string or integer, they cannot be more objects.
        const customData = (0, _objectSpread._)({}, addPrefixToAllKeys(payload === null || payload === void 0 ? void 0 : (_payload_detail = payload.detail) === null || _payload_detail === void 0 ? void 0 : (_payload_detail_recovery = _payload_detail.recovery) === null || _payload_detail_recovery === void 0 ? void 0 : _payload_detail_recovery.state, "recovery."), addPrefixToAllKeys(payload === null || payload === void 0 ? void 0 : (_payload_detail1 = payload.detail) === null || _payload_detail1 === void 0 ? void 0 : (_payload_detail_recovery1 = _payload_detail1.recovery) === null || _payload_detail_recovery1 === void 0 ? void 0 : _payload_detail_recovery1.settings, "recovery."), this.playSessionCustomData);
        // setting customData overrides all previous customData
        this.setOptions({
            customData
        });
        this.sendRequest();
    }
    onPlaying() {
        var _this_player;
        // first frame is playing
        const timeFromSetAssetToFirstFrame = ((_this_player = this.player) === null || _this_player === void 0 ? void 0 : _this_player.perceivedVideoStartBeginEpoch) ? new Date().getTime() - this.player.perceivedVideoStartBeginEpoch : null;
        this.player.perceivedVideoStartBeginEpoch = null;
        this.sendBufferEnd();
        this.sendResume();
        this.sendStart({
            timeFromSetAssetToFirstFrame
        });
    }
    onPause() {
        this.sendPause();
    }
    onSeeking() {
        this.sendSeekStart();
    }
    onSeeked() {
        this.sendSeekEnd();
    }
    onTimeupdate() {
        // timeupdate is called every 500ms so these fields are updated very often
        // any and every event fired will have the latest value, time measurements are accurate to +/- 500ms
        if (this.customData) {
            var _this_player, _this_player1, _this_player2, _this_player3;
            this.customData.contentPlayheadBuffer = ((_this_player = this.player) === null || _this_player === void 0 ? void 0 : _this_player.bufferedSeconds) * 1000 || null;
            if (((_this_player1 = this.player) === null || _this_player1 === void 0 ? void 0 : _this_player1.liveLatency) > 0) this.customData.contentPlayheadLiveLatency = this.player.liveLatency * 1000;
            if (((_this_player2 = this.player) === null || _this_player2 === void 0 ? void 0 : _this_player2.epochOffsetSeconds) > 0) this.customData.contentPlayheadEpochOffset = this.player.epochOffsetSeconds * 1000;
            this.customData.networkBandwidth = (_this_player3 = this.player) === null || _this_player3 === void 0 ? void 0 : _this_player3.networkBandwidth;
        }
    }
    onError(payload) {
        const _payload_detail = payload.detail, { code: errorCode, description: errorDescription } = _payload_detail, rest = (0, _objectWithoutProperties._)(_payload_detail, [
            "code",
            "description"
        ]);
        const errorFields = addPrefixToAllKeys(rest, "errorField.");
        this.sendError((0, _objectSpread._)({
            errorCode,
            errorDescription
        }, errorFields));
    }
    onEnded() {
        this.isVideoSessionActive = false;
        this.sendEnd();
        this._lastRendition = null; // workaround, reset _lastRendition between sessions
        if (this.state) this.state.initialBufferingHappened = false; // workaround, reset bufferType and isInitialBuffering between sessions
    // this.state.timeSinceLastRenditionChange = null; // results in an error
    }
    onWaiting() {
        this.sendBufferStart();
    }
    onAnomalyReport({ detail: { anomalyReport } }) {
        if (/^(Rate changed|Tune attempt)/.test(anomalyReport === null || anomalyReport === void 0 ? void 0 : anomalyReport.description)) // ignore event
        return false;
        this.send("AAMP_ANOMALY_REPORT", addPrefixToAllKeys(anomalyReport || {}, "anomalyReport."));
    }
    onDrmMetadata({ detail: { payload } }) {
        payload.headersString = JSON.stringify(payload.headers);
        const networkMetricsObject = JSON.parse(payload.networkMetrics || "{}");
        delete payload.headers;
        delete payload.networkMetrics;
        delete payload.sessionId;
        Object.assign(payload, addPrefixToAllKeys(networkMetricsObject || {}, "networkMetrics."));
        this.send("AAMP_DRM_METADATA", addPrefixToAllKeys(payload || {}, "drmMetadata."));
    }
    onTuneMetricsData({ detail: { tuneMetricsData } }) {
        this.send("AAMP_TUNE_METRICS_DATA", addPrefixToAllKeys(tuneMetricsData || {}, "tuneMetricsData."));
    }
}
function addPrefixToAllKeys(object, prefix) {
    return Object.fromEntries(Object.entries(object).map(([k, v])=>[
            `${prefix}${k}`,
            v
        ]));
}

},{"@swc/helpers/_/_object_spread":"lupAG","@swc/helpers/_/_object_without_properties":"3Xacv","newrelic-video-core":"9khXO","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"3Xacv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_object_without_properties", ()=>_object_without_properties);
parcelHelpers.export(exports, "_", ()=>_object_without_properties);
var _objectWithoutPropertiesLooseJs = require("./_object_without_properties_loose.js");
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = (0, _objectWithoutPropertiesLooseJs._object_without_properties_loose)(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}

},{"./_object_without_properties_loose.js":"8bwu7","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"8bwu7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_object_without_properties_loose", ()=>_object_without_properties_loose);
parcelHelpers.export(exports, "_", ()=>_object_without_properties_loose);
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"gLRdZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MEDIA_TYPES", ()=>MEDIA_TYPES);
parcelHelpers.export(exports, "default", ()=>OztamAdapter);
var _defineProperty = require("@swc/helpers/_/_define_property");
var _oztamJSPlugin = require("./OztamJSPlugin");
const MEDIA_TYPES = {
    live: "live",
    vod: "vod"
};
class OztamAdapter {
    teardown() {
        this.endSession();
        clearTimeout(this.inactivityTimeoutId);
        this.removeEventListeners();
        this.videoElement = null;
    }
    constructor(videoElement, getAssetArgs, asset, isProduction = false){
        var _asset_playResponse_oztam, _asset_playResponse_oztam1, _getAssetArgs_deviceInfo, _getAssetArgs_deviceInfo1;
        (0, _defineProperty._)(this, "addListeners", ()=>{
            for(const key in this.listeners)this.videoElement.addEventListener(key, this.listeners[key]);
        });
        (0, _defineProperty._)(this, "removeEventListeners", ()=>{
            var _this_videoElement;
            for(const key in this.listeners)(_this_videoElement = this.videoElement) === null || _this_videoElement === void 0 ? void 0 : _this_videoElement.removeEventListener(key, this.listeners[key]);
        });
        (0, _defineProperty._)(this, "onPlaying", (event)=>{
            var _event_detail, // resume
            _this_oztamService;
            clearTimeout(this.inactivityTimeoutId);
            if (this.blocked === true && this.hasSessionStarted === false) // ignore this event, video session hasn't started yet
            return false;
            if ((_event_detail = event.detail) === null || _event_detail === void 0 ? void 0 : _event_detail.isFirstPlaying) // video start successful
            {
                if (this.oztamService) this.start();
            } else if (this.hasSessionStarted === false) // create new session after inactivityTimeout killed the previous one
            this.startSession();
            else (_this_oztamService = this.oztamService) === null || _this_oztamService === void 0 ? void 0 : _this_oztamService.resumeProgress();
        });
        (0, _defineProperty._)(this, "onBlocked", ({ detail })=>{
            if (detail.blocked === this.blocked) // state hasn't changed
            return;
            else // state has changed, stash state
            this.blocked = detail.blocked;
            if (detail.blocked) // video/audio cannot be seen/heard, ignore all events
            this.endSession();
            else // video can be seen, audio can be heard
            this.startSession();
        });
        (0, _defineProperty._)(this, "onSeeked", ()=>{
            var _this_oztamService, _this_oztamService1;
            (_this_oztamService = this.oztamService) === null || _this_oztamService === void 0 ? void 0 : _this_oztamService.seekBegin();
            (_this_oztamService1 = this.oztamService) === null || _this_oztamService1 === void 0 ? void 0 : _this_oztamService1.seekComplete();
        });
        (0, _defineProperty._)(this, "onEnded", ()=>{
            var // finished, final segment in manifest has played
            _this_oztamService, // user exit
            _this_oztamService1;
            if (this.mediaType === "vod" && this.videoElement.duration && this.videoElement.currentTime >= this.videoElement.duration - 1) (_this_oztamService = this.oztamService) === null || _this_oztamService === void 0 ? void 0 : _this_oztamService.complete();
            else (_this_oztamService1 = this.oztamService) === null || _this_oztamService1 === void 0 ? void 0 : _this_oztamService1.stop();
        });
        (0, _defineProperty._)(this, "onPause", ()=>{
            var _this_oztamService;
            (_this_oztamService = this.oztamService) === null || _this_oztamService === void 0 ? void 0 : _this_oztamService.haltProgress();
            clearTimeout(this.inactivityTimeoutId);
            this.inactivityTimeoutId = setTimeout(this.endSession, 600000);
        });
        (0, _defineProperty._)(this, "start", ()=>{
            var _this_getAssetArgs_glassContentOptions, _this_getAssetArgs_deviceInfo;
            const oztamObject = this.asset.playResponse.oztam;
            const mediaId = oztamObject.assetId;
            const { duration, currentSrc: url } = this.videoElement;
            const { mediaType } = this;
            this.oztamService.forceDeviceType("tv");
            this.oztamService.startSession(mediaId, url, duration, mediaType);
            const properties = {
                channel: oztamObject.channel,
                connectionType: ((_this_getAssetArgs_glassContentOptions = this.getAssetArgs.glassContentOptions) === null || _this_getAssetArgs_glassContentOptions === void 0 ? void 0 : _this_getAssetArgs_glassContentOptions.connectionType) === "ETHERNET" ? "LAN" : "WIFI",
                demo1: oztamObject.demo1,
                deviceId: (_this_getAssetArgs_deviceInfo = this.getAssetArgs.deviceInfo) === null || _this_getAssetArgs_deviceInfo === void 0 ? void 0 : _this_getAssetArgs_deviceInfo.uuid,
                seriesId: oztamObject.seriesId,
                seriesName: oztamObject.seriesName
            };
            this.oztamService.beginPlayback(mediaId, url, duration, this.getCurrentTime, properties, mediaType, this.getCurrentTime());
        });
        (0, _defineProperty._)(this, "startSession", ()=>{
            this.hasSessionStarted = true;
            this.onPlaying({
                detail: {
                    isFirstPlaying: true
                }
            });
        });
        (0, _defineProperty._)(this, "endSession", ()=>{
            this.onEnded();
            this.hasSessionStarted = false;
        });
        if (!((_asset_playResponse_oztam = asset.playResponse.oztam) === null || _asset_playResponse_oztam === void 0 ? void 0 : _asset_playResponse_oztam.publisherId)) // Oztam not required
        return;
        this.videoElement = videoElement;
        this.asset = asset;
        this.getAssetArgs = getAssetArgs;
        this.blocked = false;
        this.mediaType = asset.playResponse.oztam.reportType === "vod" ? MEDIA_TYPES.vod : MEDIA_TYPES.live;
        if ((_asset_playResponse_oztam1 = asset.playResponse.oztam) === null || _asset_playResponse_oztam1 === void 0 ? void 0 : _asset_playResponse_oztam1.transmissionTime) this.transmissionTimeEpochSeconds = new Date(asset.playResponse.oztam.transmissionTime).getTime() / 1000;
        this.listeners = {
            playing: this.onPlaying.bind(this),
            seeked: this.onSeeked.bind(this),
            ended: this.onEnded.bind(this),
            pause: this.onPause.bind(this),
            blocked: this.onBlocked.bind(this)
        };
        this.addListeners();
        // MIPA-114 workaround, solution to be provided by /play response
        const vendorVersionDeviceName = ((_getAssetArgs_deviceInfo = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo === void 0 ? void 0 : _getAssetArgs_deviceInfo.glassConfigure.brand) === "SOIP-PCK" ? "puck" : "tv";
        this.oztamService = new (0, _oztamJSPlugin.OzTAMService)(asset.playResponse.oztam.publisherId, `kayo_foxtel-${vendorVersionDeviceName}_${(_getAssetArgs_deviceInfo1 = getAssetArgs.deviceInfo) === null || _getAssetArgs_deviceInfo1 === void 0 ? void 0 : _getAssetArgs_deviceInfo1.appVersion}`, isProduction, window.isConsoleEnabled // isVerboseLogging
        );
        const isLiveReportType = this.mediaType === MEDIA_TYPES.live;
        this.getCurrentTime = (currentTime = videoElement.currentTime)=>{
            let time = 0;
            if (isLiveReportType) {
                const offset = videoElement.epochOffsetSeconds ? videoElement.epochOffsetSeconds : this.transmissionTimeEpochSeconds;
                time = offset + currentTime;
            } else time = currentTime;
            return time;
        };
        this.getCurrentTime.bind(this);
    }
}

},{"@swc/helpers/_/_define_property":"9kWBJ","./OztamJSPlugin":"lTWoi","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"lTWoi":[function(require,module,exports) {
/* eslint-disable */ // copied from https://github.com/fsa-streamotion/streamotion-web-martian-widgets/blob/main/src/js/OzTAMService.js
// WEB-1981 | 2023-03-02. Edited this script to only point to https and never http because they don't allow http anyway. This is an old script and using their new script at https://github.com/oztam/sm-sdk/blob/master/export/JavaScript%20(Web%2C%20HbbTV%2C%20PS%2C%20CTVs)/Release/OzTAMService.js breaks entirely
// new OzTAMService(publisherId: d, OZTAM_VENDOR_VERSION: e, oztamEnv === 'production': a, false: f, undefined: c);
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OzTAMService", ()=>OzTAMService);
var global = arguments[3];
function OzTAMService(d, e, a, f, c) {
    this.EVENT_TYPE_LOAD = "LOAD";
    this.EVENT_TYPE_BEGIN = "BEGIN";
    this.EVENT_TYPE_PROGRESS = "PROGRESS";
    this.EVENT_TYPE_COMPLETE = "COMPLETE";
    this.EVENT_TYPE_AD_BEGIN = "AD_BEGIN";
    this.EVENT_TYPE_AD_COMPLETE = "AD_COMPLETE";
    this.STATE_CLEAR = "CLEAR";
    this.STATE_LOADING = "LOADING";
    this.STATE_ADVERTISEMENT = "PLAYING_AD";
    this.STATE_AD_COMPLETE = "AD_COMPLETE";
    this.STATE_PLAYING = "PLAYING";
    this.STATE_PAUSED = "PAUSED";
    this.STATE_SEEKING = "SEEKING";
    this.STATE_END = "END";
    this.PROP_ALT_MEDIA_ID = "altMediaId";
    this.PROP_SERIES_ID = "seriesId";
    this.PROP_EPISODE_ID = "episodeId";
    this.PROP_SERIES_NAME = "seriesName";
    this.PROP_EPISODE_NAME = "episodeName";
    this.PROP_CHANNEL = "channel";
    this.PROP_CLASSIFICATION = "classification";
    this.PROP_DVB_TRIPLET = "dvbTriplet";
    this.PROP_POST_CODE = "postCode";
    this.PROP_PROGRAM_ID = "programId";
    this.PROP_PROGRAM_NAME = "programName";
    this.PROP_GENRE = "genre";
    this.PROP_DEMO1 = "demo1";
    this.PROP_DEMO2 = "demo2";
    this.PROP_DEMO3 = "demo3";
    this.PROP_DEVICE_ID = "deviceId";
    this.PROP_CONNECTION_TYPE = "connectionType";
    this.PROP_STREAMING_TYPE = "streamingType";
    this.PROP_LATITUDE = "latitude";
    this.PROP_LONGITUDE = "longitude";
    this.PROP_ORIGIN_MEDIA_ID = "originMediaId";
    this.PROP_ORIGINAL_SESSION_ID = "originalSessionId";
    this.PROP_USER1 = "usr1";
    this.PROP_USER2 = "usr2";
    this.PROP_USER3 = "usr3";
    this.PROP_OZTAM_ID = "OzTAMid";
    this.PROP_IS_DIGITAL_ADS = "isDigitalAds";
    this.VALID_PROPS = [
        this.PROP_ALT_MEDIA_ID,
        this.PROP_SERIES_ID,
        this.PROP_EPISODE_ID,
        this.PROP_SERIES_NAME,
        this.PROP_EPISODE_NAME,
        this.PROP_CHANNEL,
        this.PROP_CLASSIFICATION,
        this.PROP_DVB_TRIPLET,
        this.PROP_POST_CODE,
        this.PROP_PROGRAM_ID,
        this.PROP_PROGRAM_NAME,
        this.PROP_GENRE,
        this.PROP_DEMO1,
        this.PROP_DEMO2,
        this.PROP_DEMO3,
        this.PROP_DEVICE_ID,
        this.PROP_CONNECTION_TYPE,
        this.PROP_STREAMING_TYPE,
        this.PROP_LATITUDE,
        this.PROP_LONGITUDE,
        this.PROP_ORIGIN_MEDIA_ID,
        this.PROP_ORIGINAL_SESSION_ID,
        this.PROP_USER1,
        this.PROP_USER2,
        this.PROP_USER3,
        this.PROP_OZTAM_ID,
        this.PROP_IS_DIGITAL_ADS
    ];
    this.debug = f;
    this.state = this.STATE_CLEAR;
    this.serverTargetStaging = "https://sdeliver.oztam.com.au/api/meter";
    this.serverTargetProduction = "https://deliver.oztam.com.au/api/meter";
    if (a) this.serverTarget = this.serverTargetProduction;
    else this.serverTarget = this.serverTargetStaging;
    this.protocolVersion = "1.1.1";
    this.vendorVersion = e;
    this.plugin = "javascript";
    this.userAgent;
    this.publisherId = d;
    this.mediaType = null;
    this.sessionId = null;
    this.nextSessionId = null;
    this.mediaId = null;
    this.url = null;
    this.mediaDuration = 0;
    this.properties = null;
    this.mediaPositionFunction = null;
    this.beginFlag = false;
    this.progressDelay = 59000;
    this.progressInterval = -1;
    var b = this;
    this.onProgressFunction = function() {
        b.logMessage("Firing onProgress function");
        b.dispatchMeterEvents(b.EVENT_TYPE_PROGRESS);
    };
    this.lastPosition = 0;
    this.timezoneOffset = -1;
    this._internalDeviceId = this.getCookie("a27e2eb13f36d845d35f06eff5781c66");
    if (!this._internalDeviceId) {
        this._internalDeviceId = this.newUUID();
        this.setCookie("a27e2eb13f36d845d35f06eff5781c66", this._internalDeviceId, 3650);
    }
}
OzTAMService.prototype.forceDeviceType = function(a) {
    this._deviceType = a;
};
OzTAMService.prototype.getVersion = function() {
    return this.protocolVersion;
};
OzTAMService.prototype.newUUID = function() {
    function a() {
        return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
    }
    return a() + a() + "-" + a() + "-" + a() + "-" + a() + "-" + a() + a() + a();
};
OzTAMService.prototype.getSessionID = function() {
    return this.sessionId;
};
OzTAMService.prototype.getIndexOfItem = function(b, c) {
    if (c == null) return -1;
    if (c.indexOf != null) return c.indexOf(b);
    for(var a = 0; a < c.length; a++){
        if (c[a] == b) return a;
    }
    return -1;
};
OzTAMService.prototype.startSession = function(d, c, b, a) {
    this.logMessage("startSession called");
    if (a == null) a = "vod";
    this.mediaType = a;
    this.mediaId = d;
    this.url = c;
    this.mediaDuration = b;
    this.timezoneOffset = new Date().getTimezoneOffset();
    this.timezoneOffset = -this.timezoneOffset;
    if (this.nextSessionId) {
        this.sessionId = this.nextSessionId;
        this.nextSessionId = null;
    } else this.sessionId = this.newUUID();
    this.beginFlag = false;
    this.state = this.STATE_LOADING;
    this.dispatchMeterEvents(this.EVENT_TYPE_LOAD);
};
OzTAMService.prototype.generateNextSessionID = function() {
    this.nextSessionId = this.newUUID();
    this.logMessage("generateNextSessionID called, next session will have UUID " + this.nextSessionId);
    return this.nextSessionId;
};
// oztamInstance?.beginPlayback(
//     videoId: g,
//     '': d,
//     duration: c,
//     () => oztamInstance?._getCurrentTime(): a,
//     oztamProperties: f,
//     mediaType: b
//     undefined: h
// );
OzTAMService.prototype.beginPlayback = function(g, d, c, a, f, b, h) {
    this.logMessage("beginPlayback called");
    switch(this.state){
        case this.STATE_CLEAR:
        case this.STATE_PLAYING:
            this.dispatchMeterEvents(this.EVENT_TYPE_PROGRESS, h);
            break;
    }
    if (b == null) b = "vod";
    this.mediaType = b;
    this.mediaId = g;
    this.url = d;
    this.mediaDuration = c;
    this.mediaPositionFunction = function() {
        return a().toFixed(1);
    };
    this.lastPosition = 0;
    this.properties = {};
    this.properties[this.PROP_DEVICE_ID] = this._internalDeviceId;
    if (f != null) {
        for(var e in f)if (this.getIndexOfItem(e, this.VALID_PROPS) > -1) {
            this.properties[e] = f[e];
            this.logMessage("Property " + e + " value " + f[e] + " has been stored");
        } else this.logMessage("Property " + e + " value " + f[e] + " is not known, ignoring");
    }
    this.state = this.STATE_PLAYING;
    this.dispatchMeterEvents(this.EVENT_TYPE_BEGIN);
    this.beginFlag = true;
    if (undefined !== h) this.lastPosition = h.toFixed(1);
    else this.lastPosition = this.mediaPositionFunction();
    this.startProgressTimers();
};
OzTAMService.prototype.haltProgress = function(a) {
    this.logMessage("haltProgress called");
    if (this.state != this.STATE_PLAYING) {
        this.logMessage("haltProgress called when state was " + this.state + ", ignoring");
        return;
    }
    this.state = this.STATE_PAUSED;
    this.dispatchMeterEvents(this.EVENT_TYPE_PROGRESS, a);
    this.stopProgressTimers();
};
OzTAMService.prototype.resumeProgress = function() {
    this.logMessage("resumeProgress called");
    if (this.beginFlag === true && (this.state == this.STATE_AD_COMPLETE || this.state == this.STATE_PAUSED)) {
        this.state = this.STATE_PLAYING;
        this.startProgressTimers();
    } else this.logMessage("resumeProgress called at invalid state " + this.state + " and beginFlag " + this.beginFlag + ", ignoring");
};
OzTAMService.prototype.seekBegin = function(a) {
    this.logMessage("seekBegin called");
    if (this.beginFlag === false || this.state == this.STATE_ADVERTISEMENT || this.state == this.STATE_SEEKING || this.state == this.STATE_CLEAR || this.state == this.STATE_LOADING || this.state == this.STATE_AD_COMPLETE || this.state == this.STATE_END) {
        this.logMessage("Ignoring seekBegin call - state is " + this.state + " and begin flag is " + this.beginFlag);
        return;
    }
    this.state = this.STATE_SEEKING;
    this.dispatchMeterEvents(this.EVENT_TYPE_PROGRESS, a);
    this.stopProgressTimers();
};
OzTAMService.prototype.seekComplete = function(a) {
    this.logMessage("seekComplete called");
    if (!(this.state === this.STATE_SEEKING || this.state === this.STATE_PAUSED)) {
        this.logMessage("Ignoring seekComplete call - state is not seeking or paused, but rather " + this.state);
        return;
    }
    this.state = this.STATE_PAUSED;
    if (undefined !== a) this.lastPosition = a.toFixed(1);
    else if (this.mediaPositionFunction) this.lastPosition = this.mediaPositionFunction();
    else this.logMessage("Error on seek complete: No media position function defined!");
};
OzTAMService.prototype.adBegin = function(b, a, c) {
    this.logMessage("adBegin called");
    if (this.state == this.STATE_ADVERTISEMENT || this.state == this.STATE_SEEKING || this.state == this.STATE_CLEAR) {
        this.logMessage("Ignoring adBegin - state is " + this.state);
        return;
    }
    this.state = this.STATE_ADVERTISEMENT;
    if (this.beginFlag && this.state != this.STATE_CLEAR) this.dispatchMeterEvents(this.EVENT_TYPE_PROGRESS, c);
    this.stopProgressTimers();
    this.eventProp1 = b;
    this.eventProp2 = a;
    this.dispatchMeterEvents(this.EVENT_TYPE_AD_BEGIN, c);
    this.eventProp1 = undefined;
    this.eventProp2 = undefined;
};
OzTAMService.prototype.adComplete = function(b, a, c) {
    this.logMessage("adComplete called");
    if (this.state != this.STATE_ADVERTISEMENT) {
        this.logMessage("Ignoring adComplete - state is " + this.state);
        return;
    }
    this.eventProp1 = b;
    this.eventProp2 = a;
    this.dispatchMeterEvents(this.EVENT_TYPE_AD_COMPLETE, c);
    this.state = this.STATE_AD_COMPLETE;
    this.eventProp1 = undefined;
    this.eventProp2 = undefined;
};
OzTAMService.prototype.stop = function(a) {
    this.logMessage("stop called");
    if (this.state == this.STATE_END || this.state == this.STATE_CLEAR) {
        this.logMessage("stop call ignored - state is " + this.state);
        return;
    }
    if (this.state == this.STATE_PLAYING) this.dispatchMeterEvents(this.EVENT_TYPE_PROGRESS, a);
    this.stopProgressTimers();
    this.state = this.STATE_END;
};
OzTAMService.prototype.complete = function(a) {
    this.logMessage("complete called");
    if (this.state == this.STATE_END || this.state == this.STATE_CLEAR) {
        this.logMessage("complete call ignored - state is " + this.state);
        return;
    }
    if (this.state == this.STATE_PLAYING) this.dispatchMeterEvents(this.EVENT_TYPE_PROGRESS, a);
    this.stopProgressTimers();
    this.state = this.STATE_END;
    this.dispatchMeterEvents(this.EVENT_TYPE_COMPLETE, a);
    this.lastPosition = 0;
    this.mediaPositionFunction = null;
    this.properties = null;
};
OzTAMService.prototype.startProgressTimers = function() {
    this.logMessage("startProgressTimers called");
    if (this.state == this.STATE_PLAYING) {
        clearInterval(this.progressInterval);
        this.progressInterval = setInterval(this.onProgressFunction, this.progressDelay);
    }
};
OzTAMService.prototype.stopProgressTimers = function() {
    this.logMessage("stopProgressTimers called");
    clearInterval(this.progressInterval);
};
OzTAMService.prototype.dispatchMeterEvents = function(e, i) {
    var d = 0;
    if (this.mediaPositionFunction == null && undefined === i) {
        if (e != this.EVENT_TYPE_LOAD && e != this.EVENT_TYPE_AD_BEGIN && e != this.EVENT_TYPE_AD_COMPLETE) {
            this.logMessage("dispatchMeterEvents(): No media position function is set and this is not a load event");
            return;
        }
    } else if (e != this.EVENT_TYPE_BEGIN) {
        if (undefined !== i) d = Number(i).toFixed(1);
        else d = this.mediaPositionFunction();
    }
    if (e == this.EVENT_TYPE_LOAD) {
        this.lastPosition = 0;
        d = 0;
    }
    var h = new Date();
    var c = {
        timestamp: h,
        event: e
    };
    c.fromPosition = this.lastPosition;
    this.lastPosition = d;
    c.toPosition = this.lastPosition;
    if (e == this.EVENT_TYPE_PROGRESS) {
        if (parseFloat(c.fromPosition) == parseFloat(c.toPosition)) {
            this.logMessage("Ignoring progress event - to and from position are the same: " + c.toPosition);
            return;
        } else {
            if (parseFloat(c.fromPosition) > parseFloat(c.toPosition)) {
                this.logMessage("Ignoring progress event - position invalid: " + c.fromPosition + " to " + c.toPosition);
                return;
            } else if (parseFloat(c.toPosition) - parseFloat(c.fromPosition) > 61) {
                this.logMessage("Oversized event " + c.fromPosition + " to " + c.toPosition);
                return;
            }
        }
    }
    if (e == this.EVENT_TYPE_AD_BEGIN || e == this.EVENT_TYPE_AD_COMPLETE) {
        if (this.eventProp1) c.eventProp1 = this.eventProp1;
        if (this.eventProp2) c.eventProp2 = this.eventProp2;
    }
    var j = {
        browser: this.platform.name,
        os: this.platform.os.family,
        platform: this.platform.os.toString(),
        version: this.platform.version
    };
    if (this._deviceType) j.deviceType = this._deviceType;
    var b = {
        protocolVersion: this.protocolVersion,
        vendorVersion: this.vendorVersion,
        plugin: "javascript",
        timestamp: h,
        sessionId: this.sessionId,
        timezoneOffset: this.timezoneOffset,
        publisherId: this.publisherId,
        mediaId: this.mediaId,
        mediaType: this.mediaType,
        mediaDuration: this.mediaDuration,
        url: this.url,
        userAgent: j,
        events: [
            c
        ]
    };
    if (e == this.EVENT_TYPE_BEGIN) b.properties = this.properties;
    var a = [
        function() {
            return new XMLHttpRequest();
        },
        function() {
            return new ActiveXObject("Msxml2.XMLHTTP");
        },
        function() {
            return new ActiveXObject("Msxml3.XMLHTTP");
        },
        function() {
            return new ActiveXObject("Microsoft.XMLHTTP");
        }
    ];
    function g() {
        var l = false;
        for(var k = 0; k < a.length; k++){
            try {
                l = a[k]();
            } catch (m) {
                continue;
            }
            break;
        }
        return l;
    }
    var f = g();
    if (f) {
        f.open("POST", this.serverTarget, true);
        f.setRequestHeader("Content-Type", "application/json");
        f.send(JSON.stringify(b));
    }
    this.logMessage("Dispatched " + e + " event, with fromPosition " + printPosition(c.fromPosition) + " and toPosition " + printPosition(c.toPosition) + ` (${(c.toPosition - c.fromPosition).toFixed(1)} seconds watched)`);
};
function printPosition(positionSeconds) {
    const Y2K_EPOCH = 946684800;
    if (positionSeconds > Y2K_EPOCH) return new Date(positionSeconds * 1000).toISOString();
    return positionSeconds;
}
OzTAMService.prototype.logMessage = function(b) {
    if (console != null && this.debug) {
        var a = new Date();
        var c = a.getHours() + ":" + a.getMinutes() + ":" + a.getSeconds() + " " + a.getMilliseconds() + ": ";
        console.log(c + b);
    }
};
OzTAMService.prototype.getCookie = function(a) {
    if (typeof localStorage != "undefined") try {
        return localStorage.getItem(a);
    } catch (b) {}
    var c = document.cookie.indexOf(a + "=");
    if (document.cookie.length > 0) {
        if (c !== -1) return document.cookie.replace(new RegExp("(?:(?:^|.*;\\s*)" + a + "\\s*\\=\\s*([^;]*).*$)|^.*$", "g"), "$1");
    }
    return "";
};
OzTAMService.prototype.setCookie = function(b, c, a) {
    var f = new Date();
    f.setDate(f.getDate() + a);
    if (typeof localStorage != "undefined") try {
        localStorage.setItem(b, c);
        return;
    } catch (d) {}
    document.cookie = b + "=" + escape(c) + (a === null ? "" : ";expires=" + f.toUTCString());
};
OzTAMService.prototype.platform = (function() {
    var d = {
        function: true,
        object: true
    };
    var o = d[typeof window] && window || this;
    var n = o;
    var b = d["object"] && exports;
    var w = d["object"] && module && !module.nodeType && module;
    var k = b && w && typeof global == "object" && global;
    if (k && (k.global === k || k.window === k || k.self === k)) o = k;
    var l = Math.pow(2, 53) - 1;
    var h = /\bOpera/;
    var c = this;
    var i = Object.prototype;
    var f = i.hasOwnProperty;
    var p = i.toString;
    function e(x) {
        x = String(x);
        return x.charAt(0).toUpperCase() + x.slice(1);
    }
    function r(A, z, x) {
        var y = {
            "10.0": "10",
            6.4: "10 Technical Preview",
            6.3: "8.1",
            6.2: "8",
            6.1: "Server 2008 R2 / 7",
            "6.0": "Server 2008 / Vista",
            5.2: "Server 2003 / XP 64-bit",
            5.1: "XP",
            5.01: "2000 SP1",
            "5.0": "2000",
            "4.0": "NT",
            "4.90": "ME"
        };
        if (z && x && /^Win/i.test(A) && !/^Windows Phone /i.test(A) && (y = y[/[\d.]+$/.exec(A)])) A = "Windows " + y;
        A = String(A);
        if (z && x) A = A.replace(RegExp(z, "i"), x);
        A = t(A.replace(/ ce$/i, " CE").replace(/\bhpw/i, "web").replace(/\bMacintosh\b/, "Mac OS").replace(/_PowerPC\b/i, " OS").replace(/\b(OS X) [^ \d]+/i, "$1").replace(/\bMac (OS X)\b/, "$1").replace(/\/(\d)/, " $1").replace(/_/g, ".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, "").replace(/\bx86\.64\b/gi, "x86_64").replace(/\b(Windows Phone) OS\b/, "$1").replace(/\b(Chrome OS \w+) [\d.]+\b/, "$1").split(" on ")[0]);
        return A;
    }
    function a(y, A) {
        var x = -1, z = y ? y.length : 0;
        if (typeof z == "number" && z > -1 && z <= l) while(++x < z)A(y[x], x, y);
        else u(y, A);
    }
    function t(x) {
        x = s(x);
        return /^(?:webOS|i(?:OS|P))/.test(x) ? x : e(x);
    }
    function u(x, z) {
        for(var y in x)if (f.call(x, y)) z(x[y], y, x);
    }
    function v(x) {
        return x == null ? e(x) : p.call(x).slice(8, -1);
    }
    function m(x, z) {
        var y = x != null ? typeof x[z] : "number";
        return !/^(?:boolean|number|string|undefined)$/.test(y) && (y == "object" ? !!x[z] : true);
    }
    function q(x) {
        return String(x).replace(/([ -])(?!$)/g, "$1?");
    }
    function g(z, y) {
        var x = null;
        a(z, function(B, A) {
            x = y(x, B, A, z);
        });
        return x;
    }
    function s(x) {
        return String(x).replace(/^ +| +$/g, "");
    }
    function j(ad) {
        var aj = o;
        var C = ad && typeof ad == "object" && v(ad) != "String";
        if (C) {
            aj = ad;
            ad = null;
        }
        var P = aj.navigator || {};
        var U = P.userAgent || "";
        ad || (ad = U);
        var ae = C || c == n;
        var J = C ? !!P.likeChrome : /\bChrome\b/.test(ad) && !/internal|\n/i.test(p.toString());
        var B = "Object", ak = C ? B : "ScriptBridgingProxyObject", z = C ? B : "Environment", E = C && aj.java ? "JavaPackage" : v(aj.java), Q = C ? B : "RuntimeObject";
        var ab = /\bJava/.test(E) && aj.java;
        var L = ab && v(aj.environment) == z;
        var af = ab ? "a" : "\u03B1";
        var V = ab ? "b" : "\u03B2";
        var F = aj.document || {};
        var W = aj.operamini || aj.opera;
        var A = h.test(A = C && W ? W["[[Class]]"] : v(W)) ? A : W = null;
        var ai;
        var I = ad;
        var O = [];
        var K = null;
        var Y = ad == U;
        var ag = Y && W && typeof W.version == "function" && W.version();
        var R;
        var T = G([
            {
                label: "EdgeHTML",
                pattern: "Edge"
            },
            "Trident",
            {
                label: "WebKit",
                pattern: "AppleWebKit"
            },
            "iCab",
            "Presto",
            "NetFront",
            "Tasman",
            "KHTML",
            "Gecko"
        ]);
        var M = ac([
            "Adobe AIR",
            "Arora",
            "Avant Browser",
            "Breach",
            "Camino",
            "Electron",
            "Epiphany",
            "Fennec",
            "Flock",
            "Galeon",
            "GreenBrowser",
            "iCab",
            "Iceweasel",
            "K-Meleon",
            "Konqueror",
            "Lunascape",
            "Maxthon",
            {
                label: "Microsoft Edge",
                pattern: "Edge"
            },
            "Midori",
            "Nook Browser",
            "PaleMoon",
            "PhantomJS",
            "Raven",
            "Rekonq",
            "RockMelt",
            {
                label: "Samsung Internet",
                pattern: "SamsungBrowser"
            },
            "SeaMonkey",
            {
                label: "Silk",
                pattern: "(?:Cloud9|Silk-Accelerated)"
            },
            "Sleipnir",
            "SlimBrowser",
            {
                label: "SRWare Iron",
                pattern: "Iron"
            },
            "Sunrise",
            "Swiftfox",
            "Waterfox",
            "WebPositive",
            "Opera Mini",
            {
                label: "Opera Mini",
                pattern: "OPiOS"
            },
            "Opera",
            {
                label: "Opera",
                pattern: "OPR"
            },
            "Chrome",
            {
                label: "Chrome Mobile",
                pattern: "(?:CriOS|CrMo)"
            },
            {
                label: "Firefox",
                pattern: "(?:Firefox|Minefield)"
            },
            {
                label: "Firefox for iOS",
                pattern: "FxiOS"
            },
            {
                label: "IE",
                pattern: "IEMobile"
            },
            {
                label: "IE",
                pattern: "MSIE"
            },
            "Safari"
        ]);
        var X = D([
            {
                label: "BlackBerry",
                pattern: "BB10"
            },
            "BlackBerry",
            {
                label: "Galaxy S",
                pattern: "GT-I9000"
            },
            {
                label: "Galaxy S2",
                pattern: "GT-I9100"
            },
            {
                label: "Galaxy S3",
                pattern: "GT-I9300"
            },
            {
                label: "Galaxy S4",
                pattern: "GT-I9500"
            },
            {
                label: "Galaxy S5",
                pattern: "SM-G900"
            },
            {
                label: "Galaxy S6",
                pattern: "SM-G920"
            },
            {
                label: "Galaxy S6 Edge",
                pattern: "SM-G925"
            },
            {
                label: "Galaxy S7",
                pattern: "SM-G930"
            },
            {
                label: "Galaxy S7 Edge",
                pattern: "SM-G935"
            },
            "Google TV",
            "Lumia",
            "iPad",
            "iPod",
            "iPhone",
            "Kindle",
            {
                label: "Kindle Fire",
                pattern: "(?:Cloud9|Silk-Accelerated)"
            },
            "Nexus",
            "Nook",
            "PlayBook",
            "PlayStation Vita",
            "PlayStation",
            "TouchPad",
            "Transformer",
            {
                label: "Wii U",
                pattern: "WiiU"
            },
            "Wii",
            "Xbox One",
            {
                label: "Xbox 360",
                pattern: "Xbox"
            },
            "Xoom"
        ]);
        var y = aa({
            Apple: {
                iPad: 1,
                iPhone: 1,
                iPod: 1
            },
            Archos: {},
            Amazon: {
                Kindle: 1,
                "Kindle Fire": 1
            },
            Asus: {
                Transformer: 1
            },
            "Barnes & Noble": {
                Nook: 1
            },
            BlackBerry: {
                PlayBook: 1
            },
            Google: {
                "Google TV": 1,
                Nexus: 1
            },
            HP: {
                TouchPad: 1
            },
            HTC: {},
            LG: {},
            Microsoft: {
                Xbox: 1,
                "Xbox One": 1
            },
            Motorola: {
                Xoom: 1
            },
            Nintendo: {
                "Wii U": 1,
                Wii: 1
            },
            Nokia: {
                Lumia: 1
            },
            Samsung: {
                "Galaxy S": 1,
                "Galaxy S2": 1,
                "Galaxy S3": 1,
                "Galaxy S4": 1
            },
            Sony: {
                PlayStation: 1,
                "PlayStation Vita": 1
            }
        });
        var S = H([
            "Windows Phone",
            "Android",
            "CentOS",
            {
                label: "Chrome OS",
                pattern: "CrOS"
            },
            "Debian",
            "Fedora",
            "FreeBSD",
            "Gentoo",
            "Haiku",
            "Kubuntu",
            "Linux Mint",
            "OpenBSD",
            "Red Hat",
            "SuSE",
            "Ubuntu",
            "Xubuntu",
            "Cygwin",
            "Symbian OS",
            "hpwOS",
            "webOS ",
            "webOS",
            "Tablet OS",
            "Tizen",
            "Linux",
            "Mac OS X",
            "Macintosh",
            "Mac",
            "Windows 98;",
            "Windows "
        ]);
        function G(al) {
            return g(al, function(am, an) {
                return am || RegExp("\\b" + (an.pattern || q(an)) + "\\b", "i").exec(ad) && (an.label || an);
            });
        }
        function aa(al) {
            return g(al, function(am, ao, an) {
                return am || (ao[X] || ao[/^[a-z]+(?: +[a-z]+\b)*/i.exec(X)] || RegExp("\\b" + q(an) + "(?:\\b|\\w*\\d)", "i").exec(ad)) && an;
            });
        }
        function ac(al) {
            return g(al, function(am, an) {
                return am || RegExp("\\b" + (an.pattern || q(an)) + "\\b", "i").exec(ad) && (an.label || an);
            });
        }
        function H(al) {
            return g(al, function(am, ao) {
                var an = ao.pattern || q(ao);
                if (!am && (am = RegExp("\\b" + an + "(?:/[\\d.]+|[ \\w.]*)", "i").exec(ad))) am = r(am, an, ao.label || ao);
                return am;
            });
        }
        function D(al) {
            return g(al, function(am, ao) {
                var an = ao.pattern || q(ao);
                if (!am && (am = RegExp("\\b" + an + " *\\d+[.\\w_]*", "i").exec(ad) || RegExp("\\b" + an + " *\\w+-[\\w]*", "i").exec(ad) || RegExp("\\b" + an + "(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)", "i").exec(ad))) {
                    if ((am = String(ao.label && !RegExp(an, "i").test(ao.label) ? ao.label : am).split("/"))[1] && !/[\d.]+/.test(am[0])) am[0] += " " + am[1];
                    ao = ao.label || ao;
                    am = t(am[0].replace(RegExp(an, "i"), ao).replace(RegExp("; *(?:" + ao + "[_-])?", "i"), " ").replace(RegExp("(" + ao + ")[-_.]?(\\w)", "i"), "$1 $2"));
                }
                return am;
            });
        }
        function N(al) {
            return g(al, function(am, an) {
                return am || (RegExp(an + "(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)", "i").exec(ad) || 0)[1] || null;
            });
        }
        function Z() {
            return this.description || "";
        }
        T && (T = [
            T
        ]);
        if (y && !X) X = D([
            y
        ]);
        if (ai = /\bGoogle TV\b/.exec(X)) X = ai[0];
        if (/\bSimulator\b/i.test(ad)) X = (X ? X + " " : "") + "Simulator";
        if (M == "Opera Mini" && /\bOPiOS\b/.test(ad)) O.push("running in Turbo/Uncompressed mode");
        if (M == "IE" && /\blike iPhone OS\b/.test(ad)) {
            ai = j(ad.replace(/like iPhone OS/, ""));
            y = ai.manufacturer;
            X = ai.product;
        } else {
            if (/^iP/.test(X)) {
                M || (M = "Safari");
                S = "iOS" + ((ai = / OS ([\d_]+)/i.exec(ad)) ? " " + ai[1].replace(/_/g, ".") : "");
            } else if (M == "Konqueror" && !/buntu/i.test(S)) S = "Kubuntu";
            else {
                if (y && y != "Google" && (/Chrome/.test(M) && !/\bMobile Safari\b/i.test(ad) || /\bVita\b/.test(X)) || /\bAndroid\b/.test(S) && /^Chrome/.test(M) && /\bVersion\//i.test(ad)) {
                    M = "Android Browser";
                    S = /\bAndroid\b/.test(S) ? S : "Android";
                } else if (M == "Silk") {
                    if (!/\bMobi/i.test(ad)) {
                        S = "Android";
                        O.unshift("desktop mode");
                    }
                    if (/Accelerated *= *true/i.test(ad)) O.unshift("accelerated");
                } else {
                    if (M == "PaleMoon" && (ai = /\bFirefox\/([\d.]+)\b/.exec(ad))) O.push("identifying as Firefox " + ai[1]);
                    else if (M == "Firefox" && (ai = /\b(Mobile|Tablet|TV)\b/i.exec(ad))) {
                        S || (S = "Firefox OS");
                        X || (X = ai[1]);
                    } else {
                        if (!M || (ai = !/\bMinefield\b/i.test(ad) && /\b(?:Firefox|Safari)\b/.exec(M))) {
                            if (M && !X && /[\/,]|^[^(]+?\)/.test(ad.slice(ad.indexOf(ai + "/") + 8))) M = null;
                            if ((ai = X || y || S) && (X || y || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(S))) M = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(S) ? S : ai) + " Browser";
                        } else if (M == "Electron" && (ai = (/\bChrome\/([\d.]+)\b/.exec(ad) || 0)[1])) O.push("Chromium " + ai);
                    }
                }
            }
        }
        if (!ag) ag = N([
            "(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$))",
            "Version",
            q(M),
            "(?:Firefox|Minefield|NetFront)"
        ]);
        if (ai = T == "iCab" && parseFloat(ag) > 3 && "WebKit" || /\bOpera\b/.test(M) && (/\bOPR\b/.test(ad) ? "Blink" : "Presto") || /\b(?:Midori|Nook|Safari)\b/i.test(ad) && !/^(?:Trident|EdgeHTML)$/.test(T) && "WebKit" || !T && /\bMSIE\b/i.test(ad) && (S == "Mac OS" ? "Tasman" : "Trident") || T == "WebKit" && /\bPlayStation\b(?! Vita\b)/i.test(M) && "NetFront") T = [
            ai
        ];
        if (M == "IE" && (ai = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(ad) || 0)[1])) {
            M += " Mobile";
            S = "Windows Phone " + (/\+$/.test(ai) ? ai : ai + ".x");
            O.unshift("desktop mode");
        } else {
            if (/\bWPDesktop\b/i.test(ad)) {
                M = "IE Mobile";
                S = "Windows Phone 8.x";
                O.unshift("desktop mode");
                ag || (ag = (/\brv:([\d.]+)/.exec(ad) || 0)[1]);
            } else if (M != "IE" && T == "Trident" && (ai = /\brv:([\d.]+)/.exec(ad))) {
                if (M) O.push("identifying as " + M + (ag ? " " + ag : ""));
                M = "IE";
                ag = ai[1];
            }
        }
        if (Y) {
            if (m(aj, "global")) {
                if (ab) {
                    ai = ab.lang.System;
                    I = ai.getProperty("os.arch");
                    S = S || ai.getProperty("os.name") + " " + ai.getProperty("os.version");
                }
                if (ae && m(aj, "system") && (ai = [
                    aj.system
                ])[0]) {
                    S || (S = ai[0].os || null);
                    try {
                        ai[1] = aj.require("ringo/engine").version;
                        ag = ai[1].join(".");
                        M = "RingoJS";
                    } catch (ah) {
                        if (ai[0].global.system == aj.system) M = "Narwhal";
                    }
                } else {
                    if (typeof aj.process == "object" && !aj.process.browser && (ai = aj.process)) {
                        if (typeof ai.versions == "object") {
                            if (typeof ai.versions.electron == "string") {
                                O.push("Node " + ai.versions.node);
                                M = "Electron";
                                ag = ai.versions.electron;
                            } else if (typeof ai.versions.nw == "string") {
                                O.push("Chromium " + ag, "Node " + ai.versions.node);
                                M = "NW.js";
                                ag = ai.versions.nw;
                            }
                        } else {
                            M = "Node.js";
                            I = ai.arch;
                            S = ai.platform;
                            ag = /[\d.]+/.exec(ai.version)[0];
                        }
                    } else if (L) M = "Rhino";
                }
            } else {
                if (v(ai = aj.runtime) == ak) {
                    M = "Adobe AIR";
                    S = ai.flash.system.Capabilities.os;
                } else if (v(ai = aj.phantom) == Q) {
                    M = "PhantomJS";
                    ag = (ai = ai.version || null) && ai.major + "." + ai.minor + "." + ai.patch;
                } else {
                    if (typeof F.documentMode == "number" && (ai = /\bTrident\/(\d+)/i.exec(ad))) {
                        ag = [
                            ag,
                            F.documentMode
                        ];
                        if ((ai = +ai[1] + 4) != ag[1]) {
                            O.push("IE " + ag[1] + " mode");
                            T && (T[1] = "");
                            ag[1] = ai;
                        }
                        ag = M == "IE" ? String(ag[1].toFixed(1)) : ag[0];
                    } else if (typeof F.documentMode == "number" && /^(?:Chrome|Firefox)\b/.test(M)) {
                        O.push("masking as " + M + " " + ag);
                        M = "IE";
                        ag = "11.0";
                        T = [
                            "Trident"
                        ];
                        S = "Windows";
                    }
                }
            }
            S = S && t(S);
        }
        if (ag && (ai = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(ag) || /(?:alpha|beta)(?: ?\d)?/i.exec(ad + ";" + (Y && P.appMinorVersion)) || /\bMinefield\b/i.test(ad) && "a")) {
            K = /b/i.test(ai) ? "beta" : "alpha";
            ag = ag.replace(RegExp(ai + "\\+?$"), "") + (K == "beta" ? V : af) + (/\d+\+?/.exec(ai) || "");
        }
        if (M == "Fennec" || M == "Firefox" && /\b(?:Android|Firefox OS)\b/.test(S)) M = "Firefox Mobile";
        else if (M == "Maxthon" && ag) ag = ag.replace(/\.[\d.]+/, ".x");
        else {
            if (/\bXbox\b/i.test(X)) {
                if (X == "Xbox 360") S = null;
                if (X == "Xbox 360" && /\bIEMobile\b/.test(ad)) O.unshift("mobile mode");
            } else if ((/^(?:Chrome|IE|Opera)$/.test(M) || M && !X && !/Browser|Mobi/.test(M)) && (S == "Windows CE" || /Mobi/i.test(ad))) M += " Mobile";
            else {
                if (M == "IE" && Y) try {
                    if (aj.external === null) O.unshift("platform preview");
                } catch (ah) {
                    O.unshift("embedded");
                }
                else {
                    if ((/\bBlackBerry\b/.test(X) || /\bBB10\b/.test(ad)) && (ai = (RegExp(X.replace(/ +/g, " *") + "/([.\\d]+)", "i").exec(ad) || 0)[1] || ag)) {
                        ai = [
                            ai,
                            /BB10/.test(ad)
                        ];
                        S = (ai[1] ? (X = null, y = "BlackBerry") : "Device Software") + " " + ai[0];
                        ag = null;
                    } else if (this != u && X != "Wii" && (Y && W || /Opera/.test(M) && /\b(?:MSIE|Firefox)\b/i.test(ad) || M == "Firefox" && /\bOS X (?:\d+\.){2,}/.test(S) || M == "IE" && (S && !/^Win/.test(S) && ag > 5.5 || /\bWindows XP\b/.test(S) && ag > 8 || ag == 8 && !/\bTrident\b/.test(ad))) && !h.test(ai = j.call(u, ad.replace(h, "") + ";")) && ai.name) {
                        ai = "ing as " + ai.name + ((ai = ai.version) ? " " + ai : "");
                        if (h.test(M)) {
                            if (/\bIE\b/.test(ai) && S == "Mac OS") S = null;
                            ai = "identify" + ai;
                        } else {
                            ai = "mask" + ai;
                            if (A) M = t(A.replace(/([a-z])([A-Z])/g, "$1 $2"));
                            else M = "Opera";
                            if (/\bIE\b/.test(ai)) S = null;
                            if (!Y) ag = null;
                        }
                        T = [
                            "Presto"
                        ];
                        O.push(ai);
                    }
                }
            }
        }
        if (ai = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(ad) || 0)[1]) {
            ai = [
                parseFloat(ai.replace(/\.(\d)$/, ".0$1")),
                ai
            ];
            if (M == "Safari" && ai[1].slice(-1) == "+") {
                M = "WebKit Nightly";
                K = "alpha";
                ag = ai[1].slice(0, -1);
            } else if (ag == ai[1] || ag == (ai[2] = (/\bSafari\/([\d.]+\+?)/i.exec(ad) || 0)[1])) ag = null;
            ai[1] = (/\bChrome\/([\d.]+)/i.exec(ad) || 0)[1];
            if (ai[0] == 537.36 && ai[2] == 537.36 && parseFloat(ai[1]) >= 28 && T == "WebKit") T = [
                "Blink"
            ];
            if (!Y || !J && !ai[1]) {
                T && (T[1] = "like Safari");
                ai = (ai = ai[0], ai < 400 ? 1 : ai < 500 ? 2 : ai < 526 ? 3 : ai < 533 ? 4 : ai < 534 ? "4+" : ai < 535 ? 5 : ai < 537 ? 6 : ai < 538 ? 7 : ai < 601 ? 8 : "8");
            } else {
                T && (T[1] = "like Chrome");
                ai = ai[1] || (ai = ai[0], ai < 530 ? 1 : ai < 532 ? 2 : ai < 532.05 ? 3 : ai < 533 ? 4 : ai < 534.03 ? 5 : ai < 534.07 ? 6 : ai < 534.1 ? 7 : ai < 534.13 ? 8 : ai < 534.16 ? 9 : ai < 534.24 ? 10 : ai < 534.3 ? 11 : ai < 535.01 ? 12 : ai < 535.02 ? "13+" : ai < 535.07 ? 15 : ai < 535.11 ? 16 : ai < 535.19 ? 17 : ai < 536.05 ? 18 : ai < 536.1 ? 19 : ai < 537.01 ? 20 : ai < 537.11 ? "21+" : ai < 537.13 ? 23 : ai < 537.18 ? 24 : ai < 537.24 ? 25 : ai < 537.36 ? 26 : T != "Blink" ? "27" : "28");
            }
            T && (T[1] += " " + (ai += typeof ai == "number" ? ".x" : /[.+]/.test(ai) ? "" : "+"));
            if (M == "Safari" && (!ag || parseInt(ag) > 45)) ag = ai;
        }
        if (M == "Opera" && (ai = /\bzbov|zvav$/.exec(S))) {
            M += " ";
            O.unshift("desktop mode");
            if (ai == "zvav") {
                M += "Mini";
                ag = null;
            } else M += "Mobile";
            S = S.replace(RegExp(" *" + ai + "$"), "");
        } else if (M == "Safari" && /\bChrome\b/.exec(T && T[1])) {
            O.unshift("desktop mode");
            M = "Chrome Mobile";
            ag = null;
            if (/\bOS X\b/.test(S)) {
                y = "Apple";
                S = "iOS 4.3+";
            } else S = null;
        }
        if (ag && ag.indexOf(ai = /[\d.]+$/.exec(S)) == 0 && ad.indexOf("/" + ai + "-") > -1) S = s(S.replace(ai, ""));
        if (T && !/\b(?:Avant|Nook)\b/.test(M) && (/Browser|Lunascape|Maxthon/.test(M) || M != "Safari" && /^iOS/.test(S) && /\bSafari\b/.test(T[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|Web)/.test(M) && T[1])) (ai = T[T.length - 1]) && O.push(ai);
        if (O.length) O = [
            "(" + O.join("; ") + ")"
        ];
        if (y && X && X.indexOf(y) < 0) O.push("on " + y);
        if (X) O.push((/^on /.test(O[O.length - 1]) ? "" : "on ") + X);
        if (S) {
            ai = / ([\d.+]+)$/.exec(S);
            R = ai && S.charAt(S.length - ai[0].length - 1) == "/";
            S = {
                architecture: 32,
                family: ai && !R ? S.replace(ai[0], "") : S,
                version: ai ? ai[1] : null,
                toString: function() {
                    var al = this.version;
                    return this.family + (al && !R ? " " + al : "") + (this.architecture == 64 ? " 64-bit" : "");
                }
            };
        }
        if ((ai = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(I)) && !/\bi686\b/i.test(I)) {
            if (S) {
                S.architecture = 64;
                S.family = S.family.replace(RegExp(" *" + ai), "");
            }
            if (M && (/\bWOW64\b/i.test(ad) || Y && /\w(?:86|32)$/.test(P.cpuClass || P.platform) && !/\bWin64; x64\b/i.test(ad))) O.unshift("32-bit");
        } else if (S && /^OS X/.test(S.family) && M == "Chrome" && parseFloat(ag) >= 39) S.architecture = 64;
        ad || (ad = null);
        var x = {};
        x.description = ad;
        x.layout = T && T[0];
        x.manufacturer = y;
        x.name = M;
        x.prerelease = K;
        x.product = X;
        x.ua = ad;
        x.version = M && ag;
        x.os = S || {
            architecture: null,
            family: null,
            version: null,
            toString: function() {
                return "null";
            }
        };
        x.parse = j;
        x.toString = Z;
        if (x.version) O.unshift(ag);
        if (x.name) O.unshift(M);
        if (S && M && !(S == String(S).split(" ")[0] && (S == M.split(" ")[0] || X))) O.push(X ? "(" + S + ")" : "on " + S);
        if (O.length) x.description = O.join(" ");
        return x;
    }
    return j();
}).call();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"hi9WM":[function(require,module,exports) {
/* eslint-disable no-console */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>VimondPlayerEventsAdapter);
var _defineProperty = require("@swc/helpers/_/_define_property");
var _objectSpread = require("@swc/helpers/_/_object_spread");
var _utils = require("../../../../utils/utils");
var _utils1 = require("./utils");
// eslint-disable-next-line max-params
async function fetchPlayerEvent(uri, body, token) {
    return fetch((0, _utils.addProxyIp)(uri), {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify(body)
    }).then(async (response)=>{
        var _response_headers_get;
        let responseBody;
        if (((_response_headers_get = response.headers.get("Content-Type")) === null || _response_headers_get === void 0 ? void 0 : _response_headers_get.indexOf("json")) > -1) responseBody = await response.json();
        else responseBody = await response.text();
        if (response.status === 401 || response.status === 403) throw responseBody;
        else {
            if (!response.ok) console.warn("Vimond Player Events ignored error", response);
            return responseBody;
        }
    });
}
class VimondPlayerEventsAdapter {
    set playStream(currentPlayStream) {
        if (!(currentPlayStream && this.body && this.uri)) return;
        // reset body.client with original raw body.client
        this.body.client = JSON.parse(JSON.stringify(this.rawBodyClient));
        this.body.client = (0, _utils1.fieldFill)(this.body.client, {
            client_drm: currentPlayStream.drm ? "PlayReady" : false,
            client_stream_url: currentPlayStream.manifest,
            video_mime_type: currentPlayStream.mimeType,
            video_protocol: currentPlayStream.streamingProtocol
        });
    }
    prepareRequestBody(body, assetArgs) {
        const { deviceInfo } = assetArgs;
        const updatedBody = (0, _utils1.fieldFill)(body, {
            originator: deviceInfo === null || deviceInfo === void 0 ? void 0 : deviceInfo.playerName
        });
        updatedBody.client = (0, _utils1.fieldFill)(updatedBody.client, {
            client_build_name: deviceInfo.appName,
            client_build_version: deviceInfo.appVersion,
            client_env_platform: deviceInfo.glassConfigure.osName,
            client_env_version: deviceInfo.glassConfigure.osVersion,
            viewing_session: deviceInfo.glassConfigure.estbMacAddress
        });
        return updatedBody;
    }
    get playerState() {
        return this.videoElement.playbackRate === 0 ? "pause" : "playing";
    }
    teardown() {
        this.timerDestroy();
        this.removeEventListeners();
        this.playStream = null;
        this.videoElement = null;
        this.asset = null;
    }
    timerDestroy() {
        clearInterval(this.timer);
        this.timer = null;
    }
    timerStart() {
        this.timerDestroy();
        this.timer = setInterval(this.sendPlayerEvent, this.eventInterval * 1000);
    }
    constructor(videoElement, getAssetArgs, asset, user){
        var _asset_playResponse;
        (0, _defineProperty._)(this, "timer", void 0);
        (0, _defineProperty._)(this, "eventNumber", 1);
        (0, _defineProperty._)(this, "addEventListeners", ()=>{
            for(const key in this.listeners)this.videoElement.addEventListener(key, this.listeners[key]);
        });
        (0, _defineProperty._)(this, "removeEventListeners", ()=>{
            var _this_videoElement;
            for(const key in this.listeners)(_this_videoElement = this.videoElement) === null || _this_videoElement === void 0 ? void 0 : _this_videoElement.removeEventListener(key, this.listeners[key]);
        });
        (0, _defineProperty._)(this, "onPause", ()=>{
            this.sendPlayerEvent("period", "pause");
        });
        (0, _defineProperty._)(this, "onPlaying", (event)=>{
            var _event_detail;
            if ((_event_detail = event.detail) === null || _event_detail === void 0 ? void 0 : _event_detail.isFirstPlaying) // video start successful
            this.sendPlayerEvent("str-start", "playing");
        });
        (0, _defineProperty._)(this, "onEnded", ()=>{
            if (this.videoElement.currentTime > 0 && this.videoElement.duration !== null) {
                // video start successful
                if (this.videoElement.currentTime >= this.videoElement.duration - 1) // finished, final segment in manifest has played
                this.sendPlayerEvent("end", "");
                else // user exit OR playback failed in midstream
                this.sendPlayerEvent("end", "pause");
                this.timerDestroy();
            }
        });
        (0, _defineProperty._)(this, "sendPlayerEvent", async (playerEvent = "period", playerState = this.playerState)=>{
            const body = (0, _objectSpread._)({}, this.body); // clone to remove reference to this.body
            body.progress.eventNumber = this.eventNumber;
            body.client.pageUrl = "";
            body.client.playerEvent = playerEvent;
            body.client.playerState = playerState;
            body.timestamp = new Date().toISOString();
            if (body.progress.live) {
                body.progress.live.liveResumePossible = this.videoElement.isLive;
                body.progress.live.onLiveEdge = this.videoElement.duration - this.videoElement.currentTime < 30;
                body.progress.live.position = this.videoElement.epochOffsetSeconds && this.videoElement.currentTime ? new Date((this.videoElement.epochOffsetSeconds + this.videoElement.currentTime) * 1000).toISOString() : 0;
            }
            if (body.progress.vod) // MAYBE report contentPosition not videoPosition
            body.progress.vod.position = this.videoElement.currentTime;
            console.debug(`sendPlayerEvent() playerEvent=${body.client.playerEvent} playerState=${body.client.playerState} streamUrl=${body.client.streamUrl}`);
            try {
                // Player Events eventInterval is 30 seconds for VOD, 60 seconds for LIVE
                const [streamotionJwt] = await this.user.getStreamotionToken(30);
                // console.warn(`playerEvent=${body.client.playerEvent} playerState=${body.client.playerState} streamUrl=${body.client.streamUrl}`);
                fetchPlayerEvent((0, _utils.addProxyIp)(this.uri), body, streamotionJwt).catch((response)=>{
                    if (response === null || response === void 0 ? void 0 : response.errors) for (const error of response.errors){
                        console.error(`Vimond Player Events error ${error.title} ${error.detail}`);
                        const payload = {
                            source: "VimondPlayerEventsAdapter",
                            error,
                            response
                        };
                        this.removeEventListeners();
                        this.videoElement.dispatchEvent(new CustomEvent("forceFatalError", {
                            detail: payload
                        }));
                        this.teardown();
                    }
                });
            } catch (error) {
                console.warn(`could not fetch Vimond Player Event ${JSON.stringify(error)}`, error);
            }
            this.eventNumber++;
            if (playerEvent === "end") this.timerDestroy();
            else this.timerStart();
        });
        this.videoElement = videoElement;
        this.getAssetArgs = getAssetArgs;
        this.asset = asset;
        this.user = user;
        const { body, eventInterval, uri } = (asset === null || asset === void 0 ? void 0 : (_asset_playResponse = asset.playResponse) === null || _asset_playResponse === void 0 ? void 0 : _asset_playResponse.playerEventRequest) || {};
        if (!body || !uri) {
            console.warn("Vimond Player Events not enabled, uri or body not defined");
            return;
        }
        this.rawBodyClient = JSON.parse(JSON.stringify(body.client));
        this.body = this.prepareRequestBody(body, getAssetArgs);
        this.eventInterval = eventInterval;
        this.uri = uri;
        this.listeners = {
            pause: this.onPause.bind(this),
            playing: this.onPlaying.bind(this),
            ended: this.onEnded.bind(this)
        };
        this.addEventListeners();
    }
}

},{"@swc/helpers/_/_define_property":"9kWBJ","@swc/helpers/_/_object_spread":"lupAG","../../../../utils/utils":"fvIy3","./utils":"jHnZt","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"jHnZt":[function(require,module,exports) {
/* eslint-disable import/prefer-default-export */ /**
 * Fill object values equal to `${lookupKey}`
 *
 * @param {Object} body with values equal to `${lookupKey}`
 * @param {Object} lookups `{lookupKey: lookupValue, etc}`
 *
 * @returns {Object} body with values equal to `${lookupKey}` replaced with `lookupValue`
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fieldFill", ()=>fieldFill);
function fieldFill(body, lookups) {
    for(const key in body)if (typeof body[key] === "string" && body[key].indexOf("${") > -1) {
        const value = lookups[body[key].replace("${", "").replace("}", "")];
        if (value !== undefined) body[key] = value;
    }
    return body;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"eOZuI":[function(require,module,exports) {
/* eslint-disable no-console */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>YouboraAdapter);
var _defineProperty = require("@swc/helpers/_/_define_property");
var _objectSpread = require("@swc/helpers/_/_object_spread");
var _objectSpreadProps = require("@swc/helpers/_/_object_spread_props");
var _npawPluginNwf = require("npaw-plugin-nwf");
var _npawPluginNwfDefault = parcelHelpers.interopDefault(_npawPluginNwf);
var _utils = require("../utils");
var _youbora7AampAdapter = require("./youbora7AampAdapter");
var _youbora7AampAdapterDefault = parcelHelpers.interopDefault(_youbora7AampAdapter);
class OptionsCache {
    getOptions() {
        const result = (0, _utils.fieldFill)((0, _objectSpread._)({}, this.raw), this.lookups);
        return result;
    }
    constructor(rawOptions){
        (0, _defineProperty._)(this, "raw", {});
        (0, _defineProperty._)(this, "lookups", {
            // constants
            airPlay: null,
            castSender: null,
            numberVisiblePlayers: 1,
            videoInitiator: null,
            // currentPlayStream
            awsMTSessionId: null,
            cdn: null,
            drmSystem: null,
            mediaFormat: null,
            resource: null,
            resourceHostname: null,
            streamingProtocol: null,
            videoCodec: null,
            // track selection, these can change during a Youbora session should not be overwritten
            audioCodec: null,
            language: null,
            subtitles: null
        });
        this.raw = rawOptions || {};
    }
}
class YouboraAdapter {
    set playStream(currentPlayStream) {
        var _this_optionsCache, _this_optionsCache1;
        if (!currentPlayStream || !this.optionsCache) return;
        this.optionsCache.lookups = (0, _objectSpreadProps._)((0, _objectSpread._)({}, (_this_optionsCache = this.optionsCache) === null || _this_optionsCache === void 0 ? void 0 : _this_optionsCache.lookups), {
            awsMTSessionId: currentPlayStream.awsMTSessionId,
            cdn: currentPlayStream.provider,
            drmSystem: currentPlayStream.drm ? "Playready" : false,
            mediaFormat: currentPlayStream.mediaFormat,
            resource: currentPlayStream.manifest,
            resourceHostname: new URL(currentPlayStream.manifest).hostname,
            streamingProtocol: currentPlayStream.streamingProtocol,
            videoCodec: ((currentPlayStream === null || currentPlayStream === void 0 ? void 0 : currentPlayStream.codec) || "").toUpperCase()
        });
        this.npawPlugin.setAnalyticsOptions((_this_optionsCache1 = this.optionsCache) === null || _this_optionsCache1 === void 0 ? void 0 : _this_optionsCache1.getOptions());
    }
    set tracks(tracks) {
        var _tracks_text;
        if (!this.optionsCache) return;
        if (tracks.audio && tracks.audio[0]) {
            this.optionsCache.lookups.audioCodec = getFoxtelAudioCodec(tracks.audio[0].codec);
            this.optionsCache.lookups.language = tracks.audio[0].language; // value as it appears in manifest
        }
        if (tracks.hasOwnProperty("text")) this.optionsCache.lookups.subtitles = ((_tracks_text = tracks.text) === null || _tracks_text === void 0 ? void 0 : _tracks_text.language) || "off";
        this.npawPlugin.setAnalyticsOptions(this.optionsCache.getOptions());
    }
    teardown() {
        this.optionsCache = null;
        this.npawPlugin = null;
        this.videoElement = null;
        this.getAssetArgs = null;
        this.asset = null;
        this.playStream = null;
    }
    constructor(videoElement, getAssetArgs, asset){
        var _this_getAssetArgs_deviceInfo, _this_optionsCache;
        this.videoElement = videoElement;
        this.getAssetArgs = getAssetArgs;
        this.asset = asset;
        this.videoElement.playResponseYoubora = this.asset.playResponse.youbora; // for playerName and playerVersion, dodgy work around
        this.npawPlugin = new (0, _npawPluginNwfDefault.default)("foxsportsaustraliadev");
        this.npawPlugin.setLogLevel(window.isConsoleEnabled ? 3 : 5); // https://docs.plugin.npaw.com/integration/web/enable-debug.html
        const options = (0, _objectSpread._)({}, this.asset.playResponse.youbora); // destructured to unlink variables
        delete options.accountCode; // used above, no option available
        delete options.adsExpected; // does nothing, no option available
        delete options.p2pStreaming; // does nothing, no option available
        delete options.player; // not an option, handled by YouboraAdapter
        delete options.playerVersion; // not an option, handled by YouboraAdapter
        delete options["content.bitrate"]; // handled by YouboraAdapter
        delete options["content.rendition"]; // handled by YouboraAdapter
        options["app.name"] = options.appName;
        options["app.releaseVersion"] = options.appReleaseVersion;
        delete options.appName;
        delete options.appReleaseVersion;
        this.pendingOptions = []; // https://documentation.npaw.com/integration-docs/docs/advanced-integration-js#delay-start-event-until-all-desired-metadata-is-available
        this.optionsCache = new OptionsCache(options);
        const isPuck = ((_this_getAssetArgs_deviceInfo = this.getAssetArgs.deviceInfo) === null || _this_getAssetArgs_deviceInfo === void 0 ? void 0 : _this_getAssetArgs_deviceInfo.glassConfigure.brand) === "SOIP-PCK";
        this.npawPlugin.registerAdapterFromClass(this.videoElement, (0, _youbora7AampAdapterDefault.default), (0, _objectSpread._)({
            "enabled": true,
            "app.https": true,
            "background.enabled": false,
            "device.brand": this.getAssetArgs.deviceInfo.glassConfigure.brand,
            "device.code": isPuck ? "HUBBL_PUCK" : "HUBBL_GLASS",
            "device.id": this.getAssetArgs.deviceInfo.glassConfigure.estbMacAddress,
            "device.model": this.getAssetArgs.deviceInfo.glassConfigure.model,
            "device.name": this.getAssetArgs.deviceInfo.glassConfigure.category,
            "device.osName": this.getAssetArgs.deviceInfo.glassConfigure.osName,
            "device.type": isPuck ? "stb" : "tv",
            "network.connectionType": this.getAssetArgs.glassContentOptions.connectionType === "ETHERNET" ? "Ethernet" : "WiFi",
            "waitForMetadata": this.pendingOptions.length > 0,
            "pendingMetadata": this.pendingOptions.length > 0 ? this.pendingOptions : null
        }, (_this_optionsCache = this.optionsCache) === null || _this_optionsCache === void 0 ? void 0 : _this_optionsCache.getOptions()));
    }
}
function getFoxtelAudioCodec(codec) {
    const lookup = {
        "ec-3": "EAC3",
        "ac-3": "AC3",
        "mp4a.40.2": "AAC"
    };
    return lookup[codec] || codec;
}

},{"@swc/helpers/_/_define_property":"9kWBJ","@swc/helpers/_/_object_spread":"lupAG","@swc/helpers/_/_object_spread_props":"8Y68S","npaw-plugin-nwf":"folVt","../utils":"jHnZt","./youbora7AampAdapter":"k6xFh","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"folVt":[function(require,module,exports) {
/*! For license information please see NpawPlugin-nwf.js.LICENSE.txt */ !function(e, t) {
    module.exports = t();
}(self, ()=>(()=>{
        var e = {
            525: (e, t)=>{
                "use strict";
                function i(e, t) {
                    return void 0 === t && (t = Object), t && "function" == typeof t.freeze ? t.freeze(e) : e;
                }
                var s = i({
                    HTML: "text/html",
                    isHTML: function(e) {
                        return e === s.HTML;
                    },
                    XML_APPLICATION: "application/xml",
                    XML_TEXT: "text/xml",
                    XML_XHTML_APPLICATION: "application/xhtml+xml",
                    XML_SVG_IMAGE: "image/svg+xml"
                }), n = i({
                    HTML: "http://www.w3.org/1999/xhtml",
                    isHTML: function(e) {
                        return e === n.HTML;
                    },
                    SVG: "http://www.w3.org/2000/svg",
                    XML: "http://www.w3.org/XML/1998/namespace",
                    XMLNS: "http://www.w3.org/2000/xmlns/"
                });
                t.find = function(e, t, i) {
                    if (void 0 === i && (i = Array.prototype), e && "function" == typeof i.find) return i.find.call(e, t);
                    for(var s = 0; s < e.length; s++)if (Object.prototype.hasOwnProperty.call(e, s)) {
                        var n = e[s];
                        if (t.call(void 0, n, s, e)) return n;
                    }
                }, t.freeze = i, t.MIME_TYPE = s, t.NAMESPACE = n;
            },
            8633: (e, t, i)=>{
                var s = i(525), n = i(1129), r = i(6598), a = i(2133), o = n.DOMImplementation, d = s.NAMESPACE, c = a.ParseError, u = a.XMLReader;
                function l(e) {
                    this.options = e || {
                        locator: {}
                    };
                }
                function h() {
                    this.cdata = !1;
                }
                function p(e, t) {
                    t.lineNumber = e.lineNumber, t.columnNumber = e.columnNumber;
                }
                function f(e) {
                    if (e) return "\n@" + (e.systemId || "") + "#[line:" + e.lineNumber + ",col:" + e.columnNumber + "]";
                }
                function g(e, t, i) {
                    return "string" == typeof e ? e.substr(t, i) : e.length >= t + i || t ? new java.lang.String(e, t, i) + "" : e;
                }
                function m(e, t) {
                    e.currentElement ? e.currentElement.appendChild(t) : e.doc.appendChild(t);
                }
                l.prototype.parseFromString = function(e, t) {
                    var i = this.options, s = new u, n = i.domBuilder || new h, a = i.errorHandler, o = i.locator, c = i.xmlns || {}, l = /\/x?html?$/.test(t), p = l ? r.HTML_ENTITIES : r.XML_ENTITIES;
                    return o && n.setDocumentLocator(o), s.errorHandler = function(e, t, i) {
                        if (!e) {
                            if (t instanceof h) return t;
                            e = t;
                        }
                        var s = {}, n = e instanceof Function;
                        function r(t) {
                            var r = e[t];
                            !r && n && (r = 2 == e.length ? function(i) {
                                e(t, i);
                            } : e), s[t] = r && function(e) {
                                r("[xmldom " + t + "]	" + e + f(i));
                            } || function() {};
                        }
                        return i = i || {}, r("warning"), r("error"), r("fatalError"), s;
                    }(a, n, o), s.domBuilder = i.domBuilder || n, l && (c[""] = d.HTML), c.xml = c.xml || d.XML, e && "string" == typeof e ? s.parse(e, c, p) : s.errorHandler.error("invalid doc source"), n.doc;
                }, h.prototype = {
                    startDocument: function() {
                        this.doc = (new o).createDocument(null, null, null), this.locator && (this.doc.documentURI = this.locator.systemId);
                    },
                    startElement: function(e, t, i, s) {
                        var n = this.doc, r = n.createElementNS(e, i || t), a = s.length;
                        m(this, r), this.currentElement = r, this.locator && p(this.locator, r);
                        for(var o = 0; o < a; o++){
                            e = s.getURI(o);
                            var d = s.getValue(o), c = (i = s.getQName(o), n.createAttributeNS(e, i));
                            this.locator && p(s.getLocator(o), c), c.value = c.nodeValue = d, r.setAttributeNode(c);
                        }
                    },
                    endElement: function(e, t, i) {
                        var s = this.currentElement;
                        s.tagName, this.currentElement = s.parentNode;
                    },
                    startPrefixMapping: function(e, t) {},
                    endPrefixMapping: function(e) {},
                    processingInstruction: function(e, t) {
                        var i = this.doc.createProcessingInstruction(e, t);
                        this.locator && p(this.locator, i), m(this, i);
                    },
                    ignorableWhitespace: function(e, t, i) {},
                    characters: function(e, t, i) {
                        if (e = g.apply(this, arguments)) {
                            if (this.cdata) var s = this.doc.createCDATASection(e);
                            else s = this.doc.createTextNode(e);
                            this.currentElement ? this.currentElement.appendChild(s) : /^\s*$/.test(e) && this.doc.appendChild(s), this.locator && p(this.locator, s);
                        }
                    },
                    skippedEntity: function(e) {},
                    endDocument: function() {
                        this.doc.normalize();
                    },
                    setDocumentLocator: function(e) {
                        (this.locator = e) && (e.lineNumber = 0);
                    },
                    comment: function(e, t, i) {
                        e = g.apply(this, arguments);
                        var s = this.doc.createComment(e);
                        this.locator && p(this.locator, s), m(this, s);
                    },
                    startCDATA: function() {
                        this.cdata = !0;
                    },
                    endCDATA: function() {
                        this.cdata = !1;
                    },
                    startDTD: function(e, t, i) {
                        var s = this.doc.implementation;
                        if (s && s.createDocumentType) {
                            var n = s.createDocumentType(e, t, i);
                            this.locator && p(this.locator, n), m(this, n), this.doc.doctype = n;
                        }
                    },
                    warning: function(e) {
                        console.warn("[xmldom warning]	" + e, f(this.locator));
                    },
                    error: function(e) {
                        console.error("[xmldom error]	" + e, f(this.locator));
                    },
                    fatalError: function(e) {
                        throw new c(e, this.locator);
                    }
                }, "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g, function(e) {
                    h.prototype[e] = function() {
                        return null;
                    };
                }), t.DOMParser = l, n.DOMImplementation, n.XMLSerializer;
            },
            1129: (e, t, i)=>{
                var s = i(525), n = s.find, r = s.NAMESPACE;
                function a(e) {
                    return "" !== e;
                }
                function o(e, t) {
                    return e.hasOwnProperty(t) || (e[t] = !0), e;
                }
                function d(e) {
                    if (!e) return [];
                    var t = function(e) {
                        return e ? e.split(/[\t\n\f\r ]+/).filter(a) : [];
                    }(e);
                    return Object.keys(t.reduce(o, {}));
                }
                function c(e, t) {
                    for(var i in e)Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
                }
                function u(e, t) {
                    var i = e.prototype;
                    if (!(i instanceof t)) {
                        function s() {}
                        s.prototype = t.prototype, c(i, s = new s), e.prototype = i = s;
                    }
                    i.constructor != e && ("function" != typeof e && console.error("unknown Class:" + e), i.constructor = e);
                }
                var l = {}, h = l.ELEMENT_NODE = 1, p = l.ATTRIBUTE_NODE = 2, f = l.TEXT_NODE = 3, g = l.CDATA_SECTION_NODE = 4, m = l.ENTITY_REFERENCE_NODE = 5, v = l.ENTITY_NODE = 6, y = l.PROCESSING_INSTRUCTION_NODE = 7, T = l.COMMENT_NODE = 8, S = l.DOCUMENT_NODE = 9, E = l.DOCUMENT_TYPE_NODE = 10, b = l.DOCUMENT_FRAGMENT_NODE = 11, A = l.NOTATION_NODE = 12, w = {}, _ = {}, I = (w.INDEX_SIZE_ERR = (_[1] = "Index size error", 1), w.DOMSTRING_SIZE_ERR = (_[2] = "DOMString size error", 2), w.HIERARCHY_REQUEST_ERR = (_[3] = "Hierarchy request error", 3)), N = (w.WRONG_DOCUMENT_ERR = (_[4] = "Wrong document", 4), w.INVALID_CHARACTER_ERR = (_[5] = "Invalid character", 5), w.NO_DATA_ALLOWED_ERR = (_[6] = "No data allowed", 6), w.NO_MODIFICATION_ALLOWED_ERR = (_[7] = "No modification allowed", 7), w.NOT_FOUND_ERR = (_[8] = "Not found", 8)), D = (w.NOT_SUPPORTED_ERR = (_[9] = "Not supported", 9), w.INUSE_ATTRIBUTE_ERR = (_[10] = "Attribute in use", 10));
                function P(e, t) {
                    if (t instanceof Error) var i = t;
                    else i = this, Error.call(this, _[e]), this.message = _[e], Error.captureStackTrace && Error.captureStackTrace(this, P);
                    return i.code = e, t && (this.message = this.message + ": " + t), i;
                }
                function R() {}
                function L(e, t) {
                    this._node = e, this._refresh = t, C(this);
                }
                function C(e) {
                    var t = e._node._inc || e._node.ownerDocument._inc;
                    if (e._inc !== t) {
                        var i = e._refresh(e._node);
                        if (ye(e, "length", i.length), !e.$$length || i.length < e.$$length) for(var s = i.length; (s in e); s++)Object.prototype.hasOwnProperty.call(e, s) && delete e[s];
                        c(i, e), e._inc = t;
                    }
                }
                function O() {}
                function B(e, t) {
                    for(var i = e.length; i--;)if (e[i] === t) return i;
                }
                function x(e, t, i, s) {
                    if (s ? t[B(t, s)] = i : t[t.length++] = i, e) {
                        i.ownerElement = e;
                        var n = e.ownerDocument;
                        n && (s && X(n, e, s), function(e, t, i) {
                            e && e._inc++, i.namespaceURI === r.XMLNS && (t._nsMap[i.prefix ? i.localName : ""] = i.value);
                        }(n, e, i));
                    }
                }
                function M(e, t, i) {
                    var s = B(t, i);
                    if (!(s >= 0)) throw new P(N, new Error(e.tagName + "@" + i));
                    for(var n = t.length - 1; s < n;)t[s] = t[++s];
                    if (t.length = n, e) {
                        var r = e.ownerDocument;
                        r && (X(r, e, i), i.ownerElement = null);
                    }
                }
                function k() {}
                function U() {}
                function V(e) {
                    return ("<" == e ? "&lt;" : ">" == e && "&gt;") || "&" == e && "&amp;" || '"' == e && "&quot;" || "&#" + e.charCodeAt() + ";";
                }
                function q(e, t) {
                    if (t(e)) return !0;
                    if (e = e.firstChild) do {
                        if (q(e, t)) return !0;
                    }while (e = e.nextSibling);
                }
                function F() {
                    this.ownerDocument = this;
                }
                function X(e, t, i, s) {
                    e && e._inc++, i.namespaceURI === r.XMLNS && delete t._nsMap[i.prefix ? i.localName : ""];
                }
                function H(e, t, i) {
                    if (e && e._inc) {
                        e._inc++;
                        var s = t.childNodes;
                        if (i) s[s.length++] = i;
                        else {
                            for(var n = t.firstChild, r = 0; n;)s[r++] = n, n = n.nextSibling;
                            s.length = r, delete s[s.length];
                        }
                    }
                }
                function G(e, t) {
                    var i = t.previousSibling, s = t.nextSibling;
                    return i ? i.nextSibling = s : e.firstChild = s, s ? s.previousSibling = i : e.lastChild = i, t.parentNode = null, t.previousSibling = null, t.nextSibling = null, H(e.ownerDocument, e), t;
                }
                function j(e) {
                    return e && e.nodeType === U.DOCUMENT_TYPE_NODE;
                }
                function W(e) {
                    return e && e.nodeType === U.ELEMENT_NODE;
                }
                function Y(e) {
                    return e && e.nodeType === U.TEXT_NODE;
                }
                function z(e, t) {
                    var i = e.childNodes || [];
                    if (n(i, W) || j(t)) return !1;
                    var s = n(i, j);
                    return !(t && s && i.indexOf(s) > i.indexOf(t));
                }
                function K(e, t) {
                    var i = e.childNodes || [];
                    if (n(i, function(e) {
                        return W(e) && e !== t;
                    })) return !1;
                    var s = n(i, j);
                    return !(t && s && i.indexOf(s) > i.indexOf(t));
                }
                function Q(e, t, i) {
                    var s = e.childNodes || [], r = t.childNodes || [];
                    if (t.nodeType === U.DOCUMENT_FRAGMENT_NODE) {
                        var a = r.filter(W);
                        if (a.length > 1 || n(r, Y)) throw new P(I, "More than one element or text in fragment");
                        if (1 === a.length && !z(e, i)) throw new P(I, "Element in fragment can not be inserted before doctype");
                    }
                    if (W(t) && !z(e, i)) throw new P(I, "Only one element can be added and only after doctype");
                    if (j(t)) {
                        if (n(s, j)) throw new P(I, "Only one doctype is allowed");
                        var o = n(s, W);
                        if (i && s.indexOf(o) < s.indexOf(i)) throw new P(I, "Doctype can only be inserted before an element");
                        if (!i && o) throw new P(I, "Doctype can not be appended since element is present");
                    }
                }
                function J(e, t, i) {
                    var s = e.childNodes || [], r = t.childNodes || [];
                    if (t.nodeType === U.DOCUMENT_FRAGMENT_NODE) {
                        var a = r.filter(W);
                        if (a.length > 1 || n(r, Y)) throw new P(I, "More than one element or text in fragment");
                        if (1 === a.length && !K(e, i)) throw new P(I, "Element in fragment can not be inserted before doctype");
                    }
                    if (W(t) && !K(e, i)) throw new P(I, "Only one element can be added and only after doctype");
                    if (j(t)) {
                        if (n(s, function(e) {
                            return j(e) && e !== i;
                        })) throw new P(I, "Only one doctype is allowed");
                        var o = n(s, W);
                        if (i && s.indexOf(o) < s.indexOf(i)) throw new P(I, "Doctype can only be inserted before an element");
                    }
                }
                function $(e, t, i, s) {
                    (function(e, t, i) {
                        if (!function(e) {
                            return e && (e.nodeType === U.DOCUMENT_NODE || e.nodeType === U.DOCUMENT_FRAGMENT_NODE || e.nodeType === U.ELEMENT_NODE);
                        }(e)) throw new P(I, "Unexpected parent node type " + e.nodeType);
                        if (i && i.parentNode !== e) throw new P(N, "child not in parent");
                        if (!function(e) {
                            return e && (W(e) || Y(e) || j(e) || e.nodeType === U.DOCUMENT_FRAGMENT_NODE || e.nodeType === U.COMMENT_NODE || e.nodeType === U.PROCESSING_INSTRUCTION_NODE);
                        }(t) || j(t) && e.nodeType !== U.DOCUMENT_NODE) throw new P(I, "Unexpected node type " + t.nodeType + " for parent node type " + e.nodeType);
                    })(e, t, i), e.nodeType === U.DOCUMENT_NODE && (s || Q)(e, t, i);
                    var n = t.parentNode;
                    if (n && n.removeChild(t), t.nodeType === b) {
                        var r = t.firstChild;
                        if (null == r) return t;
                        var a = t.lastChild;
                    } else r = a = t;
                    var o = i ? i.previousSibling : e.lastChild;
                    r.previousSibling = o, a.nextSibling = i, o ? o.nextSibling = r : e.firstChild = r, null == i ? e.lastChild = a : i.previousSibling = a;
                    do r.parentNode = e;
                    while (r !== a && (r = r.nextSibling));
                    return H(e.ownerDocument || e, e), t.nodeType == b && (t.firstChild = t.lastChild = null), t;
                }
                function Z() {
                    this._nsMap = {};
                }
                function ee() {}
                function te() {}
                function ie() {}
                function se() {}
                function ne() {}
                function re() {}
                function ae() {}
                function oe() {}
                function de() {}
                function ce() {}
                function ue() {}
                function le() {}
                function he(e, t) {
                    var i = [], s = 9 == this.nodeType && this.documentElement || this, n = s.prefix, r = s.namespaceURI;
                    if (r && null == n && null == (n = s.lookupPrefix(r))) var a = [
                        {
                            namespace: r,
                            prefix: null
                        }
                    ];
                    return ge(this, i, e, t, a), i.join("");
                }
                function pe(e, t, i) {
                    var s = e.prefix || "", n = e.namespaceURI;
                    if (!n) return !1;
                    if ("xml" === s && n === r.XML || n === r.XMLNS) return !1;
                    for(var a = i.length; a--;){
                        var o = i[a];
                        if (o.prefix === s) return o.namespace !== n;
                    }
                    return !0;
                }
                function fe(e, t, i) {
                    e.push(" ", t, '="', i.replace(/[<&"]/g, V), '"');
                }
                function ge(e, t, i, s, n) {
                    if (n || (n = []), s) {
                        if (!(e = s(e))) return;
                        if ("string" == typeof e) return void t.push(e);
                    }
                    switch(e.nodeType){
                        case h:
                            var a = e.attributes, o = a.length, d = e.firstChild, c = e.tagName, u = c;
                            if (!(i = r.isHTML(e.namespaceURI) || i) && !e.prefix && e.namespaceURI) {
                                for(var l, v = 0; v < a.length; v++)if ("xmlns" === a.item(v).name) {
                                    l = a.item(v).value;
                                    break;
                                }
                                if (!l) {
                                    for(var A = n.length - 1; A >= 0; A--)if ("" === (w = n[A]).prefix && w.namespace === e.namespaceURI) {
                                        l = w.namespace;
                                        break;
                                    }
                                }
                                if (l !== e.namespaceURI) for(A = n.length - 1; A >= 0; A--){
                                    var w;
                                    if ((w = n[A]).namespace === e.namespaceURI) {
                                        w.prefix && (u = w.prefix + ":" + c);
                                        break;
                                    }
                                }
                            }
                            t.push("<", u);
                            for(var _ = 0; _ < o; _++)"xmlns" == (I = a.item(_)).prefix ? n.push({
                                prefix: I.localName,
                                namespace: I.value
                            }) : "xmlns" == I.nodeName && n.push({
                                prefix: "",
                                namespace: I.value
                            });
                            for(_ = 0; _ < o; _++){
                                var I, N, D;
                                pe(I = a.item(_), 0, n) && (fe(t, (N = I.prefix || "") ? "xmlns:" + N : "xmlns", D = I.namespaceURI), n.push({
                                    prefix: N,
                                    namespace: D
                                })), ge(I, t, i, s, n);
                            }
                            if (c === u && pe(e, 0, n) && (fe(t, (N = e.prefix || "") ? "xmlns:" + N : "xmlns", D = e.namespaceURI), n.push({
                                prefix: N,
                                namespace: D
                            })), d || i && !/^(?:meta|link|img|br|hr|input)$/i.test(c)) {
                                if (t.push(">"), i && /^script$/i.test(c)) for(; d;)d.data ? t.push(d.data) : ge(d, t, i, s, n.slice()), d = d.nextSibling;
                                else for(; d;)ge(d, t, i, s, n.slice()), d = d.nextSibling;
                                t.push("</", u, ">");
                            } else t.push("/>");
                            return;
                        case S:
                        case b:
                            for(d = e.firstChild; d;)ge(d, t, i, s, n.slice()), d = d.nextSibling;
                            return;
                        case p:
                            return fe(t, e.name, e.value);
                        case f:
                            return t.push(e.data.replace(/[<&]/g, V).replace(/]]>/g, "]]&gt;"));
                        case g:
                            return t.push("<![CDATA[", e.data, "]]>");
                        case T:
                            return t.push("<!--", e.data, "-->");
                        case E:
                            var P = e.publicId, R = e.systemId;
                            if (t.push("<!DOCTYPE ", e.name), P) t.push(" PUBLIC ", P), R && "." != R && t.push(" ", R), t.push(">");
                            else if (R && "." != R) t.push(" SYSTEM ", R, ">");
                            else {
                                var L = e.internalSubset;
                                L && t.push(" [", L, "]"), t.push(">");
                            }
                            return;
                        case y:
                            return t.push("<?", e.target, " ", e.data, "?>");
                        case m:
                            return t.push("&", e.nodeName, ";");
                        default:
                            t.push("??", e.nodeName);
                    }
                }
                function me(e, t, i) {
                    var s;
                    switch(t.nodeType){
                        case h:
                            (s = t.cloneNode(!1)).ownerDocument = e;
                        case b:
                            break;
                        case p:
                            i = !0;
                    }
                    if (s || (s = t.cloneNode(!1)), s.ownerDocument = e, s.parentNode = null, i) for(var n = t.firstChild; n;)s.appendChild(me(e, n, i)), n = n.nextSibling;
                    return s;
                }
                function ve(e, t, i) {
                    var s = new t.constructor;
                    for(var n in t)if (Object.prototype.hasOwnProperty.call(t, n)) {
                        var r = t[n];
                        "object" != typeof r && r != s[n] && (s[n] = r);
                    }
                    switch(t.childNodes && (s.childNodes = new R), s.ownerDocument = e, s.nodeType){
                        case h:
                            var a = t.attributes, o = s.attributes = new O, d = a.length;
                            o._ownerElement = s;
                            for(var c = 0; c < d; c++)s.setAttributeNode(ve(e, a.item(c), !0));
                            break;
                        case p:
                            i = !0;
                    }
                    if (i) for(var u = t.firstChild; u;)s.appendChild(ve(e, u, i)), u = u.nextSibling;
                    return s;
                }
                function ye(e, t, i) {
                    e[t] = i;
                }
                w.INVALID_STATE_ERR = (_[11] = "Invalid state", 11), w.SYNTAX_ERR = (_[12] = "Syntax error", 12), w.INVALID_MODIFICATION_ERR = (_[13] = "Invalid modification", 13), w.NAMESPACE_ERR = (_[14] = "Invalid namespace", 14), w.INVALID_ACCESS_ERR = (_[15] = "Invalid access", 15), P.prototype = Error.prototype, c(w, P), R.prototype = {
                    length: 0,
                    item: function(e) {
                        return e >= 0 && e < this.length ? this[e] : null;
                    },
                    toString: function(e, t) {
                        for(var i = [], s = 0; s < this.length; s++)ge(this[s], i, e, t);
                        return i.join("");
                    },
                    filter: function(e) {
                        return Array.prototype.filter.call(this, e);
                    },
                    indexOf: function(e) {
                        return Array.prototype.indexOf.call(this, e);
                    }
                }, L.prototype.item = function(e) {
                    return C(this), this[e] || null;
                }, u(L, R), O.prototype = {
                    length: 0,
                    item: R.prototype.item,
                    getNamedItem: function(e) {
                        for(var t = this.length; t--;){
                            var i = this[t];
                            if (i.nodeName == e) return i;
                        }
                    },
                    setNamedItem: function(e) {
                        var t = e.ownerElement;
                        if (t && t != this._ownerElement) throw new P(D);
                        var i = this.getNamedItem(e.nodeName);
                        return x(this._ownerElement, this, e, i), i;
                    },
                    setNamedItemNS: function(e) {
                        var t, i = e.ownerElement;
                        if (i && i != this._ownerElement) throw new P(D);
                        return t = this.getNamedItemNS(e.namespaceURI, e.localName), x(this._ownerElement, this, e, t), t;
                    },
                    removeNamedItem: function(e) {
                        var t = this.getNamedItem(e);
                        return M(this._ownerElement, this, t), t;
                    },
                    removeNamedItemNS: function(e, t) {
                        var i = this.getNamedItemNS(e, t);
                        return M(this._ownerElement, this, i), i;
                    },
                    getNamedItemNS: function(e, t) {
                        for(var i = this.length; i--;){
                            var s = this[i];
                            if (s.localName == t && s.namespaceURI == e) return s;
                        }
                        return null;
                    }
                }, k.prototype = {
                    hasFeature: function(e, t) {
                        return !0;
                    },
                    createDocument: function(e, t, i) {
                        var s = new F;
                        if (s.implementation = this, s.childNodes = new R, s.doctype = i || null, i && s.appendChild(i), t) {
                            var n = s.createElementNS(e, t);
                            s.appendChild(n);
                        }
                        return s;
                    },
                    createDocumentType: function(e, t, i) {
                        var s = new re;
                        return s.name = e, s.nodeName = e, s.publicId = t || "", s.systemId = i || "", s;
                    }
                }, U.prototype = {
                    firstChild: null,
                    lastChild: null,
                    previousSibling: null,
                    nextSibling: null,
                    attributes: null,
                    parentNode: null,
                    childNodes: null,
                    ownerDocument: null,
                    nodeValue: null,
                    namespaceURI: null,
                    prefix: null,
                    localName: null,
                    insertBefore: function(e, t) {
                        return $(this, e, t);
                    },
                    replaceChild: function(e, t) {
                        $(this, e, t, J), t && this.removeChild(t);
                    },
                    removeChild: function(e) {
                        return G(this, e);
                    },
                    appendChild: function(e) {
                        return this.insertBefore(e, null);
                    },
                    hasChildNodes: function() {
                        return null != this.firstChild;
                    },
                    cloneNode: function(e) {
                        return ve(this.ownerDocument || this, this, e);
                    },
                    normalize: function() {
                        for(var e = this.firstChild; e;){
                            var t = e.nextSibling;
                            t && t.nodeType == f && e.nodeType == f ? (this.removeChild(t), e.appendData(t.data)) : (e.normalize(), e = t);
                        }
                    },
                    isSupported: function(e, t) {
                        return this.ownerDocument.implementation.hasFeature(e, t);
                    },
                    hasAttributes: function() {
                        return this.attributes.length > 0;
                    },
                    lookupPrefix: function(e) {
                        for(var t = this; t;){
                            var i = t._nsMap;
                            if (i) {
                                for(var s in i)if (Object.prototype.hasOwnProperty.call(i, s) && i[s] === e) return s;
                            }
                            t = t.nodeType == p ? t.ownerDocument : t.parentNode;
                        }
                        return null;
                    },
                    lookupNamespaceURI: function(e) {
                        for(var t = this; t;){
                            var i = t._nsMap;
                            if (i && e in i && Object.prototype.hasOwnProperty.call(i, e)) return i[e];
                            t = t.nodeType == p ? t.ownerDocument : t.parentNode;
                        }
                        return null;
                    },
                    isDefaultNamespace: function(e) {
                        return null == this.lookupPrefix(e);
                    }
                }, c(l, U), c(l, U.prototype), F.prototype = {
                    nodeName: "#document",
                    nodeType: S,
                    doctype: null,
                    documentElement: null,
                    _inc: 1,
                    insertBefore: function(e, t) {
                        if (e.nodeType == b) {
                            for(var i = e.firstChild; i;){
                                var s = i.nextSibling;
                                this.insertBefore(i, t), i = s;
                            }
                            return e;
                        }
                        return $(this, e, t), e.ownerDocument = this, null === this.documentElement && e.nodeType === h && (this.documentElement = e), e;
                    },
                    removeChild: function(e) {
                        return this.documentElement == e && (this.documentElement = null), G(this, e);
                    },
                    replaceChild: function(e, t) {
                        $(this, e, t, J), e.ownerDocument = this, t && this.removeChild(t), W(e) && (this.documentElement = e);
                    },
                    importNode: function(e, t) {
                        return me(this, e, t);
                    },
                    getElementById: function(e) {
                        var t = null;
                        return q(this.documentElement, function(i) {
                            if (i.nodeType == h && i.getAttribute("id") == e) return t = i, !0;
                        }), t;
                    },
                    getElementsByClassName: function(e) {
                        var t = d(e);
                        return new L(this, function(i) {
                            var s = [];
                            return t.length > 0 && q(i.documentElement, function(n) {
                                if (n !== i && n.nodeType === h) {
                                    var r = n.getAttribute("class");
                                    if (r) {
                                        var a = e === r;
                                        if (!a) {
                                            var o = d(r);
                                            a = t.every((c = o, function(e) {
                                                return c && -1 !== c.indexOf(e);
                                            }));
                                        }
                                        a && s.push(n);
                                    }
                                }
                                var c;
                            }), s;
                        });
                    },
                    createElement: function(e) {
                        var t = new Z;
                        return t.ownerDocument = this, t.nodeName = e, t.tagName = e, t.localName = e, t.childNodes = new R, (t.attributes = new O)._ownerElement = t, t;
                    },
                    createDocumentFragment: function() {
                        var e = new ce;
                        return e.ownerDocument = this, e.childNodes = new R, e;
                    },
                    createTextNode: function(e) {
                        var t = new ie;
                        return t.ownerDocument = this, t.appendData(e), t;
                    },
                    createComment: function(e) {
                        var t = new se;
                        return t.ownerDocument = this, t.appendData(e), t;
                    },
                    createCDATASection: function(e) {
                        var t = new ne;
                        return t.ownerDocument = this, t.appendData(e), t;
                    },
                    createProcessingInstruction: function(e, t) {
                        var i = new ue;
                        return i.ownerDocument = this, i.tagName = i.nodeName = i.target = e, i.nodeValue = i.data = t, i;
                    },
                    createAttribute: function(e) {
                        var t = new ee;
                        return t.ownerDocument = this, t.name = e, t.nodeName = e, t.localName = e, t.specified = !0, t;
                    },
                    createEntityReference: function(e) {
                        var t = new de;
                        return t.ownerDocument = this, t.nodeName = e, t;
                    },
                    createElementNS: function(e, t) {
                        var i = new Z, s = t.split(":"), n = i.attributes = new O;
                        return i.childNodes = new R, i.ownerDocument = this, i.nodeName = t, i.tagName = t, i.namespaceURI = e, 2 == s.length ? (i.prefix = s[0], i.localName = s[1]) : i.localName = t, n._ownerElement = i, i;
                    },
                    createAttributeNS: function(e, t) {
                        var i = new ee, s = t.split(":");
                        return i.ownerDocument = this, i.nodeName = t, i.name = t, i.namespaceURI = e, i.specified = !0, 2 == s.length ? (i.prefix = s[0], i.localName = s[1]) : i.localName = t, i;
                    }
                }, u(F, U), Z.prototype = {
                    nodeType: h,
                    hasAttribute: function(e) {
                        return null != this.getAttributeNode(e);
                    },
                    getAttribute: function(e) {
                        var t = this.getAttributeNode(e);
                        return t && t.value || "";
                    },
                    getAttributeNode: function(e) {
                        return this.attributes.getNamedItem(e);
                    },
                    setAttribute: function(e, t) {
                        var i = this.ownerDocument.createAttribute(e);
                        i.value = i.nodeValue = "" + t, this.setAttributeNode(i);
                    },
                    removeAttribute: function(e) {
                        var t = this.getAttributeNode(e);
                        t && this.removeAttributeNode(t);
                    },
                    appendChild: function(e) {
                        return e.nodeType === b ? this.insertBefore(e, null) : function(e, t) {
                            return t.parentNode && t.parentNode.removeChild(t), t.parentNode = e, t.previousSibling = e.lastChild, t.nextSibling = null, t.previousSibling ? t.previousSibling.nextSibling = t : e.firstChild = t, e.lastChild = t, H(e.ownerDocument, e, t), t;
                        }(this, e);
                    },
                    setAttributeNode: function(e) {
                        return this.attributes.setNamedItem(e);
                    },
                    setAttributeNodeNS: function(e) {
                        return this.attributes.setNamedItemNS(e);
                    },
                    removeAttributeNode: function(e) {
                        return this.attributes.removeNamedItem(e.nodeName);
                    },
                    removeAttributeNS: function(e, t) {
                        var i = this.getAttributeNodeNS(e, t);
                        i && this.removeAttributeNode(i);
                    },
                    hasAttributeNS: function(e, t) {
                        return null != this.getAttributeNodeNS(e, t);
                    },
                    getAttributeNS: function(e, t) {
                        var i = this.getAttributeNodeNS(e, t);
                        return i && i.value || "";
                    },
                    setAttributeNS: function(e, t, i) {
                        var s = this.ownerDocument.createAttributeNS(e, t);
                        s.value = s.nodeValue = "" + i, this.setAttributeNode(s);
                    },
                    getAttributeNodeNS: function(e, t) {
                        return this.attributes.getNamedItemNS(e, t);
                    },
                    getElementsByTagName: function(e) {
                        return new L(this, function(t) {
                            var i = [];
                            return q(t, function(s) {
                                s === t || s.nodeType != h || "*" !== e && s.tagName != e || i.push(s);
                            }), i;
                        });
                    },
                    getElementsByTagNameNS: function(e, t) {
                        return new L(this, function(i) {
                            var s = [];
                            return q(i, function(n) {
                                n === i || n.nodeType !== h || "*" !== e && n.namespaceURI !== e || "*" !== t && n.localName != t || s.push(n);
                            }), s;
                        });
                    }
                }, F.prototype.getElementsByTagName = Z.prototype.getElementsByTagName, F.prototype.getElementsByTagNameNS = Z.prototype.getElementsByTagNameNS, u(Z, U), ee.prototype.nodeType = p, u(ee, U), te.prototype = {
                    data: "",
                    substringData: function(e, t) {
                        return this.data.substring(e, e + t);
                    },
                    appendData: function(e) {
                        e = this.data + e, this.nodeValue = this.data = e, this.length = e.length;
                    },
                    insertData: function(e, t) {
                        this.replaceData(e, 0, t);
                    },
                    appendChild: function(e) {
                        throw new Error(_[I]);
                    },
                    deleteData: function(e, t) {
                        this.replaceData(e, t, "");
                    },
                    replaceData: function(e, t, i) {
                        i = this.data.substring(0, e) + i + this.data.substring(e + t), this.nodeValue = this.data = i, this.length = i.length;
                    }
                }, u(te, U), ie.prototype = {
                    nodeName: "#text",
                    nodeType: f,
                    splitText: function(e) {
                        var t = this.data, i = t.substring(e);
                        t = t.substring(0, e), this.data = this.nodeValue = t, this.length = t.length;
                        var s = this.ownerDocument.createTextNode(i);
                        return this.parentNode && this.parentNode.insertBefore(s, this.nextSibling), s;
                    }
                }, u(ie, te), se.prototype = {
                    nodeName: "#comment",
                    nodeType: T
                }, u(se, te), ne.prototype = {
                    nodeName: "#cdata-section",
                    nodeType: g
                }, u(ne, te), re.prototype.nodeType = E, u(re, U), ae.prototype.nodeType = A, u(ae, U), oe.prototype.nodeType = v, u(oe, U), de.prototype.nodeType = m, u(de, U), ce.prototype.nodeName = "#document-fragment", ce.prototype.nodeType = b, u(ce, U), ue.prototype.nodeType = y, u(ue, U), le.prototype.serializeToString = function(e, t, i) {
                    return he.call(e, t, i);
                }, U.prototype.toString = he;
                try {
                    if (Object.defineProperty) {
                        function Te(e) {
                            switch(e.nodeType){
                                case h:
                                case b:
                                    var t = [];
                                    for(e = e.firstChild; e;)7 !== e.nodeType && 8 !== e.nodeType && t.push(Te(e)), e = e.nextSibling;
                                    return t.join("");
                                default:
                                    return e.nodeValue;
                            }
                        }
                        Object.defineProperty(L.prototype, "length", {
                            get: function() {
                                return C(this), this.$$length;
                            }
                        }), Object.defineProperty(U.prototype, "textContent", {
                            get: function() {
                                return Te(this);
                            },
                            set: function(e) {
                                switch(this.nodeType){
                                    case h:
                                    case b:
                                        for(; this.firstChild;)this.removeChild(this.firstChild);
                                        (e || String(e)) && this.appendChild(this.ownerDocument.createTextNode(e));
                                        break;
                                    default:
                                        this.data = e, this.value = e, this.nodeValue = e;
                                }
                            }
                        }), ye = function(e, t, i) {
                            e["$$" + t] = i;
                        };
                    }
                } catch (Se) {}
                t.DocumentType = re, t.DOMException = P, t.DOMImplementation = k, t.Element = Z, t.Node = U, t.NodeList = R, t.XMLSerializer = le;
            },
            6598: (e, t, i)=>{
                "use strict";
                var s = i(525).freeze;
                t.XML_ENTITIES = s({
                    amp: "&",
                    apos: "'",
                    gt: ">",
                    lt: "<",
                    quot: '"'
                }), t.HTML_ENTITIES = s({
                    Aacute: "\xc1",
                    aacute: "\xe1",
                    Abreve: "\u0102",
                    abreve: "\u0103",
                    ac: "\u223E",
                    acd: "\u223F",
                    acE: "\u223E\u0333",
                    Acirc: "\xc2",
                    acirc: "\xe2",
                    acute: "\xb4",
                    Acy: "\u0410",
                    acy: "\u0430",
                    AElig: "\xc6",
                    aelig: "\xe6",
                    af: "\u2061",
                    Afr: "\uD835\uDD04",
                    afr: "\uD835\uDD1E",
                    Agrave: "\xc0",
                    agrave: "\xe0",
                    alefsym: "\u2135",
                    aleph: "\u2135",
                    Alpha: "\u0391",
                    alpha: "\u03B1",
                    Amacr: "\u0100",
                    amacr: "\u0101",
                    amalg: "\u2A3F",
                    AMP: "&",
                    amp: "&",
                    And: "\u2A53",
                    and: "\u2227",
                    andand: "\u2A55",
                    andd: "\u2A5C",
                    andslope: "\u2A58",
                    andv: "\u2A5A",
                    ang: "\u2220",
                    ange: "\u29A4",
                    angle: "\u2220",
                    angmsd: "\u2221",
                    angmsdaa: "\u29A8",
                    angmsdab: "\u29A9",
                    angmsdac: "\u29AA",
                    angmsdad: "\u29AB",
                    angmsdae: "\u29AC",
                    angmsdaf: "\u29AD",
                    angmsdag: "\u29AE",
                    angmsdah: "\u29AF",
                    angrt: "\u221F",
                    angrtvb: "\u22BE",
                    angrtvbd: "\u299D",
                    angsph: "\u2222",
                    angst: "\xc5",
                    angzarr: "\u237C",
                    Aogon: "\u0104",
                    aogon: "\u0105",
                    Aopf: "\uD835\uDD38",
                    aopf: "\uD835\uDD52",
                    ap: "\u2248",
                    apacir: "\u2A6F",
                    apE: "\u2A70",
                    ape: "\u224A",
                    apid: "\u224B",
                    apos: "'",
                    ApplyFunction: "\u2061",
                    approx: "\u2248",
                    approxeq: "\u224A",
                    Aring: "\xc5",
                    aring: "\xe5",
                    Ascr: "\uD835\uDC9C",
                    ascr: "\uD835\uDCB6",
                    Assign: "\u2254",
                    ast: "*",
                    asymp: "\u2248",
                    asympeq: "\u224D",
                    Atilde: "\xc3",
                    atilde: "\xe3",
                    Auml: "\xc4",
                    auml: "\xe4",
                    awconint: "\u2233",
                    awint: "\u2A11",
                    backcong: "\u224C",
                    backepsilon: "\u03F6",
                    backprime: "\u2035",
                    backsim: "\u223D",
                    backsimeq: "\u22CD",
                    Backslash: "\u2216",
                    Barv: "\u2AE7",
                    barvee: "\u22BD",
                    Barwed: "\u2306",
                    barwed: "\u2305",
                    barwedge: "\u2305",
                    bbrk: "\u23B5",
                    bbrktbrk: "\u23B6",
                    bcong: "\u224C",
                    Bcy: "\u0411",
                    bcy: "\u0431",
                    bdquo: "\u201E",
                    becaus: "\u2235",
                    Because: "\u2235",
                    because: "\u2235",
                    bemptyv: "\u29B0",
                    bepsi: "\u03F6",
                    bernou: "\u212C",
                    Bernoullis: "\u212C",
                    Beta: "\u0392",
                    beta: "\u03B2",
                    beth: "\u2136",
                    between: "\u226C",
                    Bfr: "\uD835\uDD05",
                    bfr: "\uD835\uDD1F",
                    bigcap: "\u22C2",
                    bigcirc: "\u25EF",
                    bigcup: "\u22C3",
                    bigodot: "\u2A00",
                    bigoplus: "\u2A01",
                    bigotimes: "\u2A02",
                    bigsqcup: "\u2A06",
                    bigstar: "\u2605",
                    bigtriangledown: "\u25BD",
                    bigtriangleup: "\u25B3",
                    biguplus: "\u2A04",
                    bigvee: "\u22C1",
                    bigwedge: "\u22C0",
                    bkarow: "\u290D",
                    blacklozenge: "\u29EB",
                    blacksquare: "\u25AA",
                    blacktriangle: "\u25B4",
                    blacktriangledown: "\u25BE",
                    blacktriangleleft: "\u25C2",
                    blacktriangleright: "\u25B8",
                    blank: "\u2423",
                    blk12: "\u2592",
                    blk14: "\u2591",
                    blk34: "\u2593",
                    block: "\u2588",
                    bne: "=\u20E5",
                    bnequiv: "\u2261\u20E5",
                    bNot: "\u2AED",
                    bnot: "\u2310",
                    Bopf: "\uD835\uDD39",
                    bopf: "\uD835\uDD53",
                    bot: "\u22A5",
                    bottom: "\u22A5",
                    bowtie: "\u22C8",
                    boxbox: "\u29C9",
                    boxDL: "\u2557",
                    boxDl: "\u2556",
                    boxdL: "\u2555",
                    boxdl: "\u2510",
                    boxDR: "\u2554",
                    boxDr: "\u2553",
                    boxdR: "\u2552",
                    boxdr: "\u250C",
                    boxH: "\u2550",
                    boxh: "\u2500",
                    boxHD: "\u2566",
                    boxHd: "\u2564",
                    boxhD: "\u2565",
                    boxhd: "\u252C",
                    boxHU: "\u2569",
                    boxHu: "\u2567",
                    boxhU: "\u2568",
                    boxhu: "\u2534",
                    boxminus: "\u229F",
                    boxplus: "\u229E",
                    boxtimes: "\u22A0",
                    boxUL: "\u255D",
                    boxUl: "\u255C",
                    boxuL: "\u255B",
                    boxul: "\u2518",
                    boxUR: "\u255A",
                    boxUr: "\u2559",
                    boxuR: "\u2558",
                    boxur: "\u2514",
                    boxV: "\u2551",
                    boxv: "\u2502",
                    boxVH: "\u256C",
                    boxVh: "\u256B",
                    boxvH: "\u256A",
                    boxvh: "\u253C",
                    boxVL: "\u2563",
                    boxVl: "\u2562",
                    boxvL: "\u2561",
                    boxvl: "\u2524",
                    boxVR: "\u2560",
                    boxVr: "\u255F",
                    boxvR: "\u255E",
                    boxvr: "\u251C",
                    bprime: "\u2035",
                    Breve: "\u02D8",
                    breve: "\u02D8",
                    brvbar: "\xa6",
                    Bscr: "\u212C",
                    bscr: "\uD835\uDCB7",
                    bsemi: "\u204F",
                    bsim: "\u223D",
                    bsime: "\u22CD",
                    bsol: "\\",
                    bsolb: "\u29C5",
                    bsolhsub: "\u27C8",
                    bull: "\u2022",
                    bullet: "\u2022",
                    bump: "\u224E",
                    bumpE: "\u2AAE",
                    bumpe: "\u224F",
                    Bumpeq: "\u224E",
                    bumpeq: "\u224F",
                    Cacute: "\u0106",
                    cacute: "\u0107",
                    Cap: "\u22D2",
                    cap: "\u2229",
                    capand: "\u2A44",
                    capbrcup: "\u2A49",
                    capcap: "\u2A4B",
                    capcup: "\u2A47",
                    capdot: "\u2A40",
                    CapitalDifferentialD: "\u2145",
                    caps: "\u2229\uFE00",
                    caret: "\u2041",
                    caron: "\u02C7",
                    Cayleys: "\u212D",
                    ccaps: "\u2A4D",
                    Ccaron: "\u010C",
                    ccaron: "\u010D",
                    Ccedil: "\xc7",
                    ccedil: "\xe7",
                    Ccirc: "\u0108",
                    ccirc: "\u0109",
                    Cconint: "\u2230",
                    ccups: "\u2A4C",
                    ccupssm: "\u2A50",
                    Cdot: "\u010A",
                    cdot: "\u010B",
                    cedil: "\xb8",
                    Cedilla: "\xb8",
                    cemptyv: "\u29B2",
                    cent: "\xa2",
                    CenterDot: "\xb7",
                    centerdot: "\xb7",
                    Cfr: "\u212D",
                    cfr: "\uD835\uDD20",
                    CHcy: "\u0427",
                    chcy: "\u0447",
                    check: "\u2713",
                    checkmark: "\u2713",
                    Chi: "\u03A7",
                    chi: "\u03C7",
                    cir: "\u25CB",
                    circ: "\u02C6",
                    circeq: "\u2257",
                    circlearrowleft: "\u21BA",
                    circlearrowright: "\u21BB",
                    circledast: "\u229B",
                    circledcirc: "\u229A",
                    circleddash: "\u229D",
                    CircleDot: "\u2299",
                    circledR: "\xae",
                    circledS: "\u24C8",
                    CircleMinus: "\u2296",
                    CirclePlus: "\u2295",
                    CircleTimes: "\u2297",
                    cirE: "\u29C3",
                    cire: "\u2257",
                    cirfnint: "\u2A10",
                    cirmid: "\u2AEF",
                    cirscir: "\u29C2",
                    ClockwiseContourIntegral: "\u2232",
                    CloseCurlyDoubleQuote: "\u201D",
                    CloseCurlyQuote: "\u2019",
                    clubs: "\u2663",
                    clubsuit: "\u2663",
                    Colon: "\u2237",
                    colon: ":",
                    Colone: "\u2A74",
                    colone: "\u2254",
                    coloneq: "\u2254",
                    comma: ",",
                    commat: "@",
                    comp: "\u2201",
                    compfn: "\u2218",
                    complement: "\u2201",
                    complexes: "\u2102",
                    cong: "\u2245",
                    congdot: "\u2A6D",
                    Congruent: "\u2261",
                    Conint: "\u222F",
                    conint: "\u222E",
                    ContourIntegral: "\u222E",
                    Copf: "\u2102",
                    copf: "\uD835\uDD54",
                    coprod: "\u2210",
                    Coproduct: "\u2210",
                    COPY: "\xa9",
                    copy: "\xa9",
                    copysr: "\u2117",
                    CounterClockwiseContourIntegral: "\u2233",
                    crarr: "\u21B5",
                    Cross: "\u2A2F",
                    cross: "\u2717",
                    Cscr: "\uD835\uDC9E",
                    cscr: "\uD835\uDCB8",
                    csub: "\u2ACF",
                    csube: "\u2AD1",
                    csup: "\u2AD0",
                    csupe: "\u2AD2",
                    ctdot: "\u22EF",
                    cudarrl: "\u2938",
                    cudarrr: "\u2935",
                    cuepr: "\u22DE",
                    cuesc: "\u22DF",
                    cularr: "\u21B6",
                    cularrp: "\u293D",
                    Cup: "\u22D3",
                    cup: "\u222A",
                    cupbrcap: "\u2A48",
                    CupCap: "\u224D",
                    cupcap: "\u2A46",
                    cupcup: "\u2A4A",
                    cupdot: "\u228D",
                    cupor: "\u2A45",
                    cups: "\u222A\uFE00",
                    curarr: "\u21B7",
                    curarrm: "\u293C",
                    curlyeqprec: "\u22DE",
                    curlyeqsucc: "\u22DF",
                    curlyvee: "\u22CE",
                    curlywedge: "\u22CF",
                    curren: "\xa4",
                    curvearrowleft: "\u21B6",
                    curvearrowright: "\u21B7",
                    cuvee: "\u22CE",
                    cuwed: "\u22CF",
                    cwconint: "\u2232",
                    cwint: "\u2231",
                    cylcty: "\u232D",
                    Dagger: "\u2021",
                    dagger: "\u2020",
                    daleth: "\u2138",
                    Darr: "\u21A1",
                    dArr: "\u21D3",
                    darr: "\u2193",
                    dash: "\u2010",
                    Dashv: "\u2AE4",
                    dashv: "\u22A3",
                    dbkarow: "\u290F",
                    dblac: "\u02DD",
                    Dcaron: "\u010E",
                    dcaron: "\u010F",
                    Dcy: "\u0414",
                    dcy: "\u0434",
                    DD: "\u2145",
                    dd: "\u2146",
                    ddagger: "\u2021",
                    ddarr: "\u21CA",
                    DDotrahd: "\u2911",
                    ddotseq: "\u2A77",
                    deg: "\xb0",
                    Del: "\u2207",
                    Delta: "\u0394",
                    delta: "\u03B4",
                    demptyv: "\u29B1",
                    dfisht: "\u297F",
                    Dfr: "\uD835\uDD07",
                    dfr: "\uD835\uDD21",
                    dHar: "\u2965",
                    dharl: "\u21C3",
                    dharr: "\u21C2",
                    DiacriticalAcute: "\xb4",
                    DiacriticalDot: "\u02D9",
                    DiacriticalDoubleAcute: "\u02DD",
                    DiacriticalGrave: "`",
                    DiacriticalTilde: "\u02DC",
                    diam: "\u22C4",
                    Diamond: "\u22C4",
                    diamond: "\u22C4",
                    diamondsuit: "\u2666",
                    diams: "\u2666",
                    die: "\xa8",
                    DifferentialD: "\u2146",
                    digamma: "\u03DD",
                    disin: "\u22F2",
                    div: "\xf7",
                    divide: "\xf7",
                    divideontimes: "\u22C7",
                    divonx: "\u22C7",
                    DJcy: "\u0402",
                    djcy: "\u0452",
                    dlcorn: "\u231E",
                    dlcrop: "\u230D",
                    dollar: "$",
                    Dopf: "\uD835\uDD3B",
                    dopf: "\uD835\uDD55",
                    Dot: "\xa8",
                    dot: "\u02D9",
                    DotDot: "\u20DC",
                    doteq: "\u2250",
                    doteqdot: "\u2251",
                    DotEqual: "\u2250",
                    dotminus: "\u2238",
                    dotplus: "\u2214",
                    dotsquare: "\u22A1",
                    doublebarwedge: "\u2306",
                    DoubleContourIntegral: "\u222F",
                    DoubleDot: "\xa8",
                    DoubleDownArrow: "\u21D3",
                    DoubleLeftArrow: "\u21D0",
                    DoubleLeftRightArrow: "\u21D4",
                    DoubleLeftTee: "\u2AE4",
                    DoubleLongLeftArrow: "\u27F8",
                    DoubleLongLeftRightArrow: "\u27FA",
                    DoubleLongRightArrow: "\u27F9",
                    DoubleRightArrow: "\u21D2",
                    DoubleRightTee: "\u22A8",
                    DoubleUpArrow: "\u21D1",
                    DoubleUpDownArrow: "\u21D5",
                    DoubleVerticalBar: "\u2225",
                    DownArrow: "\u2193",
                    Downarrow: "\u21D3",
                    downarrow: "\u2193",
                    DownArrowBar: "\u2913",
                    DownArrowUpArrow: "\u21F5",
                    DownBreve: "\u0311",
                    downdownarrows: "\u21CA",
                    downharpoonleft: "\u21C3",
                    downharpoonright: "\u21C2",
                    DownLeftRightVector: "\u2950",
                    DownLeftTeeVector: "\u295E",
                    DownLeftVector: "\u21BD",
                    DownLeftVectorBar: "\u2956",
                    DownRightTeeVector: "\u295F",
                    DownRightVector: "\u21C1",
                    DownRightVectorBar: "\u2957",
                    DownTee: "\u22A4",
                    DownTeeArrow: "\u21A7",
                    drbkarow: "\u2910",
                    drcorn: "\u231F",
                    drcrop: "\u230C",
                    Dscr: "\uD835\uDC9F",
                    dscr: "\uD835\uDCB9",
                    DScy: "\u0405",
                    dscy: "\u0455",
                    dsol: "\u29F6",
                    Dstrok: "\u0110",
                    dstrok: "\u0111",
                    dtdot: "\u22F1",
                    dtri: "\u25BF",
                    dtrif: "\u25BE",
                    duarr: "\u21F5",
                    duhar: "\u296F",
                    dwangle: "\u29A6",
                    DZcy: "\u040F",
                    dzcy: "\u045F",
                    dzigrarr: "\u27FF",
                    Eacute: "\xc9",
                    eacute: "\xe9",
                    easter: "\u2A6E",
                    Ecaron: "\u011A",
                    ecaron: "\u011B",
                    ecir: "\u2256",
                    Ecirc: "\xca",
                    ecirc: "\xea",
                    ecolon: "\u2255",
                    Ecy: "\u042D",
                    ecy: "\u044D",
                    eDDot: "\u2A77",
                    Edot: "\u0116",
                    eDot: "\u2251",
                    edot: "\u0117",
                    ee: "\u2147",
                    efDot: "\u2252",
                    Efr: "\uD835\uDD08",
                    efr: "\uD835\uDD22",
                    eg: "\u2A9A",
                    Egrave: "\xc8",
                    egrave: "\xe8",
                    egs: "\u2A96",
                    egsdot: "\u2A98",
                    el: "\u2A99",
                    Element: "\u2208",
                    elinters: "\u23E7",
                    ell: "\u2113",
                    els: "\u2A95",
                    elsdot: "\u2A97",
                    Emacr: "\u0112",
                    emacr: "\u0113",
                    empty: "\u2205",
                    emptyset: "\u2205",
                    EmptySmallSquare: "\u25FB",
                    emptyv: "\u2205",
                    EmptyVerySmallSquare: "\u25AB",
                    emsp: "\u2003",
                    emsp13: "\u2004",
                    emsp14: "\u2005",
                    ENG: "\u014A",
                    eng: "\u014B",
                    ensp: "\u2002",
                    Eogon: "\u0118",
                    eogon: "\u0119",
                    Eopf: "\uD835\uDD3C",
                    eopf: "\uD835\uDD56",
                    epar: "\u22D5",
                    eparsl: "\u29E3",
                    eplus: "\u2A71",
                    epsi: "\u03B5",
                    Epsilon: "\u0395",
                    epsilon: "\u03B5",
                    epsiv: "\u03F5",
                    eqcirc: "\u2256",
                    eqcolon: "\u2255",
                    eqsim: "\u2242",
                    eqslantgtr: "\u2A96",
                    eqslantless: "\u2A95",
                    Equal: "\u2A75",
                    equals: "=",
                    EqualTilde: "\u2242",
                    equest: "\u225F",
                    Equilibrium: "\u21CC",
                    equiv: "\u2261",
                    equivDD: "\u2A78",
                    eqvparsl: "\u29E5",
                    erarr: "\u2971",
                    erDot: "\u2253",
                    Escr: "\u2130",
                    escr: "\u212F",
                    esdot: "\u2250",
                    Esim: "\u2A73",
                    esim: "\u2242",
                    Eta: "\u0397",
                    eta: "\u03B7",
                    ETH: "\xd0",
                    eth: "\xf0",
                    Euml: "\xcb",
                    euml: "\xeb",
                    euro: "\u20AC",
                    excl: "!",
                    exist: "\u2203",
                    Exists: "\u2203",
                    expectation: "\u2130",
                    ExponentialE: "\u2147",
                    exponentiale: "\u2147",
                    fallingdotseq: "\u2252",
                    Fcy: "\u0424",
                    fcy: "\u0444",
                    female: "\u2640",
                    ffilig: "\uFB03",
                    fflig: "\uFB00",
                    ffllig: "\uFB04",
                    Ffr: "\uD835\uDD09",
                    ffr: "\uD835\uDD23",
                    filig: "\uFB01",
                    FilledSmallSquare: "\u25FC",
                    FilledVerySmallSquare: "\u25AA",
                    fjlig: "fj",
                    flat: "\u266D",
                    fllig: "\uFB02",
                    fltns: "\u25B1",
                    fnof: "\u0192",
                    Fopf: "\uD835\uDD3D",
                    fopf: "\uD835\uDD57",
                    ForAll: "\u2200",
                    forall: "\u2200",
                    fork: "\u22D4",
                    forkv: "\u2AD9",
                    Fouriertrf: "\u2131",
                    fpartint: "\u2A0D",
                    frac12: "\xbd",
                    frac13: "\u2153",
                    frac14: "\xbc",
                    frac15: "\u2155",
                    frac16: "\u2159",
                    frac18: "\u215B",
                    frac23: "\u2154",
                    frac25: "\u2156",
                    frac34: "\xbe",
                    frac35: "\u2157",
                    frac38: "\u215C",
                    frac45: "\u2158",
                    frac56: "\u215A",
                    frac58: "\u215D",
                    frac78: "\u215E",
                    frasl: "\u2044",
                    frown: "\u2322",
                    Fscr: "\u2131",
                    fscr: "\uD835\uDCBB",
                    gacute: "\u01F5",
                    Gamma: "\u0393",
                    gamma: "\u03B3",
                    Gammad: "\u03DC",
                    gammad: "\u03DD",
                    gap: "\u2A86",
                    Gbreve: "\u011E",
                    gbreve: "\u011F",
                    Gcedil: "\u0122",
                    Gcirc: "\u011C",
                    gcirc: "\u011D",
                    Gcy: "\u0413",
                    gcy: "\u0433",
                    Gdot: "\u0120",
                    gdot: "\u0121",
                    gE: "\u2267",
                    ge: "\u2265",
                    gEl: "\u2A8C",
                    gel: "\u22DB",
                    geq: "\u2265",
                    geqq: "\u2267",
                    geqslant: "\u2A7E",
                    ges: "\u2A7E",
                    gescc: "\u2AA9",
                    gesdot: "\u2A80",
                    gesdoto: "\u2A82",
                    gesdotol: "\u2A84",
                    gesl: "\u22DB\uFE00",
                    gesles: "\u2A94",
                    Gfr: "\uD835\uDD0A",
                    gfr: "\uD835\uDD24",
                    Gg: "\u22D9",
                    gg: "\u226B",
                    ggg: "\u22D9",
                    gimel: "\u2137",
                    GJcy: "\u0403",
                    gjcy: "\u0453",
                    gl: "\u2277",
                    gla: "\u2AA5",
                    glE: "\u2A92",
                    glj: "\u2AA4",
                    gnap: "\u2A8A",
                    gnapprox: "\u2A8A",
                    gnE: "\u2269",
                    gne: "\u2A88",
                    gneq: "\u2A88",
                    gneqq: "\u2269",
                    gnsim: "\u22E7",
                    Gopf: "\uD835\uDD3E",
                    gopf: "\uD835\uDD58",
                    grave: "`",
                    GreaterEqual: "\u2265",
                    GreaterEqualLess: "\u22DB",
                    GreaterFullEqual: "\u2267",
                    GreaterGreater: "\u2AA2",
                    GreaterLess: "\u2277",
                    GreaterSlantEqual: "\u2A7E",
                    GreaterTilde: "\u2273",
                    Gscr: "\uD835\uDCA2",
                    gscr: "\u210A",
                    gsim: "\u2273",
                    gsime: "\u2A8E",
                    gsiml: "\u2A90",
                    Gt: "\u226B",
                    GT: ">",
                    gt: ">",
                    gtcc: "\u2AA7",
                    gtcir: "\u2A7A",
                    gtdot: "\u22D7",
                    gtlPar: "\u2995",
                    gtquest: "\u2A7C",
                    gtrapprox: "\u2A86",
                    gtrarr: "\u2978",
                    gtrdot: "\u22D7",
                    gtreqless: "\u22DB",
                    gtreqqless: "\u2A8C",
                    gtrless: "\u2277",
                    gtrsim: "\u2273",
                    gvertneqq: "\u2269\uFE00",
                    gvnE: "\u2269\uFE00",
                    Hacek: "\u02C7",
                    hairsp: "\u200A",
                    half: "\xbd",
                    hamilt: "\u210B",
                    HARDcy: "\u042A",
                    hardcy: "\u044A",
                    hArr: "\u21D4",
                    harr: "\u2194",
                    harrcir: "\u2948",
                    harrw: "\u21AD",
                    Hat: "^",
                    hbar: "\u210F",
                    Hcirc: "\u0124",
                    hcirc: "\u0125",
                    hearts: "\u2665",
                    heartsuit: "\u2665",
                    hellip: "\u2026",
                    hercon: "\u22B9",
                    Hfr: "\u210C",
                    hfr: "\uD835\uDD25",
                    HilbertSpace: "\u210B",
                    hksearow: "\u2925",
                    hkswarow: "\u2926",
                    hoarr: "\u21FF",
                    homtht: "\u223B",
                    hookleftarrow: "\u21A9",
                    hookrightarrow: "\u21AA",
                    Hopf: "\u210D",
                    hopf: "\uD835\uDD59",
                    horbar: "\u2015",
                    HorizontalLine: "\u2500",
                    Hscr: "\u210B",
                    hscr: "\uD835\uDCBD",
                    hslash: "\u210F",
                    Hstrok: "\u0126",
                    hstrok: "\u0127",
                    HumpDownHump: "\u224E",
                    HumpEqual: "\u224F",
                    hybull: "\u2043",
                    hyphen: "\u2010",
                    Iacute: "\xcd",
                    iacute: "\xed",
                    ic: "\u2063",
                    Icirc: "\xce",
                    icirc: "\xee",
                    Icy: "\u0418",
                    icy: "\u0438",
                    Idot: "\u0130",
                    IEcy: "\u0415",
                    iecy: "\u0435",
                    iexcl: "\xa1",
                    iff: "\u21D4",
                    Ifr: "\u2111",
                    ifr: "\uD835\uDD26",
                    Igrave: "\xcc",
                    igrave: "\xec",
                    ii: "\u2148",
                    iiiint: "\u2A0C",
                    iiint: "\u222D",
                    iinfin: "\u29DC",
                    iiota: "\u2129",
                    IJlig: "\u0132",
                    ijlig: "\u0133",
                    Im: "\u2111",
                    Imacr: "\u012A",
                    imacr: "\u012B",
                    image: "\u2111",
                    ImaginaryI: "\u2148",
                    imagline: "\u2110",
                    imagpart: "\u2111",
                    imath: "\u0131",
                    imof: "\u22B7",
                    imped: "\u01B5",
                    Implies: "\u21D2",
                    in: "\u2208",
                    incare: "\u2105",
                    infin: "\u221E",
                    infintie: "\u29DD",
                    inodot: "\u0131",
                    Int: "\u222C",
                    int: "\u222B",
                    intcal: "\u22BA",
                    integers: "\u2124",
                    Integral: "\u222B",
                    intercal: "\u22BA",
                    Intersection: "\u22C2",
                    intlarhk: "\u2A17",
                    intprod: "\u2A3C",
                    InvisibleComma: "\u2063",
                    InvisibleTimes: "\u2062",
                    IOcy: "\u0401",
                    iocy: "\u0451",
                    Iogon: "\u012E",
                    iogon: "\u012F",
                    Iopf: "\uD835\uDD40",
                    iopf: "\uD835\uDD5A",
                    Iota: "\u0399",
                    iota: "\u03B9",
                    iprod: "\u2A3C",
                    iquest: "\xbf",
                    Iscr: "\u2110",
                    iscr: "\uD835\uDCBE",
                    isin: "\u2208",
                    isindot: "\u22F5",
                    isinE: "\u22F9",
                    isins: "\u22F4",
                    isinsv: "\u22F3",
                    isinv: "\u2208",
                    it: "\u2062",
                    Itilde: "\u0128",
                    itilde: "\u0129",
                    Iukcy: "\u0406",
                    iukcy: "\u0456",
                    Iuml: "\xcf",
                    iuml: "\xef",
                    Jcirc: "\u0134",
                    jcirc: "\u0135",
                    Jcy: "\u0419",
                    jcy: "\u0439",
                    Jfr: "\uD835\uDD0D",
                    jfr: "\uD835\uDD27",
                    jmath: "\u0237",
                    Jopf: "\uD835\uDD41",
                    jopf: "\uD835\uDD5B",
                    Jscr: "\uD835\uDCA5",
                    jscr: "\uD835\uDCBF",
                    Jsercy: "\u0408",
                    jsercy: "\u0458",
                    Jukcy: "\u0404",
                    jukcy: "\u0454",
                    Kappa: "\u039A",
                    kappa: "\u03BA",
                    kappav: "\u03F0",
                    Kcedil: "\u0136",
                    kcedil: "\u0137",
                    Kcy: "\u041A",
                    kcy: "\u043A",
                    Kfr: "\uD835\uDD0E",
                    kfr: "\uD835\uDD28",
                    kgreen: "\u0138",
                    KHcy: "\u0425",
                    khcy: "\u0445",
                    KJcy: "\u040C",
                    kjcy: "\u045C",
                    Kopf: "\uD835\uDD42",
                    kopf: "\uD835\uDD5C",
                    Kscr: "\uD835\uDCA6",
                    kscr: "\uD835\uDCC0",
                    lAarr: "\u21DA",
                    Lacute: "\u0139",
                    lacute: "\u013A",
                    laemptyv: "\u29B4",
                    lagran: "\u2112",
                    Lambda: "\u039B",
                    lambda: "\u03BB",
                    Lang: "\u27EA",
                    lang: "\u27E8",
                    langd: "\u2991",
                    langle: "\u27E8",
                    lap: "\u2A85",
                    Laplacetrf: "\u2112",
                    laquo: "\xab",
                    Larr: "\u219E",
                    lArr: "\u21D0",
                    larr: "\u2190",
                    larrb: "\u21E4",
                    larrbfs: "\u291F",
                    larrfs: "\u291D",
                    larrhk: "\u21A9",
                    larrlp: "\u21AB",
                    larrpl: "\u2939",
                    larrsim: "\u2973",
                    larrtl: "\u21A2",
                    lat: "\u2AAB",
                    lAtail: "\u291B",
                    latail: "\u2919",
                    late: "\u2AAD",
                    lates: "\u2AAD\uFE00",
                    lBarr: "\u290E",
                    lbarr: "\u290C",
                    lbbrk: "\u2772",
                    lbrace: "{",
                    lbrack: "[",
                    lbrke: "\u298B",
                    lbrksld: "\u298F",
                    lbrkslu: "\u298D",
                    Lcaron: "\u013D",
                    lcaron: "\u013E",
                    Lcedil: "\u013B",
                    lcedil: "\u013C",
                    lceil: "\u2308",
                    lcub: "{",
                    Lcy: "\u041B",
                    lcy: "\u043B",
                    ldca: "\u2936",
                    ldquo: "\u201C",
                    ldquor: "\u201E",
                    ldrdhar: "\u2967",
                    ldrushar: "\u294B",
                    ldsh: "\u21B2",
                    lE: "\u2266",
                    le: "\u2264",
                    LeftAngleBracket: "\u27E8",
                    LeftArrow: "\u2190",
                    Leftarrow: "\u21D0",
                    leftarrow: "\u2190",
                    LeftArrowBar: "\u21E4",
                    LeftArrowRightArrow: "\u21C6",
                    leftarrowtail: "\u21A2",
                    LeftCeiling: "\u2308",
                    LeftDoubleBracket: "\u27E6",
                    LeftDownTeeVector: "\u2961",
                    LeftDownVector: "\u21C3",
                    LeftDownVectorBar: "\u2959",
                    LeftFloor: "\u230A",
                    leftharpoondown: "\u21BD",
                    leftharpoonup: "\u21BC",
                    leftleftarrows: "\u21C7",
                    LeftRightArrow: "\u2194",
                    Leftrightarrow: "\u21D4",
                    leftrightarrow: "\u2194",
                    leftrightarrows: "\u21C6",
                    leftrightharpoons: "\u21CB",
                    leftrightsquigarrow: "\u21AD",
                    LeftRightVector: "\u294E",
                    LeftTee: "\u22A3",
                    LeftTeeArrow: "\u21A4",
                    LeftTeeVector: "\u295A",
                    leftthreetimes: "\u22CB",
                    LeftTriangle: "\u22B2",
                    LeftTriangleBar: "\u29CF",
                    LeftTriangleEqual: "\u22B4",
                    LeftUpDownVector: "\u2951",
                    LeftUpTeeVector: "\u2960",
                    LeftUpVector: "\u21BF",
                    LeftUpVectorBar: "\u2958",
                    LeftVector: "\u21BC",
                    LeftVectorBar: "\u2952",
                    lEg: "\u2A8B",
                    leg: "\u22DA",
                    leq: "\u2264",
                    leqq: "\u2266",
                    leqslant: "\u2A7D",
                    les: "\u2A7D",
                    lescc: "\u2AA8",
                    lesdot: "\u2A7F",
                    lesdoto: "\u2A81",
                    lesdotor: "\u2A83",
                    lesg: "\u22DA\uFE00",
                    lesges: "\u2A93",
                    lessapprox: "\u2A85",
                    lessdot: "\u22D6",
                    lesseqgtr: "\u22DA",
                    lesseqqgtr: "\u2A8B",
                    LessEqualGreater: "\u22DA",
                    LessFullEqual: "\u2266",
                    LessGreater: "\u2276",
                    lessgtr: "\u2276",
                    LessLess: "\u2AA1",
                    lesssim: "\u2272",
                    LessSlantEqual: "\u2A7D",
                    LessTilde: "\u2272",
                    lfisht: "\u297C",
                    lfloor: "\u230A",
                    Lfr: "\uD835\uDD0F",
                    lfr: "\uD835\uDD29",
                    lg: "\u2276",
                    lgE: "\u2A91",
                    lHar: "\u2962",
                    lhard: "\u21BD",
                    lharu: "\u21BC",
                    lharul: "\u296A",
                    lhblk: "\u2584",
                    LJcy: "\u0409",
                    ljcy: "\u0459",
                    Ll: "\u22D8",
                    ll: "\u226A",
                    llarr: "\u21C7",
                    llcorner: "\u231E",
                    Lleftarrow: "\u21DA",
                    llhard: "\u296B",
                    lltri: "\u25FA",
                    Lmidot: "\u013F",
                    lmidot: "\u0140",
                    lmoust: "\u23B0",
                    lmoustache: "\u23B0",
                    lnap: "\u2A89",
                    lnapprox: "\u2A89",
                    lnE: "\u2268",
                    lne: "\u2A87",
                    lneq: "\u2A87",
                    lneqq: "\u2268",
                    lnsim: "\u22E6",
                    loang: "\u27EC",
                    loarr: "\u21FD",
                    lobrk: "\u27E6",
                    LongLeftArrow: "\u27F5",
                    Longleftarrow: "\u27F8",
                    longleftarrow: "\u27F5",
                    LongLeftRightArrow: "\u27F7",
                    Longleftrightarrow: "\u27FA",
                    longleftrightarrow: "\u27F7",
                    longmapsto: "\u27FC",
                    LongRightArrow: "\u27F6",
                    Longrightarrow: "\u27F9",
                    longrightarrow: "\u27F6",
                    looparrowleft: "\u21AB",
                    looparrowright: "\u21AC",
                    lopar: "\u2985",
                    Lopf: "\uD835\uDD43",
                    lopf: "\uD835\uDD5D",
                    loplus: "\u2A2D",
                    lotimes: "\u2A34",
                    lowast: "\u2217",
                    lowbar: "_",
                    LowerLeftArrow: "\u2199",
                    LowerRightArrow: "\u2198",
                    loz: "\u25CA",
                    lozenge: "\u25CA",
                    lozf: "\u29EB",
                    lpar: "(",
                    lparlt: "\u2993",
                    lrarr: "\u21C6",
                    lrcorner: "\u231F",
                    lrhar: "\u21CB",
                    lrhard: "\u296D",
                    lrm: "\u200E",
                    lrtri: "\u22BF",
                    lsaquo: "\u2039",
                    Lscr: "\u2112",
                    lscr: "\uD835\uDCC1",
                    Lsh: "\u21B0",
                    lsh: "\u21B0",
                    lsim: "\u2272",
                    lsime: "\u2A8D",
                    lsimg: "\u2A8F",
                    lsqb: "[",
                    lsquo: "\u2018",
                    lsquor: "\u201A",
                    Lstrok: "\u0141",
                    lstrok: "\u0142",
                    Lt: "\u226A",
                    LT: "<",
                    lt: "<",
                    ltcc: "\u2AA6",
                    ltcir: "\u2A79",
                    ltdot: "\u22D6",
                    lthree: "\u22CB",
                    ltimes: "\u22C9",
                    ltlarr: "\u2976",
                    ltquest: "\u2A7B",
                    ltri: "\u25C3",
                    ltrie: "\u22B4",
                    ltrif: "\u25C2",
                    ltrPar: "\u2996",
                    lurdshar: "\u294A",
                    luruhar: "\u2966",
                    lvertneqq: "\u2268\uFE00",
                    lvnE: "\u2268\uFE00",
                    macr: "\xaf",
                    male: "\u2642",
                    malt: "\u2720",
                    maltese: "\u2720",
                    Map: "\u2905",
                    map: "\u21A6",
                    mapsto: "\u21A6",
                    mapstodown: "\u21A7",
                    mapstoleft: "\u21A4",
                    mapstoup: "\u21A5",
                    marker: "\u25AE",
                    mcomma: "\u2A29",
                    Mcy: "\u041C",
                    mcy: "\u043C",
                    mdash: "\u2014",
                    mDDot: "\u223A",
                    measuredangle: "\u2221",
                    MediumSpace: "\u205F",
                    Mellintrf: "\u2133",
                    Mfr: "\uD835\uDD10",
                    mfr: "\uD835\uDD2A",
                    mho: "\u2127",
                    micro: "\xb5",
                    mid: "\u2223",
                    midast: "*",
                    midcir: "\u2AF0",
                    middot: "\xb7",
                    minus: "\u2212",
                    minusb: "\u229F",
                    minusd: "\u2238",
                    minusdu: "\u2A2A",
                    MinusPlus: "\u2213",
                    mlcp: "\u2ADB",
                    mldr: "\u2026",
                    mnplus: "\u2213",
                    models: "\u22A7",
                    Mopf: "\uD835\uDD44",
                    mopf: "\uD835\uDD5E",
                    mp: "\u2213",
                    Mscr: "\u2133",
                    mscr: "\uD835\uDCC2",
                    mstpos: "\u223E",
                    Mu: "\u039C",
                    mu: "\u03BC",
                    multimap: "\u22B8",
                    mumap: "\u22B8",
                    nabla: "\u2207",
                    Nacute: "\u0143",
                    nacute: "\u0144",
                    nang: "\u2220\u20D2",
                    nap: "\u2249",
                    napE: "\u2A70\u0338",
                    napid: "\u224B\u0338",
                    napos: "\u0149",
                    napprox: "\u2249",
                    natur: "\u266E",
                    natural: "\u266E",
                    naturals: "\u2115",
                    nbsp: "\xa0",
                    nbump: "\u224E\u0338",
                    nbumpe: "\u224F\u0338",
                    ncap: "\u2A43",
                    Ncaron: "\u0147",
                    ncaron: "\u0148",
                    Ncedil: "\u0145",
                    ncedil: "\u0146",
                    ncong: "\u2247",
                    ncongdot: "\u2A6D\u0338",
                    ncup: "\u2A42",
                    Ncy: "\u041D",
                    ncy: "\u043D",
                    ndash: "\u2013",
                    ne: "\u2260",
                    nearhk: "\u2924",
                    neArr: "\u21D7",
                    nearr: "\u2197",
                    nearrow: "\u2197",
                    nedot: "\u2250\u0338",
                    NegativeMediumSpace: "\u200B",
                    NegativeThickSpace: "\u200B",
                    NegativeThinSpace: "\u200B",
                    NegativeVeryThinSpace: "\u200B",
                    nequiv: "\u2262",
                    nesear: "\u2928",
                    nesim: "\u2242\u0338",
                    NestedGreaterGreater: "\u226B",
                    NestedLessLess: "\u226A",
                    NewLine: "\n",
                    nexist: "\u2204",
                    nexists: "\u2204",
                    Nfr: "\uD835\uDD11",
                    nfr: "\uD835\uDD2B",
                    ngE: "\u2267\u0338",
                    nge: "\u2271",
                    ngeq: "\u2271",
                    ngeqq: "\u2267\u0338",
                    ngeqslant: "\u2A7E\u0338",
                    nges: "\u2A7E\u0338",
                    nGg: "\u22D9\u0338",
                    ngsim: "\u2275",
                    nGt: "\u226B\u20D2",
                    ngt: "\u226F",
                    ngtr: "\u226F",
                    nGtv: "\u226B\u0338",
                    nhArr: "\u21CE",
                    nharr: "\u21AE",
                    nhpar: "\u2AF2",
                    ni: "\u220B",
                    nis: "\u22FC",
                    nisd: "\u22FA",
                    niv: "\u220B",
                    NJcy: "\u040A",
                    njcy: "\u045A",
                    nlArr: "\u21CD",
                    nlarr: "\u219A",
                    nldr: "\u2025",
                    nlE: "\u2266\u0338",
                    nle: "\u2270",
                    nLeftarrow: "\u21CD",
                    nleftarrow: "\u219A",
                    nLeftrightarrow: "\u21CE",
                    nleftrightarrow: "\u21AE",
                    nleq: "\u2270",
                    nleqq: "\u2266\u0338",
                    nleqslant: "\u2A7D\u0338",
                    nles: "\u2A7D\u0338",
                    nless: "\u226E",
                    nLl: "\u22D8\u0338",
                    nlsim: "\u2274",
                    nLt: "\u226A\u20D2",
                    nlt: "\u226E",
                    nltri: "\u22EA",
                    nltrie: "\u22EC",
                    nLtv: "\u226A\u0338",
                    nmid: "\u2224",
                    NoBreak: "\u2060",
                    NonBreakingSpace: "\xa0",
                    Nopf: "\u2115",
                    nopf: "\uD835\uDD5F",
                    Not: "\u2AEC",
                    not: "\xac",
                    NotCongruent: "\u2262",
                    NotCupCap: "\u226D",
                    NotDoubleVerticalBar: "\u2226",
                    NotElement: "\u2209",
                    NotEqual: "\u2260",
                    NotEqualTilde: "\u2242\u0338",
                    NotExists: "\u2204",
                    NotGreater: "\u226F",
                    NotGreaterEqual: "\u2271",
                    NotGreaterFullEqual: "\u2267\u0338",
                    NotGreaterGreater: "\u226B\u0338",
                    NotGreaterLess: "\u2279",
                    NotGreaterSlantEqual: "\u2A7E\u0338",
                    NotGreaterTilde: "\u2275",
                    NotHumpDownHump: "\u224E\u0338",
                    NotHumpEqual: "\u224F\u0338",
                    notin: "\u2209",
                    notindot: "\u22F5\u0338",
                    notinE: "\u22F9\u0338",
                    notinva: "\u2209",
                    notinvb: "\u22F7",
                    notinvc: "\u22F6",
                    NotLeftTriangle: "\u22EA",
                    NotLeftTriangleBar: "\u29CF\u0338",
                    NotLeftTriangleEqual: "\u22EC",
                    NotLess: "\u226E",
                    NotLessEqual: "\u2270",
                    NotLessGreater: "\u2278",
                    NotLessLess: "\u226A\u0338",
                    NotLessSlantEqual: "\u2A7D\u0338",
                    NotLessTilde: "\u2274",
                    NotNestedGreaterGreater: "\u2AA2\u0338",
                    NotNestedLessLess: "\u2AA1\u0338",
                    notni: "\u220C",
                    notniva: "\u220C",
                    notnivb: "\u22FE",
                    notnivc: "\u22FD",
                    NotPrecedes: "\u2280",
                    NotPrecedesEqual: "\u2AAF\u0338",
                    NotPrecedesSlantEqual: "\u22E0",
                    NotReverseElement: "\u220C",
                    NotRightTriangle: "\u22EB",
                    NotRightTriangleBar: "\u29D0\u0338",
                    NotRightTriangleEqual: "\u22ED",
                    NotSquareSubset: "\u228F\u0338",
                    NotSquareSubsetEqual: "\u22E2",
                    NotSquareSuperset: "\u2290\u0338",
                    NotSquareSupersetEqual: "\u22E3",
                    NotSubset: "\u2282\u20D2",
                    NotSubsetEqual: "\u2288",
                    NotSucceeds: "\u2281",
                    NotSucceedsEqual: "\u2AB0\u0338",
                    NotSucceedsSlantEqual: "\u22E1",
                    NotSucceedsTilde: "\u227F\u0338",
                    NotSuperset: "\u2283\u20D2",
                    NotSupersetEqual: "\u2289",
                    NotTilde: "\u2241",
                    NotTildeEqual: "\u2244",
                    NotTildeFullEqual: "\u2247",
                    NotTildeTilde: "\u2249",
                    NotVerticalBar: "\u2224",
                    npar: "\u2226",
                    nparallel: "\u2226",
                    nparsl: "\u2AFD\u20E5",
                    npart: "\u2202\u0338",
                    npolint: "\u2A14",
                    npr: "\u2280",
                    nprcue: "\u22E0",
                    npre: "\u2AAF\u0338",
                    nprec: "\u2280",
                    npreceq: "\u2AAF\u0338",
                    nrArr: "\u21CF",
                    nrarr: "\u219B",
                    nrarrc: "\u2933\u0338",
                    nrarrw: "\u219D\u0338",
                    nRightarrow: "\u21CF",
                    nrightarrow: "\u219B",
                    nrtri: "\u22EB",
                    nrtrie: "\u22ED",
                    nsc: "\u2281",
                    nsccue: "\u22E1",
                    nsce: "\u2AB0\u0338",
                    Nscr: "\uD835\uDCA9",
                    nscr: "\uD835\uDCC3",
                    nshortmid: "\u2224",
                    nshortparallel: "\u2226",
                    nsim: "\u2241",
                    nsime: "\u2244",
                    nsimeq: "\u2244",
                    nsmid: "\u2224",
                    nspar: "\u2226",
                    nsqsube: "\u22E2",
                    nsqsupe: "\u22E3",
                    nsub: "\u2284",
                    nsubE: "\u2AC5\u0338",
                    nsube: "\u2288",
                    nsubset: "\u2282\u20D2",
                    nsubseteq: "\u2288",
                    nsubseteqq: "\u2AC5\u0338",
                    nsucc: "\u2281",
                    nsucceq: "\u2AB0\u0338",
                    nsup: "\u2285",
                    nsupE: "\u2AC6\u0338",
                    nsupe: "\u2289",
                    nsupset: "\u2283\u20D2",
                    nsupseteq: "\u2289",
                    nsupseteqq: "\u2AC6\u0338",
                    ntgl: "\u2279",
                    Ntilde: "\xd1",
                    ntilde: "\xf1",
                    ntlg: "\u2278",
                    ntriangleleft: "\u22EA",
                    ntrianglelefteq: "\u22EC",
                    ntriangleright: "\u22EB",
                    ntrianglerighteq: "\u22ED",
                    Nu: "\u039D",
                    nu: "\u03BD",
                    num: "#",
                    numero: "\u2116",
                    numsp: "\u2007",
                    nvap: "\u224D\u20D2",
                    nVDash: "\u22AF",
                    nVdash: "\u22AE",
                    nvDash: "\u22AD",
                    nvdash: "\u22AC",
                    nvge: "\u2265\u20D2",
                    nvgt: ">\u20D2",
                    nvHarr: "\u2904",
                    nvinfin: "\u29DE",
                    nvlArr: "\u2902",
                    nvle: "\u2264\u20D2",
                    nvlt: "<\u20D2",
                    nvltrie: "\u22B4\u20D2",
                    nvrArr: "\u2903",
                    nvrtrie: "\u22B5\u20D2",
                    nvsim: "\u223C\u20D2",
                    nwarhk: "\u2923",
                    nwArr: "\u21D6",
                    nwarr: "\u2196",
                    nwarrow: "\u2196",
                    nwnear: "\u2927",
                    Oacute: "\xd3",
                    oacute: "\xf3",
                    oast: "\u229B",
                    ocir: "\u229A",
                    Ocirc: "\xd4",
                    ocirc: "\xf4",
                    Ocy: "\u041E",
                    ocy: "\u043E",
                    odash: "\u229D",
                    Odblac: "\u0150",
                    odblac: "\u0151",
                    odiv: "\u2A38",
                    odot: "\u2299",
                    odsold: "\u29BC",
                    OElig: "\u0152",
                    oelig: "\u0153",
                    ofcir: "\u29BF",
                    Ofr: "\uD835\uDD12",
                    ofr: "\uD835\uDD2C",
                    ogon: "\u02DB",
                    Ograve: "\xd2",
                    ograve: "\xf2",
                    ogt: "\u29C1",
                    ohbar: "\u29B5",
                    ohm: "\u03A9",
                    oint: "\u222E",
                    olarr: "\u21BA",
                    olcir: "\u29BE",
                    olcross: "\u29BB",
                    oline: "\u203E",
                    olt: "\u29C0",
                    Omacr: "\u014C",
                    omacr: "\u014D",
                    Omega: "\u03A9",
                    omega: "\u03C9",
                    Omicron: "\u039F",
                    omicron: "\u03BF",
                    omid: "\u29B6",
                    ominus: "\u2296",
                    Oopf: "\uD835\uDD46",
                    oopf: "\uD835\uDD60",
                    opar: "\u29B7",
                    OpenCurlyDoubleQuote: "\u201C",
                    OpenCurlyQuote: "\u2018",
                    operp: "\u29B9",
                    oplus: "\u2295",
                    Or: "\u2A54",
                    or: "\u2228",
                    orarr: "\u21BB",
                    ord: "\u2A5D",
                    order: "\u2134",
                    orderof: "\u2134",
                    ordf: "\xaa",
                    ordm: "\xba",
                    origof: "\u22B6",
                    oror: "\u2A56",
                    orslope: "\u2A57",
                    orv: "\u2A5B",
                    oS: "\u24C8",
                    Oscr: "\uD835\uDCAA",
                    oscr: "\u2134",
                    Oslash: "\xd8",
                    oslash: "\xf8",
                    osol: "\u2298",
                    Otilde: "\xd5",
                    otilde: "\xf5",
                    Otimes: "\u2A37",
                    otimes: "\u2297",
                    otimesas: "\u2A36",
                    Ouml: "\xd6",
                    ouml: "\xf6",
                    ovbar: "\u233D",
                    OverBar: "\u203E",
                    OverBrace: "\u23DE",
                    OverBracket: "\u23B4",
                    OverParenthesis: "\u23DC",
                    par: "\u2225",
                    para: "\xb6",
                    parallel: "\u2225",
                    parsim: "\u2AF3",
                    parsl: "\u2AFD",
                    part: "\u2202",
                    PartialD: "\u2202",
                    Pcy: "\u041F",
                    pcy: "\u043F",
                    percnt: "%",
                    period: ".",
                    permil: "\u2030",
                    perp: "\u22A5",
                    pertenk: "\u2031",
                    Pfr: "\uD835\uDD13",
                    pfr: "\uD835\uDD2D",
                    Phi: "\u03A6",
                    phi: "\u03C6",
                    phiv: "\u03D5",
                    phmmat: "\u2133",
                    phone: "\u260E",
                    Pi: "\u03A0",
                    pi: "\u03C0",
                    pitchfork: "\u22D4",
                    piv: "\u03D6",
                    planck: "\u210F",
                    planckh: "\u210E",
                    plankv: "\u210F",
                    plus: "+",
                    plusacir: "\u2A23",
                    plusb: "\u229E",
                    pluscir: "\u2A22",
                    plusdo: "\u2214",
                    plusdu: "\u2A25",
                    pluse: "\u2A72",
                    PlusMinus: "\xb1",
                    plusmn: "\xb1",
                    plussim: "\u2A26",
                    plustwo: "\u2A27",
                    pm: "\xb1",
                    Poincareplane: "\u210C",
                    pointint: "\u2A15",
                    Popf: "\u2119",
                    popf: "\uD835\uDD61",
                    pound: "\xa3",
                    Pr: "\u2ABB",
                    pr: "\u227A",
                    prap: "\u2AB7",
                    prcue: "\u227C",
                    prE: "\u2AB3",
                    pre: "\u2AAF",
                    prec: "\u227A",
                    precapprox: "\u2AB7",
                    preccurlyeq: "\u227C",
                    Precedes: "\u227A",
                    PrecedesEqual: "\u2AAF",
                    PrecedesSlantEqual: "\u227C",
                    PrecedesTilde: "\u227E",
                    preceq: "\u2AAF",
                    precnapprox: "\u2AB9",
                    precneqq: "\u2AB5",
                    precnsim: "\u22E8",
                    precsim: "\u227E",
                    Prime: "\u2033",
                    prime: "\u2032",
                    primes: "\u2119",
                    prnap: "\u2AB9",
                    prnE: "\u2AB5",
                    prnsim: "\u22E8",
                    prod: "\u220F",
                    Product: "\u220F",
                    profalar: "\u232E",
                    profline: "\u2312",
                    profsurf: "\u2313",
                    prop: "\u221D",
                    Proportion: "\u2237",
                    Proportional: "\u221D",
                    propto: "\u221D",
                    prsim: "\u227E",
                    prurel: "\u22B0",
                    Pscr: "\uD835\uDCAB",
                    pscr: "\uD835\uDCC5",
                    Psi: "\u03A8",
                    psi: "\u03C8",
                    puncsp: "\u2008",
                    Qfr: "\uD835\uDD14",
                    qfr: "\uD835\uDD2E",
                    qint: "\u2A0C",
                    Qopf: "\u211A",
                    qopf: "\uD835\uDD62",
                    qprime: "\u2057",
                    Qscr: "\uD835\uDCAC",
                    qscr: "\uD835\uDCC6",
                    quaternions: "\u210D",
                    quatint: "\u2A16",
                    quest: "?",
                    questeq: "\u225F",
                    QUOT: '"',
                    quot: '"',
                    rAarr: "\u21DB",
                    race: "\u223D\u0331",
                    Racute: "\u0154",
                    racute: "\u0155",
                    radic: "\u221A",
                    raemptyv: "\u29B3",
                    Rang: "\u27EB",
                    rang: "\u27E9",
                    rangd: "\u2992",
                    range: "\u29A5",
                    rangle: "\u27E9",
                    raquo: "\xbb",
                    Rarr: "\u21A0",
                    rArr: "\u21D2",
                    rarr: "\u2192",
                    rarrap: "\u2975",
                    rarrb: "\u21E5",
                    rarrbfs: "\u2920",
                    rarrc: "\u2933",
                    rarrfs: "\u291E",
                    rarrhk: "\u21AA",
                    rarrlp: "\u21AC",
                    rarrpl: "\u2945",
                    rarrsim: "\u2974",
                    Rarrtl: "\u2916",
                    rarrtl: "\u21A3",
                    rarrw: "\u219D",
                    rAtail: "\u291C",
                    ratail: "\u291A",
                    ratio: "\u2236",
                    rationals: "\u211A",
                    RBarr: "\u2910",
                    rBarr: "\u290F",
                    rbarr: "\u290D",
                    rbbrk: "\u2773",
                    rbrace: "}",
                    rbrack: "]",
                    rbrke: "\u298C",
                    rbrksld: "\u298E",
                    rbrkslu: "\u2990",
                    Rcaron: "\u0158",
                    rcaron: "\u0159",
                    Rcedil: "\u0156",
                    rcedil: "\u0157",
                    rceil: "\u2309",
                    rcub: "}",
                    Rcy: "\u0420",
                    rcy: "\u0440",
                    rdca: "\u2937",
                    rdldhar: "\u2969",
                    rdquo: "\u201D",
                    rdquor: "\u201D",
                    rdsh: "\u21B3",
                    Re: "\u211C",
                    real: "\u211C",
                    realine: "\u211B",
                    realpart: "\u211C",
                    reals: "\u211D",
                    rect: "\u25AD",
                    REG: "\xae",
                    reg: "\xae",
                    ReverseElement: "\u220B",
                    ReverseEquilibrium: "\u21CB",
                    ReverseUpEquilibrium: "\u296F",
                    rfisht: "\u297D",
                    rfloor: "\u230B",
                    Rfr: "\u211C",
                    rfr: "\uD835\uDD2F",
                    rHar: "\u2964",
                    rhard: "\u21C1",
                    rharu: "\u21C0",
                    rharul: "\u296C",
                    Rho: "\u03A1",
                    rho: "\u03C1",
                    rhov: "\u03F1",
                    RightAngleBracket: "\u27E9",
                    RightArrow: "\u2192",
                    Rightarrow: "\u21D2",
                    rightarrow: "\u2192",
                    RightArrowBar: "\u21E5",
                    RightArrowLeftArrow: "\u21C4",
                    rightarrowtail: "\u21A3",
                    RightCeiling: "\u2309",
                    RightDoubleBracket: "\u27E7",
                    RightDownTeeVector: "\u295D",
                    RightDownVector: "\u21C2",
                    RightDownVectorBar: "\u2955",
                    RightFloor: "\u230B",
                    rightharpoondown: "\u21C1",
                    rightharpoonup: "\u21C0",
                    rightleftarrows: "\u21C4",
                    rightleftharpoons: "\u21CC",
                    rightrightarrows: "\u21C9",
                    rightsquigarrow: "\u219D",
                    RightTee: "\u22A2",
                    RightTeeArrow: "\u21A6",
                    RightTeeVector: "\u295B",
                    rightthreetimes: "\u22CC",
                    RightTriangle: "\u22B3",
                    RightTriangleBar: "\u29D0",
                    RightTriangleEqual: "\u22B5",
                    RightUpDownVector: "\u294F",
                    RightUpTeeVector: "\u295C",
                    RightUpVector: "\u21BE",
                    RightUpVectorBar: "\u2954",
                    RightVector: "\u21C0",
                    RightVectorBar: "\u2953",
                    ring: "\u02DA",
                    risingdotseq: "\u2253",
                    rlarr: "\u21C4",
                    rlhar: "\u21CC",
                    rlm: "\u200F",
                    rmoust: "\u23B1",
                    rmoustache: "\u23B1",
                    rnmid: "\u2AEE",
                    roang: "\u27ED",
                    roarr: "\u21FE",
                    robrk: "\u27E7",
                    ropar: "\u2986",
                    Ropf: "\u211D",
                    ropf: "\uD835\uDD63",
                    roplus: "\u2A2E",
                    rotimes: "\u2A35",
                    RoundImplies: "\u2970",
                    rpar: ")",
                    rpargt: "\u2994",
                    rppolint: "\u2A12",
                    rrarr: "\u21C9",
                    Rrightarrow: "\u21DB",
                    rsaquo: "\u203A",
                    Rscr: "\u211B",
                    rscr: "\uD835\uDCC7",
                    Rsh: "\u21B1",
                    rsh: "\u21B1",
                    rsqb: "]",
                    rsquo: "\u2019",
                    rsquor: "\u2019",
                    rthree: "\u22CC",
                    rtimes: "\u22CA",
                    rtri: "\u25B9",
                    rtrie: "\u22B5",
                    rtrif: "\u25B8",
                    rtriltri: "\u29CE",
                    RuleDelayed: "\u29F4",
                    ruluhar: "\u2968",
                    rx: "\u211E",
                    Sacute: "\u015A",
                    sacute: "\u015B",
                    sbquo: "\u201A",
                    Sc: "\u2ABC",
                    sc: "\u227B",
                    scap: "\u2AB8",
                    Scaron: "\u0160",
                    scaron: "\u0161",
                    sccue: "\u227D",
                    scE: "\u2AB4",
                    sce: "\u2AB0",
                    Scedil: "\u015E",
                    scedil: "\u015F",
                    Scirc: "\u015C",
                    scirc: "\u015D",
                    scnap: "\u2ABA",
                    scnE: "\u2AB6",
                    scnsim: "\u22E9",
                    scpolint: "\u2A13",
                    scsim: "\u227F",
                    Scy: "\u0421",
                    scy: "\u0441",
                    sdot: "\u22C5",
                    sdotb: "\u22A1",
                    sdote: "\u2A66",
                    searhk: "\u2925",
                    seArr: "\u21D8",
                    searr: "\u2198",
                    searrow: "\u2198",
                    sect: "\xa7",
                    semi: ";",
                    seswar: "\u2929",
                    setminus: "\u2216",
                    setmn: "\u2216",
                    sext: "\u2736",
                    Sfr: "\uD835\uDD16",
                    sfr: "\uD835\uDD30",
                    sfrown: "\u2322",
                    sharp: "\u266F",
                    SHCHcy: "\u0429",
                    shchcy: "\u0449",
                    SHcy: "\u0428",
                    shcy: "\u0448",
                    ShortDownArrow: "\u2193",
                    ShortLeftArrow: "\u2190",
                    shortmid: "\u2223",
                    shortparallel: "\u2225",
                    ShortRightArrow: "\u2192",
                    ShortUpArrow: "\u2191",
                    shy: "\xad",
                    Sigma: "\u03A3",
                    sigma: "\u03C3",
                    sigmaf: "\u03C2",
                    sigmav: "\u03C2",
                    sim: "\u223C",
                    simdot: "\u2A6A",
                    sime: "\u2243",
                    simeq: "\u2243",
                    simg: "\u2A9E",
                    simgE: "\u2AA0",
                    siml: "\u2A9D",
                    simlE: "\u2A9F",
                    simne: "\u2246",
                    simplus: "\u2A24",
                    simrarr: "\u2972",
                    slarr: "\u2190",
                    SmallCircle: "\u2218",
                    smallsetminus: "\u2216",
                    smashp: "\u2A33",
                    smeparsl: "\u29E4",
                    smid: "\u2223",
                    smile: "\u2323",
                    smt: "\u2AAA",
                    smte: "\u2AAC",
                    smtes: "\u2AAC\uFE00",
                    SOFTcy: "\u042C",
                    softcy: "\u044C",
                    sol: "/",
                    solb: "\u29C4",
                    solbar: "\u233F",
                    Sopf: "\uD835\uDD4A",
                    sopf: "\uD835\uDD64",
                    spades: "\u2660",
                    spadesuit: "\u2660",
                    spar: "\u2225",
                    sqcap: "\u2293",
                    sqcaps: "\u2293\uFE00",
                    sqcup: "\u2294",
                    sqcups: "\u2294\uFE00",
                    Sqrt: "\u221A",
                    sqsub: "\u228F",
                    sqsube: "\u2291",
                    sqsubset: "\u228F",
                    sqsubseteq: "\u2291",
                    sqsup: "\u2290",
                    sqsupe: "\u2292",
                    sqsupset: "\u2290",
                    sqsupseteq: "\u2292",
                    squ: "\u25A1",
                    Square: "\u25A1",
                    square: "\u25A1",
                    SquareIntersection: "\u2293",
                    SquareSubset: "\u228F",
                    SquareSubsetEqual: "\u2291",
                    SquareSuperset: "\u2290",
                    SquareSupersetEqual: "\u2292",
                    SquareUnion: "\u2294",
                    squarf: "\u25AA",
                    squf: "\u25AA",
                    srarr: "\u2192",
                    Sscr: "\uD835\uDCAE",
                    sscr: "\uD835\uDCC8",
                    ssetmn: "\u2216",
                    ssmile: "\u2323",
                    sstarf: "\u22C6",
                    Star: "\u22C6",
                    star: "\u2606",
                    starf: "\u2605",
                    straightepsilon: "\u03F5",
                    straightphi: "\u03D5",
                    strns: "\xaf",
                    Sub: "\u22D0",
                    sub: "\u2282",
                    subdot: "\u2ABD",
                    subE: "\u2AC5",
                    sube: "\u2286",
                    subedot: "\u2AC3",
                    submult: "\u2AC1",
                    subnE: "\u2ACB",
                    subne: "\u228A",
                    subplus: "\u2ABF",
                    subrarr: "\u2979",
                    Subset: "\u22D0",
                    subset: "\u2282",
                    subseteq: "\u2286",
                    subseteqq: "\u2AC5",
                    SubsetEqual: "\u2286",
                    subsetneq: "\u228A",
                    subsetneqq: "\u2ACB",
                    subsim: "\u2AC7",
                    subsub: "\u2AD5",
                    subsup: "\u2AD3",
                    succ: "\u227B",
                    succapprox: "\u2AB8",
                    succcurlyeq: "\u227D",
                    Succeeds: "\u227B",
                    SucceedsEqual: "\u2AB0",
                    SucceedsSlantEqual: "\u227D",
                    SucceedsTilde: "\u227F",
                    succeq: "\u2AB0",
                    succnapprox: "\u2ABA",
                    succneqq: "\u2AB6",
                    succnsim: "\u22E9",
                    succsim: "\u227F",
                    SuchThat: "\u220B",
                    Sum: "\u2211",
                    sum: "\u2211",
                    sung: "\u266A",
                    Sup: "\u22D1",
                    sup: "\u2283",
                    sup1: "\xb9",
                    sup2: "\xb2",
                    sup3: "\xb3",
                    supdot: "\u2ABE",
                    supdsub: "\u2AD8",
                    supE: "\u2AC6",
                    supe: "\u2287",
                    supedot: "\u2AC4",
                    Superset: "\u2283",
                    SupersetEqual: "\u2287",
                    suphsol: "\u27C9",
                    suphsub: "\u2AD7",
                    suplarr: "\u297B",
                    supmult: "\u2AC2",
                    supnE: "\u2ACC",
                    supne: "\u228B",
                    supplus: "\u2AC0",
                    Supset: "\u22D1",
                    supset: "\u2283",
                    supseteq: "\u2287",
                    supseteqq: "\u2AC6",
                    supsetneq: "\u228B",
                    supsetneqq: "\u2ACC",
                    supsim: "\u2AC8",
                    supsub: "\u2AD4",
                    supsup: "\u2AD6",
                    swarhk: "\u2926",
                    swArr: "\u21D9",
                    swarr: "\u2199",
                    swarrow: "\u2199",
                    swnwar: "\u292A",
                    szlig: "\xdf",
                    Tab: "	",
                    target: "\u2316",
                    Tau: "\u03A4",
                    tau: "\u03C4",
                    tbrk: "\u23B4",
                    Tcaron: "\u0164",
                    tcaron: "\u0165",
                    Tcedil: "\u0162",
                    tcedil: "\u0163",
                    Tcy: "\u0422",
                    tcy: "\u0442",
                    tdot: "\u20DB",
                    telrec: "\u2315",
                    Tfr: "\uD835\uDD17",
                    tfr: "\uD835\uDD31",
                    there4: "\u2234",
                    Therefore: "\u2234",
                    therefore: "\u2234",
                    Theta: "\u0398",
                    theta: "\u03B8",
                    thetasym: "\u03D1",
                    thetav: "\u03D1",
                    thickapprox: "\u2248",
                    thicksim: "\u223C",
                    ThickSpace: "\u205F\u200A",
                    thinsp: "\u2009",
                    ThinSpace: "\u2009",
                    thkap: "\u2248",
                    thksim: "\u223C",
                    THORN: "\xde",
                    thorn: "\xfe",
                    Tilde: "\u223C",
                    tilde: "\u02DC",
                    TildeEqual: "\u2243",
                    TildeFullEqual: "\u2245",
                    TildeTilde: "\u2248",
                    times: "\xd7",
                    timesb: "\u22A0",
                    timesbar: "\u2A31",
                    timesd: "\u2A30",
                    tint: "\u222D",
                    toea: "\u2928",
                    top: "\u22A4",
                    topbot: "\u2336",
                    topcir: "\u2AF1",
                    Topf: "\uD835\uDD4B",
                    topf: "\uD835\uDD65",
                    topfork: "\u2ADA",
                    tosa: "\u2929",
                    tprime: "\u2034",
                    TRADE: "\u2122",
                    trade: "\u2122",
                    triangle: "\u25B5",
                    triangledown: "\u25BF",
                    triangleleft: "\u25C3",
                    trianglelefteq: "\u22B4",
                    triangleq: "\u225C",
                    triangleright: "\u25B9",
                    trianglerighteq: "\u22B5",
                    tridot: "\u25EC",
                    trie: "\u225C",
                    triminus: "\u2A3A",
                    TripleDot: "\u20DB",
                    triplus: "\u2A39",
                    trisb: "\u29CD",
                    tritime: "\u2A3B",
                    trpezium: "\u23E2",
                    Tscr: "\uD835\uDCAF",
                    tscr: "\uD835\uDCC9",
                    TScy: "\u0426",
                    tscy: "\u0446",
                    TSHcy: "\u040B",
                    tshcy: "\u045B",
                    Tstrok: "\u0166",
                    tstrok: "\u0167",
                    twixt: "\u226C",
                    twoheadleftarrow: "\u219E",
                    twoheadrightarrow: "\u21A0",
                    Uacute: "\xda",
                    uacute: "\xfa",
                    Uarr: "\u219F",
                    uArr: "\u21D1",
                    uarr: "\u2191",
                    Uarrocir: "\u2949",
                    Ubrcy: "\u040E",
                    ubrcy: "\u045E",
                    Ubreve: "\u016C",
                    ubreve: "\u016D",
                    Ucirc: "\xdb",
                    ucirc: "\xfb",
                    Ucy: "\u0423",
                    ucy: "\u0443",
                    udarr: "\u21C5",
                    Udblac: "\u0170",
                    udblac: "\u0171",
                    udhar: "\u296E",
                    ufisht: "\u297E",
                    Ufr: "\uD835\uDD18",
                    ufr: "\uD835\uDD32",
                    Ugrave: "\xd9",
                    ugrave: "\xf9",
                    uHar: "\u2963",
                    uharl: "\u21BF",
                    uharr: "\u21BE",
                    uhblk: "\u2580",
                    ulcorn: "\u231C",
                    ulcorner: "\u231C",
                    ulcrop: "\u230F",
                    ultri: "\u25F8",
                    Umacr: "\u016A",
                    umacr: "\u016B",
                    uml: "\xa8",
                    UnderBar: "_",
                    UnderBrace: "\u23DF",
                    UnderBracket: "\u23B5",
                    UnderParenthesis: "\u23DD",
                    Union: "\u22C3",
                    UnionPlus: "\u228E",
                    Uogon: "\u0172",
                    uogon: "\u0173",
                    Uopf: "\uD835\uDD4C",
                    uopf: "\uD835\uDD66",
                    UpArrow: "\u2191",
                    Uparrow: "\u21D1",
                    uparrow: "\u2191",
                    UpArrowBar: "\u2912",
                    UpArrowDownArrow: "\u21C5",
                    UpDownArrow: "\u2195",
                    Updownarrow: "\u21D5",
                    updownarrow: "\u2195",
                    UpEquilibrium: "\u296E",
                    upharpoonleft: "\u21BF",
                    upharpoonright: "\u21BE",
                    uplus: "\u228E",
                    UpperLeftArrow: "\u2196",
                    UpperRightArrow: "\u2197",
                    Upsi: "\u03D2",
                    upsi: "\u03C5",
                    upsih: "\u03D2",
                    Upsilon: "\u03A5",
                    upsilon: "\u03C5",
                    UpTee: "\u22A5",
                    UpTeeArrow: "\u21A5",
                    upuparrows: "\u21C8",
                    urcorn: "\u231D",
                    urcorner: "\u231D",
                    urcrop: "\u230E",
                    Uring: "\u016E",
                    uring: "\u016F",
                    urtri: "\u25F9",
                    Uscr: "\uD835\uDCB0",
                    uscr: "\uD835\uDCCA",
                    utdot: "\u22F0",
                    Utilde: "\u0168",
                    utilde: "\u0169",
                    utri: "\u25B5",
                    utrif: "\u25B4",
                    uuarr: "\u21C8",
                    Uuml: "\xdc",
                    uuml: "\xfc",
                    uwangle: "\u29A7",
                    vangrt: "\u299C",
                    varepsilon: "\u03F5",
                    varkappa: "\u03F0",
                    varnothing: "\u2205",
                    varphi: "\u03D5",
                    varpi: "\u03D6",
                    varpropto: "\u221D",
                    vArr: "\u21D5",
                    varr: "\u2195",
                    varrho: "\u03F1",
                    varsigma: "\u03C2",
                    varsubsetneq: "\u228A\uFE00",
                    varsubsetneqq: "\u2ACB\uFE00",
                    varsupsetneq: "\u228B\uFE00",
                    varsupsetneqq: "\u2ACC\uFE00",
                    vartheta: "\u03D1",
                    vartriangleleft: "\u22B2",
                    vartriangleright: "\u22B3",
                    Vbar: "\u2AEB",
                    vBar: "\u2AE8",
                    vBarv: "\u2AE9",
                    Vcy: "\u0412",
                    vcy: "\u0432",
                    VDash: "\u22AB",
                    Vdash: "\u22A9",
                    vDash: "\u22A8",
                    vdash: "\u22A2",
                    Vdashl: "\u2AE6",
                    Vee: "\u22C1",
                    vee: "\u2228",
                    veebar: "\u22BB",
                    veeeq: "\u225A",
                    vellip: "\u22EE",
                    Verbar: "\u2016",
                    verbar: "|",
                    Vert: "\u2016",
                    vert: "|",
                    VerticalBar: "\u2223",
                    VerticalLine: "|",
                    VerticalSeparator: "\u2758",
                    VerticalTilde: "\u2240",
                    VeryThinSpace: "\u200A",
                    Vfr: "\uD835\uDD19",
                    vfr: "\uD835\uDD33",
                    vltri: "\u22B2",
                    vnsub: "\u2282\u20D2",
                    vnsup: "\u2283\u20D2",
                    Vopf: "\uD835\uDD4D",
                    vopf: "\uD835\uDD67",
                    vprop: "\u221D",
                    vrtri: "\u22B3",
                    Vscr: "\uD835\uDCB1",
                    vscr: "\uD835\uDCCB",
                    vsubnE: "\u2ACB\uFE00",
                    vsubne: "\u228A\uFE00",
                    vsupnE: "\u2ACC\uFE00",
                    vsupne: "\u228B\uFE00",
                    Vvdash: "\u22AA",
                    vzigzag: "\u299A",
                    Wcirc: "\u0174",
                    wcirc: "\u0175",
                    wedbar: "\u2A5F",
                    Wedge: "\u22C0",
                    wedge: "\u2227",
                    wedgeq: "\u2259",
                    weierp: "\u2118",
                    Wfr: "\uD835\uDD1A",
                    wfr: "\uD835\uDD34",
                    Wopf: "\uD835\uDD4E",
                    wopf: "\uD835\uDD68",
                    wp: "\u2118",
                    wr: "\u2240",
                    wreath: "\u2240",
                    Wscr: "\uD835\uDCB2",
                    wscr: "\uD835\uDCCC",
                    xcap: "\u22C2",
                    xcirc: "\u25EF",
                    xcup: "\u22C3",
                    xdtri: "\u25BD",
                    Xfr: "\uD835\uDD1B",
                    xfr: "\uD835\uDD35",
                    xhArr: "\u27FA",
                    xharr: "\u27F7",
                    Xi: "\u039E",
                    xi: "\u03BE",
                    xlArr: "\u27F8",
                    xlarr: "\u27F5",
                    xmap: "\u27FC",
                    xnis: "\u22FB",
                    xodot: "\u2A00",
                    Xopf: "\uD835\uDD4F",
                    xopf: "\uD835\uDD69",
                    xoplus: "\u2A01",
                    xotime: "\u2A02",
                    xrArr: "\u27F9",
                    xrarr: "\u27F6",
                    Xscr: "\uD835\uDCB3",
                    xscr: "\uD835\uDCCD",
                    xsqcup: "\u2A06",
                    xuplus: "\u2A04",
                    xutri: "\u25B3",
                    xvee: "\u22C1",
                    xwedge: "\u22C0",
                    Yacute: "\xdd",
                    yacute: "\xfd",
                    YAcy: "\u042F",
                    yacy: "\u044F",
                    Ycirc: "\u0176",
                    ycirc: "\u0177",
                    Ycy: "\u042B",
                    ycy: "\u044B",
                    yen: "\xa5",
                    Yfr: "\uD835\uDD1C",
                    yfr: "\uD835\uDD36",
                    YIcy: "\u0407",
                    yicy: "\u0457",
                    Yopf: "\uD835\uDD50",
                    yopf: "\uD835\uDD6A",
                    Yscr: "\uD835\uDCB4",
                    yscr: "\uD835\uDCCE",
                    YUcy: "\u042E",
                    yucy: "\u044E",
                    Yuml: "\u0178",
                    yuml: "\xff",
                    Zacute: "\u0179",
                    zacute: "\u017A",
                    Zcaron: "\u017D",
                    zcaron: "\u017E",
                    Zcy: "\u0417",
                    zcy: "\u0437",
                    Zdot: "\u017B",
                    zdot: "\u017C",
                    zeetrf: "\u2128",
                    ZeroWidthSpace: "\u200B",
                    Zeta: "\u0396",
                    zeta: "\u03B6",
                    Zfr: "\u2128",
                    zfr: "\uD835\uDD37",
                    ZHcy: "\u0416",
                    zhcy: "\u0436",
                    zigrarr: "\u21DD",
                    Zopf: "\u2124",
                    zopf: "\uD835\uDD6B",
                    Zscr: "\uD835\uDCB5",
                    zscr: "\uD835\uDCCF",
                    zwj: "\u200D",
                    zwnj: "\u200C"
                }), t.entityMap = t.HTML_ENTITIES;
            },
            7937: (e, t, i)=>{
                var s = i(1129);
                s.DOMImplementation, s.XMLSerializer, t.DOMParser = i(8633).DOMParser;
            },
            2133: (e, t, i)=>{
                var s = i(525).NAMESPACE, n = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, r = new RegExp("[\\-\\.0-9" + n.source.slice(1, -1) + "\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"), a = new RegExp("^" + n.source + r.source + "*(?::" + n.source + r.source + "*)?$");
                function o(e, t) {
                    this.message = e, this.locator = t, Error.captureStackTrace && Error.captureStackTrace(this, o);
                }
                function d() {}
                function c(e, t) {
                    return t.lineNumber = e.lineNumber, t.columnNumber = e.columnNumber, t;
                }
                function u(e, t, i, n, r, a) {
                    function o(e, t, s) {
                        i.attributeNames.hasOwnProperty(e) && a.fatalError("Attribute " + e + " redefined"), i.addValue(e, t, s);
                    }
                    for(var d, c = ++t, u = 0;;){
                        var l = e.charAt(c);
                        switch(l){
                            case "=":
                                if (1 === u) d = e.slice(t, c), u = 3;
                                else {
                                    if (2 !== u) throw new Error("attribute equal must after attrName");
                                    u = 3;
                                }
                                break;
                            case "'":
                            case '"':
                                if (3 === u || 1 === u) {
                                    if (1 === u && (a.warning('attribute value must after "="'), d = e.slice(t, c)), t = c + 1, !((c = e.indexOf(l, t)) > 0)) throw new Error("attribute value no end '" + l + "' match");
                                    o(d, h = e.slice(t, c).replace(/&#?\w+;/g, r), t - 1), u = 5;
                                } else {
                                    if (4 != u) throw new Error('attribute value must after "="');
                                    o(d, h = e.slice(t, c).replace(/&#?\w+;/g, r), t), a.warning('attribute "' + d + '" missed start quot(' + l + ")!!"), t = c + 1, u = 5;
                                }
                                break;
                            case "/":
                                switch(u){
                                    case 0:
                                        i.setTagName(e.slice(t, c));
                                    case 5:
                                    case 6:
                                    case 7:
                                        u = 7, i.closed = !0;
                                    case 4:
                                    case 1:
                                        break;
                                    case 2:
                                        i.closed = !0;
                                        break;
                                    default:
                                        throw new Error("attribute invalid close char('/')");
                                }
                                break;
                            case "":
                                return a.error("unexpected end of input"), 0 == u && i.setTagName(e.slice(t, c)), c;
                            case ">":
                                switch(u){
                                    case 0:
                                        i.setTagName(e.slice(t, c));
                                    case 5:
                                    case 6:
                                    case 7:
                                        break;
                                    case 4:
                                    case 1:
                                        "/" === (h = e.slice(t, c)).slice(-1) && (i.closed = !0, h = h.slice(0, -1));
                                    case 2:
                                        2 === u && (h = d), 4 == u ? (a.warning('attribute "' + h + '" missed quot(")!'), o(d, h.replace(/&#?\w+;/g, r), t)) : (s.isHTML(n[""]) && h.match(/^(?:disabled|checked|selected)$/i) || a.warning('attribute "' + h + '" missed value!! "' + h + '" instead!!'), o(h, h, t));
                                        break;
                                    case 3:
                                        throw new Error("attribute value missed!!");
                                }
                                return c;
                            case "\x80":
                                l = " ";
                            default:
                                if (l <= " ") switch(u){
                                    case 0:
                                        i.setTagName(e.slice(t, c)), u = 6;
                                        break;
                                    case 1:
                                        d = e.slice(t, c), u = 2;
                                        break;
                                    case 4:
                                        var h = e.slice(t, c).replace(/&#?\w+;/g, r);
                                        a.warning('attribute "' + h + '" missed quot(")!!'), o(d, h, t);
                                    case 5:
                                        u = 6;
                                }
                                else switch(u){
                                    case 2:
                                        i.tagName, s.isHTML(n[""]) && d.match(/^(?:disabled|checked|selected)$/i) || a.warning('attribute "' + d + '" missed value!! "' + d + '" instead2!!'), o(d, d, t), t = c, u = 1;
                                        break;
                                    case 5:
                                        a.warning('attribute space is required"' + d + '"!!');
                                    case 6:
                                        u = 1, t = c;
                                        break;
                                    case 3:
                                        u = 4, t = c;
                                        break;
                                    case 7:
                                        throw new Error("elements closed character '/' and '>' must be connected to");
                                }
                        }
                        c++;
                    }
                }
                function l(e, t, i) {
                    for(var n = e.tagName, r = null, a = e.length; a--;){
                        var o = e[a], d = o.qName, c = o.value;
                        if ((p = d.indexOf(":")) > 0) var u = o.prefix = d.slice(0, p), l = d.slice(p + 1), h = "xmlns" === u && l;
                        else l = d, u = null, h = "xmlns" === d && "";
                        o.localName = l, !1 !== h && (null == r && (r = {}, f(i, i = {})), i[h] = r[h] = c, o.uri = s.XMLNS, t.startPrefixMapping(h, c));
                    }
                    for(a = e.length; a--;)(u = (o = e[a]).prefix) && ("xml" === u && (o.uri = s.XML), "xmlns" !== u && (o.uri = i[u || ""]));
                    var p;
                    (p = n.indexOf(":")) > 0 ? (u = e.prefix = n.slice(0, p), l = e.localName = n.slice(p + 1)) : (u = null, l = e.localName = n);
                    var g = e.uri = i[u || ""];
                    if (t.startElement(g, l, n, e), !e.closed) return e.currentNSMap = i, e.localNSMap = r, !0;
                    if (t.endElement(g, l, n), r) for(u in r)Object.prototype.hasOwnProperty.call(r, u) && t.endPrefixMapping(u);
                }
                function h(e, t, i, s, n) {
                    if (/^(?:script|textarea)$/i.test(i)) {
                        var r = e.indexOf("</" + i + ">", t), a = e.substring(t + 1, r);
                        if (/[&<]/.test(a)) return /^script$/i.test(i) ? (n.characters(a, 0, a.length), r) : (a = a.replace(/&#?\w+;/g, s), n.characters(a, 0, a.length), r);
                    }
                    return t + 1;
                }
                function p(e, t, i, s) {
                    var n = s[i];
                    return null == n && ((n = e.lastIndexOf("</" + i + ">")) < t && (n = e.lastIndexOf("</" + i)), s[i] = n), n < t;
                }
                function f(e, t) {
                    for(var i in e)Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
                }
                function g(e, t, i, s) {
                    if ("-" === e.charAt(t + 2)) return "-" === e.charAt(t + 3) ? (n = e.indexOf("-->", t + 4)) > t ? (i.comment(e, t + 4, n - t - 4), n + 3) : (s.error("Unclosed comment"), -1) : -1;
                    if ("CDATA[" == e.substr(t + 3, 6)) {
                        var n = e.indexOf("]]>", t + 9);
                        return i.startCDATA(), i.characters(e, t + 9, n - t - 9), i.endCDATA(), n + 3;
                    }
                    var r = function(e, t) {
                        var i, s = [], n = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
                        for(n.lastIndex = t, n.exec(e); i = n.exec(e);)if (s.push(i), i[1]) return s;
                    }(e, t), a = r.length;
                    if (a > 1 && /!doctype/i.test(r[0][0])) {
                        var o = r[1][0], d = !1, c = !1;
                        a > 3 && (/^public$/i.test(r[2][0]) ? (d = r[3][0], c = a > 4 && r[4][0]) : /^system$/i.test(r[2][0]) && (c = r[3][0]));
                        var u = r[a - 1];
                        return i.startDTD(o, d, c), i.endDTD(), u.index + u[0].length;
                    }
                    return -1;
                }
                function m(e, t, i) {
                    var s = e.indexOf("?>", t);
                    if (s) {
                        var n = e.substring(t, s).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
                        return n ? (n[0].length, i.processingInstruction(n[1], n[2]), s + 2) : -1;
                    }
                    return -1;
                }
                function v() {
                    this.attributeNames = {};
                }
                o.prototype = new Error, o.prototype.name = o.name, d.prototype = {
                    parse: function(e, t, i) {
                        var n = this.domBuilder;
                        n.startDocument(), f(t, t = {}), function(e, t, i, n, r) {
                            function a(e) {
                                var t = e.slice(1, -1);
                                return t in i ? i[t] : "#" === t.charAt(0) ? function(e) {
                                    if (e > 65535) {
                                        var t = 55296 + ((e -= 65536) >> 10), i = 56320 + (1023 & e);
                                        return String.fromCharCode(t, i);
                                    }
                                    return String.fromCharCode(e);
                                }(parseInt(t.substr(1).replace("x", "0x"))) : (r.error("entity not found:" + e), e);
                            }
                            function d(t) {
                                if (t > w) {
                                    var i = e.substring(w, t).replace(/&#?\w+;/g, a);
                                    E && f(w), n.characters(i, 0, t - w), w = t;
                                }
                            }
                            function f(t, i) {
                                for(; t >= T && (i = S.exec(e));)y = i.index, T = y + i[0].length, E.lineNumber++;
                                E.columnNumber = t - y + 1;
                            }
                            for(var y = 0, T = 0, S = /.*(?:\r\n?|\n)|.*$/g, E = n.locator, b = [
                                {
                                    currentNSMap: t
                                }
                            ], A = {}, w = 0;;){
                                try {
                                    var _ = e.indexOf("<", w);
                                    if (_ < 0) {
                                        if (!e.substr(w).match(/^\s*$/)) {
                                            var I = n.doc, N = I.createTextNode(e.substr(w));
                                            I.appendChild(N), n.currentElement = N;
                                        }
                                        return;
                                    }
                                    switch(_ > w && d(_), e.charAt(_ + 1)){
                                        case "/":
                                            var D = e.indexOf(">", _ + 3), P = e.substring(_ + 2, D).replace(/[ \t\n\r]+$/g, ""), R = b.pop();
                                            D < 0 ? (P = e.substring(_ + 2).replace(/[\s<].*/, ""), r.error("end tag name: " + P + " is not complete:" + R.tagName), D = _ + 1 + P.length) : P.match(/\s</) && (P = P.replace(/[\s<].*/, ""), r.error("end tag name: " + P + " maybe not complete"), D = _ + 1 + P.length);
                                            var L = R.localNSMap, C = R.tagName == P;
                                            if (C || R.tagName && R.tagName.toLowerCase() == P.toLowerCase()) {
                                                if (n.endElement(R.uri, R.localName, P), L) for(var O in L)Object.prototype.hasOwnProperty.call(L, O) && n.endPrefixMapping(O);
                                                C || r.fatalError("end tag name: " + P + " is not match the current start tagName:" + R.tagName);
                                            } else b.push(R);
                                            D++;
                                            break;
                                        case "?":
                                            E && f(_), D = m(e, _, n);
                                            break;
                                        case "!":
                                            E && f(_), D = g(e, _, n, r);
                                            break;
                                        default:
                                            E && f(_);
                                            var B = new v, x = b[b.length - 1].currentNSMap, M = (D = u(e, _, B, x, a, r), B.length);
                                            if (!B.closed && p(e, D, B.tagName, A) && (B.closed = !0, i.nbsp || r.warning("unclosed xml attribute")), E && M) {
                                                for(var k = c(E, {}), U = 0; U < M; U++){
                                                    var V = B[U];
                                                    f(V.offset), V.locator = c(E, {});
                                                }
                                                n.locator = k, l(B, n, x) && b.push(B), n.locator = E;
                                            } else l(B, n, x) && b.push(B);
                                            s.isHTML(B.uri) && !B.closed ? D = h(e, D, B.tagName, a, n) : D++;
                                    }
                                } catch (e) {
                                    if (e instanceof o) throw e;
                                    r.error("element parse error: " + e), D = -1;
                                }
                                D > w ? w = D : d(Math.max(_, w) + 1);
                            }
                        }(e, t, i, n, this.errorHandler), n.endDocument();
                    }
                }, v.prototype = {
                    setTagName: function(e) {
                        if (!a.test(e)) throw new Error("invalid tagName:" + e);
                        this.tagName = e;
                    },
                    addValue: function(e, t, i) {
                        if (!a.test(e)) throw new Error("invalid attribute:" + e);
                        this.attributeNames[e] = this.length, this[this.length++] = {
                            qName: e,
                            value: t,
                            offset: i
                        };
                    },
                    length: 0,
                    getLocalName: function(e) {
                        return this[e].localName;
                    },
                    getLocator: function(e) {
                        return this[e].locator;
                    },
                    getQName: function(e) {
                        return this[e].qName;
                    },
                    getURI: function(e) {
                        return this[e].uri;
                    },
                    getValue: function(e) {
                        return this[e].value;
                    }
                }, t.XMLReader = d, t.ParseError = o;
            },
            7991: (e, t)=>{
                "use strict";
                t.byteLength = function(e) {
                    var t = o(e), i = t[0], s = t[1];
                    return 3 * (i + s) / 4 - s;
                }, t.toByteArray = function(e) {
                    var t, i, r = o(e), a = r[0], d = r[1], c = new n(function(e, t, i) {
                        return 3 * (t + i) / 4 - i;
                    }(0, a, d)), u = 0, l = d > 0 ? a - 4 : a;
                    for(i = 0; i < l; i += 4)t = s[e.charCodeAt(i)] << 18 | s[e.charCodeAt(i + 1)] << 12 | s[e.charCodeAt(i + 2)] << 6 | s[e.charCodeAt(i + 3)], c[u++] = t >> 16 & 255, c[u++] = t >> 8 & 255, c[u++] = 255 & t;
                    return 2 === d && (t = s[e.charCodeAt(i)] << 2 | s[e.charCodeAt(i + 1)] >> 4, c[u++] = 255 & t), 1 === d && (t = s[e.charCodeAt(i)] << 10 | s[e.charCodeAt(i + 1)] << 4 | s[e.charCodeAt(i + 2)] >> 2, c[u++] = t >> 8 & 255, c[u++] = 255 & t), c;
                }, t.fromByteArray = function(e) {
                    for(var t, s = e.length, n = s % 3, r = [], a = 16383, o = 0, c = s - n; o < c; o += a)r.push(d(e, o, o + a > c ? c : o + a));
                    return 1 === n ? (t = e[s - 1], r.push(i[t >> 2] + i[t << 4 & 63] + "==")) : 2 === n && (t = (e[s - 2] << 8) + e[s - 1], r.push(i[t >> 10] + i[t >> 4 & 63] + i[t << 2 & 63] + "=")), r.join("");
                };
                for(var i = [], s = [], n = "undefined" != typeof Uint8Array ? Uint8Array : Array, r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0; a < 64; ++a)i[a] = r[a], s[r.charCodeAt(a)] = a;
                function o(e) {
                    var t = e.length;
                    if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
                    var i = e.indexOf("=");
                    return -1 === i && (i = t), [
                        i,
                        i === t ? 0 : 4 - i % 4
                    ];
                }
                function d(e, t, s) {
                    for(var n, r, a = [], o = t; o < s; o += 3)n = (e[o] << 16 & 16711680) + (e[o + 1] << 8 & 65280) + (255 & e[o + 2]), a.push(i[(r = n) >> 18 & 63] + i[r >> 12 & 63] + i[r >> 6 & 63] + i[63 & r]);
                    return a.join("");
                }
                s["-".charCodeAt(0)] = 62, s["_".charCodeAt(0)] = 63;
            },
            1048: (e, t, i)=>{
                "use strict";
                const s = i(7991), n = i(9318), r = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
                t.hp = d, t.IS = 50;
                const a = 2147483647;
                function o(e) {
                    if (e > a) throw new RangeError('The value "' + e + '" is invalid for option "size"');
                    const t = new Uint8Array(e);
                    return Object.setPrototypeOf(t, d.prototype), t;
                }
                function d(e, t, i) {
                    if ("number" == typeof e) {
                        if ("string" == typeof t) throw new TypeError('The "string" argument must be of type string. Received type number');
                        return l(e);
                    }
                    return c(e, t, i);
                }
                function c(e, t, i) {
                    if ("string" == typeof e) return function(e, t) {
                        if ("string" == typeof t && "" !== t || (t = "utf8"), !d.isEncoding(t)) throw new TypeError("Unknown encoding: " + t);
                        const i = 0 | g(e, t);
                        let s = o(i);
                        const n = s.write(e, t);
                        return n !== i && (s = s.slice(0, n)), s;
                    }(e, t);
                    if (ArrayBuffer.isView(e)) return function(e) {
                        if (K(e, Uint8Array)) {
                            const t = new Uint8Array(e);
                            return p(t.buffer, t.byteOffset, t.byteLength);
                        }
                        return h(e);
                    }(e);
                    if (null == e) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
                    if (K(e, ArrayBuffer) || e && K(e.buffer, ArrayBuffer)) return p(e, t, i);
                    if ("undefined" != typeof SharedArrayBuffer && (K(e, SharedArrayBuffer) || e && K(e.buffer, SharedArrayBuffer))) return p(e, t, i);
                    if ("number" == typeof e) throw new TypeError('The "value" argument must not be of type number. Received type number');
                    const s = e.valueOf && e.valueOf();
                    if (null != s && s !== e) return d.from(s, t, i);
                    const n = function(e) {
                        if (d.isBuffer(e)) {
                            const t = 0 | f(e.length), i = o(t);
                            return 0 === i.length || e.copy(i, 0, 0, t), i;
                        }
                        return void 0 !== e.length ? "number" != typeof e.length || Q(e.length) ? o(0) : h(e) : "Buffer" === e.type && Array.isArray(e.data) ? h(e.data) : void 0;
                    }(e);
                    if (n) return n;
                    if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e[Symbol.toPrimitive]) return d.from(e[Symbol.toPrimitive]("string"), t, i);
                    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
                }
                function u(e) {
                    if ("number" != typeof e) throw new TypeError('"size" argument must be of type number');
                    if (e < 0) throw new RangeError('The value "' + e + '" is invalid for option "size"');
                }
                function l(e) {
                    return u(e), o(e < 0 ? 0 : 0 | f(e));
                }
                function h(e) {
                    const t = e.length < 0 ? 0 : 0 | f(e.length), i = o(t);
                    for(let s = 0; s < t; s += 1)i[s] = 255 & e[s];
                    return i;
                }
                function p(e, t, i) {
                    if (t < 0 || e.byteLength < t) throw new RangeError('"offset" is outside of buffer bounds');
                    if (e.byteLength < t + (i || 0)) throw new RangeError('"length" is outside of buffer bounds');
                    let s;
                    return s = void 0 === t && void 0 === i ? new Uint8Array(e) : void 0 === i ? new Uint8Array(e, t) : new Uint8Array(e, t, i), Object.setPrototypeOf(s, d.prototype), s;
                }
                function f(e) {
                    if (e >= a) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a.toString(16) + " bytes");
                    return 0 | e;
                }
                function g(e, t) {
                    if (d.isBuffer(e)) return e.length;
                    if (ArrayBuffer.isView(e) || K(e, ArrayBuffer)) return e.byteLength;
                    if ("string" != typeof e) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e);
                    const i = e.length, s = arguments.length > 2 && !0 === arguments[2];
                    if (!s && 0 === i) return 0;
                    let n = !1;
                    for(;;)switch(t){
                        case "ascii":
                        case "latin1":
                        case "binary":
                            return i;
                        case "utf8":
                        case "utf-8":
                            return W(e).length;
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return 2 * i;
                        case "hex":
                            return i >>> 1;
                        case "base64":
                            return Y(e).length;
                        default:
                            if (n) return s ? -1 : W(e).length;
                            t = ("" + t).toLowerCase(), n = !0;
                    }
                }
                function m(e, t, i) {
                    let s = !1;
                    if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";
                    if ((void 0 === i || i > this.length) && (i = this.length), i <= 0) return "";
                    if ((i >>>= 0) <= (t >>>= 0)) return "";
                    for(e || (e = "utf8");;)switch(e){
                        case "hex":
                            return R(this, t, i);
                        case "utf8":
                        case "utf-8":
                            return I(this, t, i);
                        case "ascii":
                            return D(this, t, i);
                        case "latin1":
                        case "binary":
                            return P(this, t, i);
                        case "base64":
                            return _(this, t, i);
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return L(this, t, i);
                        default:
                            if (s) throw new TypeError("Unknown encoding: " + e);
                            e = (e + "").toLowerCase(), s = !0;
                    }
                }
                function v(e, t, i) {
                    const s = e[t];
                    e[t] = e[i], e[i] = s;
                }
                function y(e, t, i, s, n) {
                    if (0 === e.length) return -1;
                    if ("string" == typeof i ? (s = i, i = 0) : i > 2147483647 ? i = 2147483647 : i < -2147483648 && (i = -2147483648), Q(i = +i) && (i = n ? 0 : e.length - 1), i < 0 && (i = e.length + i), i >= e.length) {
                        if (n) return -1;
                        i = e.length - 1;
                    } else if (i < 0) {
                        if (!n) return -1;
                        i = 0;
                    }
                    if ("string" == typeof t && (t = d.from(t, s)), d.isBuffer(t)) return 0 === t.length ? -1 : T(e, t, i, s, n);
                    if ("number" == typeof t) return t &= 255, "function" == typeof Uint8Array.prototype.indexOf ? n ? Uint8Array.prototype.indexOf.call(e, t, i) : Uint8Array.prototype.lastIndexOf.call(e, t, i) : T(e, [
                        t
                    ], i, s, n);
                    throw new TypeError("val must be string, number or Buffer");
                }
                function T(e, t, i, s, n) {
                    let r, a = 1, o = e.length, d = t.length;
                    if (void 0 !== s && ("ucs2" === (s = String(s).toLowerCase()) || "ucs-2" === s || "utf16le" === s || "utf-16le" === s)) {
                        if (e.length < 2 || t.length < 2) return -1;
                        a = 2, o /= 2, d /= 2, i /= 2;
                    }
                    function c(e, t) {
                        return 1 === a ? e[t] : e.readUInt16BE(t * a);
                    }
                    if (n) {
                        let s = -1;
                        for(r = i; r < o; r++)if (c(e, r) === c(t, -1 === s ? 0 : r - s)) {
                            if (-1 === s && (s = r), r - s + 1 === d) return s * a;
                        } else -1 !== s && (r -= r - s), s = -1;
                    } else for(i + d > o && (i = o - d), r = i; r >= 0; r--){
                        let i = !0;
                        for(let s = 0; s < d; s++)if (c(e, r + s) !== c(t, s)) {
                            i = !1;
                            break;
                        }
                        if (i) return r;
                    }
                    return -1;
                }
                function S(e, t, i, s) {
                    i = Number(i) || 0;
                    const n = e.length - i;
                    s ? (s = Number(s)) > n && (s = n) : s = n;
                    const r = t.length;
                    let a;
                    for(s > r / 2 && (s = r / 2), a = 0; a < s; ++a){
                        const s = parseInt(t.substr(2 * a, 2), 16);
                        if (Q(s)) return a;
                        e[i + a] = s;
                    }
                    return a;
                }
                function E(e, t, i, s) {
                    return z(W(t, e.length - i), e, i, s);
                }
                function b(e, t, i, s) {
                    return z(function(e) {
                        const t = [];
                        for(let i = 0; i < e.length; ++i)t.push(255 & e.charCodeAt(i));
                        return t;
                    }(t), e, i, s);
                }
                function A(e, t, i, s) {
                    return z(Y(t), e, i, s);
                }
                function w(e, t, i, s) {
                    return z(function(e, t) {
                        let i, s, n;
                        const r = [];
                        for(let a = 0; a < e.length && !((t -= 2) < 0); ++a)i = e.charCodeAt(a), s = i >> 8, n = i % 256, r.push(n), r.push(s);
                        return r;
                    }(t, e.length - i), e, i, s);
                }
                function _(e, t, i) {
                    return 0 === t && i === e.length ? s.fromByteArray(e) : s.fromByteArray(e.slice(t, i));
                }
                function I(e, t, i) {
                    i = Math.min(e.length, i);
                    const s = [];
                    let n = t;
                    for(; n < i;){
                        const t = e[n];
                        let r = null, a = t > 239 ? 4 : t > 223 ? 3 : t > 191 ? 2 : 1;
                        if (n + a <= i) {
                            let i, s, o, d;
                            switch(a){
                                case 1:
                                    t < 128 && (r = t);
                                    break;
                                case 2:
                                    i = e[n + 1], 128 == (192 & i) && (d = (31 & t) << 6 | 63 & i, d > 127 && (r = d));
                                    break;
                                case 3:
                                    i = e[n + 1], s = e[n + 2], 128 == (192 & i) && 128 == (192 & s) && (d = (15 & t) << 12 | (63 & i) << 6 | 63 & s, d > 2047 && (d < 55296 || d > 57343) && (r = d));
                                    break;
                                case 4:
                                    i = e[n + 1], s = e[n + 2], o = e[n + 3], 128 == (192 & i) && 128 == (192 & s) && 128 == (192 & o) && (d = (15 & t) << 18 | (63 & i) << 12 | (63 & s) << 6 | 63 & o, d > 65535 && d < 1114112 && (r = d));
                            }
                        }
                        null === r ? (r = 65533, a = 1) : r > 65535 && (r -= 65536, s.push(r >>> 10 & 1023 | 55296), r = 56320 | 1023 & r), s.push(r), n += a;
                    }
                    return function(e) {
                        const t = e.length;
                        if (t <= N) return String.fromCharCode.apply(String, e);
                        let i = "", s = 0;
                        for(; s < t;)i += String.fromCharCode.apply(String, e.slice(s, s += N));
                        return i;
                    }(s);
                }
                d.TYPED_ARRAY_SUPPORT = function() {
                    try {
                        const e = new Uint8Array(1), t = {
                            foo: function() {
                                return 42;
                            }
                        };
                        return Object.setPrototypeOf(t, Uint8Array.prototype), Object.setPrototypeOf(e, t), 42 === e.foo();
                    } catch (e) {
                        return !1;
                    }
                }(), d.TYPED_ARRAY_SUPPORT || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(d.prototype, "parent", {
                    enumerable: !0,
                    get: function() {
                        if (d.isBuffer(this)) return this.buffer;
                    }
                }), Object.defineProperty(d.prototype, "offset", {
                    enumerable: !0,
                    get: function() {
                        if (d.isBuffer(this)) return this.byteOffset;
                    }
                }), d.poolSize = 8192, d.from = function(e, t, i) {
                    return c(e, t, i);
                }, Object.setPrototypeOf(d.prototype, Uint8Array.prototype), Object.setPrototypeOf(d, Uint8Array), d.alloc = function(e, t, i) {
                    return function(e, t, i) {
                        return u(e), e <= 0 ? o(e) : void 0 !== t ? "string" == typeof i ? o(e).fill(t, i) : o(e).fill(t) : o(e);
                    }(e, t, i);
                }, d.allocUnsafe = function(e) {
                    return l(e);
                }, d.allocUnsafeSlow = function(e) {
                    return l(e);
                }, d.isBuffer = function(e) {
                    return null != e && !0 === e._isBuffer && e !== d.prototype;
                }, d.compare = function(e, t) {
                    if (K(e, Uint8Array) && (e = d.from(e, e.offset, e.byteLength)), K(t, Uint8Array) && (t = d.from(t, t.offset, t.byteLength)), !d.isBuffer(e) || !d.isBuffer(t)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                    if (e === t) return 0;
                    let i = e.length, s = t.length;
                    for(let n = 0, r = Math.min(i, s); n < r; ++n)if (e[n] !== t[n]) {
                        i = e[n], s = t[n];
                        break;
                    }
                    return i < s ? -1 : s < i ? 1 : 0;
                }, d.isEncoding = function(e) {
                    switch(String(e).toLowerCase()){
                        case "hex":
                        case "utf8":
                        case "utf-8":
                        case "ascii":
                        case "latin1":
                        case "binary":
                        case "base64":
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return !0;
                        default:
                            return !1;
                    }
                }, d.concat = function(e, t) {
                    if (!Array.isArray(e)) throw new TypeError('"list" argument must be an Array of Buffers');
                    if (0 === e.length) return d.alloc(0);
                    let i;
                    if (void 0 === t) for(t = 0, i = 0; i < e.length; ++i)t += e[i].length;
                    const s = d.allocUnsafe(t);
                    let n = 0;
                    for(i = 0; i < e.length; ++i){
                        let t = e[i];
                        if (K(t, Uint8Array)) n + t.length > s.length ? (d.isBuffer(t) || (t = d.from(t)), t.copy(s, n)) : Uint8Array.prototype.set.call(s, t, n);
                        else {
                            if (!d.isBuffer(t)) throw new TypeError('"list" argument must be an Array of Buffers');
                            t.copy(s, n);
                        }
                        n += t.length;
                    }
                    return s;
                }, d.byteLength = g, d.prototype._isBuffer = !0, d.prototype.swap16 = function() {
                    const e = this.length;
                    if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
                    for(let t = 0; t < e; t += 2)v(this, t, t + 1);
                    return this;
                }, d.prototype.swap32 = function() {
                    const e = this.length;
                    if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
                    for(let t = 0; t < e; t += 4)v(this, t, t + 3), v(this, t + 1, t + 2);
                    return this;
                }, d.prototype.swap64 = function() {
                    const e = this.length;
                    if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
                    for(let t = 0; t < e; t += 8)v(this, t, t + 7), v(this, t + 1, t + 6), v(this, t + 2, t + 5), v(this, t + 3, t + 4);
                    return this;
                }, d.prototype.toString = function() {
                    const e = this.length;
                    return 0 === e ? "" : 0 === arguments.length ? I(this, 0, e) : m.apply(this, arguments);
                }, d.prototype.toLocaleString = d.prototype.toString, d.prototype.equals = function(e) {
                    if (!d.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
                    return this === e || 0 === d.compare(this, e);
                }, d.prototype.inspect = function() {
                    let e = "";
                    const i = t.IS;
                    return e = this.toString("hex", 0, i).replace(/(.{2})/g, "$1 ").trim(), this.length > i && (e += " ... "), "<Buffer " + e + ">";
                }, r && (d.prototype[r] = d.prototype.inspect), d.prototype.compare = function(e, t, i, s, n) {
                    if (K(e, Uint8Array) && (e = d.from(e, e.offset, e.byteLength)), !d.isBuffer(e)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);
                    if (void 0 === t && (t = 0), void 0 === i && (i = e ? e.length : 0), void 0 === s && (s = 0), void 0 === n && (n = this.length), t < 0 || i > e.length || s < 0 || n > this.length) throw new RangeError("out of range index");
                    if (s >= n && t >= i) return 0;
                    if (s >= n) return -1;
                    if (t >= i) return 1;
                    if (this === e) return 0;
                    let r = (n >>>= 0) - (s >>>= 0), a = (i >>>= 0) - (t >>>= 0);
                    const o = Math.min(r, a), c = this.slice(s, n), u = e.slice(t, i);
                    for(let e = 0; e < o; ++e)if (c[e] !== u[e]) {
                        r = c[e], a = u[e];
                        break;
                    }
                    return r < a ? -1 : a < r ? 1 : 0;
                }, d.prototype.includes = function(e, t, i) {
                    return -1 !== this.indexOf(e, t, i);
                }, d.prototype.indexOf = function(e, t, i) {
                    return y(this, e, t, i, !0);
                }, d.prototype.lastIndexOf = function(e, t, i) {
                    return y(this, e, t, i, !1);
                }, d.prototype.write = function(e, t, i, s) {
                    if (void 0 === t) s = "utf8", i = this.length, t = 0;
                    else if (void 0 === i && "string" == typeof t) s = t, i = this.length, t = 0;
                    else {
                        if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                        t >>>= 0, isFinite(i) ? (i >>>= 0, void 0 === s && (s = "utf8")) : (s = i, i = void 0);
                    }
                    const n = this.length - t;
                    if ((void 0 === i || i > n) && (i = n), e.length > 0 && (i < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");
                    s || (s = "utf8");
                    let r = !1;
                    for(;;)switch(s){
                        case "hex":
                            return S(this, e, t, i);
                        case "utf8":
                        case "utf-8":
                            return E(this, e, t, i);
                        case "ascii":
                        case "latin1":
                        case "binary":
                            return b(this, e, t, i);
                        case "base64":
                            return A(this, e, t, i);
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return w(this, e, t, i);
                        default:
                            if (r) throw new TypeError("Unknown encoding: " + s);
                            s = ("" + s).toLowerCase(), r = !0;
                    }
                }, d.prototype.toJSON = function() {
                    return {
                        type: "Buffer",
                        data: Array.prototype.slice.call(this._arr || this, 0)
                    };
                };
                const N = 4096;
                function D(e, t, i) {
                    let s = "";
                    i = Math.min(e.length, i);
                    for(let n = t; n < i; ++n)s += String.fromCharCode(127 & e[n]);
                    return s;
                }
                function P(e, t, i) {
                    let s = "";
                    i = Math.min(e.length, i);
                    for(let n = t; n < i; ++n)s += String.fromCharCode(e[n]);
                    return s;
                }
                function R(e, t, i) {
                    const s = e.length;
                    (!t || t < 0) && (t = 0), (!i || i < 0 || i > s) && (i = s);
                    let n = "";
                    for(let s = t; s < i; ++s)n += J[e[s]];
                    return n;
                }
                function L(e, t, i) {
                    const s = e.slice(t, i);
                    let n = "";
                    for(let e = 0; e < s.length - 1; e += 2)n += String.fromCharCode(s[e] + 256 * s[e + 1]);
                    return n;
                }
                function C(e, t, i) {
                    if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");
                    if (e + t > i) throw new RangeError("Trying to access beyond buffer length");
                }
                function O(e, t, i, s, n, r) {
                    if (!d.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
                    if (t > n || t < r) throw new RangeError('"value" argument is out of bounds');
                    if (i + s > e.length) throw new RangeError("Index out of range");
                }
                function B(e, t, i, s, n) {
                    X(t, s, n, e, i, 7);
                    let r = Number(t & BigInt(4294967295));
                    e[i++] = r, r >>= 8, e[i++] = r, r >>= 8, e[i++] = r, r >>= 8, e[i++] = r;
                    let a = Number(t >> BigInt(32) & BigInt(4294967295));
                    return e[i++] = a, a >>= 8, e[i++] = a, a >>= 8, e[i++] = a, a >>= 8, e[i++] = a, i;
                }
                function x(e, t, i, s, n) {
                    X(t, s, n, e, i, 7);
                    let r = Number(t & BigInt(4294967295));
                    e[i + 7] = r, r >>= 8, e[i + 6] = r, r >>= 8, e[i + 5] = r, r >>= 8, e[i + 4] = r;
                    let a = Number(t >> BigInt(32) & BigInt(4294967295));
                    return e[i + 3] = a, a >>= 8, e[i + 2] = a, a >>= 8, e[i + 1] = a, a >>= 8, e[i] = a, i + 8;
                }
                function M(e, t, i, s, n, r) {
                    if (i + s > e.length) throw new RangeError("Index out of range");
                    if (i < 0) throw new RangeError("Index out of range");
                }
                function k(e, t, i, s, r) {
                    return t = +t, i >>>= 0, r || M(e, 0, i, 4), n.write(e, t, i, s, 23, 4), i + 4;
                }
                function U(e, t, i, s, r) {
                    return t = +t, i >>>= 0, r || M(e, 0, i, 8), n.write(e, t, i, s, 52, 8), i + 8;
                }
                d.prototype.slice = function(e, t) {
                    const i = this.length;
                    (e = ~~e) < 0 ? (e += i) < 0 && (e = 0) : e > i && (e = i), (t = void 0 === t ? i : ~~t) < 0 ? (t += i) < 0 && (t = 0) : t > i && (t = i), t < e && (t = e);
                    const s = this.subarray(e, t);
                    return Object.setPrototypeOf(s, d.prototype), s;
                }, d.prototype.readUintLE = d.prototype.readUIntLE = function(e, t, i) {
                    e >>>= 0, t >>>= 0, i || C(e, t, this.length);
                    let s = this[e], n = 1, r = 0;
                    for(; ++r < t && (n *= 256);)s += this[e + r] * n;
                    return s;
                }, d.prototype.readUintBE = d.prototype.readUIntBE = function(e, t, i) {
                    e >>>= 0, t >>>= 0, i || C(e, t, this.length);
                    let s = this[e + --t], n = 1;
                    for(; t > 0 && (n *= 256);)s += this[e + --t] * n;
                    return s;
                }, d.prototype.readUint8 = d.prototype.readUInt8 = function(e, t) {
                    return e >>>= 0, t || C(e, 1, this.length), this[e];
                }, d.prototype.readUint16LE = d.prototype.readUInt16LE = function(e, t) {
                    return e >>>= 0, t || C(e, 2, this.length), this[e] | this[e + 1] << 8;
                }, d.prototype.readUint16BE = d.prototype.readUInt16BE = function(e, t) {
                    return e >>>= 0, t || C(e, 2, this.length), this[e] << 8 | this[e + 1];
                }, d.prototype.readUint32LE = d.prototype.readUInt32LE = function(e, t) {
                    return e >>>= 0, t || C(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
                }, d.prototype.readUint32BE = d.prototype.readUInt32BE = function(e, t) {
                    return e >>>= 0, t || C(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
                }, d.prototype.readBigUInt64LE = $(function(e) {
                    H(e >>>= 0, "offset");
                    const t = this[e], i = this[e + 7];
                    void 0 !== t && void 0 !== i || G(e, this.length - 8);
                    const s = t + 256 * this[++e] + 65536 * this[++e] + this[++e] * 2 ** 24, n = this[++e] + 256 * this[++e] + 65536 * this[++e] + i * 2 ** 24;
                    return BigInt(s) + (BigInt(n) << BigInt(32));
                }), d.prototype.readBigUInt64BE = $(function(e) {
                    H(e >>>= 0, "offset");
                    const t = this[e], i = this[e + 7];
                    void 0 !== t && void 0 !== i || G(e, this.length - 8);
                    const s = t * 2 ** 24 + 65536 * this[++e] + 256 * this[++e] + this[++e], n = this[++e] * 2 ** 24 + 65536 * this[++e] + 256 * this[++e] + i;
                    return (BigInt(s) << BigInt(32)) + BigInt(n);
                }), d.prototype.readIntLE = function(e, t, i) {
                    e >>>= 0, t >>>= 0, i || C(e, t, this.length);
                    let s = this[e], n = 1, r = 0;
                    for(; ++r < t && (n *= 256);)s += this[e + r] * n;
                    return n *= 128, s >= n && (s -= Math.pow(2, 8 * t)), s;
                }, d.prototype.readIntBE = function(e, t, i) {
                    e >>>= 0, t >>>= 0, i || C(e, t, this.length);
                    let s = t, n = 1, r = this[e + --s];
                    for(; s > 0 && (n *= 256);)r += this[e + --s] * n;
                    return n *= 128, r >= n && (r -= Math.pow(2, 8 * t)), r;
                }, d.prototype.readInt8 = function(e, t) {
                    return e >>>= 0, t || C(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
                }, d.prototype.readInt16LE = function(e, t) {
                    e >>>= 0, t || C(e, 2, this.length);
                    const i = this[e] | this[e + 1] << 8;
                    return 32768 & i ? 4294901760 | i : i;
                }, d.prototype.readInt16BE = function(e, t) {
                    e >>>= 0, t || C(e, 2, this.length);
                    const i = this[e + 1] | this[e] << 8;
                    return 32768 & i ? 4294901760 | i : i;
                }, d.prototype.readInt32LE = function(e, t) {
                    return e >>>= 0, t || C(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
                }, d.prototype.readInt32BE = function(e, t) {
                    return e >>>= 0, t || C(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
                }, d.prototype.readBigInt64LE = $(function(e) {
                    H(e >>>= 0, "offset");
                    const t = this[e], i = this[e + 7];
                    void 0 !== t && void 0 !== i || G(e, this.length - 8);
                    const s = this[e + 4] + 256 * this[e + 5] + 65536 * this[e + 6] + (i << 24);
                    return (BigInt(s) << BigInt(32)) + BigInt(t + 256 * this[++e] + 65536 * this[++e] + this[++e] * 2 ** 24);
                }), d.prototype.readBigInt64BE = $(function(e) {
                    H(e >>>= 0, "offset");
                    const t = this[e], i = this[e + 7];
                    void 0 !== t && void 0 !== i || G(e, this.length - 8);
                    const s = (t << 24) + 65536 * this[++e] + 256 * this[++e] + this[++e];
                    return (BigInt(s) << BigInt(32)) + BigInt(this[++e] * 2 ** 24 + 65536 * this[++e] + 256 * this[++e] + i);
                }), d.prototype.readFloatLE = function(e, t) {
                    return e >>>= 0, t || C(e, 4, this.length), n.read(this, e, !0, 23, 4);
                }, d.prototype.readFloatBE = function(e, t) {
                    return e >>>= 0, t || C(e, 4, this.length), n.read(this, e, !1, 23, 4);
                }, d.prototype.readDoubleLE = function(e, t) {
                    return e >>>= 0, t || C(e, 8, this.length), n.read(this, e, !0, 52, 8);
                }, d.prototype.readDoubleBE = function(e, t) {
                    return e >>>= 0, t || C(e, 8, this.length), n.read(this, e, !1, 52, 8);
                }, d.prototype.writeUintLE = d.prototype.writeUIntLE = function(e, t, i, s) {
                    e = +e, t >>>= 0, i >>>= 0, s || O(this, e, t, i, Math.pow(2, 8 * i) - 1, 0);
                    let n = 1, r = 0;
                    for(this[t] = 255 & e; ++r < i && (n *= 256);)this[t + r] = e / n & 255;
                    return t + i;
                }, d.prototype.writeUintBE = d.prototype.writeUIntBE = function(e, t, i, s) {
                    e = +e, t >>>= 0, i >>>= 0, s || O(this, e, t, i, Math.pow(2, 8 * i) - 1, 0);
                    let n = i - 1, r = 1;
                    for(this[t + n] = 255 & e; --n >= 0 && (r *= 256);)this[t + n] = e / r & 255;
                    return t + i;
                }, d.prototype.writeUint8 = d.prototype.writeUInt8 = function(e, t, i) {
                    return e = +e, t >>>= 0, i || O(this, e, t, 1, 255, 0), this[t] = 255 & e, t + 1;
                }, d.prototype.writeUint16LE = d.prototype.writeUInt16LE = function(e, t, i) {
                    return e = +e, t >>>= 0, i || O(this, e, t, 2, 65535, 0), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
                }, d.prototype.writeUint16BE = d.prototype.writeUInt16BE = function(e, t, i) {
                    return e = +e, t >>>= 0, i || O(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
                }, d.prototype.writeUint32LE = d.prototype.writeUInt32LE = function(e, t, i) {
                    return e = +e, t >>>= 0, i || O(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e, t + 4;
                }, d.prototype.writeUint32BE = d.prototype.writeUInt32BE = function(e, t, i) {
                    return e = +e, t >>>= 0, i || O(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
                }, d.prototype.writeBigUInt64LE = $(function(e, t = 0) {
                    return B(this, e, t, BigInt(0), BigInt("0xffffffffffffffff"));
                }), d.prototype.writeBigUInt64BE = $(function(e, t = 0) {
                    return x(this, e, t, BigInt(0), BigInt("0xffffffffffffffff"));
                }), d.prototype.writeIntLE = function(e, t, i, s) {
                    if (e = +e, t >>>= 0, !s) {
                        const s = Math.pow(2, 8 * i - 1);
                        O(this, e, t, i, s - 1, -s);
                    }
                    let n = 0, r = 1, a = 0;
                    for(this[t] = 255 & e; ++n < i && (r *= 256);)e < 0 && 0 === a && 0 !== this[t + n - 1] && (a = 1), this[t + n] = (e / r | 0) - a & 255;
                    return t + i;
                }, d.prototype.writeIntBE = function(e, t, i, s) {
                    if (e = +e, t >>>= 0, !s) {
                        const s = Math.pow(2, 8 * i - 1);
                        O(this, e, t, i, s - 1, -s);
                    }
                    let n = i - 1, r = 1, a = 0;
                    for(this[t + n] = 255 & e; --n >= 0 && (r *= 256);)e < 0 && 0 === a && 0 !== this[t + n + 1] && (a = 1), this[t + n] = (e / r | 0) - a & 255;
                    return t + i;
                }, d.prototype.writeInt8 = function(e, t, i) {
                    return e = +e, t >>>= 0, i || O(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;
                }, d.prototype.writeInt16LE = function(e, t, i) {
                    return e = +e, t >>>= 0, i || O(this, e, t, 2, 32767, -32768), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
                }, d.prototype.writeInt16BE = function(e, t, i) {
                    return e = +e, t >>>= 0, i || O(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
                }, d.prototype.writeInt32LE = function(e, t, i) {
                    return e = +e, t >>>= 0, i || O(this, e, t, 4, 2147483647, -2147483648), this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;
                }, d.prototype.writeInt32BE = function(e, t, i) {
                    return e = +e, t >>>= 0, i || O(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
                }, d.prototype.writeBigInt64LE = $(function(e, t = 0) {
                    return B(this, e, t, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
                }), d.prototype.writeBigInt64BE = $(function(e, t = 0) {
                    return x(this, e, t, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
                }), d.prototype.writeFloatLE = function(e, t, i) {
                    return k(this, e, t, !0, i);
                }, d.prototype.writeFloatBE = function(e, t, i) {
                    return k(this, e, t, !1, i);
                }, d.prototype.writeDoubleLE = function(e, t, i) {
                    return U(this, e, t, !0, i);
                }, d.prototype.writeDoubleBE = function(e, t, i) {
                    return U(this, e, t, !1, i);
                }, d.prototype.copy = function(e, t, i, s) {
                    if (!d.isBuffer(e)) throw new TypeError("argument should be a Buffer");
                    if (i || (i = 0), s || 0 === s || (s = this.length), t >= e.length && (t = e.length), t || (t = 0), s > 0 && s < i && (s = i), s === i) return 0;
                    if (0 === e.length || 0 === this.length) return 0;
                    if (t < 0) throw new RangeError("targetStart out of bounds");
                    if (i < 0 || i >= this.length) throw new RangeError("Index out of range");
                    if (s < 0) throw new RangeError("sourceEnd out of bounds");
                    s > this.length && (s = this.length), e.length - t < s - i && (s = e.length - t + i);
                    const n = s - i;
                    return this === e && "function" == typeof Uint8Array.prototype.copyWithin ? this.copyWithin(t, i, s) : Uint8Array.prototype.set.call(e, this.subarray(i, s), t), n;
                }, d.prototype.fill = function(e, t, i, s) {
                    if ("string" == typeof e) {
                        if ("string" == typeof t ? (s = t, t = 0, i = this.length) : "string" == typeof i && (s = i, i = this.length), void 0 !== s && "string" != typeof s) throw new TypeError("encoding must be a string");
                        if ("string" == typeof s && !d.isEncoding(s)) throw new TypeError("Unknown encoding: " + s);
                        if (1 === e.length) {
                            const t = e.charCodeAt(0);
                            ("utf8" === s && t < 128 || "latin1" === s) && (e = t);
                        }
                    } else "number" == typeof e ? e &= 255 : "boolean" == typeof e && (e = Number(e));
                    if (t < 0 || this.length < t || this.length < i) throw new RangeError("Out of range index");
                    if (i <= t) return this;
                    let n;
                    if (t >>>= 0, i = void 0 === i ? this.length : i >>> 0, e || (e = 0), "number" == typeof e) for(n = t; n < i; ++n)this[n] = e;
                    else {
                        const r = d.isBuffer(e) ? e : d.from(e, s), a = r.length;
                        if (0 === a) throw new TypeError('The value "' + e + '" is invalid for argument "value"');
                        for(n = 0; n < i - t; ++n)this[n + t] = r[n % a];
                    }
                    return this;
                };
                const V = {};
                function q(e, t, i) {
                    V[e] = class extends i {
                        get code() {
                            return e;
                        }
                        set code(e) {
                            Object.defineProperty(this, "code", {
                                configurable: !0,
                                enumerable: !0,
                                value: e,
                                writable: !0
                            });
                        }
                        toString() {
                            return `${this.name} [${e}]: ${this.message}`;
                        }
                        constructor(){
                            super(), Object.defineProperty(this, "message", {
                                value: t.apply(this, arguments),
                                writable: !0,
                                configurable: !0
                            }), this.name = `${this.name} [${e}]`, this.stack, delete this.name;
                        }
                    };
                }
                function F(e) {
                    let t = "", i = e.length;
                    const s = "-" === e[0] ? 1 : 0;
                    for(; i >= s + 4; i -= 3)t = `_${e.slice(i - 3, i)}${t}`;
                    return `${e.slice(0, i)}${t}`;
                }
                function X(e, t, i, s, n, r) {
                    if (e > i || e < t) {
                        const s = "bigint" == typeof t ? "n" : "";
                        let n;
                        throw n = r > 3 ? 0 === t || t === BigInt(0) ? `>= 0${s} and < 2${s} ** ${8 * (r + 1)}${s}` : `>= -(2${s} ** ${8 * (r + 1) - 1}${s}) and < 2 ** ${8 * (r + 1) - 1}${s}` : `>= ${t}${s} and <= ${i}${s}`, new V.ERR_OUT_OF_RANGE("value", n, e);
                    }
                    !function(e, t, i) {
                        H(t, "offset"), void 0 !== e[t] && void 0 !== e[t + i] || G(t, e.length - (i + 1));
                    }(s, n, r);
                }
                function H(e, t) {
                    if ("number" != typeof e) throw new V.ERR_INVALID_ARG_TYPE(t, "number", e);
                }
                function G(e, t, i) {
                    if (Math.floor(e) !== e) throw H(e, i), new V.ERR_OUT_OF_RANGE(i || "offset", "an integer", e);
                    if (t < 0) throw new V.ERR_BUFFER_OUT_OF_BOUNDS;
                    throw new V.ERR_OUT_OF_RANGE(i || "offset", `>= ${i ? 1 : 0} and <= ${t}`, e);
                }
                q("ERR_BUFFER_OUT_OF_BOUNDS", function(e) {
                    return e ? `${e} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
                }, RangeError), q("ERR_INVALID_ARG_TYPE", function(e, t) {
                    return `The "${e}" argument must be of type number. Received type ${typeof t}`;
                }, TypeError), q("ERR_OUT_OF_RANGE", function(e, t, i) {
                    let s = `The value of "${e}" is out of range.`, n = i;
                    return Number.isInteger(i) && Math.abs(i) > 2 ** 32 ? n = F(String(i)) : "bigint" == typeof i && (n = String(i), (i > BigInt(2) ** BigInt(32) || i < -(BigInt(2) ** BigInt(32))) && (n = F(n)), n += "n"), s += ` It must be ${t}. Received ${n}`, s;
                }, RangeError);
                const j = /[^+/0-9A-Za-z-_]/g;
                function W(e, t) {
                    let i;
                    t = t || 1 / 0;
                    const s = e.length;
                    let n = null;
                    const r = [];
                    for(let a = 0; a < s; ++a){
                        if (i = e.charCodeAt(a), i > 55295 && i < 57344) {
                            if (!n) {
                                if (i > 56319) {
                                    (t -= 3) > -1 && r.push(239, 191, 189);
                                    continue;
                                }
                                if (a + 1 === s) {
                                    (t -= 3) > -1 && r.push(239, 191, 189);
                                    continue;
                                }
                                n = i;
                                continue;
                            }
                            if (i < 56320) {
                                (t -= 3) > -1 && r.push(239, 191, 189), n = i;
                                continue;
                            }
                            i = 65536 + (n - 55296 << 10 | i - 56320);
                        } else n && (t -= 3) > -1 && r.push(239, 191, 189);
                        if (n = null, i < 128) {
                            if ((t -= 1) < 0) break;
                            r.push(i);
                        } else if (i < 2048) {
                            if ((t -= 2) < 0) break;
                            r.push(i >> 6 | 192, 63 & i | 128);
                        } else if (i < 65536) {
                            if ((t -= 3) < 0) break;
                            r.push(i >> 12 | 224, i >> 6 & 63 | 128, 63 & i | 128);
                        } else {
                            if (!(i < 1114112)) throw new Error("Invalid code point");
                            if ((t -= 4) < 0) break;
                            r.push(i >> 18 | 240, i >> 12 & 63 | 128, i >> 6 & 63 | 128, 63 & i | 128);
                        }
                    }
                    return r;
                }
                function Y(e) {
                    return s.toByteArray(function(e) {
                        if ((e = (e = e.split("=")[0]).trim().replace(j, "")).length < 2) return "";
                        for(; e.length % 4 != 0;)e += "=";
                        return e;
                    }(e));
                }
                function z(e, t, i, s) {
                    let n;
                    for(n = 0; n < s && !(n + i >= t.length || n >= e.length); ++n)t[n + i] = e[n];
                    return n;
                }
                function K(e, t) {
                    return e instanceof t || null != e && null != e.constructor && null != e.constructor.name && e.constructor.name === t.name;
                }
                function Q(e) {
                    return e != e;
                }
                const J = function() {
                    const e = "0123456789abcdef", t = new Array(256);
                    for(let i = 0; i < 16; ++i){
                        const s = 16 * i;
                        for(let n = 0; n < 16; ++n)t[s + n] = e[i] + e[n];
                    }
                    return t;
                }();
                function $(e) {
                    return "undefined" == typeof BigInt ? Z : e;
                }
                function Z() {
                    throw new Error("BigInt not supported");
                }
            },
            2553: (e, t, i)=>{
                var s;
                s = "undefined" != typeof window ? window : void 0 !== i.g ? i.g : "undefined" != typeof self ? self : {}, e.exports = s;
            },
            8641: (e, t, i)=>{
                var s, n = i(1048).hp;
                self, s = ()=>{
                    var e, t;
                    return e = {
                        851: (e, t, i)=>{
                            var s = i(771), n = s.getOptions, r = s.setOptions, a = i(463), o = i(367), d = i(890);
                            e.exports = {
                                parse: a,
                                stringify: o,
                                types: d,
                                getOptions: n,
                                setOptions: r
                            };
                        },
                        463: (e, t, i)=>{
                            function s(e, t) {
                                return function(e) {
                                    if (Array.isArray(e)) return e;
                                }(e) || function(e, t) {
                                    var i = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                                    if (null != i) {
                                        var s, n, r, a, o = [], d = !0, c = !1;
                                        try {
                                            if (r = (i = i.call(e)).next, 0 === t) {
                                                if (Object(i) !== i) return;
                                                d = !1;
                                            } else for(; !(d = (s = r.call(i)).done) && (o.push(s.value), o.length !== t); d = !0);
                                        } catch (e) {
                                            c = !0, n = e;
                                        } finally{
                                            try {
                                                if (!d && null != i.return && (a = i.return(), Object(a) !== a)) return;
                                            } finally{
                                                if (c) throw n;
                                            }
                                        }
                                        return o;
                                    }
                                }(e, t) || a(e, t) || function() {
                                    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                                }();
                            }
                            function r(e, t) {
                                var i = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                                if (!i) {
                                    if (Array.isArray(e) || (i = a(e)) || t && e && "number" == typeof e.length) {
                                        i && (e = i);
                                        var s = 0, n = function() {};
                                        return {
                                            s: n,
                                            n: function() {
                                                return s >= e.length ? {
                                                    done: !0
                                                } : {
                                                    done: !1,
                                                    value: e[s++]
                                                };
                                            },
                                            e: function(e) {
                                                throw e;
                                            },
                                            f: n
                                        };
                                    }
                                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                                }
                                var r, o = !0, d = !1;
                                return {
                                    s: function() {
                                        i = i.call(e);
                                    },
                                    n: function() {
                                        var e = i.next();
                                        return o = e.done, e;
                                    },
                                    e: function(e) {
                                        d = !0, r = e;
                                    },
                                    f: function() {
                                        try {
                                            o || null == i.return || i.return();
                                        } finally{
                                            if (d) throw r;
                                        }
                                    }
                                };
                            }
                            function a(e, t) {
                                if (e) {
                                    if ("string" == typeof e) return o(e, t);
                                    var i = Object.prototype.toString.call(e).slice(8, -1);
                                    return "Object" === i && e.constructor && (i = e.constructor.name), "Map" === i || "Set" === i ? Array.from(e) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? o(e, t) : void 0;
                                }
                            }
                            function o(e, t) {
                                (null == t || t > e.length) && (t = e.length);
                                for(var i = 0, s = new Array(t); i < t; i++)s[i] = e[i];
                                return s;
                            }
                            var d = i(771), c = i(890), u = c.Rendition, l = c.Variant, h = c.SessionData, p = c.Key, f = c.MediaInitializationSection, g = c.DateRange, m = c.SpliceInfo, v = c.MasterPlaylist, y = c.MediaPlaylist, T = c.Segment, S = c.PartialSegment, E = c.PrefetchSegment, b = c.RenditionReport;
                            function A(e) {
                                return d.trim(e, '"');
                            }
                            function w(e) {
                                var t = d.splitAt(e, ",");
                                return {
                                    duration: d.toNumber(t[0]),
                                    title: decodeURIComponent(escape(t[1]))
                                };
                            }
                            function _(e) {
                                var t = d.splitAt(e, "@");
                                return {
                                    length: d.toNumber(t[0]),
                                    offset: t[1] ? d.toNumber(t[1]) : -1
                                };
                            }
                            function I(e) {
                                var t = d.splitAt(e, "x");
                                return {
                                    width: d.toNumber(t[0]),
                                    height: d.toNumber(t[1])
                                };
                            }
                            function N(e) {
                                var t = "ALLOWED-CPC: Each entry must consit of KEYFORMAT and Content Protection Configuration", i = e.split(",");
                                0 === i.length && d.INVALIDPLAYLIST(t);
                                var n, a = [], o = r(i);
                                try {
                                    for(o.s(); !(n = o.n()).done;){
                                        var c = n.value, u = s(d.splitAt(c, ":"), 2), l = u[0], h = u[1];
                                        l && h ? a.push({
                                            format: l,
                                            cpcList: h.split("/")
                                        }) : d.INVALIDPLAYLIST(t);
                                    }
                                } catch (e) {
                                    o.e(e);
                                } finally{
                                    o.f();
                                }
                                return a;
                            }
                            function D(e) {
                                return e.startsWith('"') ? A(e) : e.startsWith("0x") || e.startsWith("0X") ? d.hexToByteSequence(e) : d.toNumber(e);
                            }
                            function P(e, t) {
                                t.IV && e.compatibleVersion < 2 && (e.compatibleVersion = 2), (t.KEYFORMAT || t.KEYFORMATVERSIONS) && e.compatibleVersion < 5 && (e.compatibleVersion = 5);
                            }
                            function R(e) {
                                var t, i, n, a = {}, o = r(d.splitByCommaWithPreservingQuotes(e));
                                try {
                                    for(o.s(); !(t = o.n()).done;){
                                        var c = t.value, u = s(d.splitAt(c, "="), 2), l = u[0], h = u[1], p = A(h);
                                        switch(l){
                                            case "URI":
                                                a[l] = p;
                                                break;
                                            case "START-DATE":
                                            case "END-DATE":
                                                a[l] = new Date(p);
                                                break;
                                            case "IV":
                                                a[l] = (i = p, 16 !== (n = d.hexToByteSequence(i)).length && d.INVALIDPLAYLIST("IV must be a 128-bit unsigned integer"), n);
                                                break;
                                            case "BYTERANGE":
                                                a[l] = _(p);
                                                break;
                                            case "RESOLUTION":
                                                a[l] = I(p);
                                                break;
                                            case "ALLOWED-CPC":
                                                a[l] = N(p);
                                                break;
                                            case "END-ON-NEXT":
                                            case "DEFAULT":
                                            case "AUTOSELECT":
                                            case "FORCED":
                                            case "PRECISE":
                                            case "CAN-BLOCK-RELOAD":
                                            case "INDEPENDENT":
                                            case "GAP":
                                                a[l] = "YES" === p;
                                                break;
                                            case "DURATION":
                                            case "PLANNED-DURATION":
                                            case "BANDWIDTH":
                                            case "AVERAGE-BANDWIDTH":
                                            case "FRAME-RATE":
                                            case "TIME-OFFSET":
                                            case "CAN-SKIP-UNTIL":
                                            case "HOLD-BACK":
                                            case "PART-HOLD-BACK":
                                            case "PART-TARGET":
                                            case "BYTERANGE-START":
                                            case "BYTERANGE-LENGTH":
                                            case "LAST-MSN":
                                            case "LAST-PART":
                                            case "SKIPPED-SEGMENTS":
                                            case "SCORE":
                                                a[l] = d.toNumber(p);
                                                break;
                                            default:
                                                l.startsWith("SCTE35-") ? a[l] = d.hexToByteSequence(p) : l.startsWith("X-") ? a[l] = D(h) : ("VIDEO-RANGE" === l && "SDR" !== p && "HLG" !== p && "PQ" !== p && d.INVALIDPLAYLIST('VIDEO-RANGE: unknown value "'.concat(p, '"')), a[l] = p);
                                        }
                                    }
                                } catch (e) {
                                    o.e(e);
                                } finally{
                                    o.f();
                                }
                                return a;
                            }
                            function L() {
                                d.INVALIDPLAYLIST("The file contains both media and master playlist tags.");
                            }
                            function C(e, t, i) {
                                var s, n = (s = t.attributes, new u({
                                    type: s.TYPE,
                                    uri: s.URI,
                                    groupId: s["GROUP-ID"],
                                    language: s.LANGUAGE,
                                    assocLanguage: s["ASSOC-LANGUAGE"],
                                    name: s.NAME,
                                    isDefault: s.DEFAULT,
                                    autoselect: s.AUTOSELECT,
                                    forced: s.FORCED,
                                    instreamId: s["INSTREAM-ID"],
                                    characteristics: s.CHARACTERISTICS,
                                    channels: s.CHANNELS
                                })), a = e[d.camelify(i)], o = function(e, t) {
                                    var i, s = !1, n = r(e);
                                    try {
                                        for(n.s(); !(i = n.n()).done;){
                                            var a = i.value;
                                            if (a.name === t.name) return "All EXT-X-MEDIA tags in the same Group MUST have different NAME attributes.";
                                            a.isDefault && (s = !0);
                                        }
                                    } catch (e) {
                                        n.e(e);
                                    } finally{
                                        n.f();
                                    }
                                    return s && t.isDefault ? "EXT-X-MEDIA A Group MUST NOT have more than one member with a DEFAULT attribute of YES." : "";
                                }(a, n);
                                o && d.INVALIDPLAYLIST(o), a.push(n), n.isDefault && (e.currentRenditions[d.camelify(i)] = a.length - 1);
                            }
                            function O(e, t, i, s, n) {
                                var a, o = new l({
                                    uri: i,
                                    bandwidth: t.BANDWIDTH,
                                    averageBandwidth: t["AVERAGE-BANDWIDTH"],
                                    score: t.SCORE,
                                    codecs: t.CODECS,
                                    resolution: t.RESOLUTION,
                                    frameRate: t["FRAME-RATE"],
                                    hdcpLevel: t["HDCP-LEVEL"],
                                    allowedCpc: t["ALLOWED-CPC"],
                                    videoRange: t["VIDEO-RANGE"],
                                    stableVariantId: t["STABLE-VARIANT-ID"]
                                }), c = r(e);
                                try {
                                    for(c.s(); !(a = c.n()).done;){
                                        var u = a.value;
                                        if ("EXT-X-MEDIA" === u.name) {
                                            var h = u.attributes, p = h.TYPE;
                                            if (p && h["GROUP-ID"] || d.INVALIDPLAYLIST("EXT-X-MEDIA TYPE attribute is REQUIRED."), t[p] === h["GROUP-ID"] && (C(o, u, p), "CLOSED-CAPTIONS" === p)) {
                                                var f, g = r(o.closedCaptions);
                                                try {
                                                    for(g.s(); !(f = g.n()).done;){
                                                        var m = f.value.instreamId;
                                                        if (m && m.startsWith("SERVICE") && n.compatibleVersion < 7) {
                                                            n.compatibleVersion = 7;
                                                            break;
                                                        }
                                                    }
                                                } catch (e) {
                                                    g.e(e);
                                                } finally{
                                                    g.f();
                                                }
                                            }
                                        }
                                    }
                                } catch (e) {
                                    c.e(e);
                                } finally{
                                    c.f();
                                }
                                return function(e, t, i) {
                                    for(var s = function() {
                                        var s = r[n];
                                        "CLOSED-CAPTIONS" === s && "NONE" === e[s] ? (i.isClosedCaptionsNone = !0, t.closedCaptions = []) : e[s] && !t[d.camelify(s)].some(function(t) {
                                            return t.groupId === e[s];
                                        }) && d.INVALIDPLAYLIST("".concat(s, " attribute MUST match the value of the GROUP-ID attribute of an EXT-X-MEDIA tag whose TYPE attribute is ").concat(s, "."));
                                    }, n = 0, r = [
                                        "AUDIO",
                                        "VIDEO",
                                        "SUBTITLES",
                                        "CLOSED-CAPTIONS"
                                    ]; n < r.length; n++)s();
                                }(t, o, n), o.isIFrameOnly = s, o;
                            }
                            function B(e, t) {
                                if (e.method !== t.method) return !1;
                                if (e.uri !== t.uri) return !1;
                                if (e.iv) {
                                    if (!t.iv) return !1;
                                    if (e.iv.length !== t.iv.length) return !1;
                                    for(var i = 0; i < e.iv.length; i++)if (e.iv[i] !== t.iv[i]) return !1;
                                } else if (t.iv) return !1;
                                return e.format === t.format && e.formatVersion === t.formatVersion;
                            }
                            function x(e, t, i, s, n, r, a) {
                                for(var o = new T({
                                    uri: t,
                                    mediaSequenceNumber: n,
                                    discontinuitySequence: r
                                }), c = !1, u = !1, l = i; l <= s; l++){
                                    var h = e[l], v = h.name, y = h.value, E = h.attributes;
                                    if ("EXTINF" === v) !Number.isInteger(y.duration) && a.compatibleVersion < 3 && (a.compatibleVersion = 3), Math.round(y.duration) > a.targetDuration && d.INVALIDPLAYLIST("EXTINF duration, when rounded to the nearest integer, MUST be less than or equal to the target duration"), o.duration = y.duration, o.title = y.title;
                                    else if ("EXT-X-BYTERANGE" === v) a.compatibleVersion < 4 && (a.compatibleVersion = 4), o.byterange = y;
                                    else if ("EXT-X-DISCONTINUITY" === v) o.parts.length > 0 && d.INVALIDPLAYLIST("EXT-X-DISCONTINUITY must appear before the first EXT-X-PART tag of the Parent Segment."), o.discontinuity = !0;
                                    else if ("EXT-X-KEY" === v) o.parts.length > 0 && d.INVALIDPLAYLIST("EXT-X-KEY must appear before the first EXT-X-PART tag of the Parent Segment."), P(a, E), o.key = new p({
                                        method: E.METHOD,
                                        uri: E.URI,
                                        iv: E.IV,
                                        format: E.KEYFORMAT,
                                        formatVersion: E.KEYFORMATVERSIONS
                                    });
                                    else if ("EXT-X-MAP" === v) o.parts.length > 0 && d.INVALIDPLAYLIST("EXT-X-MAP must appear before the first EXT-X-PART tag of the Parent Segment."), a.compatibleVersion < 5 && (a.compatibleVersion = 5), a.hasMap = !0, o.map = new f({
                                        uri: E.URI,
                                        byterange: E.BYTERANGE
                                    });
                                    else if ("EXT-X-PROGRAM-DATE-TIME" === v) o.programDateTime = y;
                                    else if ("EXT-X-DATERANGE" === v) {
                                        for(var b = {}, A = 0, w = Object.keys(E); A < w.length; A++){
                                            var _ = w[A];
                                            (_.startsWith("SCTE35-") || _.startsWith("X-")) && (b[_] = E[_]);
                                        }
                                        o.dateRange = new g({
                                            id: E.ID,
                                            classId: E.CLASS,
                                            start: E["START-DATE"],
                                            end: E["END-DATE"],
                                            duration: E.DURATION,
                                            plannedDuration: E["PLANNED-DURATION"],
                                            endOnNext: E["END-ON-NEXT"],
                                            attributes: b
                                        });
                                    } else if ("EXT-X-CUE-OUT" === v) o.markers.push(new m({
                                        type: "OUT",
                                        duration: E && E.DURATION || y
                                    }));
                                    else if ("EXT-X-CUE-IN" === v) o.markers.push(new m({
                                        type: "IN"
                                    }));
                                    else if ("EXT-X-CUE-OUT-CONT" === v || "EXT-X-CUE" === v || "EXT-OATCLS-SCTE35" === v || "EXT-X-ASSET" === v || "EXT-X-SCTE35" === v) o.markers.push(new m({
                                        type: "RAW",
                                        tagName: v,
                                        value: y
                                    }));
                                    else if ("EXT-X-PRELOAD-HINT" !== v || E.TYPE) {
                                        if ("EXT-X-PRELOAD-HINT" === v && "PART" === E.TYPE && u) d.INVALIDPLAYLIST("Servers should not add more than one EXT-X-PRELOAD-HINT tag with the same TYPE attribute to a Playlist.");
                                        else if ("EXT-X-PART" !== v && "EXT-X-PRELOAD-HINT" !== v || E.URI) {
                                            if ("EXT-X-PRELOAD-HINT" === v && "MAP" === E.TYPE) c && d.INVALIDPLAYLIST("Servers should not add more than one EXT-X-PRELOAD-HINT tag with the same TYPE attribute to a Playlist."), c = !0, a.hasMap = !0, o.map = new f({
                                                hint: !0,
                                                uri: E.URI,
                                                byterange: {
                                                    length: E["BYTERANGE-LENGTH"],
                                                    offset: E["BYTERANGE-START"] || 0
                                                }
                                            });
                                            else if ("EXT-X-PART" === v || "EXT-X-PRELOAD-HINT" === v && "PART" === E.TYPE) {
                                                "EXT-X-PART" !== v || E.DURATION || d.INVALIDPLAYLIST("EXT-X-PART: DURATION attribute is mandatory"), "EXT-X-PRELOAD-HINT" === v && (u = !0);
                                                var I = new S({
                                                    hint: "EXT-X-PRELOAD-HINT" === v,
                                                    uri: E.URI,
                                                    byterange: "EXT-X-PART" === v ? E.BYTERANGE : {
                                                        length: E["BYTERANGE-LENGTH"],
                                                        offset: E["BYTERANGE-START"] || 0
                                                    },
                                                    duration: E.DURATION,
                                                    independent: E.INDEPENDENT,
                                                    gap: E.GAP
                                                });
                                                o.parts.push(I);
                                            }
                                        } else d.INVALIDPLAYLIST("EXT-X-PART / EXT-X-PRELOAD-HINT: URI attribute is mandatory");
                                    } else d.INVALIDPLAYLIST("EXT-X-PRELOAD-HINT: TYPE attribute is mandatory");
                                }
                                return o;
                            }
                            function M(e, t, i, s, n, r, a) {
                                for(var o = new E({
                                    uri: t,
                                    mediaSequenceNumber: n,
                                    discontinuitySequence: r
                                }), c = i; c <= s; c++){
                                    var u = e[c], l = u.name, h = u.attributes;
                                    "EXTINF" === l ? d.INVALIDPLAYLIST("A prefetch segment must not be advertised with an EXTINF tag.") : "EXT-X-DISCONTINUITY" === l ? d.INVALIDPLAYLIST("A prefetch segment must not be advertised with an EXT-X-DISCONTINUITY tag.") : "EXT-X-PREFETCH-DISCONTINUITY" === l ? o.discontinuity = !0 : "EXT-X-KEY" === l ? (P(a, h), o.key = new p({
                                        method: h.METHOD,
                                        uri: h.URI,
                                        iv: h.IV,
                                        format: h.KEYFORMAT,
                                        formatVersion: h.KEYFORMATVERSIONS
                                    })) : "EXT-X-MAP" === l && d.INVALIDPLAYLIST("Prefetch segments must not be advertised with an EXT-X-MAP tag.");
                                }
                                return o;
                            }
                            function k(e, t, i, s, n) {
                                var r = t.discontinuity, a = t.key, o = t.map, c = t.byterange, u = t.uri;
                                if (r && (t.discontinuitySequence = i + 1), a || (t.key = s), o || (t.map = n), c && -1 === c.offset) {
                                    var l = e.segments;
                                    if (l.length > 0) {
                                        var h = l[l.length - 1];
                                        h.byterange && h.uri === u ? c.offset = h.byterange.offset + h.byterange.length : d.INVALIDPLAYLIST("If offset of EXT-X-BYTERANGE is not present, a previous Media Segment MUST be a sub-range of the same media resource");
                                    } else d.INVALIDPLAYLIST("If offset of EXT-X-BYTERANGE is not present, a previous Media Segment MUST appear in the Playlist file");
                                }
                                return e.segments.push(t), [
                                    t.discontinuitySequence,
                                    t.key,
                                    t.map
                                ];
                            }
                            function U(e, t) {
                                var i = function(e) {
                                    var t = e.indexOf(":");
                                    return -1 === t ? [
                                        e.slice(1).trim(),
                                        null
                                    ] : [
                                        e.slice(1, t).trim(),
                                        e.slice(t + 1).trim()
                                    ];
                                }(e), n = s(i, 2), r = n[0], a = n[1], o = function(e) {
                                    switch(e){
                                        case "EXTM3U":
                                        case "EXT-X-VERSION":
                                            return "Basic";
                                        case "EXTINF":
                                        case "EXT-X-BYTERANGE":
                                        case "EXT-X-DISCONTINUITY":
                                        case "EXT-X-PREFETCH-DISCONTINUITY":
                                        case "EXT-X-KEY":
                                        case "EXT-X-MAP":
                                        case "EXT-X-PROGRAM-DATE-TIME":
                                        case "EXT-X-DATERANGE":
                                        case "EXT-X-CUE-OUT":
                                        case "EXT-X-CUE-IN":
                                        case "EXT-X-CUE-OUT-CONT":
                                        case "EXT-X-CUE":
                                        case "EXT-OATCLS-SCTE35":
                                        case "EXT-X-ASSET":
                                        case "EXT-X-SCTE35":
                                        case "EXT-X-PART":
                                        case "EXT-X-PRELOAD-HINT":
                                            return "Segment";
                                        case "EXT-X-TARGETDURATION":
                                        case "EXT-X-MEDIA-SEQUENCE":
                                        case "EXT-X-DISCONTINUITY-SEQUENCE":
                                        case "EXT-X-ENDLIST":
                                        case "EXT-X-PLAYLIST-TYPE":
                                        case "EXT-X-I-FRAMES-ONLY":
                                        case "EXT-X-SERVER-CONTROL":
                                        case "EXT-X-PART-INF":
                                        case "EXT-X-PREFETCH":
                                        case "EXT-X-RENDITION-REPORT":
                                        case "EXT-X-SKIP":
                                            return "MediaPlaylist";
                                        case "EXT-X-MEDIA":
                                        case "EXT-X-STREAM-INF":
                                        case "EXT-X-I-FRAME-STREAM-INF":
                                        case "EXT-X-SESSION-DATA":
                                        case "EXT-X-SESSION-KEY":
                                            return "MasterPlaylist";
                                        case "EXT-X-INDEPENDENT-SEGMENTS":
                                        case "EXT-X-START":
                                            return "MediaorMasterPlaylist";
                                        default:
                                            return "Unknown";
                                    }
                                }(r);
                                if (function(e, t) {
                                    if ("Segment" === e || "MediaPlaylist" === e) return void 0 === t.isMasterPlaylist ? void (t.isMasterPlaylist = !1) : void (t.isMasterPlaylist && L());
                                    if ("MasterPlaylist" === e) {
                                        if (void 0 === t.isMasterPlaylist) return void (t.isMasterPlaylist = !0);
                                        !1 === t.isMasterPlaylist && L();
                                    }
                                }(o, t), "Unknown" === o) return null;
                                "MediaPlaylist" === o && "EXT-X-RENDITION-REPORT" !== r && "EXT-X-PREFETCH" !== r && (t.hash[r] && d.INVALIDPLAYLIST("There MUST NOT be more than one Media Playlist tag of each type in any Media Playlist"), t.hash[r] = !0);
                                var c = function(e, t) {
                                    switch(e){
                                        case "EXTM3U":
                                        case "EXT-X-DISCONTINUITY":
                                        case "EXT-X-ENDLIST":
                                        case "EXT-X-I-FRAMES-ONLY":
                                        case "EXT-X-INDEPENDENT-SEGMENTS":
                                        case "EXT-X-CUE-IN":
                                            return [
                                                null,
                                                null
                                            ];
                                        case "EXT-X-VERSION":
                                        case "EXT-X-TARGETDURATION":
                                        case "EXT-X-MEDIA-SEQUENCE":
                                        case "EXT-X-DISCONTINUITY-SEQUENCE":
                                            return [
                                                d.toNumber(t),
                                                null
                                            ];
                                        case "EXT-X-CUE-OUT":
                                            return Number.isNaN(Number(t)) ? [
                                                null,
                                                R(t)
                                            ] : [
                                                d.toNumber(t),
                                                null
                                            ];
                                        case "EXT-X-KEY":
                                        case "EXT-X-MAP":
                                        case "EXT-X-DATERANGE":
                                        case "EXT-X-MEDIA":
                                        case "EXT-X-STREAM-INF":
                                        case "EXT-X-I-FRAME-STREAM-INF":
                                        case "EXT-X-SESSION-DATA":
                                        case "EXT-X-SESSION-KEY":
                                        case "EXT-X-START":
                                        case "EXT-X-SERVER-CONTROL":
                                        case "EXT-X-PART-INF":
                                        case "EXT-X-PART":
                                        case "EXT-X-PRELOAD-HINT":
                                        case "EXT-X-RENDITION-REPORT":
                                        case "EXT-X-SKIP":
                                            return [
                                                null,
                                                R(t)
                                            ];
                                        case "EXTINF":
                                            return [
                                                w(t),
                                                null
                                            ];
                                        case "EXT-X-BYTERANGE":
                                            return [
                                                _(t),
                                                null
                                            ];
                                        case "EXT-X-PROGRAM-DATE-TIME":
                                            return [
                                                new Date(t),
                                                null
                                            ];
                                        default:
                                            return [
                                                t,
                                                null
                                            ];
                                    }
                                }(r, a), u = s(c, 2);
                                return {
                                    name: r,
                                    category: o,
                                    value: u[0],
                                    attributes: u[1]
                                };
                            }
                            function V(e, t) {
                                var i;
                                return t.isMasterPlaylist ? i = function(e, t) {
                                    var i, n = new v, a = !1, o = r(e.entries());
                                    try {
                                        for(o.s(); !(i = o.n()).done;){
                                            var c = s(i.value, 2), u = c[0], l = c[1], f = l.name, g = l.value, m = l.attributes;
                                            if ("EXT-X-VERSION" === f) n.version = g;
                                            else if ("EXT-X-STREAM-INF" === f) {
                                                var y = e[u + 1];
                                                ("string" != typeof y || y.startsWith("#EXT")) && d.INVALIDPLAYLIST("EXT-X-STREAM-INF must be followed by a URI line");
                                                var T = O(e, m, y, !1, t);
                                                T && ("number" == typeof T.score && (a = !0, T.score < 0 && d.INVALIDPLAYLIST("SCORE attribute on EXT-X-STREAM-INF must be positive decimal-floating-point number.")), n.variants.push(T));
                                            } else if ("EXT-X-I-FRAME-STREAM-INF" === f) {
                                                var S = O(e, m, m.URI, !0, t);
                                                S && n.variants.push(S);
                                            } else "EXT-X-SESSION-DATA" === f ? function() {
                                                var e = new h({
                                                    id: m["DATA-ID"],
                                                    value: m.VALUE,
                                                    uri: m.URI,
                                                    language: m.LANGUAGE
                                                });
                                                n.sessionDataList.some(function(t) {
                                                    return t.id === e.id && t.language === e.language;
                                                }) && d.INVALIDPLAYLIST("A Playlist MUST NOT contain more than one EXT-X-SESSION-DATA tag with the same DATA-ID attribute and the same LANGUAGE attribute."), n.sessionDataList.push(e);
                                            }() : "EXT-X-SESSION-KEY" === f ? function() {
                                                "NONE" === m.METHOD && d.INVALIDPLAYLIST("EXT-X-SESSION-KEY: The value of the METHOD attribute MUST NOT be NONE");
                                                var e = new p({
                                                    method: m.METHOD,
                                                    uri: m.URI,
                                                    iv: m.IV,
                                                    format: m.KEYFORMAT,
                                                    formatVersion: m.KEYFORMATVERSIONS
                                                });
                                                n.sessionKeyList.some(function(t) {
                                                    return B(t, e);
                                                }) && d.INVALIDPLAYLIST("A Master Playlist MUST NOT contain more than one EXT-X-SESSION-KEY tag with the same METHOD, URI, IV, KEYFORMAT, and KEYFORMATVERSIONS attribute values."), P(t, m), n.sessionKeyList.push(e);
                                            }() : "EXT-X-INDEPENDENT-SEGMENTS" === f ? (n.independentSegments && d.INVALIDPLAYLIST("EXT-X-INDEPENDENT-SEGMENTS tag MUST NOT appear more than once in a Playlist"), n.independentSegments = !0) : "EXT-X-START" === f && (n.start && d.INVALIDPLAYLIST("EXT-X-START tag MUST NOT appear more than once in a Playlist"), "number" != typeof m["TIME-OFFSET"] && d.INVALIDPLAYLIST("EXT-X-START: TIME-OFFSET attribute is REQUIRED"), n.start = {
                                                offset: m["TIME-OFFSET"],
                                                precise: m.PRECISE || !1
                                            });
                                        }
                                    } catch (e) {
                                        o.e(e);
                                    } finally{
                                        o.f();
                                    }
                                    if (a) {
                                        var E, b = r(n.variants);
                                        try {
                                            for(b.s(); !(E = b.n()).done;)"number" != typeof E.value.score && d.INVALIDPLAYLIST("If any Variant Stream contains the SCORE attribute, then all Variant Streams in the Master Playlist SHOULD have a SCORE attribute");
                                        } catch (e) {
                                            b.e(e);
                                        } finally{
                                            b.f();
                                        }
                                    }
                                    if (t.isClosedCaptionsNone) {
                                        var A, w = r(n.variants);
                                        try {
                                            for(w.s(); !(A = w.n()).done;)A.value.closedCaptions.length > 0 && d.INVALIDPLAYLIST("If there is a variant with CLOSED-CAPTIONS attribute of NONE, all EXT-X-STREAM-INF tags MUST have this attribute with a value of NONE");
                                        } catch (e) {
                                            w.e(e);
                                        } finally{
                                            w.f();
                                        }
                                    }
                                    return n;
                                }(e, t) : !(i = function(e, t) {
                                    var i, n = new y, a = -1, o = 0, c = !1, u = !1, l = 0, h = null, p = null, f = !1, g = r(e.entries());
                                    try {
                                        for(g.s(); !(i = g.n()).done;){
                                            var m = s(i.value, 2), v = m[0], T = m[1], S = T.name, E = T.value, A = T.attributes;
                                            if ("Segment" !== T.category) {
                                                if ("EXT-X-VERSION" === S) void 0 === n.version ? n.version = E : d.INVALIDPLAYLIST("A Playlist file MUST NOT contain more than one EXT-X-VERSION tag.");
                                                else if ("EXT-X-TARGETDURATION" === S) n.targetDuration = t.targetDuration = E;
                                                else if ("EXT-X-MEDIA-SEQUENCE" === S) n.segments.length > 0 && d.INVALIDPLAYLIST("The EXT-X-MEDIA-SEQUENCE tag MUST appear before the first Media Segment in the Playlist."), n.mediaSequenceBase = o = E;
                                                else if ("EXT-X-DISCONTINUITY-SEQUENCE" === S) n.segments.length > 0 && d.INVALIDPLAYLIST("The EXT-X-DISCONTINUITY-SEQUENCE tag MUST appear before the first Media Segment in the Playlist."), c && d.INVALIDPLAYLIST("The EXT-X-DISCONTINUITY-SEQUENCE tag MUST appear before any EXT-X-DISCONTINUITY tag."), n.discontinuitySequenceBase = l = E;
                                                else if ("EXT-X-ENDLIST" === S) n.endlist = !0;
                                                else if ("EXT-X-PLAYLIST-TYPE" === S) n.playlistType = E;
                                                else if ("EXT-X-I-FRAMES-ONLY" === S) t.compatibleVersion < 4 && (t.compatibleVersion = 4), n.isIFrame = !0;
                                                else if ("EXT-X-INDEPENDENT-SEGMENTS" === S) n.independentSegments && d.INVALIDPLAYLIST("EXT-X-INDEPENDENT-SEGMENTS tag MUST NOT appear more than once in a Playlist"), n.independentSegments = !0;
                                                else if ("EXT-X-START" === S) n.start && d.INVALIDPLAYLIST("EXT-X-START tag MUST NOT appear more than once in a Playlist"), "number" != typeof A["TIME-OFFSET"] && d.INVALIDPLAYLIST("EXT-X-START: TIME-OFFSET attribute is REQUIRED"), n.start = {
                                                    offset: A["TIME-OFFSET"],
                                                    precise: A.PRECISE || !1
                                                };
                                                else if ("EXT-X-SERVER-CONTROL" === S) A["CAN-BLOCK-RELOAD"] || d.INVALIDPLAYLIST("EXT-X-SERVER-CONTROL: CAN-BLOCK-RELOAD=YES is mandatory for Low-Latency HLS"), n.lowLatencyCompatibility = {
                                                    canBlockReload: A["CAN-BLOCK-RELOAD"],
                                                    canSkipUntil: A["CAN-SKIP-UNTIL"],
                                                    holdBack: A["HOLD-BACK"],
                                                    partHoldBack: A["PART-HOLD-BACK"]
                                                };
                                                else if ("EXT-X-PART-INF" === S) A["PART-TARGET"] || d.INVALIDPLAYLIST("EXT-X-PART-INF: PART-TARGET attribute is mandatory"), n.partTargetDuration = A["PART-TARGET"];
                                                else if ("EXT-X-RENDITION-REPORT" === S) A.URI || d.INVALIDPLAYLIST("EXT-X-RENDITION-REPORT: URI attribute is mandatory"), 0 === A.URI.search(/^[a-z]+:/) && d.INVALIDPLAYLIST("EXT-X-RENDITION-REPORT: URI must be relative to the playlist uri"), n.renditionReports.push(new b({
                                                    uri: A.URI,
                                                    lastMSN: A["LAST-MSN"],
                                                    lastPart: A["LAST-PART"]
                                                }));
                                                else if ("EXT-X-SKIP" === S) A["SKIPPED-SEGMENTS"] || d.INVALIDPLAYLIST("EXT-X-SKIP: SKIPPED-SEGMENTS attribute is mandatory"), t.compatibleVersion < 9 && (t.compatibleVersion = 9), n.skip = A["SKIPPED-SEGMENTS"], o += n.skip;
                                                else if ("EXT-X-PREFETCH" === S) {
                                                    var w = M(e, E, -1 === a ? v : a, v - 1, o++, l, t);
                                                    w && (w.discontinuity && (w.discontinuitySequence++, l = w.discontinuitySequence), w.key ? h = w.key : w.key = h, n.prefetchSegments.push(w)), u = !0, a = -1;
                                                } else if ("string" == typeof T) {
                                                    -1 === a && d.INVALIDPLAYLIST("A URI line is not preceded by any segment tags"), n.targetDuration || d.INVALIDPLAYLIST("The EXT-X-TARGETDURATION tag is REQUIRED"), u && d.INVALIDPLAYLIST("These segments must appear after all complete segments.");
                                                    var _ = x(e, T, a, v - 1, o++, l, t);
                                                    if (_) {
                                                        var I = s(k(n, _, l, h, p), 3);
                                                        l = I[0], h = I[1], p = I[2], !f && _.parts.length > 0 && (f = !0);
                                                    }
                                                    a = -1;
                                                }
                                            } else -1 === a && (a = v), "EXT-X-DISCONTINUITY" === S && (c = !0);
                                        }
                                    } catch (e) {
                                        g.e(e);
                                    } finally{
                                        g.f();
                                    }
                                    if (-1 !== a) {
                                        var N = x(e, "", a, e.length - 1, o++, l, t);
                                        if (N) {
                                            var D = N.parts;
                                            D.length > 0 && !n.endlist && !D[D.length - 1].hint && d.INVALIDPLAYLIST("If the Playlist contains EXT-X-PART tags and does not contain an EXT-X-ENDLIST tag, the Playlist must contain an EXT-X-PRELOAD-HINT tag with a TYPE=PART attribute"), k(n, N, h, p), !f && N.parts.length > 0 && (f = !0);
                                        }
                                    }
                                    return function(e) {
                                        for(var t = new Map, i = new Map, s = !1, n = !1, a = e.length - 1; a >= 0; a--){
                                            var o = e[a], c = o.programDateTime, u = o.dateRange;
                                            if (c && (n = !0), u && u.start) {
                                                s = !0, u.endOnNext && (u.end || u.duration) && d.INVALIDPLAYLIST("An EXT-X-DATERANGE tag with an END-ON-NEXT=YES attribute MUST NOT contain DURATION or END-DATE attributes.");
                                                var l = u.start.getTime(), h = u.duration || 0;
                                                u.end && u.duration && l + 1e3 * h !== u.end.getTime() && d.INVALIDPLAYLIST("END-DATE MUST be equal to the value of the START-DATE attribute plus the value of the DURATION"), u.endOnNext && (u.end = t.get(u.classId)), t.set(u.classId, u.start);
                                                var p = u.end ? u.end.getTime() : u.start.getTime() + 1e3 * (u.duration || 0), f = i.get(u.classId);
                                                if (f) {
                                                    var g, m = r(f);
                                                    try {
                                                        for(m.s(); !(g = m.n()).done;){
                                                            var v = g.value;
                                                            (v.start <= l && v.end > l || v.start >= l && v.start < p) && d.INVALIDPLAYLIST("DATERANGE tags with the same CLASS should not overlap");
                                                        }
                                                    } catch (e) {
                                                        m.e(e);
                                                    } finally{
                                                        m.f();
                                                    }
                                                    f.push({
                                                        start: l,
                                                        end: p
                                                    });
                                                } else i.set(u.classId, [
                                                    {
                                                        start: l,
                                                        end: p
                                                    }
                                                ]);
                                            }
                                        }
                                        s && !n && d.INVALIDPLAYLIST("If a Playlist contains an EXT-X-DATERANGE tag, it MUST also contain at least one EXT-X-PROGRAM-DATE-TIME tag.");
                                    }(n.segments), n.lowLatencyCompatibility && function(e, t) {
                                        var i = e.lowLatencyCompatibility, n = e.targetDuration, a = e.partTargetDuration, o = e.segments, c = e.renditionReports, u = i.canSkipUntil, l = i.holdBack, h = i.partHoldBack;
                                        if (u < 6 * n && d.INVALIDPLAYLIST("The Skip Boundary must be at least six times the EXT-X-TARGETDURATION."), l < 3 * n && d.INVALIDPLAYLIST("HOLD-BACK must be at least three times the EXT-X-TARGETDURATION."), t) {
                                            void 0 === a && d.INVALIDPLAYLIST("EXT-X-PART-INF is required if a Playlist contains one or more EXT-X-PART tags"), void 0 === h && d.INVALIDPLAYLIST("EXT-X-PART: PART-HOLD-BACK attribute is mandatory"), h < a && d.INVALIDPLAYLIST("PART-HOLD-BACK must be at least PART-TARGET");
                                            var p, f = r(o.entries());
                                            try {
                                                for(f.s(); !(p = f.n()).done;){
                                                    var g = s(p.value, 2), m = g[0], v = g[1].parts;
                                                    v.length > 0 && m < o.length - 3 && d.INVALIDPLAYLIST("Remove EXT-X-PART tags from the Playlist after they are greater than three target durations from the end of the Playlist.");
                                                    var y, T = r(v.entries());
                                                    try {
                                                        for(T.s(); !(y = T.n()).done;){
                                                            var S = s(y.value, 2), E = S[0], b = S[1].duration;
                                                            void 0 !== b && (b > a && d.INVALIDPLAYLIST("PART-TARGET is the maximum duration of any Partial Segment"), E < v.length - 1 && b < .85 * a && d.INVALIDPLAYLIST("All Partial Segments except the last part of a segment must have a duration of at least 85% of PART-TARGET"));
                                                        }
                                                    } catch (e) {
                                                        T.e(e);
                                                    } finally{
                                                        T.f();
                                                    }
                                                }
                                            } catch (e) {
                                                f.e(e);
                                            } finally{
                                                f.f();
                                            }
                                        }
                                        var A, w = r(c);
                                        try {
                                            for(w.s(); !(A = w.n()).done;){
                                                var _ = A.value, I = o[o.length - 1];
                                                _.lastMSN || (_.lastMSN = I.mediaSequenceNumber), !_.lastPart && I.parts.length > 0 && (_.lastPart = I.parts.length - 1);
                                            }
                                        } catch (e) {
                                            w.e(e);
                                        } finally{
                                            w.f();
                                        }
                                    }(n, f), n;
                                }(e, t)).isIFrame && t.hasMap && t.compatibleVersion < 6 && (t.compatibleVersion = 6), t.compatibleVersion > 1 && (!i.version || i.version < t.compatibleVersion) && d.INVALIDPLAYLIST("EXT-X-VERSION needs to be ".concat(t.compatibleVersion, " or higher.")), i;
                            }
                            e.exports = function(e) {
                                var t = {
                                    version: void 0,
                                    isMasterPlaylist: void 0,
                                    hasMap: !1,
                                    targetDuration: 0,
                                    compatibleVersion: 1,
                                    isClosedCaptionsNone: !1,
                                    hash: {}
                                }, i = function(e, t) {
                                    var i, s = [], a = r(e.split("\n"));
                                    try {
                                        for(a.s(); !(i = a.n()).done;){
                                            var o = i.value, c = n.from(o.trim()).toString();
                                            if (c) {
                                                if (c.startsWith("#")) {
                                                    if (c.startsWith("#EXT")) {
                                                        var u = U(c, t);
                                                        u && s.push(u);
                                                    }
                                                } else s.push(c);
                                            }
                                        }
                                    } catch (e) {
                                        a.e(e);
                                    } finally{
                                        a.f();
                                    }
                                    return 0 !== s.length && "EXTM3U" === s[0].name || d.INVALIDPLAYLIST("The EXTM3U tag MUST be the first line."), s;
                                }(e, t), s = V(i, t);
                                return s.source = e, s;
                            };
                        },
                        367: (e, t, i)=>{
                            function s(e) {
                                return s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                                    return typeof e;
                                } : function(e) {
                                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                                }, s(e);
                            }
                            function n(e, t) {
                                return function(e) {
                                    if (Array.isArray(e)) return e;
                                }(e) || function(e, t) {
                                    var i = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                                    if (null != i) {
                                        var s, n, r, a, o = [], d = !0, c = !1;
                                        try {
                                            if (r = (i = i.call(e)).next, 0 === t) {
                                                if (Object(i) !== i) return;
                                                d = !1;
                                            } else for(; !(d = (s = r.call(i)).done) && (o.push(s.value), o.length !== t); d = !0);
                                        } catch (e) {
                                            c = !0, n = e;
                                        } finally{
                                            try {
                                                if (!d && null != i.return && (a = i.return(), Object(a) !== a)) return;
                                            } finally{
                                                if (c) throw n;
                                            }
                                        }
                                        return o;
                                    }
                                }(e, t) || a(e, t) || function() {
                                    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                                }();
                            }
                            function r(e, t) {
                                var i = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                                if (!i) {
                                    if (Array.isArray(e) || (i = a(e)) || t && e && "number" == typeof e.length) {
                                        i && (e = i);
                                        var s = 0, n = function() {};
                                        return {
                                            s: n,
                                            n: function() {
                                                return s >= e.length ? {
                                                    done: !0
                                                } : {
                                                    done: !1,
                                                    value: e[s++]
                                                };
                                            },
                                            e: function(e) {
                                                throw e;
                                            },
                                            f: n
                                        };
                                    }
                                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                                }
                                var r, o = !0, d = !1;
                                return {
                                    s: function() {
                                        i = i.call(e);
                                    },
                                    n: function() {
                                        var e = i.next();
                                        return o = e.done, e;
                                    },
                                    e: function(e) {
                                        d = !0, r = e;
                                    },
                                    f: function() {
                                        try {
                                            o || null == i.return || i.return();
                                        } finally{
                                            if (d) throw r;
                                        }
                                    }
                                };
                            }
                            function a(e, t) {
                                if (e) {
                                    if ("string" == typeof e) return o(e, t);
                                    var i = Object.prototype.toString.call(e).slice(8, -1);
                                    return "Object" === i && e.constructor && (i = e.constructor.name), "Map" === i || "Set" === i ? Array.from(e) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? o(e, t) : void 0;
                                }
                            }
                            function o(e, t) {
                                (null == t || t > e.length) && (t = e.length);
                                for(var i = 0, s = new Array(t); i < t; i++)s[i] = e[i];
                                return s;
                            }
                            function d(e, t) {
                                for(var i = 0; i < t.length; i++){
                                    var n = t[i];
                                    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, (r = function(e) {
                                        if ("object" !== s(e) || null === e) return e;
                                        var t = e[Symbol.toPrimitive];
                                        if (void 0 !== t) {
                                            var i = t.call(e, "string");
                                            if ("object" !== s(i)) return i;
                                            throw new TypeError("@@toPrimitive must return a primitive value.");
                                        }
                                        return String(e);
                                    }(n.key), "symbol" === s(r) ? r : String(r)), n);
                                }
                                var r;
                            }
                            function c() {
                                return c = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(e, t, i) {
                                    var s = function(e, t) {
                                        for(; !Object.prototype.hasOwnProperty.call(e, t) && null !== (e = g(e)););
                                        return e;
                                    }(e, t);
                                    if (s) {
                                        var n = Object.getOwnPropertyDescriptor(s, t);
                                        return n.get ? n.get.call(arguments.length < 3 ? e : i) : n.value;
                                    }
                                }, c.apply(this, arguments);
                            }
                            function u(e, t) {
                                if (t && ("object" === s(t) || "function" == typeof t)) return t;
                                if (void 0 !== t) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(e) {
                                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return e;
                                }(e);
                            }
                            function l(e) {
                                var t = "function" == typeof Map ? new Map : void 0;
                                return l = function(e) {
                                    if (null === e || (i = e, -1 === Function.toString.call(i).indexOf("[native code]"))) return e;
                                    var i;
                                    if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function");
                                    if (void 0 !== t) {
                                        if (t.has(e)) return t.get(e);
                                        t.set(e, s);
                                    }
                                    function s() {
                                        return h(e, arguments, g(this).constructor);
                                    }
                                    return s.prototype = Object.create(e.prototype, {
                                        constructor: {
                                            value: s,
                                            enumerable: !1,
                                            writable: !0,
                                            configurable: !0
                                        }
                                    }), f(s, e);
                                }, l(e);
                            }
                            function h(e, t, i) {
                                return h = p() ? Reflect.construct.bind() : function(e, t, i) {
                                    var s = [
                                        null
                                    ];
                                    s.push.apply(s, t);
                                    var n = new (Function.bind.apply(e, s));
                                    return i && f(n, i.prototype), n;
                                }, h.apply(null, arguments);
                            }
                            function p() {
                                if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                                if (Reflect.construct.sham) return !1;
                                if ("function" == typeof Proxy) return !0;
                                try {
                                    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), !0;
                                } catch (e) {
                                    return !1;
                                }
                            }
                            function f(e, t) {
                                return f = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e, t) {
                                    return e.__proto__ = t, e;
                                }, f(e, t);
                            }
                            function g(e) {
                                return g = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e) {
                                    return e.__proto__ || Object.getPrototypeOf(e);
                                }, g(e);
                            }
                            var m = i(771), v = [
                                "#EXTINF",
                                "#EXT-X-BYTERANGE",
                                "#EXT-X-DISCONTINUITY",
                                "#EXT-X-STREAM-INF",
                                "#EXT-X-CUE-OUT",
                                "#EXT-X-CUE-IN",
                                "#EXT-X-KEY",
                                "#EXT-X-MAP"
                            ], y = [
                                "#EXT-X-MEDIA"
                            ], T = function(e) {
                                !function(e, t) {
                                    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
                                    e.prototype = Object.create(t && t.prototype, {
                                        constructor: {
                                            value: e,
                                            writable: !0,
                                            configurable: !0
                                        }
                                    }), Object.defineProperty(e, "prototype", {
                                        writable: !1
                                    }), t && f(e, t);
                                }(a, e);
                                var t, i, s, n, r = (t = a, i = p(), function() {
                                    var e, s = g(t);
                                    if (i) {
                                        var n = g(this).constructor;
                                        e = Reflect.construct(s, arguments, n);
                                    } else e = s.apply(this, arguments);
                                    return u(this, e);
                                });
                                function a(e) {
                                    var t;
                                    return function(e, t) {
                                        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                                    }(this, a), (t = r.call(this)).baseUri = e, t;
                                }
                                return s = a, n = [
                                    {
                                        key: "push",
                                        value: function() {
                                            for(var e = this, t = arguments.length, i = new Array(t), s = 0; s < t; s++)i[s] = arguments[s];
                                            for(var n = function() {
                                                var t = o[r];
                                                if (!t.startsWith("#")) return c(g(a.prototype), "push", e).call(e, t), "continue";
                                                if (v.some(function(e) {
                                                    return t.startsWith(e);
                                                })) return c(g(a.prototype), "push", e).call(e, t), "continue";
                                                if (e.includes(t)) {
                                                    if (y.some(function(e) {
                                                        return t.startsWith(e);
                                                    })) return "continue";
                                                    m.INVALIDPLAYLIST("Redundant item (".concat(t, ")"));
                                                }
                                                c(g(a.prototype), "push", e).call(e, t);
                                            }, r = 0, o = i; r < o.length; r++)n();
                                        }
                                    }
                                ], n && d(s.prototype, n), Object.defineProperty(s, "prototype", {
                                    writable: !1
                                }), a;
                            }(l(Array));
                            function S(e, t) {
                                var i = 1e3;
                                t && (i = Math.pow(10, t));
                                var s = Math.round(e * i) / i;
                                return t ? s.toFixed(t) : s;
                            }
                            function E(e) {
                                var t = [
                                    'DATA-ID="'.concat(e.id, '"')
                                ];
                                return e.language && t.push('LANGUAGE="'.concat(e.language, '"')), e.value ? t.push('VALUE="'.concat(e.value, '"')) : e.uri && t.push('URI="'.concat(e.uri, '"')), "#EXT-X-SESSION-DATA:".concat(t.join(","));
                            }
                            function b(e, t) {
                                var i = t ? "#EXT-X-SESSION-KEY" : "#EXT-X-KEY", s = [
                                    "METHOD=".concat(e.method)
                                ];
                                return e.uri && s.push('URI="'.concat(e.uri, '"')), e.iv && (16 !== e.iv.length && m.INVALIDPLAYLIST("IV must be a 128-bit unsigned integer"), s.push("IV=".concat(m.byteSequenceToHex(e.iv)))), e.format && s.push('KEYFORMAT="'.concat(e.format, '"')), e.formatVersion && s.push('KEYFORMATVERSIONS="'.concat(e.formatVersion, '"')), "".concat(i, ":").concat(s.join(","));
                            }
                            function A(e, t) {
                                var i = t.isIFrameOnly ? "#EXT-X-I-FRAME-STREAM-INF" : "#EXT-X-STREAM-INF", s = [
                                    "BANDWIDTH=".concat(t.bandwidth)
                                ];
                                if (t.averageBandwidth && s.push("AVERAGE-BANDWIDTH=".concat(t.averageBandwidth)), t.isIFrameOnly && s.push('URI="'.concat(t.uri, '"')), t.codecs && s.push('CODECS="'.concat(t.codecs, '"')), t.resolution && s.push("RESOLUTION=".concat(t.resolution.width, "x").concat(t.resolution.height)), t.frameRate && s.push("FRAME-RATE=".concat(S(t.frameRate, 3))), t.hdcpLevel && s.push("HDCP-LEVEL=".concat(t.hdcpLevel)), t.audio.length > 0) {
                                    s.push('AUDIO="'.concat(t.audio[0].groupId, '"'));
                                    var n, a = r(t.audio);
                                    try {
                                        for(a.s(); !(n = a.n()).done;){
                                            var o = n.value;
                                            e.push(w(o));
                                        }
                                    } catch (e) {
                                        a.e(e);
                                    } finally{
                                        a.f();
                                    }
                                }
                                if (t.video.length > 0) {
                                    s.push('VIDEO="'.concat(t.video[0].groupId, '"'));
                                    var d, c = r(t.video);
                                    try {
                                        for(c.s(); !(d = c.n()).done;){
                                            var u = d.value;
                                            e.push(w(u));
                                        }
                                    } catch (e) {
                                        c.e(e);
                                    } finally{
                                        c.f();
                                    }
                                }
                                if (t.subtitles.length > 0) {
                                    s.push('SUBTITLES="'.concat(t.subtitles[0].groupId, '"'));
                                    var l, h = r(t.subtitles);
                                    try {
                                        for(h.s(); !(l = h.n()).done;){
                                            var p = l.value;
                                            e.push(w(p));
                                        }
                                    } catch (e) {
                                        h.e(e);
                                    } finally{
                                        h.f();
                                    }
                                }
                                if (m.getOptions().allowClosedCaptionsNone && 0 === t.closedCaptions.length) s.push("CLOSED-CAPTIONS=NONE");
                                else if (t.closedCaptions.length > 0) {
                                    s.push('CLOSED-CAPTIONS="'.concat(t.closedCaptions[0].groupId, '"'));
                                    var f, g = r(t.closedCaptions);
                                    try {
                                        for(g.s(); !(f = g.n()).done;){
                                            var v = f.value;
                                            e.push(w(v));
                                        }
                                    } catch (e) {
                                        g.e(e);
                                    } finally{
                                        g.f();
                                    }
                                }
                                if (t.score && s.push("SCORE=".concat(t.score)), t.allowedCpc) {
                                    var y, T = [], E = r(t.allowedCpc);
                                    try {
                                        for(E.s(); !(y = E.n()).done;){
                                            var b = y.value, A = b.format, _ = b.cpcList;
                                            T.push("".concat(A, ":").concat(_.join("/")));
                                        }
                                    } catch (e) {
                                        E.e(e);
                                    } finally{
                                        E.f();
                                    }
                                    s.push('ALLOWED-CPC="'.concat(T.join(","), '"'));
                                }
                                t.videoRange && s.push("VIDEO-RANGE=".concat(t.videoRange)), t.stableVariantId && s.push('STABLE-VARIANT-ID="'.concat(t.stableVariantId, '"')), e.push("".concat(i, ":").concat(s.join(","))), t.isIFrameOnly || e.push("".concat(t.uri));
                            }
                            function w(e) {
                                var t = [
                                    "TYPE=".concat(e.type),
                                    'GROUP-ID="'.concat(e.groupId, '"'),
                                    'NAME="'.concat(e.name, '"')
                                ];
                                return void 0 !== e.isDefault && t.push("DEFAULT=".concat(e.isDefault ? "YES" : "NO")), void 0 !== e.autoselect && t.push("AUTOSELECT=".concat(e.autoselect ? "YES" : "NO")), void 0 !== e.forced && t.push("FORCED=".concat(e.forced ? "YES" : "NO")), e.language && t.push('LANGUAGE="'.concat(e.language, '"')), e.assocLanguage && t.push('ASSOC-LANGUAGE="'.concat(e.assocLanguage, '"')), e.instreamId && t.push('INSTREAM-ID="'.concat(e.instreamId, '"')), e.characteristics && t.push('CHARACTERISTICS="'.concat(e.characteristics, '"')), e.channels && t.push('CHANNELS="'.concat(e.channels, '"')), e.uri && t.push('URI="'.concat(e.uri, '"')), "#EXT-X-MEDIA:".concat(t.join(","));
                            }
                            function _(e, t, i, s) {
                                var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1, r = !1, a = "";
                                if (t.discontinuity && e.push("#EXT-X-DISCONTINUITY"), t.key) {
                                    var o = b(t.key);
                                    o !== i && (e.push(o), i = o);
                                }
                                if (t.map) {
                                    var d = function(e) {
                                        var t = [
                                            'URI="'.concat(e.uri, '"')
                                        ];
                                        return e.byterange && t.push('BYTERANGE="'.concat(I(e.byterange), '"')), "#EXT-X-MAP:".concat(t.join(","));
                                    }(t.map);
                                    d !== s && (e.push(d), s = d);
                                }
                                if (t.programDateTime && e.push("#EXT-X-PROGRAM-DATE-TIME:".concat(m.formatDate(t.programDateTime))), t.dateRange && e.push(function(e) {
                                    var t = [
                                        'ID="'.concat(e.id, '"')
                                    ];
                                    e.start && t.push('START-DATE="'.concat(m.formatDate(e.start), '"')), e.end && t.push('END-DATE="'.concat(e.end, '"')), e.duration && t.push("DURATION=".concat(e.duration)), e.plannedDuration && t.push("PLANNED-DURATION=".concat(e.plannedDuration)), e.classId && t.push('CLASS="'.concat(e.classId, '"')), e.endOnNext && t.push("END-ON-NEXT=YES");
                                    for(var i = 0, s = Object.keys(e.attributes); i < s.length; i++){
                                        var n = s[i];
                                        n.startsWith("X-") ? "number" == typeof e.attributes[n] ? t.push("".concat(n, "=").concat(e.attributes[n])) : t.push("".concat(n, '="').concat(e.attributes[n], '"')) : n.startsWith("SCTE35-") && t.push("".concat(n, "=").concat(m.byteSequenceToHex(e.attributes[n])));
                                    }
                                    return "#EXT-X-DATERANGE:".concat(t.join(","));
                                }(t.dateRange)), t.markers.length > 0 && (a = N(e, t.markers)), t.parts.length > 0 && (r = D(e, t.parts)), r) return [
                                    i,
                                    s
                                ];
                                var c = n < 3 ? Math.round(t.duration) : S(t.duration, function(e) {
                                    var t = e.toString(10), i = t.indexOf(".");
                                    return -1 === i ? 0 : t.length - i - 1;
                                }(t.duration));
                                return e.push("#EXTINF:".concat(c, ",").concat(unescape(encodeURIComponent(t.title || "")))), t.byterange && e.push("#EXT-X-BYTERANGE:".concat(I(t.byterange))), Array.prototype.push.call(e, "".concat(t.uri)), [
                                    i,
                                    s,
                                    a
                                ];
                            }
                            function I(e) {
                                var t = e.offset, i = e.length;
                                return "".concat(i, "@").concat(t);
                            }
                            function N(e, t) {
                                var i, s = "", n = r(t);
                                try {
                                    for(n.s(); !(i = n.n()).done;){
                                        var a = i.value;
                                        if ("OUT" === a.type) s = "OUT", e.push("#EXT-X-CUE-OUT:DURATION=".concat(a.duration));
                                        else if ("IN" === a.type) s = "IN", e.push("#EXT-X-CUE-IN");
                                        else if ("RAW" === a.type) {
                                            var o = a.value ? ":".concat(a.value) : "";
                                            e.push("#".concat(a.tagName).concat(o));
                                        }
                                    }
                                } catch (e) {
                                    n.e(e);
                                } finally{
                                    n.f();
                                }
                                return s;
                            }
                            function D(e, t) {
                                var i, s = !1, n = r(t);
                                try {
                                    for(n.s(); !(i = n.n()).done;){
                                        var a = i.value;
                                        if (a.hint) {
                                            var o = [];
                                            if (o.push("TYPE=PART", 'URI="'.concat(a.uri, '"')), a.byterange) {
                                                var d = a.byterange, c = d.offset, u = d.length;
                                                o.push("BYTERANGE-START=".concat(c)), u && o.push("BYTERANGE-LENGTH=".concat(u));
                                            }
                                            e.push("#EXT-X-PRELOAD-HINT:".concat(o.join(","))), s = !0;
                                        } else {
                                            var l = [];
                                            l.push("DURATION=".concat(a.duration), 'URI="'.concat(a.uri, '"')), a.byterange && l.push("BYTERANGE=".concat(I(a.byterange))), a.independent && l.push("INDEPENDENT=YES"), a.gap && l.push("GAP=YES"), e.push("#EXT-X-PART:".concat(l.join(",")));
                                        }
                                    }
                                } catch (e) {
                                    n.e(e);
                                } finally{
                                    n.f();
                                }
                                return s;
                            }
                            e.exports = function(e) {
                                m.PARAMCHECK(e), m.ASSERT("Not a playlist", "playlist" === e.type);
                                var t = new T(e.uri);
                                return t.push("#EXTM3U"), e.version && t.push("#EXT-X-VERSION:".concat(e.version)), e.independentSegments && t.push("#EXT-X-INDEPENDENT-SEGMENTS"), e.start && t.push("#EXT-X-START:TIME-OFFSET=".concat(S(e.start.offset)).concat(e.start.precise ? ",PRECISE=YES" : "")), e.isMasterPlaylist ? function(e, t) {
                                    var i, s = r(t.sessionDataList);
                                    try {
                                        for(s.s(); !(i = s.n()).done;){
                                            var n = i.value;
                                            e.push(E(n));
                                        }
                                    } catch (e) {
                                        s.e(e);
                                    } finally{
                                        s.f();
                                    }
                                    var a, o = r(t.sessionKeyList);
                                    try {
                                        for(o.s(); !(a = o.n()).done;){
                                            var d = a.value;
                                            e.push(b(d, !0));
                                        }
                                    } catch (e) {
                                        o.e(e);
                                    } finally{
                                        o.f();
                                    }
                                    var c, u = r(t.variants);
                                    try {
                                        for(u.s(); !(c = u.n()).done;)A(e, c.value);
                                    } catch (e) {
                                        u.e(e);
                                    } finally{
                                        u.f();
                                    }
                                }(t, e) : function(e, t) {
                                    var i = "", s = "", a = !1;
                                    if (t.targetDuration && e.push("#EXT-X-TARGETDURATION:".concat(t.targetDuration)), t.lowLatencyCompatibility) {
                                        var o = t.lowLatencyCompatibility, d = o.canBlockReload, c = o.canSkipUntil, u = o.holdBack, l = o.partHoldBack, h = [];
                                        h.push("CAN-BLOCK-RELOAD=".concat(d ? "YES" : "NO")), void 0 !== c && h.push("CAN-SKIP-UNTIL=".concat(c)), void 0 !== u && h.push("HOLD-BACK=".concat(u)), void 0 !== l && h.push("PART-HOLD-BACK=".concat(l)), e.push("#EXT-X-SERVER-CONTROL:".concat(h.join(",")));
                                    }
                                    t.partTargetDuration && e.push("#EXT-X-PART-INF:PART-TARGET=".concat(t.partTargetDuration)), t.mediaSequenceBase && e.push("#EXT-X-MEDIA-SEQUENCE:".concat(t.mediaSequenceBase)), t.discontinuitySequenceBase && e.push("#EXT-X-DISCONTINUITY-SEQUENCE:".concat(t.discontinuitySequenceBase)), t.playlistType && e.push("#EXT-X-PLAYLIST-TYPE:".concat(t.playlistType)), t.isIFrame && e.push("#EXT-X-I-FRAMES-ONLY"), t.skip > 0 && e.push("#EXT-X-SKIP:SKIPPED-SEGMENTS=".concat(t.skip));
                                    var p, f = r(t.segments);
                                    try {
                                        for(f.s(); !(p = f.n()).done;){
                                            var g, v = n(_(e, p.value, i, s, t.version), 3);
                                            i = v[0], s = v[1], "OUT" === (g = v[2]) ? a = !0 : "IN" === g && a && (a = !1);
                                        }
                                    } catch (e) {
                                        f.e(e);
                                    } finally{
                                        f.f();
                                    }
                                    "VOD" === t.playlistType && a && e.push("#EXT-X-CUE-IN"), t.prefetchSegments.length > 2 && m.INVALIDPLAYLIST("The server must deliver no more than two prefetch segments");
                                    var y, T = r(t.prefetchSegments);
                                    try {
                                        for(T.s(); !(y = T.n()).done;){
                                            var S = y.value;
                                            S.discontinuity && e.push("#EXT-X-PREFETCH-DISCONTINUITY"), e.push("#EXT-X-PREFETCH:".concat(S.uri));
                                        }
                                    } catch (e) {
                                        T.e(e);
                                    } finally{
                                        T.f();
                                    }
                                    t.endlist && e.push("#EXT-X-ENDLIST");
                                    var E, b = r(t.renditionReports);
                                    try {
                                        for(b.s(); !(E = b.n()).done;){
                                            var A = E.value, w = [];
                                            w.push('URI="'.concat(A.uri, '"'), "LAST-MSN=".concat(A.lastMSN)), void 0 !== A.lastPart && w.push("LAST-PART=".concat(A.lastPart)), e.push("#EXT-X-RENDITION-REPORT:".concat(w.join(",")));
                                        }
                                    } catch (e) {
                                        b.e(e);
                                    } finally{
                                        b.f();
                                    }
                                }(t, e), t.join("\n");
                            };
                        },
                        890: (e, t, i)=>{
                            function s(e) {
                                return s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                                    return typeof e;
                                } : function(e) {
                                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                                }, s(e);
                            }
                            function n(e, t) {
                                if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
                                e.prototype = Object.create(t && t.prototype, {
                                    constructor: {
                                        value: e,
                                        writable: !0,
                                        configurable: !0
                                    }
                                }), Object.defineProperty(e, "prototype", {
                                    writable: !1
                                }), t && r(e, t);
                            }
                            function r(e, t) {
                                return r = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e, t) {
                                    return e.__proto__ = t, e;
                                }, r(e, t);
                            }
                            function a(e) {
                                var t = function() {
                                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                                    if (Reflect.construct.sham) return !1;
                                    if ("function" == typeof Proxy) return !0;
                                    try {
                                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), !0;
                                    } catch (e) {
                                        return !1;
                                    }
                                }();
                                return function() {
                                    var i, s = d(e);
                                    if (t) {
                                        var n = d(this).constructor;
                                        i = Reflect.construct(s, arguments, n);
                                    } else i = s.apply(this, arguments);
                                    return o(this, i);
                                };
                            }
                            function o(e, t) {
                                if (t && ("object" === s(t) || "function" == typeof t)) return t;
                                if (void 0 !== t) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(e) {
                                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return e;
                                }(e);
                            }
                            function d(e) {
                                return d = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e) {
                                    return e.__proto__ || Object.getPrototypeOf(e);
                                }, d(e);
                            }
                            function c(e, t) {
                                for(var i = 0; i < t.length; i++){
                                    var n = t[i];
                                    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, (r = function(e) {
                                        if ("object" !== s(e) || null === e) return e;
                                        var t = e[Symbol.toPrimitive];
                                        if (void 0 !== t) {
                                            var i = t.call(e, "string");
                                            if ("object" !== s(i)) return i;
                                            throw new TypeError("@@toPrimitive must return a primitive value.");
                                        }
                                        return String(e);
                                    }(n.key), "symbol" === s(r) ? r : String(r)), n);
                                }
                                var r;
                            }
                            function u(e, t, i) {
                                return t && c(e.prototype, t), i && c(e, i), Object.defineProperty(e, "prototype", {
                                    writable: !1
                                }), e;
                            }
                            function l(e, t) {
                                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                            }
                            var h = i(771), p = u(function e(t) {
                                var i = t.type, s = t.uri, n = t.groupId, r = t.language, a = t.assocLanguage, o = t.name, d = t.isDefault, c = t.autoselect, u = t.forced, p = t.instreamId, f = t.characteristics, g = t.channels;
                                l(this, e), h.PARAMCHECK(i, n, o), h.CONDITIONALASSERT([
                                    "SUBTITLES" === i,
                                    s
                                ], [
                                    "CLOSED-CAPTIONS" === i,
                                    p
                                ], [
                                    "CLOSED-CAPTIONS" === i,
                                    !s
                                ], [
                                    u,
                                    "SUBTITLES" === i
                                ]), this.type = i, this.uri = s, this.groupId = n, this.language = r, this.assocLanguage = a, this.name = o, this.isDefault = d, this.autoselect = c, this.forced = u, this.instreamId = p, this.characteristics = f, this.channels = g;
                            }), f = u(function e(t) {
                                var i = t.uri, s = t.isIFrameOnly, n = void 0 !== s && s, r = t.bandwidth, a = t.averageBandwidth, o = t.score, d = t.codecs, c = t.resolution, u = t.frameRate, p = t.hdcpLevel, f = t.allowedCpc, g = t.videoRange, m = t.stableVariantId, v = t.audio, y = void 0 === v ? [] : v, T = t.video, S = void 0 === T ? [] : T, E = t.subtitles, b = void 0 === E ? [] : E, A = t.closedCaptions, w = void 0 === A ? [] : A, _ = t.currentRenditions, I = void 0 === _ ? {
                                    audio: 0,
                                    video: 0,
                                    subtitles: 0,
                                    closedCaptions: 0
                                } : _;
                                l(this, e), h.PARAMCHECK(i, r), this.uri = i, this.isIFrameOnly = n, this.bandwidth = r, this.averageBandwidth = a, this.score = o, this.codecs = d, this.resolution = c, this.frameRate = u, this.hdcpLevel = p, this.allowedCpc = f, this.videoRange = g, this.stableVariantId = m, this.audio = y, this.video = S, this.subtitles = b, this.closedCaptions = w, this.currentRenditions = I;
                            }), g = u(function e(t) {
                                var i = t.id, s = t.value, n = t.uri, r = t.language;
                                l(this, e), h.PARAMCHECK(i, s || n), h.ASSERT("SessionData cannot have both value and uri, shoud be either.", !(s && n)), this.id = i, this.value = s, this.uri = n, this.language = r;
                            }), m = u(function e(t) {
                                var i = t.method, s = t.uri, n = t.iv, r = t.format, a = t.formatVersion;
                                l(this, e), h.PARAMCHECK(i), h.CONDITIONALPARAMCHECK([
                                    "NONE" !== i,
                                    s
                                ]), h.CONDITIONALASSERT([
                                    "NONE" === i,
                                    !(s || n || r || a)
                                ]), this.method = i, this.uri = s, this.iv = n, this.format = r, this.formatVersion = a;
                            }), v = u(function e(t) {
                                var i = t.hint, s = void 0 !== i && i, n = t.uri, r = t.mimeType, a = t.byterange;
                                l(this, e), h.PARAMCHECK(n), this.hint = s, this.uri = n, this.mimeType = r, this.byterange = a;
                            }), y = u(function e(t) {
                                var i = t.id, s = t.classId, n = t.start, r = t.end, a = t.duration, o = t.plannedDuration, d = t.endOnNext, c = t.attributes, u = void 0 === c ? {} : c;
                                l(this, e), h.PARAMCHECK(i), h.CONDITIONALPARAMCHECK([
                                    !0 === d,
                                    s
                                ]), h.CONDITIONALASSERT([
                                    r,
                                    n
                                ], [
                                    r,
                                    n <= r
                                ], [
                                    a,
                                    a >= 0
                                ], [
                                    o,
                                    o >= 0
                                ]), this.id = i, this.classId = s, this.start = n, this.end = r, this.duration = a, this.plannedDuration = o, this.endOnNext = d, this.attributes = u;
                            }), T = u(function e(t) {
                                var i = t.type, s = t.duration, n = t.tagName, r = t.value;
                                l(this, e), h.PARAMCHECK(i), h.CONDITIONALPARAMCHECK([
                                    "OUT" === i,
                                    s
                                ]), h.CONDITIONALPARAMCHECK([
                                    "RAW" === i,
                                    n
                                ]), this.type = i, this.duration = s, this.tagName = n, this.value = r;
                            }), S = u(function e(t) {
                                l(this, e), h.PARAMCHECK(t), this.type = t;
                            }), E = function(e) {
                                n(i, e);
                                var t = a(i);
                                function i(e) {
                                    var s, n = e.isMasterPlaylist, r = e.uri, a = e.version, o = e.independentSegments, d = void 0 !== o && o, c = e.start, u = e.source;
                                    return l(this, i), s = t.call(this, "playlist"), h.PARAMCHECK(n), s.isMasterPlaylist = n, s.uri = r, s.version = a, s.independentSegments = d, s.start = c, s.source = u, s;
                                }
                                return u(i);
                            }(S), b = function(e) {
                                n(i, e);
                                var t = a(i);
                                function i() {
                                    var e, s = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                                    l(this, i), s.isMasterPlaylist = !0, e = t.call(this, s);
                                    var n = s.variants, r = void 0 === n ? [] : n, a = s.currentVariant, o = s.sessionDataList, d = void 0 === o ? [] : o, c = s.sessionKeyList, u = void 0 === c ? [] : c;
                                    return e.variants = r, e.currentVariant = a, e.sessionDataList = d, e.sessionKeyList = u, e;
                                }
                                return u(i);
                            }(E), A = function(e) {
                                n(i, e);
                                var t = a(i);
                                function i() {
                                    var e, s = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                                    l(this, i), s.isMasterPlaylist = !1, e = t.call(this, s);
                                    var n = s.targetDuration, r = s.mediaSequenceBase, a = void 0 === r ? 0 : r, o = s.discontinuitySequenceBase, d = void 0 === o ? 0 : o, c = s.endlist, u = void 0 !== c && c, h = s.playlistType, p = s.isIFrame, f = s.segments, g = void 0 === f ? [] : f, m = s.prefetchSegments, v = void 0 === m ? [] : m, y = s.lowLatencyCompatibility, T = s.partTargetDuration, S = s.renditionReports, E = void 0 === S ? [] : S, b = s.skip, A = void 0 === b ? 0 : b, w = s.hash;
                                    return e.targetDuration = n, e.mediaSequenceBase = a, e.discontinuitySequenceBase = d, e.endlist = u, e.playlistType = h, e.isIFrame = p, e.segments = g, e.prefetchSegments = v, e.lowLatencyCompatibility = y, e.partTargetDuration = T, e.renditionReports = E, e.skip = A, e.hash = w, e;
                                }
                                return u(i);
                            }(E), w = function(e) {
                                n(i, e);
                                var t = a(i);
                                function i(e) {
                                    var s, n = e.uri, r = e.mimeType, a = e.data, o = e.duration, d = e.title, c = e.byterange, u = e.discontinuity, h = e.mediaSequenceNumber, p = void 0 === h ? 0 : h, f = e.discontinuitySequence, g = void 0 === f ? 0 : f, m = e.key, v = e.map, y = e.programDateTime, T = e.dateRange, S = e.markers, E = void 0 === S ? [] : S, b = e.parts, A = void 0 === b ? [] : b;
                                    return l(this, i), (s = t.call(this, "segment")).uri = n, s.mimeType = r, s.data = a, s.duration = o, s.title = d, s.byterange = c, s.discontinuity = u, s.mediaSequenceNumber = p, s.discontinuitySequence = g, s.key = m, s.map = v, s.programDateTime = y, s.dateRange = T, s.markers = E, s.parts = A, s;
                                }
                                return u(i);
                            }(S), _ = function(e) {
                                n(i, e);
                                var t = a(i);
                                function i(e) {
                                    var s, n = e.hint, r = void 0 !== n && n, a = e.uri, o = e.duration, d = e.independent, c = e.byterange, u = e.gap;
                                    return l(this, i), s = t.call(this, "part"), h.PARAMCHECK(a), s.hint = r, s.uri = a, s.duration = o, s.independent = d, s.duration = o, s.byterange = c, s.gap = u, s;
                                }
                                return u(i);
                            }(S), I = function(e) {
                                n(i, e);
                                var t = a(i);
                                function i(e) {
                                    var s, n = e.uri, r = e.discontinuity, a = e.mediaSequenceNumber, o = void 0 === a ? 0 : a, d = e.discontinuitySequence, c = void 0 === d ? 0 : d, u = e.key;
                                    return l(this, i), s = t.call(this, "prefetch"), h.PARAMCHECK(n), s.uri = n, s.discontinuity = r, s.mediaSequenceNumber = o, s.discontinuitySequence = c, s.key = u, s;
                                }
                                return u(i);
                            }(S), N = u(function e(t) {
                                var i = t.uri, s = t.lastMSN, n = t.lastPart;
                                l(this, e), h.PARAMCHECK(i), this.uri = i, this.lastMSN = s, this.lastPart = n;
                            });
                            e.exports = {
                                Rendition: p,
                                Variant: f,
                                SessionData: g,
                                Key: m,
                                MediaInitializationSection: v,
                                DateRange: y,
                                SpliceInfo: T,
                                Playlist: E,
                                MasterPlaylist: b,
                                MediaPlaylist: A,
                                Segment: w,
                                PartialSegment: _,
                                PrefetchSegment: I,
                                RenditionReport: N
                            };
                        },
                        771: (e)=>{
                            function t(e, t) {
                                return function(e) {
                                    if (Array.isArray(e)) return e;
                                }(e) || function(e, t) {
                                    var i = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                                    if (null != i) {
                                        var s, n, r, a, o = [], d = !0, c = !1;
                                        try {
                                            if (r = (i = i.call(e)).next, 0 === t) {
                                                if (Object(i) !== i) return;
                                                d = !1;
                                            } else for(; !(d = (s = r.call(i)).done) && (o.push(s.value), o.length !== t); d = !0);
                                        } catch (e) {
                                            c = !0, n = e;
                                        } finally{
                                            try {
                                                if (!d && null != i.return && (a = i.return(), Object(a) !== a)) return;
                                            } finally{
                                                if (c) throw n;
                                            }
                                        }
                                        return o;
                                    }
                                }(e, t) || s(e, t) || function() {
                                    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                                }();
                            }
                            function i(e, t) {
                                var i = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                                if (!i) {
                                    if (Array.isArray(e) || (i = s(e)) || t && e && "number" == typeof e.length) {
                                        i && (e = i);
                                        var n = 0, r = function() {};
                                        return {
                                            s: r,
                                            n: function() {
                                                return n >= e.length ? {
                                                    done: !0
                                                } : {
                                                    done: !1,
                                                    value: e[n++]
                                                };
                                            },
                                            e: function(e) {
                                                throw e;
                                            },
                                            f: r
                                        };
                                    }
                                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                                }
                                var a, o = !0, d = !1;
                                return {
                                    s: function() {
                                        i = i.call(e);
                                    },
                                    n: function() {
                                        var e = i.next();
                                        return o = e.done, e;
                                    },
                                    e: function(e) {
                                        d = !0, a = e;
                                    },
                                    f: function() {
                                        try {
                                            o || null == i.return || i.return();
                                        } finally{
                                            if (d) throw a;
                                        }
                                    }
                                };
                            }
                            function s(e, t) {
                                if (e) {
                                    if ("string" == typeof e) return r(e, t);
                                    var i = Object.prototype.toString.call(e).slice(8, -1);
                                    return "Object" === i && e.constructor && (i = e.constructor.name), "Map" === i || "Set" === i ? Array.from(e) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? r(e, t) : void 0;
                                }
                            }
                            function r(e, t) {
                                (null == t || t > e.length) && (t = e.length);
                                for(var i = 0, s = new Array(t); i < t; i++)s[i] = e[i];
                                return s;
                            }
                            var a = {};
                            function o(e) {
                                if (a.strictMode) throw e;
                                a.silent || console.error(e.message);
                            }
                            function d(e) {
                                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;
                                if ("number" == typeof e) return e;
                                var i = 10 === t ? Number.parseFloat(e, t) : Number.parseInt(e, t);
                                return Number.isNaN(i) ? 0 : i;
                            }
                            e.exports = {
                                THROW: o,
                                ASSERT: function(e) {
                                    for(var s = arguments.length, n = new Array(s > 1 ? s - 1 : 0), r = 1; r < s; r++)n[r - 1] = arguments[r];
                                    var a, d = i(n.entries());
                                    try {
                                        for(d.s(); !(a = d.n()).done;){
                                            var c = t(a.value, 2), u = c[0];
                                            c[1] || o(new Error("".concat(e, " : Failed at [").concat(u, "]")));
                                        }
                                    } catch (e) {
                                        d.e(e);
                                    } finally{
                                        d.f();
                                    }
                                },
                                CONDITIONALASSERT: function() {
                                    for(var e = arguments.length, s = new Array(e), n = 0; n < e; n++)s[n] = arguments[n];
                                    var r, a = i(s.entries());
                                    try {
                                        for(a.s(); !(r = a.n()).done;){
                                            var d = t(r.value, 2), c = d[0], u = t(d[1], 2), l = u[0], h = u[1];
                                            l && (h || o(new Error("Conditional Assert : Failed at [".concat(c, "]"))));
                                        }
                                    } catch (e) {
                                        a.e(e);
                                    } finally{
                                        a.f();
                                    }
                                },
                                PARAMCHECK: function() {
                                    for(var e = arguments.length, s = new Array(e), n = 0; n < e; n++)s[n] = arguments[n];
                                    var r, a = i(s.entries());
                                    try {
                                        for(a.s(); !(r = a.n()).done;){
                                            var d = t(r.value, 2), c = d[0];
                                            void 0 === d[1] && o(new Error("Param Check : Failed at [".concat(c, "]")));
                                        }
                                    } catch (e) {
                                        a.e(e);
                                    } finally{
                                        a.f();
                                    }
                                },
                                CONDITIONALPARAMCHECK: function() {
                                    for(var e = arguments.length, s = new Array(e), n = 0; n < e; n++)s[n] = arguments[n];
                                    var r, a = i(s.entries());
                                    try {
                                        for(a.s(); !(r = a.n()).done;){
                                            var d = t(r.value, 2), c = d[0], u = t(d[1], 2), l = u[0], h = u[1];
                                            l && void 0 === h && o(new Error("Conditional Param Check : Failed at [".concat(c, "]")));
                                        }
                                    } catch (e) {
                                        a.e(e);
                                    } finally{
                                        a.f();
                                    }
                                },
                                INVALIDPLAYLIST: function(e) {
                                    o(new Error("Invalid Playlist : ".concat(e)));
                                },
                                toNumber: d,
                                hexToByteSequence: function(e) {
                                    (e.startsWith("0x") || e.startsWith("0X")) && (e = e.slice(2));
                                    for(var t = [], i = 0; i < e.length; i += 2)t.push(d(e.slice(i, i + 2), 16));
                                    return n.from(t);
                                },
                                byteSequenceToHex: function(e) {
                                    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e.length;
                                    i <= t && o(new Error("end must be larger than start : start=".concat(t, ", end=").concat(i)));
                                    for(var s = [], n = t; n < i; n++)s.push("0".concat((255 & e[n]).toString(16).toUpperCase()).slice(-2));
                                    return "0x".concat(s.join(""));
                                },
                                tryCatch: function(e, t) {
                                    try {
                                        return e();
                                    } catch (e) {
                                        return t(e);
                                    }
                                },
                                splitAt: function(e, t) {
                                    for(var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, s = -1, n = 0, r = 0; n < e.length; n++)if (e[n] === t) {
                                        if (r++ === i) return [
                                            e.slice(0, n),
                                            e.slice(n + 1)
                                        ];
                                        s = n;
                                    }
                                    return -1 !== s ? [
                                        e.slice(0, s),
                                        e.slice(s + 1)
                                    ] : [
                                        e
                                    ];
                                },
                                trim: function(e) {
                                    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : " ";
                                    return e ? (e = e.trim(), " " === t || (e.startsWith(t) && (e = e.slice(1)), e.endsWith(t) && (e = e.slice(0, -1))), e) : e;
                                },
                                splitByCommaWithPreservingQuotes: function(e) {
                                    for(var t = [], i = !0, s = 0, n = [], r = 0; r < e.length; r++){
                                        var a = e[r];
                                        i && "," === a ? (t.push(e.slice(s, r).trim()), s = r + 1) : '"' !== a && "'" !== a || (i ? (n.push(a), i = !1) : a === n[n.length - 1] ? (n.pop(), i = !0) : n.push(a));
                                    }
                                    return t.push(e.slice(s).trim()), t;
                                },
                                camelify: function(e) {
                                    var t, s = [], n = !1, r = i(e);
                                    try {
                                        for(r.s(); !(t = r.n()).done;){
                                            var a = t.value;
                                            "-" !== a && "_" !== a ? n ? (s.push(a.toUpperCase()), n = !1) : s.push(a.toLowerCase()) : n = !0;
                                        }
                                    } catch (e) {
                                        r.e(e);
                                    } finally{
                                        r.f();
                                    }
                                    return s.join("");
                                },
                                formatDate: function(e) {
                                    var t = e.getUTCFullYear(), i = ("0" + (e.getUTCMonth() + 1)).slice(-2), s = ("0" + e.getUTCDate()).slice(-2), n = ("0" + e.getUTCHours()).slice(-2), r = ("0" + e.getUTCMinutes()).slice(-2), a = ("0" + e.getUTCSeconds()).slice(-2), o = ("00" + e.getUTCMilliseconds()).slice(-3);
                                    return "".concat(t, "-").concat(i, "-").concat(s, "T").concat(n, ":").concat(r, ":").concat(a, ".").concat(o, "Z");
                                },
                                hasOwnProp: function(e, t) {
                                    return Object.hasOwnProperty.call(e, t);
                                },
                                setOptions: function() {
                                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                                    a = Object.assign(a, e);
                                },
                                getOptions: function() {
                                    return Object.assign({}, a);
                                }
                            };
                        }
                    }, t = {}, function i(s) {
                        var n = t[s];
                        if (void 0 !== n) return n.exports;
                        var r = t[s] = {
                            exports: {}
                        };
                        return e[s](r, r.exports, i), r.exports;
                    }(851);
                }, e.exports = s();
            },
            9318: (e, t)=>{
                t.read = function(e, t, i, s, n) {
                    var r, a, o = 8 * n - s - 1, d = (1 << o) - 1, c = d >> 1, u = -7, l = i ? n - 1 : 0, h = i ? -1 : 1, p = e[t + l];
                    for(l += h, r = p & (1 << -u) - 1, p >>= -u, u += o; u > 0; r = 256 * r + e[t + l], l += h, u -= 8);
                    for(a = r & (1 << -u) - 1, r >>= -u, u += s; u > 0; a = 256 * a + e[t + l], l += h, u -= 8);
                    if (0 === r) r = 1 - c;
                    else {
                        if (r === d) return a ? NaN : 1 / 0 * (p ? -1 : 1);
                        a += Math.pow(2, s), r -= c;
                    }
                    return (p ? -1 : 1) * a * Math.pow(2, r - s);
                }, t.write = function(e, t, i, s, n, r) {
                    var a, o, d, c = 8 * r - n - 1, u = (1 << c) - 1, l = u >> 1, h = 23 === n ? Math.pow(2, -24) - Math.pow(2, -77) : 0, p = s ? 0 : r - 1, f = s ? 1 : -1, g = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;
                    for(t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (o = isNaN(t) ? 1 : 0, a = u) : (a = Math.floor(Math.log(t) / Math.LN2), t * (d = Math.pow(2, -a)) < 1 && (a--, d *= 2), (t += a + l >= 1 ? h / d : h * Math.pow(2, 1 - l)) * d >= 2 && (a++, d /= 2), a + l >= u ? (o = 0, a = u) : a + l >= 1 ? (o = (t * d - 1) * Math.pow(2, n), a += l) : (o = t * Math.pow(2, l - 1) * Math.pow(2, n), a = 0)); n >= 8; e[i + p] = 255 & o, p += f, o /= 256, n -= 8);
                    for(a = a << n | o, c += n; c > 0; e[i + p] = 255 & a, p += f, a /= 256, c -= 8);
                    e[i + p - f] |= 128 * g;
                };
            },
            9907: (e)=>{
                var t, i, s = e.exports = {};
                function n() {
                    throw new Error("setTimeout has not been defined");
                }
                function r() {
                    throw new Error("clearTimeout has not been defined");
                }
                function a(e) {
                    if (t === setTimeout) return setTimeout(e, 0);
                    if ((t === n || !t) && setTimeout) return t = setTimeout, setTimeout(e, 0);
                    try {
                        return t(e, 0);
                    } catch (i) {
                        try {
                            return t.call(null, e, 0);
                        } catch (i) {
                            return t.call(this, e, 0);
                        }
                    }
                }
                !function() {
                    try {
                        t = "function" == typeof setTimeout ? setTimeout : n;
                    } catch (e) {
                        t = n;
                    }
                    try {
                        i = "function" == typeof clearTimeout ? clearTimeout : r;
                    } catch (e) {
                        i = r;
                    }
                }();
                var o, d = [], c = !1, u = -1;
                function l() {
                    c && o && (c = !1, o.length ? d = o.concat(d) : u = -1, d.length && h());
                }
                function h() {
                    if (!c) {
                        var e = a(l);
                        c = !0;
                        for(var t = d.length; t;){
                            for(o = d, d = []; ++u < t;)o && o[u].run();
                            u = -1, t = d.length;
                        }
                        o = null, c = !1, function(e) {
                            if (i === clearTimeout) return clearTimeout(e);
                            if ((i === r || !i) && clearTimeout) return i = clearTimeout, clearTimeout(e);
                            try {
                                return i(e);
                            } catch (t) {
                                try {
                                    return i.call(null, e);
                                } catch (t) {
                                    return i.call(this, e);
                                }
                            }
                        }(e);
                    }
                }
                function p(e, t) {
                    this.fun = e, this.array = t;
                }
                function f() {}
                s.nextTick = function(e) {
                    var t = new Array(arguments.length - 1);
                    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)t[i - 1] = arguments[i];
                    d.push(new p(e, t)), 1 !== d.length || c || a(h);
                }, p.prototype.run = function() {
                    this.fun.apply(null, this.array);
                }, s.title = "browser", s.browser = !0, s.env = {}, s.argv = [], s.version = "", s.versions = {}, s.on = f, s.addListener = f, s.once = f, s.off = f, s.removeListener = f, s.removeAllListeners = f, s.emit = f, s.prependListener = f, s.prependOnceListener = f, s.listeners = function(e) {
                    return [];
                }, s.binding = function(e) {
                    throw new Error("process.binding is not supported");
                }, s.cwd = function() {
                    return "/";
                }, s.chdir = function(e) {
                    throw new Error("process.chdir is not supported");
                }, s.umask = function() {
                    return 0;
                };
            },
            7829: (e, t, i)=>{
                "use strict";
                i.r(t), i.d(t, {
                    default: ()=>n
                });
                var s = i(9982);
                class n {
                    getService() {
                        return this.service;
                    }
                    getMethod() {
                        var e;
                        return null !== (e = this.method) && void 0 !== e ? e : s.Method.GET;
                    }
                    setMethod(e) {
                        this.method = e;
                    }
                    getParams() {
                        return this.params;
                    }
                    getOnSuccess() {
                        return this.onSuccessCallback;
                    }
                    getOnFail() {
                        return this.onFailCallback;
                    }
                    getVideoKey() {
                        return this.videoKey;
                    }
                    getParam(e) {
                        return this.params[e];
                    }
                    setParam(e, t) {
                        return this.params[e] = t, this;
                    }
                    setParams(e) {
                        this.params = e;
                    }
                    getBody() {
                        return this.body;
                    }
                    setBody(e) {
                        this.body = e;
                    }
                    isPost() {
                        return this.method === s.Method.POST;
                    }
                    constructor(e, t, i, n, r, a, o){
                        this.method = s.Method.GET, this.videoKey = i, this.service = e, this.method = n, this.params = t || {}, this.body = r, this.onSuccessCallback = a, this.onFailCallback = o;
                    }
                }
            },
            5657: (e, t, i)=>{
                "use strict";
                i.r(t), i.d(t, {
                    default: ()=>d
                });
                var s = i(9794), n = i(99), r = i(7829), a = i(9982), o = i(6443);
                class d {
                    shouldSendStats() {
                        return this.readyToSend;
                    }
                    sendRequest(e) {
                        if ("" === n.default.getInstance().getFastDataSessionToken()) return void this._waitingForToken.push(e);
                        this._waitingForToken.forEach((e)=>this.prepareParams(e)), this._requests.push(...this._waitingForToken), this._waitingForToken = [];
                        let t = e.getVideoKey(), i = e.getParams(), s = e.getService();
                        for (const e of this.onWillSendVideoRequestListeners)e(s, t, i);
                        this.prepareParams(e), this._requests.push(e), this._processRequests();
                    }
                    prepareParams(e) {
                        const t = e.getService();
                        t != s.A.Service.START && t != s.A.Service.PING || (e.setParam("pingTime", e.getParam("pingTime") || n.default.getInstance().getFastDataService().getPingTime()), n.default.getInstance().getCommonVariable("appAnalytics", "isEnabled") && e.setParam("sessionParent", e.getParam("sessionParent") || n.default.getInstance().getFastDataSessionToken()));
                        const i = e.getVideoKey();
                        this.pluginRef.videos.existsVideo(i) && e.setParam("code", e.getParam("code") || this.pluginRef.videos.getVideo(i).getViewCode()), t !== s.A.Service.INIT && t !== s.A.Service.START && t !== s.A.Service.ERROR || n.default.getInstance().getCommonVariable("appAnalytics", "isEnabled") && (e.setParam("parentId", e.getParam("sessionRoot")), e.setParam("navContext", e.getParam("navContext") || n.default.getInstance().getCommonVariable("appAnalytics", "context")));
                    }
                    buildRequest(e, t, i, s, n, o) {
                        i = null != i ? i : a.Method.GET;
                        const d = new r.default(e, t, "", i, s, n, o);
                        return d.setMethod(i), d;
                    }
                    _processRequests() {
                        const e = this._requests;
                        this._requests = [], e.forEach((e)=>{
                            if (-1 !== this.servicesToWait.indexOf(e.getService()) && (this.readyToSend = !0), this.readyToSend) {
                                for(; this._waitingForMetadata.length;){
                                    const e = this._waitingForMetadata.shift();
                                    n.default.getInstance().pushData(n.default.getInstance().getOptions().offline ? o.default.Consumer.PERSISTENT : o.default.Consumer.NQS, e.getService(), e.getMethod(), e.getParams(), e.getOnSuccess(), e.getOnFail());
                                }
                                n.default.getInstance().pushData(n.default.getInstance().getOptions().offline ? o.default.Consumer.PERSISTENT : o.default.Consumer.NQS, e.getService(), e.getMethod(), e.getParams(), e.getOnSuccess(), e.getOnFail());
                            } else this._waitingForMetadata.push(e);
                        });
                    }
                    constructor(e){
                        this.readyToSend = !1, this.servicesToWait = [
                            s.A.Service.INIT,
                            s.A.Service.START
                        ], this.onWillSendVideoRequestListeners = [], this.pluginRef = e, this._requests = [], this._waitingForToken = [], this._waitingForMetadata = [];
                    }
                }
            },
            9982: (e, t, i)=>{
                "use strict";
                var s;
                i.r(t), i.d(t, {
                    AnalyticsTag: ()=>n,
                    AppAnalyticsTag: ()=>r,
                    BalancerTag: ()=>a,
                    CoreTag: ()=>o,
                    Method: ()=>s
                }), function(e) {
                    e.GET = "GET", e.POST = "POST";
                }(s || (s = {}));
                const n = "Analytics", r = "AppAnalytics", a = "Balancer", o = "Core";
            },
            3582: (e, t, i)=>{
                "use strict";
                var s;
                i.r(t), i.d(t, {
                    LogLevel: ()=>s,
                    default: ()=>n
                }), function(e) {
                    e[e.SILENT = 6] = "SILENT", e[e.ERROR = 5] = "ERROR", e[e.WARNING = 4] = "WARNING", e[e.NOTICE = 3] = "NOTICE", e[e.DEBUG = 2] = "DEBUG", e[e.VERBOSE = 1] = "VERBOSE";
                }(s || (s = {}));
                class n {
                    static report(e, t, i, r) {
                        if ("undefined" != typeof console && console.log) {
                            r = r || "darkcyan";
                            const o = {
                                5: "e",
                                4: "w",
                                3: "n",
                                2: "d",
                                1: "v"
                            }[i = i || s.NOTICE];
                            let d = `[NPAW - ${e}]` + this._getCurrentTime() + " " + o + ":";
                            if (n.logLevel <= i) {
                                if (n.plainLogs || "undefined" != typeof document && document.documentMode) this._plainReport(t, d);
                                else {
                                    let e;
                                    e = i === s.ERROR && console.error ? console.error : i === s.WARNING && console.warn ? console.warn : i === s.DEBUG && console.debug ? console.debug : console.log, d = "%c" + d, a = t, "[object Array]" === Object.prototype.toString.call(a) ? (t.splice(0, 0, d, "color: " + r), e.apply(console, t)) : e.call(console, d, "color: " + r, t);
                                }
                            }
                        }
                        var a;
                    }
                    static _getCurrentTime() {
                        const e = new Date;
                        return "[" + ("0" + e.getDate()).slice(-2) + ":" + ("0" + e.getMinutes()).slice(-2) + ":" + ("0" + e.getSeconds()).slice(-2) + "." + ("00" + e.getMilliseconds()).slice(-3) + "]";
                    }
                    static _plainReport(e, t) {
                        if (e instanceof Array) for(const i in e)this._plainReport(e[i], t);
                        else "string" == typeof e ? console.log(t + " " + e) : (console.log(t + " <next line>"), console.log(e));
                    }
                    static setLogLevel(e) {
                        this.logLevel = e;
                    }
                    static getLogLevel() {
                        return this.logLevel;
                    }
                    static error(e, ...t) {
                        this.report(e, [].slice.call(arguments, 1), s.ERROR, "darkred");
                    }
                    static warn(e, ...t) {
                        this.report(e, [].slice.call(arguments, 1), s.WARNING, "darkorange");
                    }
                    static notice(e, ...t) {
                        this.report(e, [].slice.call(arguments, 1), s.NOTICE, "darkgreen");
                    }
                    static debug(e, ...t) {
                        this.report(e, [].slice.call(arguments, 1), s.DEBUG, "indigo");
                    }
                    static verbose(e, ...t) {
                        this.report(e, [].slice.call(arguments, 1), s.VERBOSE, "navy");
                    }
                    static loadLevelFromUrl() {
                        "undefined" != typeof window && window.location && this._parseLevelFromUrl(window.location.search);
                    }
                    static _parseLevelFromUrl(e) {
                        if (e) {
                            const t = /\?.*&*npaw-debug=(.+)/i.exec(e);
                            null !== t && (this.logLevel = Number(t[1])), null !== /\?.*&*npaw-debug=plain/i.exec(e) && (this.plainLogs = !0);
                        }
                    }
                }
                n.logLevel = s.ERROR, n.plainLogs = !1;
            },
            99: (e, t, i)=>{
                "use strict";
                i.r(t), i.d(t, {
                    default: ()=>T
                });
                var s = i(9794), n = i(9743), r = i(9982), a = i(3582), o = i(9907);
                class d {
                    init() {
                        var e, t;
                        if (this.options && this.options.offline) return this.response.host = "OFFLINE", this.response.code = "OFFLINE", this.response.pingTime = 60, this.response.beatTime = 60, void (this._session = n.default.generateRandomString(15));
                        if (this.isUsingLegacy) return;
                        if (this.browserStorage && this.browserStorage.isEnabled() && (new Date).getTime() < 1e3 * (null !== (e = Number(this.browserStorage.getLocal("sessionExpire"))) && void 0 !== e ? e : this.sessionExpire) + (Number(this.coreStorage.getDataTime()) || 0) && this.coreStorage.getStoredData()) return void this.setData(null !== (t = this.coreStorage.getStoredData()) && void 0 !== t ? t : "");
                        const i = s.A.Service.DATA, o = {
                            system: this.accountCode,
                            pluginVersion: T.getPluginVersion(),
                            requestNumber: this.getRequestNumber()
                        };
                        this.loadConfiguration();
                        try {
                            a.default.notice(r.CoreTag, i + " " + o.system), "nicetest" === o.system && a.default.error(r.CoreTag, "No accountCode has been set. Please set your accountCode inside plugin's options."), this.performRequestToFastData(i, o, this._receiveData.bind(this), this._failedData.bind(this));
                        } catch (e) {
                            a.default.error(r.CoreTag, "Error doing get data request to FastData service.");
                        }
                    }
                    updateOptions(e) {
                        this.options.updateOptions(e), this.options.offline && (this.reset(), this.init());
                    }
                    getSessionExpireTime() {
                        return this.sessionExpire;
                    }
                    refreshSessionToken() {
                        this._session = "", this.browserStorage.removeStorages("data"), this.init();
                    }
                    loadConfiguration() {
                        const e = s.A.Service.CONFIGURATION, t = {
                            system: this.accountCode,
                            pluginVersion: T.getPluginVersion(),
                            requestNumber: this.getRequestNumber()
                        };
                        this.performRequestToFastData(e, t, this._receiveConfiguration.bind(this), this._failedConfiguration.bind(this));
                    }
                    getSession() {
                        var e, t;
                        return this.isUsingLegacy ? null === (t = null === (e = this.npawPluginOptions) || void 0 === e ? void 0 : e.legacyPlugin) || void 0 === t ? void 0 : t.viewTransform._session : this._session;
                    }
                    setSession(e) {
                        this._session = e;
                    }
                    setHost(e) {
                        this.response.host = e;
                    }
                    getPingTime() {
                        var e;
                        return null !== (e = this.pingTime) && void 0 !== e ? e : 5;
                    }
                    getBeatTime() {
                        var e;
                        return null !== (e = this.beatTime) && void 0 !== e ? e : 30;
                    }
                    setData(e) {
                        try {
                            let t = JSON.parse(e);
                            this.options["parse.fdsResponseHost"] && (e = e.replace(t.q.h, this.options["parse.fdsResponseHost"](t.q.h)), t = JSON.parse(e)), this.response = {
                                msg: e,
                                host: t.q.h,
                                code: t.q.c,
                                pingTime: t.q.pt || 5,
                                beatTime: t.q.i && t.q.i.bt || 30,
                                sessionExpire: t.q.st && t.q.st || 120
                            }, this._session = this.response.code, this.browserStorage.setLocal("sessionExpire", this.response.sessionExpire), this.browserStorage.setStorages("accCode", this.accountCode), this.browserStorage.setStorages("session", this.response.code), this.coreStorage.setStoredData(this.response.msg), this.coreStorage.setDataTime((new Date).getTime().toString()), this.pingTime = this.response.pingTime, this.beatTime = this.response.beatTime, this.sessionExpire = this.response.sessionExpire;
                        } catch (e) {
                            a.default.error(r.CoreTag, "Fastdata response is invalid.");
                        }
                    }
                    setConfiguration(e) {
                        try {
                            this.response.configurationOptions = JSON.parse(e);
                        } catch (e) {
                            a.default.error(r.CoreTag, "Configuration response is invalid.");
                        }
                    }
                    getFastDataResponse() {
                        return this.response;
                    }
                    getAccountCode() {
                        return this.accountCode;
                    }
                    getRequestNumber() {
                        return Math.random();
                    }
                    reset() {
                        this.coreStorage.removeStoredData(), this.coreStorage.removeSession(), this.browserStorage.removeLocal("sessionExpire"), this.browserStorage.removeStorages("accCode"), this.browserStorage.removeStorages("session");
                    }
                    performRequestToFastData(e, t, i, s) {
                        if (this.options.offline) return;
                        t.timemark = (new Date).getTime(), t.outputFormat = "json";
                        const r = this, a = new XMLHttpRequest;
                        a.open("GET", `https://${this._fastDataHost}${e}${n.default.toQueryString(t)}`), a.onload = function(e) {
                            r.options.offline || (a.status >= 200 && a.status < 400 ? i(this, e) : s(this, e));
                        }, a.onerror = function(e) {
                            s(this, e);
                        }, a.send();
                    }
                    _createConfigurationInterval() {
                        this.isUsingLegacy || !this.options.isRefreshLMAConfigurationEnabled() || this._refreshInterval || (this._refreshInterval = setInterval(this.loadConfiguration.bind(this), 1e3 * this.options.refreshLMAConfigurationSeconds()));
                    }
                    _receiveData(e, t) {
                        this.setData(e.response);
                    }
                    _receiveConfiguration(e, t) {
                        this.setConfiguration(e.response);
                    }
                    _failedData(e, t) {
                        a.default.error(r.CoreTag, "Fastdata request has failed."), ++this.retries < 5 && setTimeout(this.init.bind(this), 5e3);
                    }
                    _failedConfiguration(e, t) {
                        a.default.error(r.CoreTag, "Fastdata configuration request has failed."), ++this.retries < 5 && setTimeout(this.init.bind(this), 5e3);
                    }
                    constructor(e, t, i, s, n){
                        var r, a, d;
                        this.response = {}, this._session = "", this.sessionExpire = 120, this.retries = 0, this.isUsingLegacy = !1, this.options = e, this.npawPluginOptions = n, this.accountCode = t, this.coreStorage = i, this.browserStorage = s, this._fastDataHost = this.options.getFastDataHost();
                        const c = (r = "true" === o.env.IS_STANDALONE, void 0 !== r) && r;
                        this.isUsingLegacy = c && (d = void 0 !== (null === (a = null == n ? void 0 : n.legacyPlugin) || void 0 === a ? void 0 : a.viewTransform), true) && void 0 !== d && d, this._createConfigurationInterval();
                    }
                }
                var c = i(668);
                class u {
                    updateOptions(e) {
                        const t = new c.A;
                        Object.keys(this).forEach((i)=>{
                            null == e[i] || Object.keys(t).includes(i) || (this[i] = e[i]);
                        });
                    }
                    setNpawPluginOptions(e) {
                        Object.keys(this).forEach((t)=>{
                            null != e[t] && (this[t] = e[t]);
                        });
                    }
                    isRefreshLMAConfigurationEnabled() {
                        return this["lma.refresh.configuration.enabled"];
                    }
                    refreshLMAConfigurationSeconds() {
                        return this["lma.refresh.configuration.seconds"];
                    }
                    getHost() {
                        return this.host;
                    }
                    getFastDataHost() {
                        return this.host;
                    }
                    constructor(){
                        this.offline = !1, this.host = "lma.npaw.com", this.disableCookies = !0, this.forceCookies = !1, this.disableStorage = !1, this.authToken = void 0, this.authType = "Bearer", this["app.https"] = !0, this["lma.refresh.configuration.enabled"] = !1, this["lma.refresh.configuration.seconds"] = 300, this["parse.fdsResponseHost"] = null;
                    }
                }
                class l {
                    performHttps() {
                        return this.isHttps;
                    }
                    getHost() {
                        return this.host;
                    }
                    getService() {
                        return this.service;
                    }
                    getMethod() {
                        return this.method;
                    }
                    getParams() {
                        return this.params;
                    }
                    getBody() {
                        return this.body;
                    }
                    setBody(e) {
                        this.body = e;
                    }
                    addHeader(e, t) {
                        this.headers[e] = t;
                    }
                    getRetries() {
                        return this.retries;
                    }
                    send(e, t) {
                        if (this.params.timemark = Date.now(), this.params.sessionRoot = T.getInstance().getFastDataSessionToken(), this.params.system = T.getInstance().getFastDataService().getAccountCode(), this.body && (this.hadBody = !0), this.method === r.Method.POST && !this.body) {
                            const e = {};
                            e.timemark = this.params.timemark, this.params.code && (e.code = this.params.code), e.sessionRoot = this.params.sessionRoot, e.system = this.params.system, e.sessionId = this.params.sessionId && "" != this.params.sessionId ? this.params.sessionId : T.getInstance().getFastDataSessionToken(), this.body = JSON.stringify(this.params), this.params = e;
                        }
                        try {
                            this.getUrl();
                        } catch (e) {
                            console.log(e);
                        }
                        this.xhr.open(this.method, this.getUrl()), this.xhr.onreadystatechange = ()=>{
                            4 === this.xhr.readyState && this.xhr.status >= 200 && this.xhr.status < 400 ? (t && t(), this.onSuccessCallback && this.onSuccessCallback()) : 4 === this.xhr.readyState && (this.retries++, !this.hadBody && this.method === r.Method.POST && this.body && (this.params = JSON.parse(this.body), this.body = void 0), e(), this.onFailCallback && this.onFailCallback());
                        };
                        for(const e in this.headers)this.xhr.setRequestHeader(e, this.headers[e]);
                        this.xhr.send(this.body);
                    }
                    asyncSend() {
                        var e, t, i, s;
                        return e = this, t = void 0, s = function*() {
                            return new Promise((e, t)=>{
                                this.send(t, e);
                            });
                        }, new (i = void 0, i = Promise)(function(n, r) {
                            function a(e) {
                                try {
                                    d(s.next(e));
                                } catch (e) {
                                    r(e);
                                }
                            }
                            function o(e) {
                                try {
                                    d(s.throw(e));
                                } catch (e) {
                                    r(e);
                                }
                            }
                            function d(e) {
                                var t;
                                e.done ? n(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                                    e(t);
                                })).then(a, o);
                            }
                            d((s = s.apply(e, t || [])).next());
                        });
                    }
                    toLocalStorageString() {
                        const e = {}, t = this.service.split("/");
                        e.request = t[t.length - 1], e.unixtime = this.params.timemark;
                        for(const t in this.params)void 0 !== this.params[t] && ("sessionId" === t || "sessionRoot" === t ? e[t] = "" : "code" === t ? e[t] = "CODE_PLACEHOLDER" : "object" == typeof this.params[t] ? e[t] = JSON.stringify(this.params[t]) : e[t] = this.params[t]);
                        return JSON.stringify(e);
                    }
                    getUrl() {
                        return `${this.isHttps ? "https" : "http"}://${this.host}${this.service}${n.default.toQueryString(this.params)}`;
                    }
                    constructor(e, t, i, s, n, a, o){
                        this.method = r.Method.GET, this.headers = {}, this.xhr = new XMLHttpRequest, this.retries = 0, this.hadBody = !1, this.isHttps = e, this.host = t, this.service = i, this.method = s, this.params = n, this.onSuccessCallback = a, this.onFailCallback = o;
                    }
                }
                var h = i(912);
                const p = [
                    s.A.Service.ERROR,
                    s.A.Service.AD_ERROR
                ];
                class f {
                    destroy() {
                        this.freshRequests = [], this.retryRequests = [], this.isDestroyed = !0, this.timeWhenLastSentFromDatabase = (new Date).getTime();
                    }
                    send(e, t, i, s, n) {
                        var o;
                        if (this.isDestroyed) return;
                        const d = new l(null === (o = this.options["app.https"]) || void 0 === o || o, this.coreStorage.getHost(), e, t, null != i ? i : {}, s, n);
                        void 0 !== this.options.authToken && void 0 !== this.options.authType && e !== h.xC.CDN && (a.default.verbose(r.AnalyticsTag, "Adding Authorization header with type " + this.options.authType), d.addHeader("Authorization", this.options.authType + " " + this.options.authToken)), this.freshRequests.push(d), this._processRequests();
                    }
                    getTimeOfLastSentRequest() {
                        return this.timeOfLastSentRequest;
                    }
                    wasStartSent() {
                        return this.sentStart;
                    }
                    _processRequests() {
                        var e, t, i, s;
                        return e = this, t = void 0, s = function*() {
                            if (this.isDestroyed) return;
                            const e = this.retryRequests.splice(0, this.retryRequests.length), t = this.freshRequests.splice(0, this.freshRequests.length);
                            e.length > 0 && a.default.verbose(r.CoreTag, "Retrying to send these requests:", ...e.map((e)=>e.getService()));
                            const i = [];
                            let s = !1;
                            for (const t of e)if (s) i.push(t);
                            else try {
                                yield t.asyncSend(), this.timeOfLastSentRequest = (new Date).getTime();
                            } catch (e) {
                                s = !0, i.push(t);
                            }
                            for (const e of t)try {
                                yield e.asyncSend(), this.servicesToWait.includes(e.getService()) && (this.sentStart = !0), this.timeOfLastSentRequest = (new Date).getTime();
                            } catch (t) {
                                p.includes(e.getService()) && i.push(e);
                            }
                            this.retryRequests.push(...i.slice(-25));
                        }, new (i = void 0, i = Promise)(function(n, r) {
                            function a(e) {
                                try {
                                    d(s.next(e));
                                } catch (e) {
                                    r(e);
                                }
                            }
                            function o(e) {
                                try {
                                    d(s.throw(e));
                                } catch (e) {
                                    r(e);
                                }
                            }
                            function d(e) {
                                var t;
                                e.done ? n(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                                    e(t);
                                })).then(a, o);
                            }
                            d((s = s.apply(e, t || [])).next());
                        });
                    }
                    constructor(e, t, i){
                        this.freshRequests = [], this.retryRequests = [], this.databaseSendingInterval = 12e4, this.isDestroyed = !1, this.servicesToWait = [
                            s.A.Service.INIT,
                            s.A.Service.START
                        ], this.sentStart = !1, this.options = e, this.coreStorage = t, this.fastDataService = i;
                    }
                }
                class g {
                    updateStorageOptions(e, t, i) {
                        this.disableCookies = e, this.forceCookies = t, this.disabled = i;
                    }
                    isEnabled() {
                        if (this.disabled) return !1;
                        let e = !0;
                        if (!this.forceCookies) try {
                            localStorage.setItem(this.prefix + ".test", "true"), localStorage.removeItem(this.prefix + ".test");
                        } catch (t) {
                            e = !1;
                        }
                        return e;
                    }
                    setLocal(e, t) {
                        if (!this.disabled) try {
                            !this.forceCookies && ("undefined" != typeof localStorage && localStorage || this.disableCookies) ? "undefined" != typeof localStorage && localStorage && localStorage.setItem(this.prefix + "." + e, t) : this._setCookie(this.prefix + ".local." + e, t);
                        } catch (e) {
                            a.default.debug(r.CoreTag, "App Analytics needs localStorage or cookies, not supported by your browser.");
                        }
                    }
                    getLocal(e) {
                        if (!this.disabled) return this._localGetRemove("getItem", "_getCookie", e);
                    }
                    removeLocal(e) {
                        if (!this.disabled) return this._localGetRemove("removeItem", "_removeCookie", e);
                    }
                    _localGetRemove(e, t, i) {
                        try {
                            if (this.forceCookies || !("undefined" != typeof localStorage && localStorage || this.disableCookies)) return this[t](this.prefix + ".local." + i);
                            if ("undefined" != typeof localStorage && localStorage) return localStorage[e](this.prefix + "." + i);
                        } catch (e) {
                            a.default.debug(r.CoreTag, "App Analytics needs localStorage or cookies, not supported by your browser.");
                        }
                    }
                    setSession(e, t) {
                        if (!this.disabled) try {
                            !this.forceCookies && ("undefined" != typeof sessionStorage && sessionStorage || this.disableCookies) ? "undefined" != typeof sessionStorage && sessionStorage && sessionStorage.setItem(this.prefix + "." + e, t) : this._setCookie(this.prefix + ".session." + e, t);
                        } catch (e) {
                            a.default.debug(r.CoreTag, "App Analytics needs sessionStorage or cookies, not supported by your browser.");
                        }
                    }
                    getSession(e) {
                        if (!this.disabled) return this._sessionGetRemove("getItem", "_getCookie", e);
                    }
                    removeSession(e) {
                        if (!this.disabled) return this._sessionGetRemove("removeItem", "_removeCookie", e);
                    }
                    _sessionGetRemove(e, t, i) {
                        try {
                            if (this.forceCookies || !("undefined" != typeof sessionStorage && sessionStorage || this.disableCookies)) return this[t](this.prefix + ".session." + i);
                            if ("undefined" != typeof sessionStorage && sessionStorage) return sessionStorage[e](this.prefix + "." + i);
                        } catch (e) {
                            a.default.debug(r.CoreTag, "App Analytics needs sessionStorage or cookies, not supported by your browser.");
                        }
                    }
                    getStorages(e) {
                        if (!this.disabled) return this.getSession(e) || this.getLocal(e);
                    }
                    setStorages(e, t) {
                        this.disabled || (this.setSession(e, t), this.setLocal(e, t));
                    }
                    removeStorages(e) {
                        this.disabled || (this.removeSession(e), this.removeLocal(e));
                    }
                    _setCookie(e, t) {
                        if ("undefined" != typeof document) {
                            let i = ";";
                            "undefined" != typeof location && (i += "domain=" + location.host.split(".").reverse().splice(0, 2).reverse().join(".") + ";path=/;"), document.cookie = e + "=" + t + i;
                        }
                    }
                    _getCookie(e) {
                        if ("undefined" != typeof document) {
                            let t = e + "=", i = decodeURIComponent(document.cookie).split(";");
                            for(let e = 0; e < i.length; e++){
                                let s = i[e];
                                for(; " " === s.charAt(0);)s = s.substring(1);
                                if (0 === s.indexOf(t)) return s.substring(t.length, s.length);
                            }
                        }
                        return null;
                    }
                    _removeCookie(e) {
                        this._setCookie(e, "");
                    }
                    constructor(e, t, i){
                        this.prefix = "npaw", this.disableCookies = e, this.forceCookies = t, this.disabled = i;
                    }
                }
                class m {
                    isEnabled() {
                        return this.browserStorage.isEnabled();
                    }
                    setLocal(e, t) {
                        this.browserStorage.setLocal(e, t);
                    }
                    getLocal(e) {
                        return this.browserStorage.getLocal(e);
                    }
                    removeLocal(e) {
                        this.browserStorage.removeLocal(e);
                    }
                    getHost() {
                        let e = this.options.getHost();
                        const t = T.getInstance().getFastDataService();
                        return !T.getInstance().isUsingLegacy() && t && t.getFastDataResponse() && t.getFastDataResponse().host ? e = t.getFastDataResponse().host : T.getInstance().isUsingLegacy() && T.getInstance().getLegacyFastDataHost() && (e = T.getInstance().getLegacyFastDataHost()), e;
                    }
                    getSession() {
                        let e = this.browserStorage.getStorages("session");
                        if ("undefined" === e && (e = void 0), !e) {
                            const t = this.getStoredData();
                            if (t) try {
                                e = JSON.parse(t).q.c;
                            } catch (e) {}
                        }
                        return e;
                    }
                    getStorageHost() {
                        let e = null;
                        const t = this.getStoredData();
                        if (t) try {
                            e = JSON.parse(t).q.h;
                        } catch (e) {}
                        return e;
                    }
                    getLocalAccountCode() {
                        return this.browserStorage.getLocal("accCode");
                    }
                    getSessionAccountCode() {
                        return this.browserStorage.getSession("accCode");
                    }
                    getAppAnalyticsRegisteredProperties() {
                        return this.browserStorage.getLocal("appAnalyticsRegisteredProperties");
                    }
                    setAppAnalyticsRegisteredProperties(e) {
                        this.browserStorage.setLocal("appAnalyticsRegisteredProperties", e);
                    }
                    removeAppAnalyticsRegisteredProperties() {
                        this.browserStorage.removeLocal("appAnalyticsRegisteredProperties");
                    }
                    getAppAnalyticsStarted() {
                        return "true" === this.browserStorage.getLocal("appAnalyticsStarted");
                    }
                    setAppAnalyticsStarted(e) {
                        this.browserStorage.setLocal("appAnalyticsStarted", String(e));
                    }
                    removeAppAnalyticsStarted() {
                        this.browserStorage.removeStorages("appAnalyticsStarted");
                    }
                    getDataTime() {
                        return this.browserStorage.getStorages("dataTime");
                    }
                    setDataTime(e) {
                        this.browserStorage.setStorages("dataTime", e);
                    }
                    getLastActive() {
                        return Number(this.browserStorage.getStorages("lastactive"));
                    }
                    setLastActive(e) {
                        this.browserStorage.setStorages("lastactive", e);
                    }
                    removeLastActive() {
                        this.browserStorage.removeStorages("lastactive");
                    }
                    setSession(e) {
                        this.browserStorage.setStorages("session", e);
                    }
                    removeSession() {
                        this.browserStorage.removeStorages("session");
                    }
                    getSessionExpire() {
                        return 1e3 * Number(this.browserStorage.getLocal("sessionExpire"));
                    }
                    getStoredData() {
                        return this.browserStorage.getStorages("data");
                    }
                    setStoredData(e) {
                        this.browserStorage.setStorages("data", e);
                    }
                    removeStoredData() {
                        this.browserStorage.removeStorages("data");
                    }
                    getStorages(e) {
                        var t, i, s, n;
                        return t = this, i = void 0, n = function*() {
                            return this.browserStorage.getStorages(e);
                        }, new (s = void 0, s = Promise)(function(e, r) {
                            function a(e) {
                                try {
                                    d(n.next(e));
                                } catch (e) {
                                    r(e);
                                }
                            }
                            function o(e) {
                                try {
                                    d(n.throw(e));
                                } catch (e) {
                                    r(e);
                                }
                            }
                            function d(t) {
                                var i;
                                t.done ? e(t.value) : (i = t.value, i instanceof s ? i : new s(function(e) {
                                    e(i);
                                })).then(a, o);
                            }
                            d((n = n.apply(t, i || [])).next());
                        });
                    }
                    constructor(e, t){
                        this.options = e, this.browserStorage = t;
                    }
                }
                var v = i(6443), y = i(9907);
                class T {
                    static getInstance(e, t, i) {
                        return this._instance && !i || (this._instance = new T(e || "", t)), this._instance;
                    }
                    destroy() {
                        this.unregisterAllPeriodicPushes(), this.commonVariables.clear(), this.nqsService.destroy();
                    }
                    static getPluginVersion() {
                        return `7.2.34${"true" === y.env.IS_STANDALONE ? "-balancer" : ""}-nwf-js-sdk`;
                    }
                    isUsingLegacy() {
                        return this.usingLegacy;
                    }
                    wasStartSent() {
                        var e, t, i, s, n, r, a;
                        return this.isUsingLegacy() ? (null === (t = null === (e = this.pluginOptions) || void 0 === e ? void 0 : e.legacyPlugin) || void 0 === t ? void 0 : t._comm) && (null === (s = null === (i = this.pluginOptions) || void 0 === i ? void 0 : i.legacyPlugin) || void 0 === s ? void 0 : s._comm.transforms) ? (a = !(null === (r = null === (n = this.pluginOptions) || void 0 === n ? void 0 : n.legacyPlugin) || void 0 === r ? void 0 : r._comm.transforms[0]._isBusy), void 0 === a) || a : void 0 : this.nqsService.wasStartSent();
                    }
                    setLegacyPlugin(e) {
                        var t, i, s, n;
                        if (this.pluginOptions) {
                            this.pluginOptions.legacyPlugin = e;
                            const r = (t = "true" === y.env.IS_STANDALONE, void 0 !== t) && t;
                            this.usingLegacy = r && (n = void 0 !== (null === (s = null === (i = this.pluginOptions) || void 0 === i ? void 0 : i.legacyPlugin) || void 0 === s ? void 0 : s.viewTransform), true) && void 0 !== n && n;
                        }
                    }
                    setActiveSwitchingOnLegacy(e) {
                        e && this.pluginOptions && this.pluginOptions.legacyPlugin && this.pluginOptions.legacyPlugin.options && (this.pluginOptions.legacyPlugin.options["content.cdn"] = "ACTVSWIT");
                    }
                    getViewCode() {
                        var e;
                        return null === (e = this.pluginOptions) || void 0 === e ? void 0 : e.legacyPlugin.viewTransform.getViewCode();
                    }
                    getLegacyFastDataHost() {
                        var e;
                        return null === (e = this.pluginOptions) || void 0 === e ? void 0 : e.legacyPlugin.viewTransform.response.host;
                    }
                    setOptions(e) {
                        this.options.updateOptions(e), this.browserStorage.updateStorageOptions(this.options.disableCookies, this.options.forceCookies, this.options.disableStorage), this.fastDataService.updateOptions(e);
                    }
                    getOptions() {
                        return this.options;
                    }
                    getCoreStorage() {
                        return this.coreStorage;
                    }
                    registerCommonVariable(e, t, i) {
                        var s, n;
                        this.commonVariables.has(e) ? null === (s = this.commonVariables.get(e)) || void 0 === s || s.set(t, i) : (this.commonVariables.set(e, new Map), null === (n = this.commonVariables.get(e)) || void 0 === n || n.set(t, i));
                    }
                    unregisterCommonVariable(e, t) {
                        var i;
                        null === (i = this.commonVariables.get(e)) || void 0 === i || i.delete(t);
                    }
                    getCommonVariable(e, t) {
                        var i;
                        return null === (i = this.commonVariables.get(e)) || void 0 === i ? void 0 : i.get(t);
                    }
                    getFastDataService() {
                        return this.fastDataService;
                    }
                    getFastDataSessionToken() {
                        return this.fastDataService.getSession();
                    }
                    refreshSessionToken() {
                        return this.usingLegacy ? void 0 : this.fastDataService.refreshSessionToken();
                    }
                    isSessionTokenExpired() {
                        var e;
                        const t = (new Date).getTime();
                        return !this.usingLegacy && t - (null !== (e = this.nqsService.getTimeOfLastSentRequest()) && void 0 !== e ? e : t) > 1e3 * this.fastDataService.getSessionExpireTime();
                    }
                    pushData(e, t, i, s, n, r) {
                        this.handleDataToSend(e, t, i, s, n, r);
                    }
                    pushPeriodicDataFromCallback(e, t, i, s, n, r, a, o) {
                        const d = setInterval(()=>{
                            const t = r();
                            t && this.handleDataToSend(e, i, n, t, a, o);
                        }, s < 1e3 ? 1e3 : s);
                        this.registeredPeriodicPushes.has(t) ? (clearInterval(this.registeredPeriodicPushes.get(t)), this.registeredPeriodicPushes.set(t, d)) : this.registeredPeriodicPushes.set(t, d);
                    }
                    unregisterPeriodicPush(e) {
                        clearInterval(this.registeredPeriodicPushes.get(e)), this.registeredPeriodicPushes.delete(e);
                    }
                    unregisterAllPeriodicPushes() {
                        if (0 === this.registeredPeriodicPushes.size) return;
                        a.default.debug(r.CoreTag, `Unregistering ${this.registeredPeriodicPushes.size} periodic pushes`);
                        const e = Array.from(this.registeredPeriodicPushes.keys());
                        for (const t of e)clearInterval(this.registeredPeriodicPushes.get(t)), this.registeredPeriodicPushes.delete(t);
                        a.default.debug(r.CoreTag, "Finished unregistering all pushes");
                    }
                    deleteOldOfflineEntries() {
                        var e, t, i, s;
                        const n = null !== (t = null === (e = this.coreStorage.getLocal("offlineViews")) || void 0 === e ? void 0 : e.split(",")) && void 0 !== t ? t : [];
                        for (const e of n){
                            const t = null !== (s = null === (i = this.coreStorage.getLocal("offlineViews." + e)) || void 0 === i ? void 0 : i.split(",")) && void 0 !== s ? s : [], n = 2592e6;
                            t.length > 0 && Date.now() - JSON.parse("[" + t + "]")[0].timemark > n && this.deleteViewDataFromLocalStorage(e);
                        }
                    }
                    sendOfflineEvents() {
                        var e, t, i, n, o, d;
                        return i = this, n = void 0, d = function*() {
                            if (this.options.offline) return void a.default.notice(r.AnalyticsTag, "Unable to send offline events because offline option is enabled");
                            if (this.sendingOffline) return;
                            this.sendingOffline = !0;
                            let i = 15, n = !1;
                            for(; !n && i-- > 0;)"" === this.getFastDataSessionToken() ? yield new Promise((e)=>setTimeout(e, 100)) : n = !0;
                            if (i < 1) return;
                            const o = (null !== (t = null === (e = this.coreStorage.getLocal("offlineViews")) || void 0 === e ? void 0 : e.split(",")) && void 0 !== t ? t : []).map((e)=>new Promise((t, i)=>{
                                    var n;
                                    let a = null !== (n = this.coreStorage.getLocal("offlineViews." + e)) && void 0 !== n ? n : "";
                                    if (a = a.replace(/CODE_PLACEHOLDER/g, T.getInstance().getFastDataSessionToken() + "_" + e.split("_")[1]), a.length > 0) {
                                        const i = new l(!0, this.coreStorage.getHost(), s.A.Service.OFFLINE_EVENTS, r.Method.POST, {
                                            code: T.getInstance().getFastDataSessionToken() + "_" + e.split("_")[1]
                                        }, ()=>{
                                            this.deleteViewDataFromLocalStorage(e), t();
                                        }, ()=>t());
                                        i.setBody("[" + a + "]"), i.send(function() {});
                                    }
                                }));
                            yield Promise.all(o).finally(()=>{
                                this.sendingOffline = !1;
                            });
                        }, new (o = void 0, o = Promise)(function(e, t) {
                            function s(e) {
                                try {
                                    a(d.next(e));
                                } catch (e) {
                                    t(e);
                                }
                            }
                            function r(e) {
                                try {
                                    a(d.throw(e));
                                } catch (e) {
                                    t(e);
                                }
                            }
                            function a(t) {
                                var i;
                                t.done ? e(t.value) : (i = t.value, i instanceof o ? i : new o(function(e) {
                                    e(i);
                                })).then(s, r);
                            }
                            a((d = d.apply(i, n || [])).next());
                        });
                    }
                    deleteViewDataFromLocalStorage(e) {
                        var t, i;
                        this.coreStorage.removeLocal("offlineViews." + e);
                        const s = null !== (i = null === (t = this.coreStorage.getLocal("offlineViews")) || void 0 === t ? void 0 : t.split(",")) && void 0 !== i ? i : [], n = s.indexOf(e);
                        -1 != n && s.splice(n, 1), this.coreStorage.setLocal("offlineViews", s.toString());
                    }
                    handleDataToSend(e, t, i, n, r, a) {
                        if (!this.isDestroyed) switch(e){
                            case v.default.Consumer.NQS:
                                this.nqsService.send(t, i, n, r, a);
                                break;
                            case v.default.Consumer.PERSISTENT:
                                if (void 0 !== r && r(), t === s.A.Service.VIDEO_PLUGIN_LOGS) break;
                                if (t === s.A.Service.INIT) break;
                                n.timemark = Date.now();
                                const e1 = new l(this.options["app.https"], "", t, i, n, r, a), o = this.coreStorage.getLocal("offlineViews");
                                if (o) {
                                    const e = o.split(",");
                                    e.includes(n.code) || (e.push(n.code), this.coreStorage.setLocal("offlineViews", e.toString()));
                                } else this.coreStorage.setLocal("offlineViews", n.code);
                                const d = this.coreStorage.getLocal("offlineViews." + n.code);
                                if (d) {
                                    const t = d.split(",");
                                    t.push(e1.toLocalStorageString()), this.coreStorage.setLocal("offlineViews." + n.code, t.toString());
                                } else this.coreStorage.setLocal("offlineViews." + n.code, e1.toLocalStorageString());
                                break;
                            case v.default.Consumer.BLACK_HOLE:
                                void 0 !== r && r();
                        }
                    }
                    constructor(e, t){
                        var i, s, n, r;
                        if (this.options = new u, this.sendingOffline = !1, this.isDestroyed = !1, this.usingLegacy = !1, this.commonVariables = new Map, this.registeredPeriodicPushes = new Map, this.pluginOptions = t, this.pluginOptions) {
                            this.pluginOptions.host && this.options.setNpawPluginOptions({
                                host: this.pluginOptions.host
                            });
                            const e = (i = "true" === y.env.IS_STANDALONE, void 0 !== i) && i;
                            this.usingLegacy = e && (r = void 0 !== (null === (n = null === (s = this.pluginOptions) || void 0 === s ? void 0 : s.legacyPlugin) || void 0 === n ? void 0 : n.viewTransform), true) && void 0 !== r && r;
                        }
                        this.browserStorage = new g(this.options.disableCookies, this.options.forceCookies, this.options.disableStorage), this.coreStorage = new m(this.options, this.browserStorage), this.fastDataService = new d(this.options, e, this.coreStorage, this.browserStorage, this.pluginOptions), this.fastDataService.init(), this.nqsService = new f(this.options, this.coreStorage, this.fastDataService), this.deleteOldOfflineEntries();
                    }
                }
            },
            668: (e, t, i)=>{
                "use strict";
                i.d(t, {
                    A: ()=>s
                });
                class s {
                    constructor(){
                        this.host = "lma.npaw.com", this.components = {}, this.host = "lma.npaw.com", this.components = {};
                    }
                }
            },
            9794: (e, t, i)=>{
                "use strict";
                var s;
                i.d(t, {
                    A: ()=>r
                });
                class n {
                }
                s = n, n.VideoService = {
                    INIT: "/init",
                    START: "/start",
                    JOIN: "/joinTime",
                    PAUSE: "/pause",
                    RESUME: "/resume",
                    SEEK: "/seek",
                    BUFFER: "/bufferUnderrun",
                    ERROR: "/error",
                    STOP: "/stop",
                    PING: "/ping",
                    DATA_OBJECT: "/data"
                }, n.Service = Object.assign(Object.assign({
                    DATA: "/data",
                    ADAPTERS: "/adapters",
                    CONFIGURATION: "/configuration",
                    APP_ANALYTICS_PLUGIN_LOGS: "/infinity/session/pluginLogs",
                    VIDEO_PLUGIN_LOGS: "/infinity/video/pluginLogs"
                }, s.VideoService), {
                    CDN: "/cdn",
                    VIDEO_EVENT: "/infinity/video/event",
                    AD_INIT: "/adInit",
                    AD_START: "/adStart",
                    AD_JOIN: "/adJoin",
                    AD_PAUSE: "/adPause",
                    AD_RESUME: "/adResume",
                    AD_BUFFER: "/adBufferUnderrun",
                    AD_STOP: "/adStop",
                    AD_CLICK: "/adClick",
                    AD_ERROR: "/adError",
                    AD_MANIFEST: "/adManifest",
                    AD_POD_START: "/adBreakStart",
                    AD_POD_STOP: "/adBreakStop",
                    AD_QUARTILE: "/adQuartile",
                    EVENT: "/infinity/session/event",
                    SESSION_START: "/infinity/session/start",
                    SESSION_STOP: "/infinity/session/stop",
                    NAV: "/infinity/session/nav",
                    BEAT: "/infinity/session/beat",
                    OFFLINE_EVENTS: "/offlineEvents"
                });
                const r = n;
            },
            6443: (e, t, i)=>{
                "use strict";
                i.r(t), i.d(t, {
                    default: ()=>s
                });
                class s {
                }
                s.Products = {
                    VIDEO_ANALYTICS: "videoAnalytics",
                    BALANCER: "balancer"
                }, s.AnalyticsVariables = {
                    VIEW_CODE: "viewCode",
                    METHOD_OPTION: "methodOption"
                }, s.BalancerVariables = {
                    AS_ENABLED: "activeSwitchingEnabled",
                    PROFILE_NAME: "profileName",
                    BUCKET: "bucket",
                    DECISION_FINISHED: "decisionFinished",
                    LAST_USED_CDN: "lastUsedCdn",
                    BALANCER_TRAFFIC: "balancerTraffic",
                    BALANCER_BITRATE: "balancerBitrate"
                }, s.Consumer = {
                    NQS: "NQS",
                    PERSISTENT: "PERSISTENT",
                    BLACK_HOLE: "BLACK_HOLE"
                };
            },
            9743: (e, t, i)=>{
                "use strict";
                i.r(t), i.d(t, {
                    default: ()=>r
                });
                var s = i(3582), n = i(9982);
                class r {
                    static toQueryString(e) {
                        return "?" + Object.keys(e).map((t)=>{
                            if (null !== e[t] && "object" == typeof e[t]) {
                                const i = JSON.stringify(e[t]);
                                if ("{}" !== i) return encodeURIComponent(t) + "=" + encodeURIComponent(i);
                            } else if (null !== e[t] && void 0 !== e[t] && "" !== e[t]) return encodeURIComponent(t) + "=" + encodeURIComponent(e[t]);
                            return "";
                        }).filter((e)=>"" != e).join("&");
                    }
                    static addProtocol(e, t) {
                        let i = "http://localhost/";
                        try {
                            i = "http://" + e, t || "undefined" != typeof window && 0 === window.location.protocol.indexOf("https") ? i = "https://" + e : "undefined" != typeof window && 0 === window.location.protocol.indexOf("http") && (i = "//" + e);
                        } catch (e) {
                            s.default.warn(n.CoreTag, e);
                        }
                        return i;
                    }
                    static parseBoolean(e) {
                        return "string" == typeof e ? "true" === e.toLowerCase() : !!e;
                    }
                    static methodFromString(e) {
                        var t;
                        const i = null !== (t = null == e ? void 0 : e.toUpperCase()) && void 0 !== t ? t : "";
                        return i in n.Method ? n.Method[i] : n.Method.GET;
                    }
                    static generateRandomString(e) {
                        let t = "";
                        for(let i = 0; i < e; i++)t += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62 * Math.random()));
                        return t;
                    }
                }
            },
            4243: (e, t, i)=>{
                "use strict";
                i.r(t), i.d(t, {
                    default: ()=>p
                });
                var s, n = i(2839), r = i.n(n), a = i(3582);
                !function(e) {
                    e.BLACK = "\x1b[30m", e.RED = "\x1b[31m", e.GREEN = "\x1b[32m", e.YELLOW = "\x1b[33m", e.BLUE = "\x1b[34m", e.MAGENTA = "\x1b[35m", e.CYAN = "\x1b[36m", e.WHITE = "\x1b[37m";
                }(s || (s = {}));
                class o {
                    static colorizeText(e, t) {
                        return `${t}${e}${this.RESET}`;
                    }
                    static header(e) {
                        a.default.getLogLevel() < a.LogLevel.SILENT && console.log(this.BOLD + e + this.RESET);
                    }
                    static log(e, t) {
                        a.default.getLogLevel() < a.LogLevel.SILENT && console.log(e, t || "");
                    }
                    static logWithPrefix(e, t, i = 1) {
                        if (a.default.getLogLevel() < a.LogLevel.SILENT) {
                            const s = t.repeat(i) + e;
                            console.log(s);
                        }
                    }
                }
                o.logIdent = "  ", o.BOLD = "\x1b[1m", o.RESET = "\x1b[0m";
                class d {
                    generateRow() {
                        return this.eventType.padEnd(15) + this.getParamsString().padEnd(15);
                    }
                    getParamsString() {
                        if (!this.params) return o.colorizeText("Data not defined", s.YELLOW);
                        const e = [];
                        switch(this.eventType){
                            case r().INIT:
                            case r().START:
                                this.params.player && e.push(`Player: ${this.params.player}`), this.params.pluginVersion && e.push(`Plugin Version: ${this.params.pluginVersion}`), this.params.playerStartupTime && e.push(`Player Startup Time: ${this.params.playerStartupTime} ms`), this.params.playhead && e.push(`Playhead: ${this.params.playhead}`), this.params.position && e.push(`Position: ${this.params.position}`), this.params.breakNumber && e.push(`Break Number: ${this.params.breakNumber}`), this.params.adAdapterVersion && e.push(`Ad Adapter Version: ${this.params.adAdapterVersion}`), this.params.adDuration && e.push(`Ad Duration: ${this.params.adDuration}`);
                                break;
                            case r().JOIN:
                                this.params.rendition && e.push(`Rendition: ${this.params.rendition}`), this.params.pingTime && e.push(`Ping Time: ${this.params.pingTime} s`), this.params.playhead && e.push(`Playhead: ${this.params.playhead}`), this.params.position && e.push(`Position: ${this.params.position}`), this.params.breakNumber && e.push(`Break Number: ${this.params.breakNumber}`), this.params.adJoinDuration && e.push(`Ad Join Duration: ${this.params.adJoinDuration}`), this.params.adPlayhead && e.push(`Ad Playhead: ${this.params.adPlayhead}`);
                                break;
                            case r().JOIN_TIME:
                                this.params.joinDuration && e.push(`Join Time: ${this.params.joinDuration} ms`), this.params.bitrate && e.push(`Bitrate: ${(this.params.bitrate / 1e6).toFixed(2)} MB/s`);
                                break;
                            case r().PAUSE:
                                this.params.playhead && e.push(`Playhead: ${this.params.playhead}`);
                                break;
                            case r().RESUME:
                                this.params.playhead && e.push(`Playhead: ${this.params.playhead}`), this.params.pauseDuration && e.push(`Pause Duration: ${this.params.pauseDuration} ms`);
                                break;
                            case r().SEEK_BEGIN:
                                break;
                            case r().SEEK_END:
                                this.params.seekDuration && e.push(`Seek Duration: ${this.params.seekDuration} ms`);
                                break;
                            case r().BUFFER_BEGIN:
                                break;
                            case r().BUFFER_END:
                                this.params.bufferDuration && e.push(`Buffer Duration: ${this.params.bufferDuration} ms`);
                                break;
                            case r().ERROR:
                                break;
                            case r().STOP:
                                this.params.playhead && e.push(`Playhead: ${this.params.playhead}`), this.params.bitrate && -1 !== this.params.bitrate ? e.push(`Bitrate: ${(this.params.bitrate / 1e6).toFixed(2)} MB/s`) : this.params.bitrate && e.push(`Bitrate: ${this.params.bitrate}`), this.params.position && e.push(`Position: ${this.params.position}`), this.params.breakNumber && e.push(`Break Number: ${this.params.breakNumber}`), this.params.adPlayhead && e.push(`Ad Playhead: ${this.params.adPlayhead}`), this.params.adJoinDuration && e.push(`Ad Join Duration: ${this.params.adJoinDuration}`), this.params.adViewedDuration && e.push(`Ad Viewed Duration: ${this.params.adViewedDuration}`), this.params.adTotalDuration && e.push(`Ad Total Duration: ${this.params.adTotalDuration}`), this.params.adBitrate && e.push(`Ad Bitrate: ${this.params.adBitrate}`);
                                break;
                            case r().VIDEO_EVENT:
                                break;
                            case r().QUARTILE:
                                this.params.position && e.push(`Position: ${this.params.position}`), this.params.breakNumber && e.push(`Break Number: ${this.params.breakNumber}`), this.params.quartile && e.push(`Quartile: ${this.params.quartile}`), this.params.adViewedDuration && e.push(`Ad Viewed Duration: ${this.params.adViewedDuration}`);
                                break;
                            case r().PODSTART:
                                this.params.position && e.push(`Position: ${this.params.position}`), this.params.breakNumber && e.push(`Break Number: ${this.params.breakNumber}`), this.params.adInsertionType && e.push(`Ad Insertion Type: ${this.params.adInsertionType}`);
                                break;
                            case r().PODSTOP:
                                this.params.position && e.push(`Position: ${this.params.position}`), this.params.breakNumber && e.push(`Break Number: ${this.params.breakNumber}`);
                            case r().CLICK:
                            case r().MANIFEST:
                        }
                        return 0 === e.length ? o.colorizeText("Data not defined", s.YELLOW) : e.join(" | ");
                    }
                    constructor(e, t){
                        this.eventType = e, this.params = t, this.columns = [
                            "Event",
                            "Params"
                        ];
                    }
                }
                var c = i(5100), u = i.n(c), l = i(9743), h = i(99);
                class p {
                    static getInstance(e = !1) {
                        return this._instance && !e || (this._instance = new p), this._instance;
                    }
                    destroy() {
                        this.clearReportTimeout(), this.cleanCdnList(), this.capturedEvents = [], this.successfulNQSRequests.clear(), this.reportTimeoutStarted = !1;
                    }
                    start(e) {
                        e && (this.npawPluginInstance = e), this.reportTimeoutStarted || (this.reportTimeout = setTimeout(()=>{
                            this.report(), this.videoAnalyticsEnabled = !1, this.balancerEnabled = !1, this.adsAnalyticsEnabled = !1;
                        }, this.reportTimeoutDuration), this.reportTimeoutStarted = !0);
                    }
                    clearReportTimeout() {
                        clearTimeout(this.reportTimeout), this.reportTimeoutStarted = !1, this.reportTimeout = void 0;
                    }
                    setOptions(e) {
                        e && (e["ad.ignore"] && (this.shouldIgnoreAds = l.default.parseBoolean(e["ad.ignore"])), e.offline && (this.runningOffline = l.default.parseBoolean(e.offline)));
                    }
                    setBalancerEnabled(e) {
                        this.balancerEnabled = null != e ? e : this.balancerEnabled;
                    }
                    setVideoAnalyticsEnabled(e) {
                        this.videoAnalyticsEnabled = null != e ? e : this.videoAnalyticsEnabled;
                    }
                    setAdsAnalyticsEnabled(e) {
                        this.adsAnalyticsEnabled = null != e ? e : this.adsAnalyticsEnabled;
                    }
                    getReportTimeout() {
                        return this.reportTimeoutDuration;
                    }
                    setReportTimeout(e) {
                        e && e > 0 && (this.reportTimeoutDuration = null != e ? e : this.reportTimeoutDuration, this.clearReportTimeout(), this.start());
                    }
                    cleanCdnList() {
                        this.cdnList.clear();
                    }
                    addCdn(e, t) {
                        this.cdnList.set(e, t);
                    }
                    updateCdnInfo(e, t, i, s) {
                        if (this.balancerEnabled) {
                            const n = this.cdnList.get(e);
                            n && (n.setRequestsPerformed(t), n.setTrafficServerInBytes(i), n.setFailedRequests(s));
                        }
                    }
                    wasSelectorCommunicationSuccessful(e, t) {
                        this.successfulResponseFromSelector = e, t && (this.apiErrorMessage = t);
                    }
                    setInterceptedRequests(e) {
                        this.balancerInterceptedRequests = e;
                    }
                    setActiveSwitchingEnabled(e) {
                        this.activeSwitchingEnabled = e;
                    }
                    wasActiveSwitchingDecisionPerformed(e) {
                        this.asDecisionPerformed = e;
                    }
                    setSwitchedCdns(e) {
                        this.switchedCdns = e;
                    }
                    usedSelectorAPIResponse(e) {
                        this.usedSelectorAPI = e;
                    }
                    setTriedSendingBalancerStats(e) {
                        this.triedSendingBalancerStats = e;
                    }
                    addNQSRequest(e) {
                        (this.videoAnalyticsEnabled || this.balancerEnabled) && this.successfulNQSRequests.add(e);
                    }
                    addNQSEvent(e, t) {
                        this.videoAnalyticsEnabled && this.capturedEvents.push(new d(e, t)), "stop" === e && setTimeout(()=>{
                            this.report(), this.clearReportTimeout();
                        }, 500);
                    }
                    registeredPlayer(e) {
                        this.hasPlayerRegistered = e;
                    }
                    setTriedSendingNQSStats(e) {
                        this.triedSendingNQSStats = e;
                    }
                    addNQSAdRequest(e) {
                        this.adsAnalyticsEnabled && this.successfulNQSAdsRequests.add(e);
                    }
                    addNQSAdEvent(e, t) {
                        this.adsAnalyticsEnabled && this.capturedAdsEvents.push(new d(e, t));
                    }
                    registeredAdsPlayer(e) {
                        this.hasAdsPlayerRegistered = e;
                    }
                    setTriedSendingNQSAdStats(e) {
                        this.triedSendingNQSAdStats = e;
                    }
                    report() {
                        if (this.balancerEnabled || this.videoAnalyticsEnabled || this.adsAnalyticsEnabled) {
                            const e = "------- Certification Tool -------";
                            o.header(e), "ERROR_INVALID_ACCOUNT" === this.apiErrorMessage ? o.log("%cAccount code is invalid!", "color: #FF1515; font-size: 12px; font-weight: bold;") : (this.logBalancerDiagnostic(), h.default.getInstance().isUsingLegacy() || (this.logVideoAnalyticsDiagnostic(), this.logAdsAnalyticsDiagnostic())), this.videoAnalyticsEnabled = !1, this.balancerEnabled = !1, this.adsAnalyticsEnabled = !1, this.clearReportTimeout(), o.header("".padEnd(e.length, "-"));
                        }
                    }
                    logBalancerDiagnostic() {
                        var e, t;
                        if (!this.balancerEnabled || null !== (t = null === (e = this.npawPluginInstance) || void 0 === e ? void 0 : e.isBalancerEnabled()) && void 0 !== t && !t) return;
                        const i = Array.from(this.successfulNQSRequests).map((e)=>e.slice(1)), n = this.mandatoryBalancerRequests.some((e)=>i.includes(e)), r = this.mandatoryBalancerRequests.filter((e)=>!i.includes(e));
                        if (o.header("Balancer Diagnostic"), o.logWithPrefix("Intercepted requests: " + (this.balancerInterceptedRequests ? o.colorizeText("Yes", s.GREEN) : o.colorizeText("No", s.RED)), o.logIdent), this.runningOffline ? o.logWithPrefix("Ignoring Balancer stats since running in offline mode", o.logIdent) : this.triedSendingBalancerStats ? o.logWithPrefix("Any event sent to server: " + (n ? o.colorizeText("Yes", s.GREEN) : o.colorizeText("No", s.RED)), o.logIdent) : o.logWithPrefix("Reached stats server: Unknown", o.logIdent), !this.runningOffline && r.length > 0 && this.triedSendingBalancerStats && o.logWithPrefix(o.colorizeText("Missing requests: " + r.join(", "), s.YELLOW), o.logIdent), o.logWithPrefix("Request to the Selector API: " + (this.successfulResponseFromSelector ? o.colorizeText("Successful", s.GREEN) : o.colorizeText("Unsuccessful", s.RED)), o.logIdent), this.apiErrorMessage && !this.successfulResponseFromSelector && o.logWithPrefix(this.getApiErrorMessage(), o.logIdent, 2), o.logWithPrefix("Took decision based on Selector API: " + (this.usedSelectorAPI ? o.colorizeText("Yes", s.GREEN) : o.colorizeText("No", s.RED)), o.logIdent), this.activeSwitchingEnabled ? o.logWithPrefix("Active switching decision: " + (this.asDecisionPerformed ? o.colorizeText("Performed", s.GREEN) : o.colorizeText("Not performed", s.RED)), o.logIdent) : o.logWithPrefix("Active switching decision: " + o.colorizeText("Active Switching Disabled!", s.YELLOW), o.logIdent), o.logWithPrefix("CDN List: ", o.logIdent), this.cdnList.size > 0) {
                            const e = this.cdnList.values().next().value.columns.map((e)=>e.padEnd(18)).join("");
                            o.logWithPrefix(e, o.logIdent, 2);
                        } else o.logWithPrefix(o.colorizeText("The list is empty!", s.RED), o.logIdent, 2);
                        for (const e of this.cdnList.values()){
                            const t = e.generateRow();
                            o.log(o.logIdent.repeat(2) + t.row, "color: " + t.color);
                        }
                        const a = Array.from(this.cdnList.values()).filter((e)=>e.getFailedRequestsPercentage() > 30).length, d = this.successfulResponseFromSelector && this.balancerInterceptedRequests && this.usedSelectorAPI && this.cdnList.size > 0 && (!this.triedSendingBalancerStats || n);
                        let c = this.integrationMessageColors.YELLOW, u = "%cCDN Balancer might not be integrated!";
                        d ? this.triedSendingBalancerStats && 0 === r.length && a < this.cdnList.size && (u = "%cCDN Balancer is integrated!", c = this.integrationMessageColors.GREEN) : (u = "%cCDN Balancer is NOT integrated!", c = this.integrationMessageColors.RED), o.log(u, `color: ${c}; font-size: 12px; font-weight: bold;`);
                    }
                    logVideoAnalyticsDiagnostic() {
                        if (!this.videoAnalyticsEnabled) return;
                        const e = Array.from(this.successfulNQSRequests).map((e)=>e.slice(1)), t = this.mandatoryNQSRequests.filter((t)=>!e.includes(t));
                        if (o.header("Video Analytics Diagnostic"), o.logWithPrefix("Events sent to server/storage: " + (0 !== e.length ? o.colorizeText("Yes", s.GREEN) : o.colorizeText("No", s.RED)), o.logIdent), o.logWithPrefix("All mandatory events sent to server/storage: " + (0 === t.length ? o.colorizeText("Yes", s.GREEN) : o.colorizeText("No", s.RED)), o.logIdent), t.length > 0 && this.triedSendingNQSStats && o.logWithPrefix("Missing stats requests: " + o.colorizeText(t.join(", "), s.RED), o.logIdent), o.logWithPrefix("Was able to capture events: " + (this.capturedEvents.length > 0 ? o.colorizeText("Yes", s.GREEN) : o.colorizeText("No", s.RED)), o.logIdent), o.logWithPrefix("Captured events:", o.logIdent), this.capturedEvents.length > 0) {
                            const e = this.capturedEvents[0].columns.map((e)=>e.padEnd(15)).join("");
                            o.logWithPrefix(e, o.logIdent, 2);
                        } else o.logWithPrefix(o.colorizeText("No events captured!", s.RED), o.logIdent, 2);
                        for (const e of this.capturedEvents)o.logWithPrefix(e.generateRow(), o.logIdent, 2);
                        const i = this.hasPlayerRegistered && 0 !== e.length && this.capturedEvents.length > 0;
                        let n = this.integrationMessageColors.YELLOW, r = "%cVideo Analytics might not be integrated!";
                        i ? this.triedSendingNQSStats && 0 === t.length && (r = "%cVideo Analytics is integrated!", n = this.integrationMessageColors.GREEN) : (r = "%cVideo Analytics is NOT integrated!", n = this.integrationMessageColors.RED), o.log(r, `color: ${n}; font-size: 12px; font-weight: bold;`);
                    }
                    logAdsAnalyticsDiagnostic() {
                        if (!this.adsAnalyticsEnabled) return;
                        const e = Array.from(this.successfulNQSAdsRequests).map((e)=>e.slice(1)), t = this.mandatoryNQSAdsRequests.filter((t)=>!e.includes(t));
                        if (o.header("Ads Analytics Diagnostic"), this.shouldIgnoreAds && o.log("%cIgnoring Ads Analytics because ad.ignore option is set to true", `color: ${this.integrationMessageColors.YELLOW}; font-size: 12px; font-weight: bold;`), this.hasAdsPlayerRegistered || 0 !== e.length) {
                            if (o.logWithPrefix("Events sent to server/storage: " + (0 !== e.length ? o.colorizeText("Yes", s.GREEN) : o.colorizeText("No", s.RED)), o.logIdent), o.logWithPrefix("All mandatory events sent to server/storage: " + (0 === t.length ? o.colorizeText("Yes", s.GREEN) : o.colorizeText("No", s.RED)), o.logIdent), t.length > 0 && this.triedSendingNQSAdStats && o.logWithPrefix("Missing ad stats requests: " + o.colorizeText(t.join(", "), s.RED), o.logIdent), o.logWithPrefix("Was able to capture ads events: " + (this.capturedAdsEvents.length > 0 ? o.colorizeText("Yes", s.GREEN) : o.colorizeText("No", s.RED)), o.logIdent), o.logWithPrefix("Captured events:", o.logIdent), this.capturedAdsEvents.length > 0) {
                                const e = this.capturedAdsEvents[0].columns.map((e)=>e.padEnd(15)).join("");
                                o.logWithPrefix(e, o.logIdent, 2);
                            } else o.logWithPrefix(o.colorizeText("No events captured!", s.RED), o.logIdent, 2);
                            for (const e of this.capturedAdsEvents)o.logWithPrefix(e.generateRow(), o.logIdent, 2);
                            const i = (this.hasAdsPlayerRegistered || 0 != e.length) && this.capturedAdsEvents.length > 0;
                            let n = this.integrationMessageColors.YELLOW, r = "%cAds Analytics might not be integrated!";
                            i ? 0 === t.length && (r = "%cAds Analytics is integrated!", n = this.integrationMessageColors.GREEN) : (r = "%cAds Analytics is NOT integrated!", n = this.integrationMessageColors.RED), o.log(r, `color: ${n}; font-size: 12px; font-weight: bold;`);
                        } else o.log("%cIgnoring Ads Analytics because no ads adapter was registered", `color: ${this.integrationMessageColors.YELLOW}; font-size: 12px; font-weight: bold;`);
                    }
                    getApiErrorMessage() {
                        return "ERROR_CONFIGURATION_NOT_FOUND" === this.apiErrorMessage ? o.colorizeText(`${this.apiErrorMessage} - Default profile not set or profile doesn't exist`, s.YELLOW) : this.apiErrorMessage;
                    }
                    constructor(){
                        this.integrationMessageColors = {
                            RED: "#FF1515",
                            GREEN: "#0f0",
                            YELLOW: "#F6D500"
                        }, this.balancerEnabled = !0, this.videoAnalyticsEnabled = !0, this.adsAnalyticsEnabled = !0, this.reportTimeoutDuration = p.defaultReportTimeout, this.reportTimeoutStarted = !1, this.runningOffline = !1, this.balancerInterceptedRequests = !1, this.successfulResponseFromSelector = !1, this.usedSelectorAPI = !1, this.activeSwitchingEnabled = !1, this.asDecisionPerformed = !1, this.switchedCdns = !1, this.cdnList = new Map, this.triedSendingBalancerStats = !1, this.mandatoryBalancerRequests = [
                            "cdn"
                        ], this.capturedEvents = [], this.successfulNQSRequests = new Set, this.hasPlayerRegistered = !1, this.triedSendingNQSStats = !1, this.mandatoryNQSRequests = [
                            r().START,
                            r().JOIN_TIME,
                            "ping",
                            r().STOP
                        ], this.shouldIgnoreAds = !1, this.capturedAdsEvents = [], this.successfulNQSAdsRequests = new Set, this.hasAdsPlayerRegistered = !1, this.triedSendingNQSAdStats = !1, this.mandatoryNQSAdsRequests = [
                            u().Service.AD_START,
                            u().Service.AD_MANIFEST,
                            u().Service.AD_JOIN,
                            u().Service.AD_STOP,
                            u().Service.AD_POD_START,
                            u().Service.AD_QUARTILE,
                            u().Service.AD_POD_STOP
                        ].map((e)=>e.slice(1));
                    }
                }
                p.defaultReportTimeout = 3e5;
            },
            9731: function(e) {
                var t, i, s, n, r;
                t = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/, i = /^(?=([^\/?#]*))\1([^]*)$/, s = /(?:\/|^)\.(?=\/)/g, n = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g, r = {
                    buildAbsoluteURL: function(e, t, s) {
                        if (s = s || {}, e = e.trim(), !(t = t.trim())) {
                            if (!s.alwaysNormalize) return e;
                            var n = r.parseURL(e);
                            if (!n) throw new Error("Error trying to parse base URL.");
                            return n.path = r.normalizePath(n.path), r.buildURLFromParts(n);
                        }
                        var a = r.parseURL(t);
                        if (!a) throw new Error("Error trying to parse relative URL.");
                        if (a.scheme) return s.alwaysNormalize ? (a.path = r.normalizePath(a.path), r.buildURLFromParts(a)) : t;
                        var o = r.parseURL(e);
                        if (!o) throw new Error("Error trying to parse base URL.");
                        if (!o.netLoc && o.path && "/" !== o.path[0]) {
                            var d = i.exec(o.path);
                            o.netLoc = d[1], o.path = d[2];
                        }
                        o.netLoc && !o.path && (o.path = "/");
                        var c = {
                            scheme: o.scheme,
                            netLoc: a.netLoc,
                            path: null,
                            params: a.params,
                            query: a.query,
                            fragment: a.fragment
                        };
                        if (!a.netLoc && (c.netLoc = o.netLoc, "/" !== a.path[0])) {
                            if (a.path) {
                                var u = o.path, l = u.substring(0, u.lastIndexOf("/") + 1) + a.path;
                                c.path = r.normalizePath(l);
                            } else c.path = o.path, a.params || (c.params = o.params, a.query || (c.query = o.query));
                        }
                        return null === c.path && (c.path = s.alwaysNormalize ? r.normalizePath(a.path) : a.path), r.buildURLFromParts(c);
                    },
                    parseURL: function(e) {
                        var i = t.exec(e);
                        return i ? {
                            scheme: i[1] || "",
                            netLoc: i[2] || "",
                            path: i[3] || "",
                            params: i[4] || "",
                            query: i[5] || "",
                            fragment: i[6] || ""
                        } : null;
                    },
                    normalizePath: function(e) {
                        for(e = e.split("").reverse().join("").replace(s, ""); e.length !== (e = e.replace(n, "")).length;);
                        return e.split("").reverse().join("");
                    },
                    buildURLFromParts: function(e) {
                        return e.scheme + e.netLoc + e.path + e.params + e.query + e.fragment;
                    }
                }, e.exports = r;
            },
            912: (e, t, i)=>{
                "use strict";
                i.d(t, {
                    CE: ()=>m,
                    Ji: ()=>A,
                    LI: ()=>y,
                    Lg: ()=>h,
                    Ow: ()=>f,
                    Y4: ()=>d,
                    Zq: ()=>_,
                    _C: ()=>b,
                    b3: ()=>v,
                    dR: ()=>E,
                    df: ()=>o,
                    hj: ()=>u,
                    jQ: ()=>T,
                    m: ()=>p,
                    mH: ()=>g,
                    w2: ()=>c,
                    wc: ()=>w,
                    xC: ()=>n,
                    yL: ()=>r,
                    yl: ()=>a,
                    zU: ()=>l
                });
                const s = S;
                !function(e) {
                    const t = S, i = e();
                    for(;;)try {
                        if (206137 == parseInt(t(485)) / 1 + parseInt(t(465)) / 2 * (parseInt(t(491)) / 3) + -parseInt(t(484)) / 4 * (parseInt(t(449)) / 5) + parseInt(t(489)) / 6 * (parseInt(t(478)) / 7) + parseInt(t(468)) / 8 * (-parseInt(t(455)) / 9) + -parseInt(t(488)) / 10 * (-parseInt(t(475)) / 11) + -parseInt(t(495)) / 12 * (-parseInt(t(469)) / 13)) break;
                        i.push(i.shift());
                    } catch (e) {
                        i.push(i.shift());
                    }
                }(I);
                const n = {
                    CDN: s(451)
                }, r = {
                    Success: "ok",
                    Fail: "nok",
                    Progress: "pr"
                }, a = {
                    Updated: s(446),
                    Success: "ok",
                    Fail: s(467)
                }, o = {
                    host: s(456),
                    devHost: s(474),
                    devDomains: [
                        "stage.npaw.com",
                        s(482)
                    ],
                    service: s(494),
                    decisionCallWaitTime: 3e4,
                    decisionReloadIntervalPerManifestMilliseconds: 3e4
                }, d = [
                    s(471),
                    s(460),
                    s(462),
                    s(481),
                    s(464),
                    s(493)
                ], c = [
                    s(452),
                    ".mpd"
                ], u = [
                    s(479)
                ], l = [
                    ".srt",
                    s(459),
                    s(497),
                    s(445)
                ], h = {
                    connect: s(477),
                    close: s(466),
                    error: s(450),
                    data: s(447),
                    ping: s(461),
                    pong: s(492)
                }, p = {
                    optimizedScore: s(496),
                    optimizedFeedback: s(473),
                    bestScore: s(453),
                    qualityPriority: "qualityPriority",
                    cdnPriority: s(476)
                }, f = {
                    max: 25e6,
                    min: 2e5,
                    default: 2e5
                }, g = (s(457), s(498), {
                    data: s(490),
                    absent: s(487),
                    map: s(444),
                    newSegmentAvailable: s(486),
                    request: s(483),
                    cancel: "CANCEL_SEGMENT_REQUEST",
                    ping: "PING",
                    pong: s(470)
                }), m = {
                    command: s(463),
                    id: "data_spec_key",
                    size: s(472),
                    storageSize: "ss",
                    map: s(480),
                    identifier: s(454),
                    splits: s(458),
                    time: 0,
                    simpleMapKeys: "k",
                    simpleMapSize: "s",
                    dateTime: "dt",
                    createdAt: "ca"
                }, v = {
                    bandwidth_test: 2,
                    message: 1,
                    data: 0
                }, y = {
                    maxMessageSize: 65532,
                    probability: 1,
                    timeout: 2500,
                    maxConcurrency: 6,
                    maxConnectedPeers: 40,
                    tracker: s(448),
                    upload: !1
                }, T = {
                    version: 2
                };
                function S(e, t) {
                    const i = I();
                    return (S = function(e, t) {
                        return i[e -= 444];
                    })(e, t);
                }
                const E = {
                    expiration: 3e5,
                    count: 60,
                    safeMaxCount: 300
                }, b = {
                    retries: 5,
                    retryDelay: 100,
                    defaultBwThreshold: 2e5,
                    connectTimeoutMilliseconds: 1e4,
                    readTimeoutMilliseconds: 3e3,
                    minRequestSizeForBwEstimateKB: 100
                }, A = {
                    totalDataInterval: 6e4
                }, w = {
                    callTimeoutMilliseconds: 500,
                    timeBetweenCallsMilliseconds: 1e3,
                    timeBetweenBurstsMilliseconds: 5e3
                }, _ = {
                    lastMeasurementWeight: .5,
                    maximumRelativeDeltaForTrial: .2,
                    minimumDurationSinceLastUsedForTrialMilliseconds: 3e4
                };
                function I() {
                    const e = [
                        "ping",
                        ".ts",
                        "command",
                        ".dash",
                        "329584jzFKsY",
                        "close",
                        "nok",
                        "350432xueVze",
                        "15197UJUmiR",
                        "PONG",
                        ".mp4",
                        "size",
                        "optimizedFeedback",
                        "stage-smartswitchv2.youbora.com",
                        "305613xJTJbB",
                        "cdnPriority",
                        "connect",
                        "19831UgBpcB",
                        ".aac",
                        "keys",
                        ".cmf",
                        "qa.npaw.com",
                        "SEGMENT_REQUEST",
                        "4Fuiaqr",
                        "40515xhKiJC",
                        "NEW_SEGMENT_AVAILABLE",
                        "SEGMENT_ABSENT",
                        "70zPJILZ",
                        "678pDrAEt",
                        "SEGMENT_DATA",
                        "6pksnEK",
                        "pong",
                        ".m4f",
                        "/decision",
                        "516VuicuF",
                        "optimizedScore",
                        ".ssa",
                        "default",
                        "SEGMENTS_MAP",
                        ".ass",
                        "updated",
                        "data",
                        "wss://p2p-tracker.youbora.com/webrtc",
                        "1892035sMFEWh",
                        "error",
                        "/cdn",
                        ".m3u8",
                        "bestScore",
                        "identifier",
                        "72UqLsVo",
                        "gnsnpaw.com",
                        "random",
                        "splits",
                        ".vtt",
                        ".m4s"
                    ];
                    return (I = function() {
                        return e;
                    })();
                }
            },
            211: (e, t, i)=>{
                var s = i(7380), n = i(3598), r = {
                    getPosition: function() {
                        return null;
                    },
                    getGivenBreaks: function() {
                        return null;
                    },
                    getExpectedBreaks: function() {
                        return null;
                    },
                    getExpectedPattern: function() {
                        return null;
                    },
                    getBreaksTime: function() {
                        return null;
                    },
                    getGivenAds: function() {
                        return null;
                    },
                    getExpectedAds: function() {
                        return null;
                    },
                    getIsVisible: function() {
                        return !0;
                    },
                    getAudioEnabled: function() {
                        return null;
                    },
                    getIsSkippable: function() {
                        return null;
                    },
                    getIsFullscreen: function() {
                        return null;
                    },
                    getCampaign: function() {
                        return null;
                    },
                    getCreativeId: function() {
                        return null;
                    },
                    getProvider: function() {
                        return null;
                    },
                    getAdInsertionType: function() {
                        return null;
                    },
                    fireClick: function(e) {
                        "string" == typeof e && (e = {
                            url: e
                        }), this.emit(s.Event.CLICK, {
                            params: e
                        });
                    },
                    fireQuartile: function(e) {
                        this.flags.isStarted && "number" == typeof e && e > this.flags.lastQuartileSent && e < 4 && (this.flags.lastQuartileSent++, this.emit(s.Event.QUARTILE, {
                            params: {
                                quartile: e
                            }
                        }));
                    },
                    startChronoView: function() {
                        if (this.getIsVisible() && this.plugin.backgroundDetector && !this.plugin.backgroundDetector.isInBackground) {
                            var e = this.chronos.viewedMax;
                            0 !== e.length && 0 === e[e.length - 1].stopTime || (e.push(new n), e[e.length - 1].start());
                        }
                    },
                    stopChronoView: function() {
                        var e = this.chronos.viewedMax;
                        e[0] && e.length > 0 && 0 === e[e.length - 1].stopTime && e[e.length - 1].stop();
                    },
                    fireManifest: function(e, t) {
                        var i = {
                            params: e
                        };
                        "string" == typeof e && (i = {
                            params: {
                                errorType: e,
                                errorMessage: t
                            }
                        }), this.emit(s.Event.MANIFEST, i);
                    },
                    fireSkip: function(e) {
                        void 0 === e && (e = {}), e.skipped = !0, this.fireStop(e);
                    },
                    fireBreakStart: function(e) {
                        this.fireAdBreakStart(e);
                    },
                    fireBreakStop: function(e) {
                        this.fireAdBreakStop(e);
                    },
                    fireAdBreakStart: function(e) {
                        this.emit(s.Event.PODSTART, {
                            params: e
                        });
                    },
                    fireAdBreakStop: function(e) {
                        this.emit(s.Event.PODSTOP, {
                            params: e
                        });
                    }
                };
                e.exports = r;
            },
            72: (e, t, i)=>{
                var s = i(7380);
                const { default: n } = i(3582), { AnalyticsTag: r } = i(9982);
                var a = {
                    getPlayrate: function() {
                        return this.flags.isPaused ? 0 : 1;
                    },
                    getFramesPerSecond: function() {},
                    getDroppedFrames: function() {},
                    getThroughput: function() {},
                    getRendition: function() {},
                    getTitle2: function() {},
                    getIsLive: function() {},
                    getCdnTraffic: function() {},
                    getP2PTraffic: function() {},
                    getUploadTraffic: function() {},
                    getIsP2PEnabled: function() {},
                    getSegmentDuration: function() {},
                    getHouseholdId: function() {},
                    getLatency: function() {},
                    getPacketLoss: function() {},
                    getPacketSent: function() {},
                    getMetrics: function() {},
                    getAudioCodec: function() {},
                    getVideoCodec: function() {},
                    getURLToParse: function() {},
                    fireSeekBegin: function(e, t, i) {
                        if (this._discardFalseBuffers(), !(this.getVideo() && this.getVideo().getIsLive() && this.plugin.options["content.isLive.noSeek"]) && this.flags.isJoined && !this.flags.isSeeking) {
                            if (this.flags.isBuffering) {
                                if (!1 === t) return;
                                n.notice(r, "Converting current buffer to seek"), this.chronos.seek = this.chronos.buffer.clone(), this.chronos.buffer.reset(), this.flags.isBuffering = !1;
                            } else this.chronos.seek.start();
                            try {
                                this.fireEventsStruct.seek = [], i ? this.fireEventsStruct.seek.push(i) : this.fireEventsStruct.seek.push("undefinedEvent");
                            } catch (e) {}
                            this.flags.isSeeking = !0, this.emit(s.Event.SEEK_BEGIN, {
                                params: e
                            });
                        }
                    },
                    fireSeekEnd: function(e, t) {
                        if (!(this.getVideo() && this.getVideo().getIsLive() && this.plugin.options["content.isLive.noSeek"]) && this.flags.isJoined && this.flags.isSeeking) {
                            try {
                                t ? this.fireEventsStruct.seek.push(t) : this.fireEventsStruct.seek.push("undefinedEvent");
                            } catch (e) {}
                            (e = e || {}).triggeredEvents = this.fireEventsStruct.seek, this.cancelSeek(), this.emit(s.Event.SEEK_END, {
                                params: e
                            });
                            try {
                                this.chronos.pause.getDeltaTime(!1) > 0 && this.chronos.pause.resume();
                            } catch (e) {}
                        }
                    },
                    cancelSeek: function(e) {
                        this.flags.isJoined && this.flags.isSeeking && (this.flags.isSeeking = !1, this.chronos.seek.stop(), this.monitor && this.monitor.skipNextTick());
                    },
                    fireEvent: function(e, t, i, n) {
                        if ("data" === e) this.emit(s.Event.DATA_OBJECT, {
                            params: n
                        });
                        else {
                            var r = n || {};
                            r.name = e || "", r.dimensions = t || {}, r.values = i || {}, this.emit(s.Event.VIDEO_EVENT, {
                                params: r
                            });
                        }
                    },
                    storeNewRendition: function(e) {
                        this.getVideo().triggerUpdateRendition(e);
                    }
                };
                e.exports = a;
            },
            2176: (e, t, i)=>{
                var s = i(1075);
                const { default: n } = i(3582);
                var r = i(8661), a = i(9965), o = i(1618), d = i(9157), c = i(4795), u = i(5552), l = i(7380), h = i(1167);
                const { AnalyticsTag: p } = i(9982);
                var f = s.extend({
                    constructor: function(e, t, s, r, c, u) {
                        this._key = e, this._setAdapter = !1, this._npawVideo = t, this._loadedAdapterImplementation = !1, this.flags = new d, this.chronos = new o, this._adapterClasses = {}, this.fireEventsStruct = {}, this.fireEventsStruct.buffer = [], this.fireEventsStruct.seek = [], this.monitor = null, this.plugin = s, this.player && this.unregisterListeners(), this.player = null, this._isAdsAdapter = null, this.log = n, this.log.loadLevelFromUrl(), this.npaw = i(9264), this.setPlayer(c), "object" == typeof u ? (this._adapterName = this.getAdapterNameFromClass(u), this.tag = this.player, u && (this.loadAdapterClasses(u, !1), this.registerListeners()), this.plugin.options.enableExtraMetricCollection && this._npawVideo.fetchLocation(), n.notice(p, "Adapter " + this.getVersion() + " with Lib " + a + " is ready.")) : n.error(p, "Provided adapter is not supported.");
                    },
                    _updatePlayer: function(e) {
                        this.player && this.unregisterListeners(), this.player = null, this.setPlayer(e), this.tag = this.player, this.registerListeners();
                    },
                    isSetAdapter: function() {
                        return this._setAdapter;
                    },
                    getVideo: function() {
                        return this._npawVideo;
                    },
                    getPlugin: function() {
                        return this.plugin;
                    },
                    getNpawUtils: function() {
                        return this.plugin.utils;
                    },
                    getNpawReference: function() {
                        return this.npaw;
                    },
                    getLog: function() {
                        return this.log;
                    },
                    isStarted: function() {
                        return !!this.flags && this.flags.isStarted;
                    },
                    getAdapterClass: function(e) {
                        var t = this._adapterClasses;
                        return t[e] ? t[e] : null;
                    },
                    getAdapterNameFromClass: function(e) {
                        if (e && e.getVersion) try {
                            return e.getVersion();
                        } catch (e) {}
                        return "undefined";
                    },
                    getAdapterClasses: function() {
                        return this._adapterClasses;
                    },
                    updateAdapterTemplates: function(e) {
                        if (this.plugin.canOverwriteAdapters()) {
                            var t = this._getAdapterFromTemplates(this._adapterName, e);
                            t && (this.evalAdapterJson(t, !0), this.registerListeners());
                        }
                    },
                    _getAdapterFromTemplates: function(e, t) {
                        var i = null;
                        t || (t = this.plugin.adapterTemplates);
                        try {
                            e && t && t[e.toLowerCase()] && (i = JSON.parse(t[e.toLowerCase()]));
                        } catch (t) {
                            n.warn(p, "Adapter " + e + " not found on repository");
                        }
                        return i;
                    },
                    loadAdapterClasses: function(e, t) {
                        t = t || !1;
                        let i = 0, s = 0, r = "", a = Object.getPrototypeOf(e);
                        try {
                            let o = "";
                            const d = new Map;
                            for(; a !== Object.prototype;)Object.getOwnPropertyNames(a).forEach((e)=>{
                                "function" != typeof a[e] || "constructor" === e || d.has(e) || d.set(e, a[e]);
                            }), a = Object.getPrototypeOf(a);
                            if (d.forEach((e, t)=>{
                                this[t] = e, o += e.toString(), i++;
                            }), r = "Adapter Class", void 0 !== e.adsAdapters) for (const t of Object.keys(e.adsAdapters))this.getAdapterClasses()[t] = new f(this._key, this._npawVideo, this.getPlugin(), null, this.player, new e.adsAdapters[t]), r = "Ads Adapter -> " + t;
                            if (void 0 !== e.additionalContexts) {
                                for (const t of Object.keys(e.additionalContexts)){
                                    this.getAdapterClasses()[t] || (this.getAdapterClasses()[t] = {}, this.getAdapterClasses()[t].constructor = function() {}, this.getAdapterClasses()[t].plugin = this.plugin, this.getAdapterClasses()[t].getNpawUtils = function() {
                                        return this.plugin.utils;
                                    });
                                    const i = new e.additionalContexts[t], n = Object.getPrototypeOf(i), r = Object.getOwnPropertyNames(n).filter((e)=>"function" == typeof i[e] && "constructor" !== e);
                                    for (const e of r)this.getAdapterClasses()[t][e] = i[e], s++;
                                }
                                r = "Additional Contexts";
                            }
                            this._loadedAdapterImplementation = !0;
                            try {
                                this.adapterHash = h(o.trim());
                            } catch (e) {
                                this.adapterHash = "Undefined";
                            }
                            n.notice(p, "[" + this.getAdapterKey() + "] Loaded adapter (" + this.getVersion() + ") (Hash " + this.adapterHash + ") implementation from class; From templates: " + t + "; Integrated adapter methods: " + i + ", external methods: " + s);
                        } catch (e) {
                            n.error(p, "Can't be evaluated adapter class correctly; From templates: " + t + ", Last method evaluated: " + r);
                        }
                    },
                    getAdapterKey: function() {
                        return this._key;
                    },
                    setPlayer: function(e) {
                        "string" == typeof e && "undefined" != typeof document ? this.player = document.getElementById(e) : this.player = e;
                    },
                    registerListeners: function() {},
                    unregisterListeners: function() {},
                    dispose: function() {
                        try {
                            this.stopMonitor(), this.stopReadyStateMonitor(), this.unregisterListeners(), this.player = null, this.tag = null;
                        } catch (e) {
                            n.error(p, "Can't process dispose for video " + this._key);
                        }
                    },
                    monitorPlayhead: function(e, t, i) {
                        this.stopMonitor();
                        var s = 0;
                        e && (s |= c.Type.BUFFER), t && (s |= c.Type.SEEK), this.monitor && this.monitor._timer.isRunning ? this.monitor.skipNextTick() : this.monitor = new c(this, s, i);
                    },
                    stopMonitor: function() {
                        this.monitor && this.monitor.stop();
                    },
                    monitorReadyState: function(e) {
                        this.stopReadyStateMonitor(), this.stateMonitor = new u(this, e);
                    },
                    startReadyStateMonitor: function() {
                        this.stateMonitor && this.stateMonitor.start();
                    },
                    stopReadyStateMonitor: function() {
                        this.stateMonitor && this.stateMonitor.stop();
                    },
                    checkReadyState: function(e, t) {
                        try {
                            this.plugin && this.plugin.getReadyStateMonitorEnabled() && e && (e > 3 && !this.flags.isSeeking ? this.flags.isBuffering ? this.fireBufferEnd({}, t + "-readyState") : this.flags.isJoined || this.fireJoin({}, t + "-readyState") : e < 4 && !this.flags.isBuffering && !this.flags.isPaused && this.fireBufferBegin({}, !1, t + "-readyState", !0));
                        } catch (e) {
                            n.error(p, "Can't check readyState property correctly");
                        }
                    },
                    getPlayhead: function() {
                        return null;
                    },
                    getDuration: function() {
                        return null;
                    },
                    getBitrate: function() {
                        return null;
                    },
                    getTotalBytes: function() {
                        return null;
                    },
                    getTitle: function() {
                        return null;
                    },
                    getResource: function() {
                        return null;
                    },
                    getPlayerVersion: function() {
                        return null;
                    },
                    getPlayerName: function() {
                        return null;
                    },
                    getVersion: function() {
                        return a + "-generic-js";
                    },
                    getVideoObject: function() {
                        return null;
                    },
                    checkExistsPlayer: function() {
                        return !0;
                    },
                    checkExistsObjectOnPage: function(e) {
                        return r.elementIsInPage(e);
                    },
                    fireInit: function(e, t) {
                        if (this._npawVideo && this._npawVideo.controlPlayerExists() && !this.checkExistsPlayer()) return n.warn(p, "Cannot fire init event because player not exists on the document"), null;
                        this.adapterHash && ((e = e || {}).pluginHash = this.adapterHash), this._npawVideo && this._npawVideo.fireInit(e, t);
                    },
                    fireStart: function(e, t) {
                        return this._npawVideo && this._npawVideo.controlPlayerExists() && !this.checkExistsPlayer() ? (n.warn(p, "Cannot fire start event because player not exists on the document"), null) : this.plugin && this.plugin.backgroundDetector && this.plugin.backgroundDetector.canBlockStartCalls() ? null : void (this.flags.isStarted || (this.flags.isStarted = !0, this.chronos.total.start(), this.chronos.join.start(), t && ((e = e || {}).triggeredEvents = [
                            t
                        ]), this.adapterHash && ((e = e || {}).pluginHash = this.adapterHash), this.startReadyStateMonitor(), this.emit(l.Event.START, {
                            params: e
                        })));
                    },
                    fireJoin: function(e, t) {
                        this.flags.isJoined || this.flags.isStarted || this._isAds() || !this._npawVideo || !this._npawVideo.isInitiated || this.fireStart(), this.flags.isStarted && !this.flags.isJoined && (this.flags.isStarted = !0, this.monitor && this.monitor.start(), this.flags.isJoined = !0, this.chronos.join.stop(), t && ((e = e || {}).triggeredEvents = [
                            t
                        ]), this.emit(l.Event.JOIN, {
                            params: e
                        }));
                    },
                    firePause: function(e, t) {
                        this._discardFalseBuffers(), this.flags.isBuffering && this.fireBufferEnd(null, "firePauseCall"), this.flags.isJoined && !this.flags.isPaused && (this.flags.isPaused = !0, this.chronos.pause.start(), t && ((e = e || {}).triggeredEvents = [
                            t
                        ]), this.emit(l.Event.PAUSE, {
                            params: e
                        }));
                    },
                    fireResume: function(e, t) {
                        if (this._discardFalseBuffers(), this.flags.isJoined && this.flags.isPaused) {
                            this.flags.isPaused = !1;
                            try {
                                this._npawVideo.ignorePauseSmallEvents() && this.chronos.pause.getDeltaTime(!1) <= 50 ? this.chronos.pause.reset() : this.chronos.pause.stop();
                            } catch (e) {
                                this.chronos.pause.stop();
                            }
                            this.monitor && this.monitor.skipNextTick(), t && ((e = e || {}).triggeredEvents = [
                                t
                            ]), this.emit(l.Event.RESUME, {
                                params: e
                            });
                        }
                    },
                    fireBufferBegin: function(e, t, i, s) {
                        if (s = s || !1, this.flags.isJoined && !this.flags.isBuffering) {
                            if (this.flags.isSeeking) {
                                if (!t) return;
                                n.notice(p, "Converting current buffer to seek"), this.chronos.buffer = this.chronos.seek.clone(), this.chronos.seek.reset(), this.flags.isSeeking = !1;
                            } else this.chronos.buffer.start();
                            try {
                                this.fireEventsStruct.buffer = [], i ? this.fireEventsStruct.buffer.push(i) : this.fireEventsStruct.buffer.push("undefinedEvent");
                            } catch (e) {}
                            this.flags.isBuffering = !0, this.flags.isVideoStateBuffering = s, this.emit(l.Event.BUFFER_BEGIN, {
                                params: e
                            });
                        }
                    },
                    fireBufferEnd: function(e, t) {
                        if (this.flags.isJoined && this.flags.isBuffering) {
                            try {
                                t ? this.fireEventsStruct.buffer.push(t) : this.fireEventsStruct.buffer.push("undefinedEvent");
                            } catch (e) {}
                            (e = e || {}).triggeredEvents = this.fireEventsStruct.buffer, this.cancelBuffer(), this.emit(l.Event.BUFFER_END, {
                                params: e
                            });
                            try {
                                this.chronos.pause.getDeltaTime(!1) > 0 && this.chronos.pause.resume();
                            } catch (e) {}
                        }
                    },
                    _discardFalseBuffers: function() {
                        try {
                            this.flags.isBuffering && this.flags.isVideoStateBuffering && this._getDeltaBufferTime() <= 100 && this.cancelBuffer();
                        } catch (e) {}
                    },
                    cancelBuffer: function(e) {
                        this.flags.isJoined && this.flags.isBuffering && (this.flags.isBuffering = !1, this.flags.isVideoStateBuffering = !1, this.chronos.buffer.stop(), this.monitor && this.monitor.skipNextTick());
                    },
                    _getDeltaBufferTime: function() {
                        return this.chronos && this.chronos.buffer ? this.chronos.buffer.getDeltaTime(!1) : 0;
                    },
                    fireStop: function(e, t) {
                        try {
                            if ((this._isAds() || this._npawVideo._isStopReady()) && (this._isAds() && this.flags.isStarted || !this._isAds() && (this.flags.isStarted || this._npawVideo.isInitiated))) {
                                if (this._isAds() && (e = e || {}, this.flags.isPaused)) {
                                    const t = this.chronos.pause.getDeltaTime();
                                    e.adPauseDuration = t;
                                }
                                this.stopMonitor(), this.stopReadyStateMonitor(), this.flags.reset(), this.chronos.total.stop(), this.chronos.join.reset(), this.chronos.pause.stop(), this.chronos.buffer.stop(), this.chronos.seek.stop(), t && ((e = e || {}).triggeredEvents = [
                                    t
                                ]), this.emit(l.Event.STOP, {
                                    params: e
                                }), this.chronos.pause.reset(), this.chronos.buffer.reset(), this.chronos.seek.reset(), this.chronos.viewedMax.splice(0, this.chronos.viewedMax.length);
                            }
                        } catch (e) {
                            n.warn(p, "Issue firing Stop event");
                        }
                    },
                    firePlayerLog: function(e, t) {
                        if (this._npawVideo) {
                            var i = {
                                logs: t,
                                logAction: e,
                                logType: "playerEvent"
                            };
                            this._npawVideo.firePlayerLog(i);
                        }
                    },
                    setIsAds: function(e) {
                        this._isAdsAdapter = e;
                    },
                    _isAds: function() {
                        return this._isAdsAdapter;
                    },
                    fireCasted: function(e, t) {
                        e || (e = {}), e.casted = !0, this.fireStop(e, t);
                    },
                    fireError: function(e, t, i, s, n, a) {
                        let o = r.buildErrorParams(e, t, i);
                        o.code && delete o.code, n && (o = o || {}, o.triggeredEvents = [
                            n
                        ]);
                        const d = this._npawVideo ? this._npawVideo.options : {};
                        void 0 !== o.errorCode && d["errors.ignore"] && d["errors.ignore"].indexOf(o.errorCode.toString()) > -1 || (((a = a || !1) || void 0 !== o.errorCode && d["errors.fatal"] && d["errors.fatal"].indexOf(o.errorCode.toString()) > -1) && this.flags.isJoined && (o = o || {}, o.errorType = "fatal"), this.emit(l.Event.ERROR, {
                            params: o
                        }));
                    },
                    fireFatalError: function(e, t, i, s, n) {
                        this.fireError(e, t, i, s, n, !0);
                    },
                    isLegacyBufferBehaviourEnabled: function() {
                        return (this._npawVideo ? this._npawVideo.options : {}).enableLegacyBufferBehaviour || !1;
                    }
                }, {
                    Event: l.Event
                });
                r.assign(f.prototype, i(211)), r.assign(f.prototype, i(72)), e.exports = f;
            },
            1618: (e, t, i)=>{
                var s = i(550), n = i(3598), r = s.extend({
                    constructor: function() {
                        this.reset();
                    },
                    reset: function() {
                        this.join = new n, this.seek = new n, this.pause = new n, this.buffer = new n, this.total = new n, this.viewedMax = [];
                    }
                });
                e.exports = r;
            },
            9157: (e, t, i)=>{
                var s = i(550).extend({
                    constructor: function() {
                        this.reset();
                    },
                    reset: function() {
                        this.isStarted = !1, this.isJoined = !1, this.isPaused = !1, this.isSeeking = !1, this.isBuffering = !1, this.isVideoStateBuffering = !1, this.isEnded = !1, this.isStopped = !1, this.lastQuartileSent = 0, this.isAdPaused = !1;
                    }
                });
                e.exports = s;
            },
            4795: (e, t, i)=>{
                var s = i(550), n = i(1516), r = i(3598), a = s.extend({
                    constructor: function(e, t, i) {
                        this._adapter = e, this._seekEnabled = t & a.Type.SEEK, this._bufferEnabled = t & a.Type.BUFFER, i = i || 800, this._chrono = new r, this._lastPlayhead = 0, i > 0 && (this._timer = new n(this.progress.bind(this), i));
                    },
                    start: function() {
                        this.stop(), this.canBeUsed() && this._timer.start();
                    },
                    stop: function() {
                        this._lastPlayhead = 0, this._timer && this._timer.stop();
                    },
                    skipNextTick: function() {
                        this._lastPlayhead = 0;
                    },
                    progress: function() {
                        var e = this._chrono.stop();
                        this._chrono.start();
                        var t = e * a.kBUFFER_THRESHOLD_RATIO, i = e * a.kSEEK_THRESHOLD_RATIO;
                        this._adapter.getPlayrate && this._adapter.getPlayrate() && 1 !== this._adapter.getPlayrate() && (t *= this._adapter.getPlayrate(), i *= this._adapter.getPlayrate());
                        var s = this._getPlayhead(), n = 1e3 * Math.abs(this._lastPlayhead - s);
                        n < t ? this._bufferEnabled && this._lastPlayhead > 0 && !this._adapter.flags.isPaused && !this._adapter.flags.isSeeking && this._adapter.fireBufferBegin(null, !1, "playheadMonitor") : n > i ? this._seekEnabled && this._lastPlayhead > 0 && this._adapter.fireSeekBegin(null, !1, "playheadMonitor") : (this._seekEnabled && this._adapter.fireSeekEnd(null, "playheadMonitor"), this._bufferEnabled && this._adapter.fireBufferEnd(null, "playheadMonitor")), this._lastPlayhead = s;
                    },
                    canBeUsed: function() {
                        const e = this._adapter.getVideo(), t = this._adapter.getPlugin();
                        return !(!t || !t.getPlayheadMonitorEnabled() || !this._seekEnabled && !this._bufferEnabled || e && e.getIsLive() && t.options["content.isLive.noMonitor"]);
                    },
                    _getPlayhead: function() {
                        return this._adapter.getPlayhead();
                    }
                }, {
                    Type: {
                        NONE: 0,
                        BUFFER: 1,
                        SEEK: 2
                    },
                    kBUFFER_THRESHOLD_RATIO: .5,
                    kSEEK_THRESHOLD_RATIO: 2
                });
                e.exports = a;
            },
            5552: (e, t, i)=>{
                var s = i(550);
                const { default: n } = i(3582), { AnalyticsTag: r } = i(9982);
                var a = s.extend({
                    constructor: function(e, t) {
                        this._adapter = e, this._videoElement = e.getVideoObject(), this._startedStateCheck = !1, this._intervalCheckId = null, this._intervalMilliseconds = t || 300;
                    },
                    start: function() {
                        var e = this._adapter.plugin;
                        e && e.getReadyStateMonitorEnabled() && this._videoElement && !this._startedStateCheck && (this._intervalCheckId = setInterval(this.checkStateProperty.bind(this), this._intervalMilliseconds), this._startedStateCheck = !0);
                    },
                    stop: function() {
                        try {
                            this._startedStateCheck && this._intervalCheckId && clearInterval(this._intervalCheckId), this._intervalCheckId = null, this._startedStateCheck = !1;
                        } catch (e) {
                            n.error(r, "Produced error stopping the network monitor");
                        }
                    },
                    checkStateProperty: function(e) {
                        try {
                            this._videoElement && this._adapter && this._videoElement.readyState && (this._videoElement.readyState > 3 && !this._adapter.flags.isSeeking ? this._adapter.flags.isBuffering ? this.fireBufferEnd({}, "stateMonitor") : this._adapter.flags.isJoined || this.fireJoin({}, "stateMonitor") : this._videoElement.readyState < 4 && !this._adapter.flags.isBuffering && this.fireBufferBegin({}, !1, "stateMonitor", !0));
                        } catch (e) {}
                    }
                });
                e.exports = a;
            },
            3598: (e, t, i)=>{
                var s = i(550).extend({
                    constructor: function() {
                        this.reset();
                    },
                    reset: function() {
                        this.startTime = 0, this.stopTime = 0, this.pauseTime = 0, this.offset = 0;
                    },
                    getDeltaTime: function(e) {
                        var t = -1, i = (new Date).getTime();
                        if (this.startTime) {
                            e && !this.stopTime && (this.stopTime = i);
                            var s = this.pauseTime ? i - this.pauseTime : 0, n = this.stopTime ? this.stopTime : i;
                            t = this.offset - s + (n - this.startTime);
                        }
                        return t;
                    },
                    start: function() {
                        this.startTime = (new Date).getTime(), this.stopTime = 0, this.offset = 0;
                    },
                    stop: function() {
                        return this.pauseTime && this.resume(), this.stopTime = (new Date).getTime(), this.startTime ? this.offset + (this.stopTime - this.startTime) : -1;
                    },
                    pause: function() {
                        this.pauseTime = (new Date).getTime();
                    },
                    resume: function() {
                        this.offset -= (new Date).getTime() - this.pauseTime, this.pauseTime = 0;
                    },
                    clone: function() {
                        var e = new s;
                        return e.startTime = this.startTime, e.stopTime = this.stopTime, e.offset = this.offset, e;
                    }
                });
                e.exports = s;
            },
            4971: (e, t, i)=>{
                var s = i(550);
                const { default: n, LogLevel: r } = i(3582);
                var a = i(8661);
                const { AnalyticsTag: o } = i(9982);
                var d = s.extend({
                    constructor: function(e, t, i, s, n) {
                        this.videoKey = n, this.xhr = this.createXHR(), this.host = e || "", this.service = t || "", this.params = i || {}, this.options = a.assign({}, d.defaultOptions, s), this.retries = 0, this.sendPostRequest = !1, this.preparedPostRequest = !1, this.options.cache || this.params.timemark || this.setParam("timemark", (new Date).getTime());
                    },
                    createXHR: function() {
                        var e = {};
                        try {
                            e = XMLHttpRequest ? new XMLHttpRequest : new ActiveXObject("Microsoft.XMLHTTP");
                        } catch (e) {
                            n.error(o, e);
                        }
                        return e;
                    },
                    getXHR: function() {
                        return this.xhr;
                    },
                    getResponse: function() {
                        return this.xhr.response;
                    },
                    getResponseText: function() {
                        return this.xhr.responseText;
                    },
                    getResponseHeaders: function() {
                        return this.xhr.getAllResponseHeaders();
                    },
                    getUrl: function() {
                        return this.host + this.service + this.getParamString();
                    },
                    getVideoKey: function() {
                        return this.videoKey;
                    },
                    on: function(e, t, i) {
                        return this.xhr.addEventListener ? this.xhr.addEventListener(e, t.bind(this, this, i)) : e === d.Event.SUCCESS && (this.xhr.onreadystatechange = (function() {
                            4 === this.xhr.readyState && t.bind(this, this, i);
                        }).bind(this)), this;
                    },
                    off: function(e, t) {
                        return this.xhr.removeEventListener(e, t), this;
                    },
                    getParamString: function() {
                        try {
                            var e = "?";
                            for(var t in this.params){
                                var i = this.params[t];
                                if (null !== i && "object" == typeof i) {
                                    var s = JSON.stringify(i);
                                    "{}" !== s && (e += encodeURIComponent(t) + "=" + encodeURIComponent(s) + "&");
                                } else null != i && "" !== i && (e += encodeURIComponent(t) + "=" + encodeURIComponent(i) + "&");
                            }
                            return e.slice(0, -1);
                        } catch (e) {
                            return n.error(o, e), "";
                        }
                    },
                    getParam: function(e) {
                        return this.params[e];
                    },
                    setParam: function(e, t) {
                        return this.params[e] = t, this;
                    },
                    setBody: function(e) {
                        this.body = e;
                    },
                    setPostRequest: function(e) {
                        this.sendPostRequest = e;
                    },
                    getParamsForPostMessages: function() {
                        var e = {};
                        try {
                            var t = this.getParam("timemark"), i = this.getParam("code"), s = this.getParam("sessionRoot"), r = this.getParam("sessionId");
                            t && (e.timemark = t), i && (e.code = i), s && (e.sessionRoot = s), r && (e.sessionId = r);
                        } catch (e) {
                            n.error(o, e);
                        }
                        return e;
                    },
                    send: function() {
                        try {
                            try {
                                this.sendPostRequest && !this.preparedPostRequest && (this.options.method = "POST", this.body = JSON.stringify(this.params), this.params = this.getParamsForPostMessages(), this.preparedPostRequest = !0);
                            } catch (e) {}
                            if (this.xhr.open(this.options.method, this.getUrl(), !0), this.options.requestHeaders) for(var e in this.options.requestHeaders)this.options.requestHeaders.hasOwnProperty(e) && this.xhr.setRequestHeader(e, this.options.requestHeaders[e]);
                            for(var t in this.options.retryAfter > 0 && this.options.maxRetries > 0 && 0 === this.retries && this.on(d.Event.ERROR, (function() {
                                if (this.retries >= this.options.maxRetries) n.error(o, 'Aborting failed request "' + this.service + '". Max retries reached.');
                                else {
                                    n.warn(o, 'YBRequest "' + this.service + '" failed. Retry ' + (this.retries + 1) + " of " + this.options.maxRetries + " in " + this.options.retryAfter + "ms.");
                                    try {
                                        setTimeout((function() {
                                            this.retries += 1, this.send();
                                        }).bind(this), this.options.retryAfter);
                                    } catch (e) {
                                        "undefined" != typeof atv ? atv.setTimeout((function() {
                                            this.retries += 1, this.send();
                                        }).bind(this), this.options.retryAfter) : n.error(o, e);
                                    }
                                }
                            }).bind(this)), n.logLevel <= r.VERBOSE && n.verbose(o, "XHR Req: " + this.getUrl()), d._globalListeners)d._globalListeners[t].forEach((function(e) {
                                this.on(t, e);
                            }).bind(this));
                            return this.xhr.send(this.body);
                        } catch (e) {
                            n.error(o, e);
                        }
                    }
                }, {
                    Event: {
                        SUCCESS: "load",
                        LOAD: "load",
                        ERROR: "error",
                        ABORT: "abort"
                    },
                    defaultOptions: {
                        method: "GET",
                        requestHeaders: {},
                        maxRetries: 3,
                        retryAfter: 5e3,
                        cache: !1
                    },
                    _globalListeners: {},
                    onEvery: function(e, t) {
                        d._globalListeners[e] = d._globalListeners[e] || [], d._globalListeners[e].push(t);
                    },
                    offEvery: function(e, t) {
                        if (d._globalListeners[e]) {
                            var i = d._globalListeners[e].indexOf(t);
                            -1 !== i && d._globalListeners[e].splice(i, 1);
                        }
                    }
                });
                e.exports = d;
            },
            4609: (e, t, i)=>{
                var s = i(1073), n = i(4090), r = i(6082), a = i(3465), o = i(3269), d = i(4045), c = i(4135), u = i(5100);
                const { AnalyticsTag: l } = i(9982), { default: h } = i(3582);
                var p = s.extend({
                    constructor: function(e) {
                        p.__super__.constructor.apply(this, arguments), this.plugin = e, this._realResource = void 0, this._transportFormat = void 0, this._initResource = void 0, this._cdnName = void 0, this._cdnNodeHost = void 0, this._cdnNodeTypeString = void 0, this._cdnNodeType = void 0, this._responses = {}, this._isBusy = !1, this.transformName = "Resource";
                    },
                    getResource: function() {
                        return this._realResource;
                    },
                    _getInitialCdnResource: function() {
                        return this._realResource || this._initResource;
                    },
                    getTransportFormat: function() {
                        return this._transportFormat;
                    },
                    getCdnName: function() {
                        return this._cdnName;
                    },
                    getNodeHost: function() {
                        return this._cdnNodeHost;
                    },
                    getNodeTypeString: function() {
                        return this._cdnNodeTypeString;
                    },
                    getNodeType: function() {
                        return this._cdnNodeType;
                    },
                    init: function(e) {
                        e ? this._isBusy || (this._isBusy = !0, this._initResource = e, this._parseManifestEnabled = this.plugin.isParseManifest(), this._cdnEnabled = this.plugin.isParseCdnNode(), this._cdnList = this.plugin.getParseCdnNodeList().slice(), r.setBalancerHeaderName(this.plugin.getParseCdnNodeNameHeader(), this.plugin.getParseNodeHeader()), this._setTimeout(), this._parseManifestEnabled ? this._isFinalUrl(this._initResource) ? (this._realResource = this._initResource, this.done()) : this.parseManifest() : this._parseCDN()) : this.done();
                    },
                    _isFinalUrl: function(e) {
                        const t = [
                            ".ts",
                            ".mp4",
                            ".m4s",
                            ".cmfv"
                        ];
                        e = e || "";
                        for(const i in t){
                            const s = t[i];
                            if (e.lastIndexOf(s) === e.length - s.length) return !0;
                        }
                        return !1;
                    },
                    _setTimeout: function() {
                        const e = ()=>{
                            this._isBusy && (this.done(), h.warn(l, "ResourceTransform has exceded the maximum execution time (3s) and will be aborted."));
                        };
                        try {
                            this._parseTimeout = setTimeout(e, 3e3);
                        } catch (t) {
                            "undefined" != typeof atv ? this._parseTimeout = atv.setTimeout(e, 3e3) : h.error(l, t);
                        }
                    },
                    parseManifest: function(e, t) {
                        const i = this.plugin.options["parse.manifest.auth"], s = [
                            new c(i),
                            new o(i),
                            new n(i)
                        ];
                        this._parseManifest(s, e, t || this._initResource);
                    },
                    _parseManifest: function(e, t, i, s) {
                        if (e.length > 0) {
                            const n = e[0];
                            n.shouldExecute(t) ? (n.on(d.Event.DONE, ()=>{
                                this._parseManifest(e.slice(1, e.length), n.getLastManifest(), n.getResource(), n.getTransportFormat() || s);
                            }), n.parse(i, t)) : this._parseManifest(e.slice(1, e.length), t, i, s);
                        } else this._transportFormat = s, this._realResource = i, this._parseCDN();
                    },
                    _parseCDN: function() {
                        if (this.plugin.isCdnSwitch()) this.switchDetector = new a(this.plugin), this.switchDetector.on(a.Events.DONE, (e)=>{
                            this._cdnName = e.data, this.done();
                        }), this.switchDetector.on(a.Events.ERROR, ()=>{
                            this.done();
                        }), this.switchDetector.init();
                        else if (this._cdnEnabled && this._cdnList.length > 0) {
                            const e = this._cdnList.shift(), t = r.create(e);
                            t ? (t.on(r.Event.DONE, ()=>{
                                this._responses = t.getResponses(), this._cdnName = t.getParsedCdnName(), this._cdnNodeHost = t.getParsedNodeHost(), this._cdnNodeTypeString = t.getParsedNodeTypeString(), this._cdnNodeType = t.getParsedNodeType(), this.getNodeHost() ? this.done() : this._parseCDN();
                            }), t.parse(this._getInitialCdnResource(), this._responses)) : this._parseCDN();
                        } else this.done();
                    },
                    parse: function(e) {
                        if (e.service === u.Service.START) {
                            const t = this.plugin.requestBuilder.lastSent;
                            t.parsedResource = e.params.parsedResource = this.getResource() || e.params.parsedResource, t.transportFormat = e.params.transportFormat = this.getTransportFormat() || e.params.transportFormat, this._cdnEnabled && (t.cdn = e.params.cdn = e.params.cdn || this.getCdnName(), t.nodeHost = e.params.nodeHost = this.getNodeHost() || e.params.nodeHost, t.nodeType = e.params.nodeType = this.getNodeType() || e.params.nodeType, t.nodeTypeString = e.params.nodeTypeString = this.getNodeTypeString() || e.params.nodeTypeString);
                        }
                    }
                });
                e.exports = p;
            },
            3465: (e, t, i)=>{
                var s = i(1075), n = i(4971);
                const { AnalyticsTag: r } = i(9982), { default: a } = i(3582);
                var o = s.extend({
                    constructor: function(e) {
                        this.plugin = e, this.headerName = "x-cdn";
                    },
                    init: function() {
                        var e = null;
                        this.plugin && (e = this.plugin.getAdapter() && this.plugin.getAdapter().getURLToParse() ? this.plugin.getAdapter().getURLToParse() : this.plugin.getResource()), this.plugin && this.plugin.getAdapter() && this.plugin.getAdapter().flags.isStarted && this._request(e);
                    },
                    done: function(e) {
                        this.emit(o.Events.DONE, e);
                    },
                    error: function() {
                        this.emit(o.Events.ERROR);
                    },
                    _successfulRequest: function(e) {
                        setTimeout(this.init.bind(this), 1e3 * parseInt(this.plugin.options["parse.cdnTTL"]));
                        var t = e.getResponseHeaders().split("\n"), i = null;
                        for(var s in t){
                            var n = t[s], r = n.indexOf(this.headerName);
                            r > -1 && (i = n.substring(r + this.headerName.length + 1, n.length - 1).replace(" ", ""));
                        }
                        this.done(i);
                    },
                    _failedRequest: function() {
                        setTimeout(this.init.bind(this), 1e3 * parseInt(this.plugin.options["parse.cdnTTL"])), a.warn(r, "CDN switch detection request failed"), this.error();
                    },
                    _request: function(e) {
                        var t = new n(e, null, null, {
                            method: "HEAD",
                            cache: !0
                        });
                        t.on(n.Event.SUCCESS, this._successfulRequest.bind(this)), t.on(n.Event.ERROR, this._failedRequest.bind(this)), t.send();
                    }
                }, {
                    Events: {
                        DONE: "done",
                        ERROR: "error"
                    }
                });
                e.exports = o;
            },
            6082: (e, t, i)=>{
                var s = i(1075), n = i(8661);
                i(4971);
                const { AnalyticsTag: r } = i(9982), { default: a } = i(3582);
                var o = s.extend({
                    constructor: function(e) {
                        this._options = n.assign({
                            cdnName: null,
                            parsers: [],
                            requestMethod: "HEAD",
                            requestHeaders: {},
                            parseType: function() {
                                return 0;
                            }
                        }, e), this._responses = {};
                    },
                    done: function() {
                        this.emit(o.Event.DONE);
                    },
                    addParser: function(e) {
                        return this._options.parsers.push(e), this;
                    },
                    setCdnName: function(e) {
                        return this._options.cdnName = e, this;
                    },
                    setRequestMethod: function(e) {
                        return this._options.requestMethod = e, this;
                    },
                    setRequestHeader: function(e, t) {
                        return this._options.requestHeaders[e] = t, this;
                    },
                    setParseType: function(e) {
                        return this._options.parseType = e, this;
                    },
                    getParsedCdnName: function() {
                        return this._cdnName;
                    },
                    getParsedNodeHost: function() {
                        return this._cdnNodeHost;
                    },
                    getParsedNodeTypeString: function() {
                        return this._cdnNodeTypeString;
                    },
                    getParsedNodeType: function() {
                        return this._cdnNodeType;
                    },
                    getResponses: function() {
                        return this._responses;
                    },
                    parse: function(e, t) {
                        this._responses = t || {};
                        var i = JSON.stringify(this._options.requestHeaders);
                        this._responses[i] ? this._parseResponse(this._responses[i]) : this._requestResponse(e);
                    },
                    _requestResponse: function(e) {
                        var t = JSON.stringify(this._options.requestHeaders), i = "{}" !== t;
                        const s = new XMLHttpRequest;
                        s.open(this._options.requestMethod, e);
                        for(const e in this._options.requestHeaders)Object.prototype.hasOwnProperty(this._options.requestHeaders, e) && s.setRequestHeader(e, this._options.requestHeaders[e]);
                        s.onreadystatechange = ()=>{
                            4 === s.readyState && (s.status >= 200 && s.status < 400 ? (this._responses[t] = s.getAllResponseHeaders(), this._parseResponse(this._responses[t])) : i ? (this._options.requestHeaders = {}, this._requestResponse(e)) : this.done());
                        }, s.send();
                    },
                    _parseResponse: function(e) {
                        this._options.parsers.forEach((function(t) {
                            if ("string" == typeof t.headerName) this._parseHeaderResponse(e, t, t.headerName);
                            else if (Array.isArray(t.headerName)) for(var i = 0, s = t.headerName.length; i < s; i++){
                                var n = t.headerName[i];
                                "string" == typeof n && this._parseHeaderResponse(e, t, n);
                            }
                        }).bind(this)), this.done();
                    },
                    _parseHeaderResponse: function(e, t, i) {
                        i && (i = i ? i.toLowerCase() : "", e.split("\n").forEach((function(e) {
                            var s = e.indexOf(":");
                            -1 !== s && e.slice(0, s).toLowerCase() === i && this._executeParser(t, e.slice(s + 1));
                        }).bind(this)));
                    },
                    _executeParser: function(e, t) {
                        try {
                            var i = e.regex.exec(t.trim());
                            if (null !== i) switch(this._options.cdnName && (this._cdnName = this._options.cdnName), e.element){
                                case o.ElementType.HOST:
                                    this._cdnNodeHost = i[1];
                                    break;
                                case o.ElementType.TYPE:
                                    this._cdnNodeTypeString = i[1], this._cdnNodeType = this._options.parseType(this._cdnNodeTypeString);
                                    break;
                                case o.ElementType.HOST_AND_TYPE:
                                    this._cdnNodeHost = i[1], this._cdnNodeTypeString = i[2], this._cdnNodeType = this._options.parseType(this._cdnNodeTypeString);
                                    break;
                                case o.ElementType.TYPE_AND_HOST:
                                    this._cdnNodeTypeString = i[1], this._cdnNodeType = this._options.parseType(this._cdnNodeTypeString), this._cdnNodeHost = i[2];
                                    break;
                                case o.ElementType.NAME:
                                    this._cdnName = i[1].toUpperCase();
                            }
                        } catch (e) {
                            a.warn(r, "CDN parsing for " + this._options.cdnName + " could not parse header value " + t);
                        }
                    },
                    shouldExecute: function() {
                        return !0;
                    }
                }, {
                    Event: {
                        DONE: "done"
                    },
                    ElementType: {
                        HOST: "host",
                        TYPE: "type",
                        HOST_AND_TYPE: "host+type",
                        TYPE_AND_HOST: "type+host",
                        NAME: "name"
                    },
                    _cdnConfigs: {},
                    setBalancerHeaderName: function(e, t) {
                        o._cdnConfigs.Balancer.parsers[0].headerName = e, o._cdnConfigs.Balancer.parsers[1].headerName = t;
                    },
                    create: function(e) {
                        if (o._cdnConfigs[e]) return new o(o._cdnConfigs[e]);
                        a.warn(r, "Tried to create an unexisting CdnParser named " + e);
                    },
                    add: function(e, t) {
                        o._cdnConfigs[e] = t;
                    }
                });
                o.add("Level3", i(1743)), o.add("Cloudfront", i(4212)), o.add("Akamai", i(4724)), o.add("Highwinds", i(6633)), o.add("Fastly", i(6297)), o.add("Telefonica", i(4622)), o.add("Amazon", i(7268)), o.add("Edgecast", i(694)), o.add("Balancer", i(194)), o.add("NosOtt", i(8237)), e.exports = o;
            },
            4724: (e)=>{
                e.exports = {
                    cdnName: "AKAMAI",
                    parsers: [
                        {
                            element: "type+host",
                            headerName: "X-Cache",
                            regex: /(.+)\sfrom.+AkamaiGHost\/(.+)\).+/
                        },
                        {
                            element: "host",
                            headerName: "akamai-mon-iucid-del",
                            regex: /(.*)/
                        },
                        {
                            element: "type",
                            headerName: "akamai-cache-status",
                            regex: /(.+)\sfrom\schild/
                        }
                    ],
                    requestHeaders: {
                        Pragma: "akamai-x-cache-on"
                    },
                    parseType: function(e) {
                        var t = e.toLowerCase();
                        return -1 !== t.indexOf("hit") ? 1 : -1 !== t.indexOf("miss") ? 2 : 0;
                    }
                };
            },
            7268: (e)=>{
                e.exports = {
                    cdnName: "AMAZON",
                    parsers: [
                        {
                            element: "host",
                            headerName: "x-amz-cf-pop",
                            regex: /(.+)/
                        },
                        {
                            element: "type",
                            headerName: "x-cache",
                            regex: /(.+)\sfrom.+/
                        }
                    ],
                    parseType: function(e) {
                        return -1 !== e.toLowerCase().indexOf("hit") ? 1 : -1 !== e.toLowerCase().indexOf("miss") ? 2 : 0;
                    }
                };
            },
            194: (e)=>{
                e.exports = {
                    parsers: [
                        {
                            element: "name",
                            headerName: null,
                            regex: /(.+)/
                        },
                        {
                            element: "host",
                            headerName: null,
                            regex: /(.+)/
                        }
                    ]
                };
            },
            4212: (e)=>{
                e.exports = {
                    cdnName: "CLOUDFRT",
                    parsers: [
                        {
                            element: "host",
                            headerName: "X-Amz-Cf-Id",
                            regex: /(.+)/
                        },
                        {
                            element: "type",
                            headerName: "X-Cache",
                            regex: /(\S+)\s.+/
                        }
                    ],
                    parseType: function(e) {
                        switch(e){
                            case "Hit":
                                return 1;
                            case "Miss":
                                return 2;
                            default:
                                return 0;
                        }
                    }
                };
            },
            694: (e)=>{
                e.exports = {
                    cdnName: "EDGECAST",
                    parsers: [
                        {
                            element: "host",
                            headerName: "Server",
                            regex: /\((.+)\/.+\)/
                        },
                        {
                            element: "type",
                            headerName: "X-Cache",
                            regex: /(.+)/
                        }
                    ],
                    parseType: function(e) {
                        return "HIT" === e ? 1 : 2;
                    }
                };
            },
            6297: (e)=>{
                e.exports = {
                    cdnName: "FASTLY",
                    parsers: [
                        {
                            element: "host",
                            headerName: "X-Served-By",
                            regex: /([^,\s]+)$/
                        },
                        {
                            element: "type",
                            headerName: "X-Cache",
                            regex: /([^,\s]+)$/
                        }
                    ],
                    parseType: function(e) {
                        switch(e){
                            case "HIT":
                                return 1;
                            case "MISS":
                                return 2;
                            default:
                                return 0;
                        }
                    }
                };
            },
            6633: (e)=>{
                e.exports = {
                    cdnName: "HIGHNEGR",
                    parsers: [
                        {
                            element: "host+type",
                            headerName: "X-HW",
                            regex: /.+,[0-9]+\.(.+)\.(.+)/
                        }
                    ],
                    parseType: function(e) {
                        switch(e){
                            case "c":
                            case "x":
                                return 1;
                            default:
                                return 2;
                        }
                    }
                };
            },
            1743: (e)=>{
                e.exports = {
                    cdnName: "LEVEL3",
                    parsers: [
                        {
                            element: "host+type",
                            headerName: "X-WR-Diag",
                            regex: /Host:(.+)\sType:(.+)/
                        }
                    ],
                    requestHeaders: {
                        "X-WR-Diag": "host"
                    },
                    parseType: function(e) {
                        if (e) {
                            if (0 === e.indexOf("TCP_HIT") || 0 === e.indexOf("TCP_MEM_HIT") || 0 === e.indexOf("TCP_IMS_HIT")) return 1;
                            if (0 === e.indexOf("TCP_MISS")) return 2;
                        }
                        return 0;
                    }
                };
            },
            8237: (e)=>{
                e.exports = {
                    cdnName: "NOSOTT",
                    parsers: [
                        {
                            element: "host",
                            headerName: "X-NOS-Server",
                            regex: /(.+)/
                        },
                        {
                            element: "type",
                            headerName: "X-Cache",
                            regex: /(.*)/
                        }
                    ],
                    parseType: function(e) {
                        switch(e){
                            case "Hit":
                                return 1;
                            case "Miss":
                                return 2;
                            default:
                                return 0;
                        }
                    }
                };
            },
            4622: (e)=>{
                e.exports = {
                    cdnName: "TELEFO",
                    parsers: [
                        {
                            element: "host+type",
                            headerName: "x-tcdn",
                            regex: /Host:(.+)\sType:(.+)/
                        }
                    ],
                    requestHeaders: {
                        "x-tcdn": "host"
                    },
                    parseType: function(e) {
                        if (e) {
                            if (-1 !== e.indexOf("p") || -1 !== e.indexOf("c")) return 1;
                            if (-1 !== e.indexOf("i") || -1 !== e.indexOf("m")) return 2;
                        }
                        return 0;
                    }
                };
            },
            3269: (e, t, i)=>{
                var s = i(4971), n = i(4045), r = i(3197);
                const { AnalyticsTag: a } = i(9982), { default: o } = i(3582);
                var d = n.extend({
                    parse: function(e, t) {
                        if (t) this.parseLocation(t, e);
                        else {
                            var i = new s(e, null, null, {
                                cache: !0,
                                requestHeaders: this._headers
                            });
                            i.on(s.Event.SUCCESS, (function(t) {
                                this.parseLocation(t, e);
                            }).bind(this)), i.on(s.Event.ERROR, (function(e) {
                                this.done();
                            }).bind(this)), i.send();
                        }
                    },
                    parseLocation: function(e, t) {
                        this.iterations--;
                        var i = new RegExp(/<Location>([\s\S]+)<\/Location>/);
                        try {
                            this._lastManifest = e;
                            var s = e.getResponseText(), n = i.exec(s);
                            if (n && n[1]) var r = this._htmlDecode(n[1].replace("\n", ""));
                            r && r !== t && this.iterations > 0 ? this.parse(r) : this.parseFinalResource(s, t);
                        } catch (e) {
                            o.warn(a, "Dash parse failed"), this.done();
                        }
                    },
                    _htmlDecode: function(e) {
                        if ("undefined" != typeof document && "function" == typeof document.createElement) {
                            var t = document.createElement("textarea");
                            return t.innerHTML = e, t.childNodes && t.childNodes.length ? t.childNodes[0].nodeValue : e;
                        }
                        return e;
                    },
                    parseFinalResource: function(e, t) {
                        var i = new RegExp(/<BaseURL>[\r\n]*(.*?)[\r\n]*<\/BaseURL>/), s = new RegExp(/<SegmentURL[\s\S]*media="([^"]+)/), n = new RegExp(/<SegmentTemplate[\s\S]*media="([^"]+)/), r = null;
                        try {
                            r = i.exec(e) || n.exec(e) || s.exec(e), this._getManifestMetadata(e), r && r[1] && this._isFullUrl(r[1]) ? r[1].indexOf('"') > 0 ? this._realResource = r[1].substr(0, r[1].indexOf('"')).replace("\n", "") : this._realResource = r[1].replace("\n", "") : this._realResource = t;
                        } catch (e) {
                            o.warn(a, "Dash manifest parse failed");
                        }
                        this.done();
                    },
                    _getManifestMetadata: function(e) {
                        try {
                            var t = new RegExp(/<AdaptationSet[\s\S]*mimeType="video\/([^"]+)/).exec(e), i = null;
                            switch(t[1]){
                                case "mp4":
                                case "m4s":
                                    i = r.MP4;
                                    break;
                                case "mp2t":
                                    i = r.MPEG2;
                                    break;
                                case "cmfv":
                                    i = r.CMF;
                            }
                            this._transportFormat = i;
                        } catch (e) {
                            o.warn(a, "Couldnt find the transport format");
                        }
                    },
                    _isFullUrl: function(e) {
                        return -1 !== e.indexOf("http");
                    },
                    shouldExecute: function(e) {
                        var t = !0;
                        return e && (t = -1 !== e.getResponseText().indexOf("<MPD")), t;
                    }
                });
                e.exports = d;
            },
            4090: (e, t, i)=>{
                var s = i(4971), n = i(4045), r = i(3197);
                const { AnalyticsTag: a } = i(9982), { default: o } = i(3582);
                var d = n.extend({
                    parse: function(e, t, i) {
                        i = i || "";
                        var n = null;
                        try {
                            n = /((\S*?)(\.m3u8|\.m3u|\.ts|\.m4s|\.mp4|\.cmfv|\.m4a)((\?|;)\S*|\n|\r|$))/i.exec(e.replaceAll(",URI=", "\n").replaceAll('"', "").replaceAll(",", "\n"));
                        } catch (e) {
                            o.warn(a, "Parse HLS Regex failed", e), this.done();
                        }
                        if (null !== n) {
                            var d = n[1].trim(), c = "", u = i.lastIndexOf("/");
                            if (0 !== d.indexOf("http") && -1 !== u) {
                                if ("/" === d[0] && "/" !== d[1]) {
                                    var l = i.indexOf("/") + 1;
                                    l += i.substr(l, i.length).indexOf("/") + 1, l += i.substr(l, i.length).indexOf("/"), d = i.slice(0, l) + d;
                                } else d = i.slice(0, u) + "/" + d;
                                c = i.slice(0, u) + "/";
                            }
                            if (".m3u8" === n[3] || ".m3u" === n[3]) {
                                if (t) this._parseWithManifest(t, c, n);
                                else {
                                    var h = new s(d, null, null, {
                                        cache: !0,
                                        requestHeaders: this._headers
                                    });
                                    h.on(s.Event.SUCCESS, (function(e) {
                                        this._parseWithManifest(e, c, n);
                                    }).bind(this)), h.on(s.Event.ERROR, (function(e) {
                                        this.done();
                                    }).bind(this)), h.send();
                                }
                            } else {
                                switch(n[3]){
                                    case ".mp4":
                                    case ".m4s":
                                    case ".m4a":
                                        this._transportFormat = r.MP4;
                                        break;
                                    case ".ts":
                                        this._transportFormat = r.MPEG2;
                                        break;
                                    case ".cmfv":
                                        this._transportFormat = r.CMF;
                                }
                                this._realResource = d, this.done();
                            }
                        } else this.done();
                    },
                    _parseWithManifest: function(e, t, i) {
                        this._lastManifest = e, this.parse(e.getResponseText(), null, t + i[2]);
                    },
                    shouldExecute: function(e) {
                        var t = !0;
                        return e && (t = -1 !== e.getResponseText().indexOf("#EXTM3U")), t;
                    }
                });
                e.exports = d;
            },
            4135: (e, t, i)=>{
                var s = i(4971), n = i(4045).extend({
                    parse: function(e, t) {
                        if (t) this._parseWithManifest(t);
                        else {
                            this._realResource = e;
                            var i = new s(e, null, null, {
                                cache: !0,
                                requestHeaders: this._headers
                            });
                            i.on(s.Event.SUCCESS, (function(e) {
                                this._parseWithManifest(e);
                            }).bind(this)), i.on(s.Event.ERROR, (function(e) {
                                this.done();
                            }).bind(this)), i.send();
                        }
                    },
                    _parseWithManifest: function(e) {
                        this._lastManifest = e;
                        var t = e.getResponseHeaders(), i = !1;
                        e && e.xhr && e.xhr.responseURL && e.xhr.responseURL !== this._realResource ? (this._realResource = e.xhr.responseURL, this.parse(this._realResource), i = !0) : t.split("\n").forEach((function(e) {
                            e.startsWith("Location:") && (this._realResource = e.slice(10), this.parse(this._realResource), i = !0);
                        }).bind(this)), i || this.done();
                    }
                });
                e.exports = n;
            },
            4045: (e, t, i)=>{
                const s = i(1075).extend({
                    constructor: function(e) {
                        this._realResource = void 0, this._lastManifest = void 0, this._transportFormat = void 0, this.iterations = 3, this._headers = e;
                    },
                    done: function() {
                        this.iterations = 3, this.emit(s.Event.DONE);
                    },
                    parse: function(e, t) {},
                    getResource: function() {
                        return this._realResource;
                    },
                    getTransportFormat: function() {
                        return this._transportFormat;
                    },
                    getLastManifest: function() {
                        return this._lastManifest;
                    },
                    shouldExecute: function(e) {
                        return !0;
                    }
                }, {
                    Event: {
                        DONE: "done"
                    }
                });
                e.exports = s;
            },
            1073: (e, t, i)=>{
                var s = i(1075).extend({
                    constructor: function() {
                        this._isBusy = !0, this._sendRequest = !0, this.transformName = "Transform";
                    },
                    parse: function(e) {},
                    isBlocking: function(e) {
                        return this._isBusy;
                    },
                    done: function() {
                        this._isBusy = !1, this.emit(s.Event.DONE);
                    },
                    hasToSend: function(e) {
                        return this._sendRequest;
                    },
                    getState: function() {
                        return this._sendRequest ? this._isBusy ? this.STATE_BLOCKED : this.STATE_NO_BLOCKED : this.STATE_OFFLINE;
                    }
                }, {
                    STATE_OFFLINE: 2,
                    STATE_BLOCKED: 1,
                    STATE_NO_BLOCKED: 0,
                    Event: {
                        DONE: "done"
                    }
                });
                e.exports = s;
            },
            5100: (e, t, i)=>{
                const s = i(7413), n = i(7380), r = {
                    AdPosition: s,
                    ManifestError: i(4522),
                    RequestMethod: i(859),
                    Service: i(6424),
                    WillSendEvent: i(4217),
                    WillSendLog: i(3655),
                    AdInsertionType: i(5073),
                    Adapter: n,
                    Metadata: i(6814)
                };
                e.exports = r;
            },
            5073: (e)=>{
                e.exports = {
                    ClientSide: "csai",
                    ServerSide: "ssai"
                };
            },
            7413: (e)=>{
                e.exports = {
                    Preroll: "pre",
                    Midroll: "mid",
                    Postroll: "post"
                };
            },
            7380: (e, t, i)=>{
                var s = {
                    Event: i(2839)
                };
                e.exports = s;
            },
            2839: (e)=>{
                e.exports = {
                    INIT: "init",
                    START: "start",
                    JOIN: "join",
                    JOIN_TIME: "joinTime",
                    DATA_OBJECT: "data",
                    PAUSE: "pause",
                    RESUME: "resume",
                    SEEK_BEGIN: "seek-begin",
                    SEEK_END: "seek-end",
                    BUFFER_BEGIN: "buffer-begin",
                    BUFFER_END: "buffer-end",
                    ERROR: "error",
                    STOP: "stop",
                    CLICK: "click",
                    MANIFEST: "manifest",
                    PODSTART: "break-start",
                    PODSTOP: "break-stop",
                    QUARTILE: "quartile",
                    VIDEO_EVENT: "video-event"
                };
            },
            4522: (e)=>{
                e.exports = {
                    NO_RESPONSE: "NO_RESPONSE",
                    EMPTY: "EMPTY_RESPONSE",
                    WRONG: "WRONG_RESPONSE"
                };
            },
            6814: (e)=>{
                e.exports = {
                    REQUIRED_METADATA_TIMEOUT: 1e4
                };
            },
            859: (e)=>{
                e.exports = {
                    GET: "GET",
                    POST: "POST"
                };
            },
            6424: (e)=>{
                e.exports = {
                    DATA: "/data",
                    ADAPTERS: "/adapters",
                    CONFIGURATION: "/configuration",
                    APP_ANALYTICS_PLUGIN_LOGS: "/infinity/session/pluginLogs",
                    VIDEO_PLUGIN_LOGS: "/infinity/video/pluginLogs",
                    INIT: "/init",
                    START: "/start",
                    JOIN: "/joinTime",
                    DATA_OBJECT: "/data",
                    PAUSE: "/pause",
                    RESUME: "/resume",
                    SEEK: "/seek",
                    BUFFER: "/bufferUnderrun",
                    ERROR: "/error",
                    STOP: "/stop",
                    PING: "/ping",
                    CDN: "/cdn",
                    VIDEO_EVENT: "/infinity/video/event",
                    AD_INIT: "/adInit",
                    AD_START: "/adStart",
                    AD_JOIN: "/adJoin",
                    AD_PAUSE: "/adPause",
                    AD_RESUME: "/adResume",
                    AD_BUFFER: "/adBufferUnderrun",
                    AD_STOP: "/adStop",
                    AD_CLICK: "/adClick",
                    AD_ERROR: "/adError",
                    AD_MANIFEST: "/adManifest",
                    AD_POD_START: "/adBreakStart",
                    AD_POD_STOP: "/adBreakStop",
                    AD_QUARTILE: "/adQuartile",
                    EVENT: "/infinity/session/event",
                    SESSION_START: "/infinity/session/start",
                    SESSION_STOP: "/infinity/session/stop",
                    NAV: "/infinity/session/nav",
                    BEAT: "/infinity/session/beat",
                    OFFLINE_EVENTS: "/offlineEvents"
                };
            },
            1310: (e)=>{
                e.exports = {
                    HDS: "HDS",
                    HLS: "HLS",
                    MSS: "MSS",
                    DASH: "DASH",
                    RTMP: "RTMP",
                    RTP: "RTP",
                    RTSP: "RTSP",
                    DVB: "DVB",
                    DVBC: "DVB-C",
                    DVBT: "DVB-T",
                    DVBT2: "DVB-T2",
                    MULTICAST: "MULTICAST"
                };
            },
            3197: (e)=>{
                e.exports = {
                    MP4: "MP4",
                    MPEG2: "TS",
                    CMF: "CMF"
                };
            },
            4217: (e)=>{
                e.exports = {
                    WILL_SEND_INIT: "will-send-init",
                    WILL_SEND_START: "will-send-start",
                    WILL_SEND_JOIN: "will-send-join",
                    WILL_SEND_PAUSE: "will-send-pause",
                    WILL_SEND_RESUME: "will-send-resume",
                    WILL_SEND_SEEK: "will-send-seek",
                    WILL_SEND_DATA_OBJECT: "will-send-data",
                    WILL_SEND_BUFFER: "will-send-buffer",
                    WILL_SEND_ERROR: "will-send-error",
                    WILL_SEND_FATAL_ERROR: "will-send-fatal-error",
                    WILL_SEND_STOP: "will-send-stop",
                    WILL_SEND_PING: "will-send-ping",
                    WILL_SEND_VIDEO_EVENT: "will-send-video-event",
                    WILL_SEND_AD_START: "will-send-ad-start",
                    WILL_SEND_AD_JOIN: "will-send-ad-join",
                    WILL_SEND_AD_PAUSE: "will-send-ad-pause",
                    WILL_SEND_AD_RESUME: "will-send-ad-resume",
                    WILL_SEND_AD_BUFFER: "will-send-ad-buffer",
                    WILL_SEND_AD_STOP: "will-send-ad-stop",
                    WILL_SEND_AD_CLICK: "will-send-ad-click",
                    WILL_SEND_AD_ERROR: "will-send-ad-error",
                    WILL_SEND_AD_MANIFEST: "will-send-ad-manifest",
                    WILL_SEND_AD_POD_START: "will-send-ad-break-start",
                    WILL_SEND_AD_POD_STOP: "will-send-ad-break-stop",
                    WILL_SEND_AD_QUARTILE: "will-send-ad-quartile",
                    WILL_SEND_SESSION_START: "will-send-session-start",
                    WILL_SEND_SESSION_STOP: "will-send-session-stop",
                    WILL_SEND_NAV: "will-send-nav",
                    WILL_SEND_BEAT: "will-send-beat",
                    WILL_SEND_EVENT: "will-send-event",
                    WILL_SEND_OFFLINE_EVENTS: "will-send-offline-events"
                };
            },
            3655: (e)=>{
                e.exports = {
                    WILL_SEND_LOG_PLUGIN_INIT: "will-send-log-plugin-init",
                    WILL_SEND_LOG_PLUGIN_SET_OPTIONS: "will-send-log-plugin-set-options",
                    WILL_SEND_LOG_PLUGIN_RECEIVE_DATA: "will-send-log-plugin-receive-data",
                    WILL_SEND_LOG_INFINITY_BEGIN: "will-send-log-infinity-begin",
                    WILL_SEND_LOG_INFINITY_START: "will-send-log-infinity-start",
                    WILL_SEND_LOG_INFINITY_EVENT: "will-send-log-infinity-event",
                    WILL_SEND_LOG_INFINITY_NAV: "will-send-log-infinity-nav",
                    WILL_SEND_LOG_INFINITY_NEW_SESSION: "will-send-log-infinity-new-session"
                };
            },
            9675: (e, t, i)=>{
                var s = i(550).extend({
                    constructor: function(e) {
                        this.plugin = e, this.isInBackground = !1, this.listenerReference = this._visibilityListener.bind(this), this._reset();
                    },
                    startDetection: function() {
                        this.isBackgroundDetectorStarted || "undefined" == typeof document || (this.isBackgroundDetectorStarted = !0, document.addEventListener("visibilitychange", this.listenerReference));
                    },
                    stopDetection: function() {
                        this.isBackgroundDetectorStarted && "undefined" != typeof document && (document.removeEventListener("visibilitychange", this.listenerReference), this._reset());
                    },
                    _reset: function() {
                        this.isBackgroundDetectorStarted = !1;
                    },
                    _visibilityListener: function(e) {
                        if ("undefined" != typeof document) {
                            var t = this._getSettings();
                            "hidden" === document.visibilityState ? this._toBackground(t) : "visible" === document.visibilityState && this._toForeground(t);
                        }
                    },
                    _toBackground: function(e) {
                        this.isInBackground = !0;
                        try {
                            if (this.plugin && this.plugin.videos) for(var t = 0; t < this.plugin.videos.getVideoKeys().length; t++){
                                var i = this.plugin.videos.getVideoKeys()[t], s = this.plugin.videos.getAdsAdapter(i);
                                s && s.stopChronoView();
                            }
                        } catch (e) {}
                        try {
                            if ("string" == typeof e) {
                                switch(e){
                                    case "stop":
                                        this._fireStop();
                                        break;
                                    case "pause":
                                        this._firePause();
                                }
                                if (this.plugin.appAnalytics.appAnalyticsStarted) {
                                    this.lastBeatTime = (new Date).getTime();
                                    var n = this.plugin.appAnalytics._beat.chrono.startTime ? this.lastBeatTime - this.plugin.appAnalytics._beat.chrono.startTime : 0;
                                    this.plugin.appAnalytics._sendBeat(n), this.plugin.appAnalytics._beat.stop();
                                }
                            }
                        } catch (e) {}
                    },
                    _toForeground: function(e) {
                        this.isInBackground = !1;
                        try {
                            if (this.plugin && this.plugin.videos) for(var t = 0; t < this.plugin.videos.getVideoKeys().length; t++){
                                var i = this.plugin.videos.getVideoKeys()[t], s = this.plugin.videos.getAdsAdapter(i);
                                s && s.startChronoView();
                            }
                        } catch (e) {}
                        try {
                            if ("string" == typeof e && e && this.plugin.appAnalytics.appAnalyticsStarted) {
                                var n = (new Date).getTime();
                                n - this.lastBeatTime < this.plugin.appAnalytics.sessionExpire ? (this.plugin.appAnalytics._sendBeat(n - this.lastBeatTime), this.plugin.appAnalytics._beat.start()) : this.plugin.appAnalytics.newSession();
                            }
                        } catch (e) {}
                    },
                    _getSettings: function() {
                        return "string" == typeof this.plugin.options["background.settings"] && this.plugin.options["background.settings"] ? this.plugin.options["background.settings"] : this.plugin.deviceDetector.isSmartTV() ? this.plugin.options["background.settings.tv"] : this.plugin.deviceDetector.isDesktop() ? this.plugin.options["background.settings.desktop"] : this.plugin.deviceDetector.isAndroid() ? this.plugin.options["background.settings.android"] : this.plugin.deviceDetector.isIphone() ? this.plugin.options["background.settings.iOS"] : this.plugin.deviceDetector.isPlayStation() ? this.plugin.options["background.settings.playstation"] : void 0;
                    },
                    _firePause: function() {
                        this._fireX("firePause");
                    },
                    _fireStop: function() {
                        this._fireX("fireStop");
                    },
                    _fireX: function(e) {
                        try {
                            if (this.plugin && this.plugin.videos) for(var t = 0; t < this.plugin.videos.getVideoKeys().length; t++){
                                var i = this.plugin.videos.getVideoKeys()[t];
                                this.adsAdapter = this.plugin.videos.getAdsAdapter(i), this.adsAdapter && this.adsAdapter[e]({}, "backgroundDetector"), this.contentAdapter = this.plugin.videos.getAdapter(i), this.contentAdapter && this.contentAdapter[e]({}, "backgroundDetector");
                            }
                        } catch (e) {}
                    },
                    canBlockStartCalls: function() {
                        return this.isInBackground && !0 === this.plugin.options["background.enabled"] && this._getSettings();
                    }
                });
                e.exports = s;
            },
            7189: (e, t, i)=>{
                var s = i(550).extend({
                    constructor: function() {
                        "undefined" != typeof navigator && navigator.userAgent && (this._isSmartTVDevice = navigator.userAgent.toLowerCase().match(/smarttv/) || navigator.userAgent.toLowerCase().match(/smart-tv/) || navigator.userAgent.toLowerCase().match(/appletv/) || navigator.userAgent.toLowerCase().match(/apple tv/), this._isPlaystationDevice = null !== navigator.userAgent.match(/PlayStation/), this._isIphoneDevice = null !== navigator.userAgent.match(/iPhone|iPad|iPod/i), this._isAndroidDevice = null !== navigator.userAgent.match(/Android/), this._isSmartphoneDevice = !this._isSmartTVDevice && !this._isPlaystationDevice && (this._isIphoneDevice || this._isAndroidDevice), this._isDesktopDevice = !this._isSmartphoneDevice && !this._isSmartTVDevice && !this._isPlaystationDevice);
                    },
                    isIphone: function() {
                        return this._isIphoneDevice;
                    },
                    isAndroid: function() {
                        return this._isAndroidDevice;
                    },
                    isSmartphone: function() {
                        return this._isSmartphoneDevice;
                    },
                    isDesktop: function() {
                        return this._isDesktopDevice;
                    },
                    isSmartTV: function() {
                        return this._isSmartTVDevice;
                    },
                    isPlayStation: function() {
                        return this._isPlaystationDevice;
                    }
                });
                e.exports = s;
            },
            5086: (e, t, i)=>{
                var s = i(550).extend({
                    constructor: function(e, t) {
                        this.plugin = e, this.video = t, this.listenerReference = this._changeListener.bind(this), this.loadReference = this._loadListener.bind(this), this.isEnabled = !1, this.pageHeight = 0, this.maxHeight = 0, this.startDetection();
                    },
                    startDetection: function() {
                        this.isEnabled || "undefined" == typeof window || "function" != typeof window.addEventListener || (window.addEventListener("scroll", this.listenerReference), window.addEventListener("resize", this.listenerReference), window.addEventListener("load", this.loadReference), this.isEnabled = !0);
                    },
                    stopDetection: function() {
                        this.isEnabled && "undefined" != typeof window && "function" == typeof window.removeEventListener && (window.removeEventListener("scroll", this.listenerReference), window.removeEventListener("resize", this.listenerReference), window.removeEventListener("load", this.loadReference), this.isEnabled = !1);
                    },
                    getScrollDepth: function() {
                        var e = null;
                        return this.maxHeight && this.pageHeight && (e = Math.min(Math.trunc(this.maxHeight / this.pageHeight * 100), 100)), e;
                    },
                    _loadListener: function() {
                        if ("undefined" != typeof document) {
                            var e = document.documentElement;
                            e && (this.pageHeight = Math.round(e.scrollHeight, e.clientHeight, e.offsetHeight), this.maxHeight = window.innerHeight, this._updateCompletionRate());
                        }
                    },
                    _changeListener: function() {
                        if (this.pageHeight) {
                            var e = this.maxHeight;
                            this.maxHeight = Math.max(this.maxHeight, window.pageYOffset + window.innerHeight), e !== this.maxHeight && this._updateCompletionRate();
                        }
                        var t = this.video.getAdsAdapter();
                        t && t.flags.isStarted && (t.getIsVisible() ? t.startChronoView() : t.stopChronoView());
                    },
                    _updateCompletionRate: function() {
                        setTimeout((function() {
                            this.plugin.storage.setSession("pageScrollDepth", this.getScrollDepth());
                        }).bind(this), 3e3);
                    }
                });
                e.exports = s;
            },
            5299: (e, t, i)=>{
                var s = i(550).extend({
                    constructor: function(e) {
                        this.plugin = e;
                    },
                    getAllData: function() {
                        var e = this.getNonRandomData();
                        return e.timestamp = this.getTimestamp(), e;
                    },
                    getNonRandomData: function() {
                        var e = {};
                        return e.userAgent = this.getUserAgent(), e.threads = this.getVirtualCores(), e.language = this.getLanguage(), e.langList = this.getAvailableLanguages(), e.resolution = this.getResolution(), e.colorDepth = this.getColorDepth(), e.deviceMemory = this.getMemory(), e.touchscreen = this.getTouchscreen(), e.localStorage = this.getLocalStorage(), e.sessionStorage = this.getSessionStorage(), e.cookiesAvailable = this.getCookiesAvailable(), e.flashAvailable = this.getHasFlash(), e.timeZone = this.getTimeZone(), e.plugins = this.getPluginList(), e;
                    },
                    getUserAgent: function() {
                        return this._getNavigatorValue("userAgent");
                    },
                    getVirtualCores: function() {
                        return this._getNavigatorValue("hardwareConcurrency");
                    },
                    getLanguage: function() {
                        return this._getNavigatorValue("language");
                    },
                    getAvailableLanguages: function() {
                        return this._getNavigatorValue("languages");
                    },
                    getResolution: function() {
                        var e = null;
                        try {
                            this._getNavigatorValue("screen") && (e = navigator.screen.width.toString() + navigator.screen.height.toString());
                        } catch (e) {}
                        return e;
                    },
                    getColorDepth: function() {
                        var e = null;
                        try {
                            this._getNavigatorValue("screen") && (e = navigator.screen.colorDepth);
                        } catch (e) {}
                        return e;
                    },
                    getMemory: function() {
                        return this._getNavigatorValue("deviceMemory");
                    },
                    getTouchscreen: function() {
                        return this._getNavigatorValue("maxTouchPoints") || !1;
                    },
                    getLocalStorage: function() {
                        var e = !1;
                        try {
                            e = "undefined" != typeof localStorage;
                        } catch (e) {}
                        return e;
                    },
                    getSessionStorage: function() {
                        var e = !1;
                        try {
                            e = "undefined" != typeof sessionStorage;
                        } catch (e) {}
                        return e;
                    },
                    getCookiesAvailable: function() {
                        return this._getNavigatorValue("cookieEnabled") || !1;
                    },
                    getHasFlash: function() {
                        var e = !1;
                        try {
                            var t = this._getNavigatorValue("plugins");
                            e = t && "object" == typeof t["Shockwave Flash"] || "undefined" != typeof window && window.ActiveXObject && (new ActiveXObject("ShockwaveFlash.ShockwaveFlash"), true);
                        } catch (e) {}
                        return e;
                    },
                    getPluginList: function() {
                        var e = null;
                        try {
                            var t = this._getNavigatorValue("plugins");
                            if (t && 0 !== t.length) {
                                for(var i = "", s = 0; s < navigator.plugins.length; s++)i += navigator.plugins[s].description + " " + navigator.plugins[s].filename + " " + navigator.plugins[s].name + " ";
                                e = i;
                            }
                        } catch (e) {}
                        return e;
                    },
                    getTimeZone: function() {
                        var e = null;
                        try {
                            e = (new Date).getTimezoneOffset().toString();
                        } catch (e) {}
                        return e;
                    },
                    getTimestamp: function() {
                        return (new Date).getTime();
                    },
                    _navigatorCheck: function() {
                        return "undefined" != typeof navigator;
                    },
                    _getNavigatorValue: function(e) {
                        var t = null;
                        try {
                            this._navigatorCheck() && (t = navigator[e]);
                        } catch (e) {}
                        return t;
                    }
                });
                e.exports = s;
            },
            6274: (e, t, i)=>{
                var s = i(5299), n = i(550), r = i(1167);
                const { default: a } = i(99);
                var o = n.extend({
                    constructor: function() {
                        this.dataExtractor = new s, this.key = this.getPreviousKey();
                    },
                    generateHashKey: function() {
                        if (!this.key) {
                            var e = this.dataExtractor.getAllData();
                            this.key = this._hashFunction(e), a.getInstance().getCoreStorage().setLocal("npawDeviceUUID", this.key);
                        }
                    },
                    getKey: function() {
                        return this.key || this.generateHashKey(), this.key;
                    },
                    _hashFunction: function(e) {
                        var t = e;
                        return "string" != typeof e && (t = JSON.stringify(e)), r(t);
                    },
                    _reset: function() {
                        this.key = void 0;
                    },
                    getPreviousKey: function() {
                        return a.getInstance().getCoreStorage().getLocal("npawDeviceUUID");
                    }
                });
                e.exports = o;
            },
            1167: (e)=>{
                e.exports = function(e) {
                    function t(e, t) {
                        return e << t | e >>> 32 - t;
                    }
                    function i(e, t) {
                        var i, s, n, r, a;
                        return n = 2147483648 & e, r = 2147483648 & t, a = (1073741823 & e) + (1073741823 & t), (i = 1073741824 & e) & (s = 1073741824 & t) ? 2147483648 ^ a ^ n ^ r : i | s ? 1073741824 & a ? 3221225472 ^ a ^ n ^ r : 1073741824 ^ a ^ n ^ r : a ^ n ^ r;
                    }
                    function s(e, s, n, r, a, o, d) {
                        return e = i(e, i(i(function(e, t, i) {
                            return e & t | ~e & i;
                        }(s, n, r), a), d)), i(t(e, o), s);
                    }
                    function n(e, s, n, r, a, o, d) {
                        return e = i(e, i(i(function(e, t, i) {
                            return e & i | t & ~i;
                        }(s, n, r), a), d)), i(t(e, o), s);
                    }
                    function r(e, s, n, r, a, o, d) {
                        return e = i(e, i(i(function(e, t, i) {
                            return e ^ t ^ i;
                        }(s, n, r), a), d)), i(t(e, o), s);
                    }
                    function a(e, s, n, r, a, o, d) {
                        return e = i(e, i(i(function(e, t, i) {
                            return t ^ (e | ~i);
                        }(s, n, r), a), d)), i(t(e, o), s);
                    }
                    function o(e) {
                        var t, i = "", s = "";
                        for(t = 0; t <= 3; t++)i += (s = "0" + (e >>> 8 * t & 255).toString(16)).substr(s.length - 2, 2);
                        return i;
                    }
                    var d, c, u, l, h, p, f, g, m, v = Array();
                    for(v = function(e) {
                        for(var t, i = e.length, s = i + 8, n = 16 * ((s - s % 64) / 64 + 1), r = Array(n - 1), a = 0, o = 0; o < i;)a = o % 4 * 8, r[t = (o - o % 4) / 4] = r[t] | e.charCodeAt(o) << a, o++;
                        return a = o % 4 * 8, r[t = (o - o % 4) / 4] = r[t] | 128 << a, r[n - 2] = i << 3, r[n - 1] = i >>> 29, r;
                    }(e = function(e) {
                        e = e.replace(/rn/g, "n");
                        for(var t = "", i = 0; i < e.length; i++){
                            var s = e.charCodeAt(i);
                            s < 128 ? t += String.fromCharCode(s) : s > 127 && s < 2048 ? (t += String.fromCharCode(s >> 6 | 192), t += String.fromCharCode(63 & s | 128)) : (t += String.fromCharCode(s >> 12 | 224), t += String.fromCharCode(s >> 6 & 63 | 128), t += String.fromCharCode(63 & s | 128));
                        }
                        return t;
                    }(e)), p = 1732584193, f = 4023233417, g = 2562383102, m = 271733878, d = 0; d < v.length; d += 16)c = p, u = f, l = g, h = m, p = s(p, f, g, m, v[d + 0], 7, 3614090360), m = s(m, p, f, g, v[d + 1], 12, 3905402710), g = s(g, m, p, f, v[d + 2], 17, 606105819), f = s(f, g, m, p, v[d + 3], 22, 3250441966), p = s(p, f, g, m, v[d + 4], 7, 4118548399), m = s(m, p, f, g, v[d + 5], 12, 1200080426), g = s(g, m, p, f, v[d + 6], 17, 2821735955), f = s(f, g, m, p, v[d + 7], 22, 4249261313), p = s(p, f, g, m, v[d + 8], 7, 1770035416), m = s(m, p, f, g, v[d + 9], 12, 2336552879), g = s(g, m, p, f, v[d + 10], 17, 4294925233), f = s(f, g, m, p, v[d + 11], 22, 2304563134), p = s(p, f, g, m, v[d + 12], 7, 1804603682), m = s(m, p, f, g, v[d + 13], 12, 4254626195), g = s(g, m, p, f, v[d + 14], 17, 2792965006), p = n(p, f = s(f, g, m, p, v[d + 15], 22, 1236535329), g, m, v[d + 1], 5, 4129170786), m = n(m, p, f, g, v[d + 6], 9, 3225465664), g = n(g, m, p, f, v[d + 11], 14, 643717713), f = n(f, g, m, p, v[d + 0], 20, 3921069994), p = n(p, f, g, m, v[d + 5], 5, 3593408605), m = n(m, p, f, g, v[d + 10], 9, 38016083), g = n(g, m, p, f, v[d + 15], 14, 3634488961), f = n(f, g, m, p, v[d + 4], 20, 3889429448), p = n(p, f, g, m, v[d + 9], 5, 568446438), m = n(m, p, f, g, v[d + 14], 9, 3275163606), g = n(g, m, p, f, v[d + 3], 14, 4107603335), f = n(f, g, m, p, v[d + 8], 20, 1163531501), p = n(p, f, g, m, v[d + 13], 5, 2850285829), m = n(m, p, f, g, v[d + 2], 9, 4243563512), g = n(g, m, p, f, v[d + 7], 14, 1735328473), p = r(p, f = n(f, g, m, p, v[d + 12], 20, 2368359562), g, m, v[d + 5], 4, 4294588738), m = r(m, p, f, g, v[d + 8], 11, 2272392833), g = r(g, m, p, f, v[d + 11], 16, 1839030562), f = r(f, g, m, p, v[d + 14], 23, 4259657740), p = r(p, f, g, m, v[d + 1], 4, 2763975236), m = r(m, p, f, g, v[d + 4], 11, 1272893353), g = r(g, m, p, f, v[d + 7], 16, 4139469664), f = r(f, g, m, p, v[d + 10], 23, 3200236656), p = r(p, f, g, m, v[d + 13], 4, 681279174), m = r(m, p, f, g, v[d + 0], 11, 3936430074), g = r(g, m, p, f, v[d + 3], 16, 3572445317), f = r(f, g, m, p, v[d + 6], 23, 76029189), p = r(p, f, g, m, v[d + 9], 4, 3654602809), m = r(m, p, f, g, v[d + 12], 11, 3873151461), g = r(g, m, p, f, v[d + 15], 16, 530742520), p = a(p, f = r(f, g, m, p, v[d + 2], 23, 3299628645), g, m, v[d + 0], 6, 4096336452), m = a(m, p, f, g, v[d + 7], 10, 1126891415), g = a(g, m, p, f, v[d + 14], 15, 2878612391), f = a(f, g, m, p, v[d + 5], 21, 4237533241), p = a(p, f, g, m, v[d + 12], 6, 1700485571), m = a(m, p, f, g, v[d + 3], 10, 2399980690), g = a(g, m, p, f, v[d + 10], 15, 4293915773), f = a(f, g, m, p, v[d + 1], 21, 2240044497), p = a(p, f, g, m, v[d + 8], 6, 1873313359), m = a(m, p, f, g, v[d + 15], 10, 4264355552), g = a(g, m, p, f, v[d + 6], 15, 2734768916), f = a(f, g, m, p, v[d + 13], 21, 1309151649), p = a(p, f, g, m, v[d + 4], 6, 4149444226), m = a(m, p, f, g, v[d + 11], 10, 3174756917), g = a(g, m, p, f, v[d + 2], 15, 718787259), f = a(f, g, m, p, v[d + 9], 21, 3951481745), p = i(p, c), f = i(f, u), g = i(g, l), m = i(m, h);
                    return (o(p) + o(f) + o(g) + o(m)).toLowerCase();
                };
            },
            1075: (e, t, i)=>{
                var s = i(550), n = i(6477), r = s.extend({
                    on: function(e, t) {
                        if (this._listeners = this._listeners || {}, "function" == typeof t) return this._listeners[e] = this._listeners[e] || [], this._listeners[e].push(t), this;
                    },
                    off: function(e, t) {
                        if (this._listeners = this._listeners || {}, this._listeners[e]) {
                            var i = this._listeners[e].indexOf(t);
                            -1 !== i && this._listeners[e].splice(i, 1);
                        }
                        return this;
                    },
                    emit: function(e, t) {
                        return this._listeners = this._listeners || {}, t = t || {}, n(this._listeners[e]) && this._listeners[e].forEach(this._eachCallback.bind(this, e, t)), n(this._listeners["*"]) && this._listeners["*"].forEach(this._eachCallback.bind(this, e, t)), this;
                    },
                    _eachCallback: function(e, t, i) {
                        "function" == typeof i && i({
                            type: e,
                            data: t,
                            target: this
                        });
                    }
                });
                e.exports = r;
            },
            1311: (e)=>{
                e.exports = function(e) {
                    if (null == e) throw new TypeError("Cannot convert undefined or null to object");
                    for(var t = Object(e), i = 1; i < arguments.length; i++){
                        var s = arguments[i];
                        if (null != s) for(var n in s)s.hasOwnProperty(n) && (t[n] = s[n]);
                    }
                    return t;
                };
            },
            8538: (e)=>{
                var t = function() {};
                e.exports = function(e) {
                    if (arguments.length > 1) throw Error("Second argument not supported");
                    if (null === e) throw Error("Cannot set a null [[Prototype]]");
                    if ("object" != typeof e) throw TypeError("Argument must be an object");
                    return t.prototype = e, new t;
                };
            },
            6477: (e)=>{
                e.exports = function(e) {
                    return "[object Array]" === Object.prototype.toString.call(e);
                };
            },
            8827: (e, t, i)=>{
                var s = i(550), n = i(232), r = s.extend({
                    constructor: function(e) {
                        if (this.appAnalytics = e.appAnalytics, this.timeObject = void 0, this.playerSetup = void 0, this.myTimesObject = {}, this.perfObject = void 0, "undefined" != typeof window && "function" == typeof window.addEventListener && (window.addEventListener("load", this._windowLoaded.bind(this)), window.performance && window.performance.timing)) {
                            try {
                                "function" == typeof window.performance.getEntriesByType && (this.perfObject = window.performance);
                            } catch (e) {}
                            this.timeObject = window.performance.timing;
                        }
                        try {
                            if ("function" == typeof PerformanceObserver) {
                                const e = new PerformanceObserver((e, t)=>{
                                    const i = e.getEntries();
                                    this.myTimesObject.largestContentfulPaint = i[i.length - 1].renderTime;
                                });
                                PerformanceObserver.supportedEntryTypes.indexOf("largest-contentful-paint") > -1 && e.observe({
                                    entryTypes: [
                                        "largest-contentful-paint"
                                    ]
                                });
                            }
                        } catch (e) {}
                    },
                    _windowLoaded: function() {
                        this.myTimesObject.onLoad = (new Date).getTime(), this._getEnoughFPS(), setTimeout(this._fireLoadTimesEvent.bind(this), 1e3);
                    },
                    _fireLoadTimesEvent: function() {
                        this._getLastMetrics(), this.appAnalytics && this.appAnalytics.fireEvent("loadTimes", {}, this._getAllValues());
                    },
                    _getAllValues: function() {
                        const e = {
                            PageLoadTime: this.getPageLoadTime(),
                            DNSTime: this.getDnsTime(),
                            TCPTime: this.getTcpTime(),
                            HandshakeTime: this.getHandshakeTime(),
                            DomReadyTime: this.getDomReadyTime(),
                            BackendTime: this.getBackendTime(),
                            FrontendTime: this.getFrontendTime(),
                            VisualReady: this.getTimeToVisuallyReady(),
                            TimeToInteractive: this.getTimeToInteractive(),
                            JsTime: this.getJSTime(),
                            CssTime: this.getCSSTime(),
                            ImageTime: this.getImageTime(),
                            FontTime: this.getFontTime(),
                            AvgReqLatency: this.getAvgReqLatency(),
                            MaxReqLatency: this.getMaxReqLatency(),
                            FirstPaint: this.getFirstPaint(),
                            FirstContentfulPaint: this.getFirstContentfulPaint(),
                            LargestContentfulPaint: this.getLargestContentfulPaint(),
                            SpeedIndex: this.getSpeedIndex()
                        };
                        for(const t in e)null === e[t] || void 0 === e[t] || e[t] < 0 ? delete e[t] : e[t] = Math.round(e[t]);
                        return e;
                    },
                    getPageLoadTime: function() {
                        let e;
                        return this.timeObject && (e = this.timeObject.loadEventEnd - this.timeObject.navigationStart), e;
                    },
                    getPlayerStartupTime: function() {
                        let e;
                        return this.timeObject && this.playerSetup && (e = this.playerSetup - this.timeObject.navigationStart), e;
                    },
                    getDnsTime: function() {
                        let e;
                        return this.timeObject && (e = this.timeObject.domainLookupEnd - this.timeObject.domainLookupStart), e;
                    },
                    getTcpTime: function() {
                        let e;
                        return this.timeObject && (e = this.timeObject.connectEnd - this.timeObject.connectStart), e;
                    },
                    getHandshakeTime: function() {
                        let e;
                        return this.timeObject && this.timeObject.secureConnectionStart && (e = this.timeObject.connectEnd - this.timeObject.secureConnectionStart), e;
                    },
                    getDomReadyTime: function() {
                        let e;
                        return this.timeObject && (e = this.timeObject.domComplete - this.timeObject.navigationStart), e;
                    },
                    getBackendTime: function() {
                        let e;
                        return this.timeObject && (e = this.timeObject.responseStart - this.timeObject.navigationStart), e;
                    },
                    getFrontendTime: function() {
                        let e;
                        return this.timeObject && (e = this.myTimesObject.onLoad - this.timeObject.responseStart), e;
                    },
                    getTimeToVisuallyReady: function() {
                        const e = this.myTimesObject.firstPaint || 0;
                        return this.timeObject ? Math.max(e, this.timeObject.domContentLoadedEventEnd - this.timeObject.navigationStart || 0) : e || void 0;
                    },
                    getTimeToInteractive: function() {
                        if (this.myTimesObject.fps && this.getTimeToVisuallyReady()) return Math.max(this.myTimesObject.fps, this.getTimeToVisuallyReady());
                        setTimeout(()=>{
                            this.getTimeToInteractive();
                        }, 500);
                    },
                    getJSTime: function() {
                        return this._getXTime("script");
                    },
                    getCSSTime: function() {
                        return this._getXTime("css");
                    },
                    getImageTime: function() {
                        return this._getXTime("img");
                    },
                    getFontTime: function() {
                        return this._getXTime("css", [
                            ".woff",
                            ".otf",
                            ".ttf"
                        ]);
                    },
                    getAvgReqLatency: function() {
                        try {
                            if (this.perfObject && "function" == typeof this.perfObject.getEntriesByType) {
                                let t = 0, i = 0;
                                const s = this.perfObject.getEntriesByType("resource");
                                for(var e in s)s[e].requestStart && s[e].responseStart && (i += s[e].responseStart - s[e].requestStart), t++;
                                return i / t;
                            }
                        } catch (e) {}
                    },
                    getFirstPaint: function() {
                        return this.myTimesObject ? this.myTimesObject.firstPaint : void 0;
                    },
                    getFirstContentfulPaint: function() {
                        return this.myTimesObject ? this.myTimesObject.firstContentfulPaint : void 0;
                    },
                    getLargestContentfulPaint: function() {
                        return this.myTimesObject ? this.myTimesObject.largestContentfulPaint : void 0;
                    },
                    getMaxReqLatency: function() {
                        try {
                            if (this.perfObject && "function" == typeof this.perfObject.getEntriesByType) {
                                const e = this.perfObject.getEntriesByType("resource");
                                let t = 0;
                                for(const i in e)e[i].requestStart && e[i].responseStart && (t = Math.max(t, e[i].responseStart - e[i].requestStart));
                                return t;
                            }
                        } catch (e) {}
                    },
                    getSpeedIndex: function() {
                        let e;
                        if ("undefined" != typeof window && window.performance && "function" == typeof window.performance.getEntriesByType) try {
                            e = n();
                        } catch (e) {}
                        return e;
                    },
                    _getXTime: function(e, t) {
                        let i = 0;
                        try {
                            if (this.perfObject && "function" == typeof this.perfObject.getEntriesByType) {
                                const n = this.perfObject.getEntriesByType("resource");
                                for(const r in n)if (n[r].initiatorType === e) {
                                    if (t) {
                                        let e = !1;
                                        for(var s in t)n[r].name.indexOf(t[s] > 0) && (e = !0);
                                        e && (i += n[r].duration);
                                    } else i += n[r].duration;
                                }
                            }
                        } catch (e) {}
                        return Math.round(i) || void 0;
                    },
                    _getLastMetrics: function() {
                        let e, t;
                        try {
                            if (this.perfObject && "function" == typeof this.perfObject.getEntriesByType) {
                                const i = this.perfObject.getEntriesByType("paint");
                                for(const s in i)"first-paint" === i[s].name ? e = i[s].startTime : "first-contentful-paint" === i[s].name && (t = i[s].startTime);
                            }
                        } catch (e) {}
                        !e && this.timeObject && (e = this.timeObject.msFirstPaint - this.timeObject.navigationStart), this.myTimesObject.firstPaint = e, this.myTimesObject.firstContentfulPaint = t, this.getTimeToInteractive();
                    },
                    _getEnoughFPS: function() {
                        if (!this.timeObject || "undefined" == typeof window) return !0;
                        {
                            const e = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function() {};
                            this.preFPS = (new Date).getTime(), e(()=>{
                                const e = (new Date).getTime();
                                e < this.preFPS + 50 ? this.myTimesObject.fps = e - this.timeObject.navigationStart : setTimeout(()=>this._getEnoughFPS(), 50);
                            });
                        }
                    },
                    setPlayerSetupTime: function() {
                        this.playerSetup = this.playerSetup || (new Date).getTime();
                    }
                });
                e.exports = r;
            },
            4833: (e, t, i)=>{
                var s = i(550).extend({
                    getCdnTraffic: function() {
                        let e;
                        if ("undefined" != typeof CdnBalancerStats && CdnBalancerStats.cdn) e = CdnBalancerStats.cdn.totalDownloadedBytes;
                        else if ("undefined" != typeof Streamroot) e = this._getStreamrootPeerObject("cdn", !1) || this._getStreamrootInstanceObject("cdnDownload");
                        else if ("undefined" != typeof peer5 && peer5.getStats) e = peer5.getStats().totalHttpDownloaded;
                        else if ("undefined" != typeof teltoo && teltoo.getStats) {
                            var t = teltoo.getStats();
                            e = t.totalReceivedBytes - t.p2pReceivedBytes;
                        }
                        return e;
                    },
                    getMultiCdnInfo: function() {
                        let e;
                        if ("undefined" != typeof CdnBalancerStats && CdnBalancerStats.cdn && CdnBalancerStats.cdn.cdns) {
                            const t = CdnBalancerStats.p2p;
                            e = {
                                P2P: {
                                    downloaded_bytes: t.downloadedBytes,
                                    uploaded_bytes: t.uploadedBytes,
                                    downloaded_chunks: t.downloadedSegments,
                                    uploaded_chunks: t.uploadedSegments,
                                    errors: t.failedRequests ? t.failedRequests.total : 0,
                                    missed_downloaded_chunks: t.failedRequests ? t.failedRequests.absent : 0,
                                    timeout_errors: t.failedRequests ? t.failedRequests.timeout : 0,
                                    other_errors: t.failedRequests ? t.failedRequests.error : 0,
                                    late_uploaded_chunks: t.discardedUploadedSegments,
                                    late_uploaded_bytes: t.discardedUploadedBytes,
                                    late_downloaded_bytes: t.discardedDownloadedBytes,
                                    time: t.downloadMillis,
                                    active_peers: t.activePeers,
                                    peers: t.totalPeers
                                }
                            }, CdnBalancerStats.cdn.cdns.forEach(function(t) {
                                e[t.name] = {
                                    downloaded_bytes: t.bytes,
                                    downloaded_chunks: t.chunks,
                                    errors: t.failures,
                                    time: t.downloadMillis
                                };
                            });
                        }
                        return e;
                    },
                    getSegmentDuration: function() {
                        if ("undefined" != typeof CdnBalancerStats && CdnBalancerStats.segmentDuration) return CdnBalancerStats.segmentDuration;
                    },
                    getBalancerResponseId: function() {
                        if ("undefined" != typeof CdnBalancerStats && CdnBalancerStats.cdn) return CdnBalancerStats.cdn.responseUUID;
                    },
                    getP2PTraffic: function() {
                        let e;
                        return "undefined" != typeof CdnBalancerStats && CdnBalancerStats.p2p ? e = CdnBalancerStats.p2p.downloadedBytes : "undefined" != typeof Streamroot ? e = this._getStreamrootPeerObject("p2p", !0) || this._getStreamrootInstanceObject("dnaDownload") : "undefined" != typeof peer5 && peer5.getStats ? e = peer5.getStats().totalP2PDownloaded : "undefined" != typeof teltoo && teltoo.getStats && (e = teltoo.getStats().p2pReceivedBytes), e;
                    },
                    getUploadTraffic: function() {
                        let e;
                        return "undefined" != typeof CdnBalancerStats && CdnBalancerStats.p2p ? e = CdnBalancerStats.p2p.uploadedBytes : "undefined" != typeof Streamroot ? e = this._getStreamrootPeerObject("upload", !0) || this._getStreamrootInstanceObject("dnaUpload") : "undefined" != typeof peer5 && peer5.getStats && (e = peer5.getStats().totalP2PUploaded), e;
                    },
                    getIsP2PEnabled: function() {
                        let e = !1;
                        if ("undefined" != typeof CdnBalancerStats && CdnBalancerStats.p2p) e = CdnBalancerStats.p2p.downloadEnabled;
                        else if ("undefined" != typeof Streamroot) {
                            if (Streamroot.p2pAvailable && Streamroot.peerAgents) for(var t in Streamroot.peerAgents)e = e || Streamroot.peerAgents[t].isP2PEnabled;
                            else Streamroot.instances && Streamroot.instances.forEach(function(t) {
                                e = e || t.dnaDownloadEnabled || t.dnaUploadEnabled;
                            });
                        } else "undefined" != typeof peer5 && peer5.isEnabled ? e = peer5.isEnabled() : "undefined" != typeof teltoo && (e = !0);
                        return e;
                    },
                    _getStreamrootPeerObject: function(e, t) {
                        let i = "";
                        if (Streamroot.p2pAvailable && Streamroot.peerAgents) for(const s in Streamroot.peerAgents){
                            const n = Streamroot.peerAgents[s];
                            !n.stats || t && !n.isP2PEnabled || (i += n.stats[e]);
                        }
                        return i.length > 0 ? i : void 0;
                    },
                    _getStreamrootInstanceObject: function(e) {
                        let t = "";
                        return Streamroot.instances && Streamroot.instances.forEach(function(i) {
                            i.stats && i.stats.currentContent && (t += i.stats.currentContent[e]);
                        }), t.length > 0 ? t : void 0;
                    }
                });
                e.exports = s;
            },
            232: (e)=>{
                var t = function(e) {
                    var i, s, n = (e = e || window).document, r = function(t) {
                        var i = !1;
                        if (t.getBoundingClientRect) {
                            var s = t.getBoundingClientRect();
                            (i = {
                                top: Math.max(s.top, 0),
                                left: Math.max(s.left, 0),
                                bottom: Math.min(s.bottom, e.innerHeight || n.documentElement.clientHeight),
                                right: Math.min(s.right, e.innerWidth || n.documentElement.clientWidth)
                            }).bottom <= i.top || i.right <= i.left ? i = !1 : i.area = (i.bottom - i.top) * (i.right - i.left);
                        }
                        return i;
                    }, a = function(e, t) {
                        if (t) {
                            var i = r(e);
                            i && o.push({
                                url: t,
                                area: i.area,
                                rect: i
                            });
                        }
                    }, o = [], d = [];
                    try {
                        var c = e.performance.timing.navigationStart;
                        !function() {
                            for(var i = n.getElementsByTagName("*"), s = /url\(.*(http.*)\)/gi, d = 0; d < i.length; d++){
                                var c = i[d], u = e.getComputedStyle(c);
                                if ("IMG" === c.tagName && a(c, c.src), u["background-image"]) {
                                    s.lastIndex = 0;
                                    var l = s.exec(u["background-image"]);
                                    l && l.length > 1 && a(c, l[1].replace('"', ""));
                                }
                                if ("IFRAME" === c.tagName) try {
                                    var h = r(c);
                                    if (h) {
                                        var p = t(c.contentWindow);
                                        p && o.push({
                                            tm: p,
                                            area: h.area,
                                            rect: h
                                        });
                                    }
                                } catch (e) {}
                            }
                        }(), function() {
                            for(var t = {}, i = e.performance.getEntriesByType("resource"), s = 0; s < i.length; s++)t[i[s].name] = i[s].responseEnd;
                            for(var n = 0; n < o.length; n++)"tm" in o[n] || (o[n].tm = void 0 !== t[o[n].url] ? t[o[n].url] : 0);
                        }(), function() {
                            "msFirstPaint" in e.performance.timing && (i = e.performance.timing.msFirstPaint - c);
                            for(var t = e.performance.getEntriesByType("paint"), s = 0; s < t.length; s++)"first-paint" === t[s].name && (i = t[s].startTime);
                            if (void 0 === i || i < 0 || i > 12e4) {
                                i = e.performance.timing.responseStart - c;
                                for(var r = {}, a = n.getElementsByTagName("head")[0].children, o = 0; o < a.length; o++){
                                    var d = a[o];
                                    "SCRIPT" === d.tagName && d.src && !d.async && (r[d.src] = !0), "LINK" === d.tagName && "stylesheet" === d.rel && d.href && (r[d.href] = !0);
                                }
                                for(var u = e.performance.getEntriesByType("resource"), l = !1, h = 0; h < u.length; h++)if (l || !r[u[h].name] || "script" !== u[h].initiatorType && "link" !== u[h].initiatorType) l = !0;
                                else {
                                    var p = u[h].responseEnd;
                                    (void 0 === i || p > i) && (i = p);
                                }
                            }
                            i = Math.max(i, 0);
                        }(), function() {
                            for(var t = {
                                0: 0
                            }, s = 0, r = 0; r < o.length; r++){
                                var a = i;
                                "tm" in o[r] && o[r].tm > i && (a = o[r].tm), void 0 === t[a] && (t[a] = 0), t[a] += o[r].area, s += o[r].area;
                            }
                            var c = Math.max(n.documentElement.clientWidth, e.innerWidth || 0) * Math.max(n.documentElement.clientHeight, e.innerHeight || 0);
                            if (c > 0 && (c = .1 * Math.max(c - s, 0), void 0 === t[i] && (t[i] = 0), t[i] += c, s += c), s) {
                                for(var u in t)t.hasOwnProperty(u) && d.push({
                                    tm: u,
                                    area: t[u]
                                });
                                d.sort(function(e, t) {
                                    return e.tm - t.tm;
                                });
                                for(var l = 0, h = 0; h < d.length; h++)l += d[h].area, d[h].progress = l / s;
                            }
                        }(), function() {
                            if (d.length) {
                                s = 0;
                                for(var e = 0, t = 0, n = 0; n < d.length; n++){
                                    var r = d[n].tm - e;
                                    r > 0 && t < 1 && (s += (1 - t) * r), e = d[n].tm, t = d[n].progress;
                                }
                            } else s = i;
                        }();
                    } catch (e) {}
                    return s;
                };
                e.exports = t;
            },
            9264: (e, t, i)=>{
                var s = n, n = {
                    noConflict: function() {
                        return n = s, this;
                    }
                };
                n.VERSION = i(9965), n.polyfills = i(8465), n.polyfills(), n.Object = i(550), n.Emitter = i(1075);
                const { default: r } = i(3582);
                n.Log = r, n.Log.loadLevelFromUrl(), n.Util = i(8661), n.HybridNetwork = i(4833), n.Chrono = i(3598), n.Timer = i(1516), n.Constants = i(5100), n.Transform = i(1073), n.ResourceTransform = i(4609), n.CdnParser = i(6082), n.HlsParser = i(4090), n.DashParser = i(3269), n.LocationheaderParser = i(4135), n.Options = i(7499), n.Plugin = i(1870), n.Storage = i(4828), n.RequestBuilder = i(3569), n.PlayheadMonitor = i(4795), n.Adapter = i(2176), n.adapters = {}, n.BackgroundDetector = i(9675), n.DeviceDetector = i(7189), n.UUIDGenerator = i(6274), n.registerAdapter = (function(e, t) {
                    this.adapters[e] = t;
                }).bind(n), n.unregisterAdapter = (function(e) {
                    this.adapters[e] = null;
                }).bind(n), e.exports = n;
            },
            550: (e, t, i)=>{
                var s = i(1311), n = i(8538), r = function() {};
                r.prototype = {
                    constructor: function() {}
                }, r.extend = function(e, t) {
                    var i, r = this;
                    return i = e && e.hasOwnProperty("constructor") ? e.constructor : function() {
                        return r.apply(this, arguments);
                    }, s(i, r, t), i.prototype = n(r.prototype), e && s(i.prototype, e), i.prototype.constructor = i, i.__super__ = r.prototype, i;
                }, e.exports = r;
            },
            7316: (e, t, i)=>{
                var s = i(550);
                const { default: n } = i(3582), { AnalyticsTag: r } = i(9982);
                var a = s.extend({
                    exists: function(e) {
                        return a.Dictionary.hasOwnProperty(e);
                    },
                    getNewName: function(e) {
                        var t = a.Dictionary[e];
                        return n.warn(r, 'The option "' + e + '" is deprecated, use "' + t + '" instead'), t;
                    }
                }, {
                    Dictionary: {
                        httpSecure: "app.https",
                        username: "user.name",
                        anonymousUser: "user.anonymousId",
                        obfuscateIp: "user.obfuscateIp",
                        userType: "user.type",
                        "content.title2": "content.program",
                        "background.settings.iphone": "background.settings.iOS",
                        "parse.hls": "parse.manifest",
                        "parse.dash": "parse.manifest",
                        "parse.locationHeader": "parse.manifest",
                        "extraparam.1": "content.customDimension.1",
                        "extraparam.2": "content.customDimension.2",
                        "extraparam.3": "content.customDimension.3",
                        "extraparam.4": "content.customDimension.4",
                        "extraparam.5": "content.customDimension.5",
                        "extraparam.6": "content.customDimension.6",
                        "extraparam.7": "content.customDimension.7",
                        "extraparam.8": "content.customDimension.8",
                        "extraparam.9": "content.customDimension.9",
                        "extraparam.10": "content.customDimension.10",
                        "extraparam.11": "content.customDimension.11",
                        "extraparam.12": "content.customDimension.12",
                        "extraparam.13": "content.customDimension.13",
                        "extraparam.14": "content.customDimension.14",
                        "extraparam.15": "content.customDimension.15",
                        "extraparam.16": "content.customDimension.16",
                        "extraparam.17": "content.customDimension.17",
                        "extraparam.18": "content.customDimension.18",
                        "extraparam.19": "content.customDimension.19",
                        "extraparam.20": "content.customDimension.20",
                        "ad.extraparam.1": "ad.customDimension.1",
                        "ad.extraparam.2": "ad.customDimension.2",
                        "ad.extraparam.3": "ad.customDimension.3",
                        "ad.extraparam.4": "ad.customDimension.4",
                        "ad.extraparam.5": "ad.customDimension.5",
                        "ad.extraparam.6": "ad.customDimension.6",
                        "ad.extraparam.7": "ad.customDimension.7",
                        "ad.extraparam.8": "ad.customDimension.8",
                        "ad.extraparam.9": "ad.customDimension.9",
                        "ad.extraparam.10": "ad.customDimension.10"
                    }
                });
                e.exports = a;
            },
            5129: (e, t, i)=>{
                var s = i(550), n = i(4828), r = s.extend({
                    constructor: function() {
                        this.storage = new n("npawOffline", !0), this.actualView = null, this.viewList = [], this.givenIds = [], this._getOldViewList();
                    },
                    _newView: function() {
                        var e = this._getValidId();
                        this.storage.setLocal(e, ""), this.viewList.push(e), this.storage.setLocal("views", this.viewList), this.actualView = e;
                    },
                    addEvent: function(e, t) {
                        if ("/start" === e && this._newView(), "/init" === e) return null;
                        if (!this.actualView) return null;
                        var i = '{"request":"' + e.slice(1) + '",';
                        for(var s in i += '"unixtime":' + Date.now() + ",", t){
                            if (void 0 === t[s]) break;
                            i += '"' + s + '":', "code" === s ? i += '"CODE_PLACEHOLDER",' : "sessionId" === s ? i += '"SESSION_PLACEHOLDER",' : "sessionRoot" === s ? i += '"ROOT_PLACEHOLDER",' : "string" == typeof t[s] ? i += '"' + t[s] + '",' : "object" == typeof t[s] ? i += '"' + JSON.stringify(t[s]).replace(/"/g, '\\"') + '",' : i += t[s] + ",";
                        }
                        i = i.slice(0, -1), i += "}";
                        var n = this.storage.getLocal(this.actualView);
                        "" !== n && (n += ","), this.storage.setLocal(this.actualView, n + i);
                    },
                    getView: function() {
                        if (this.viewList.length > this.givenIds.length) for(var e = 0;;){
                            var t = this.viewList[e];
                            if (this.givenIds.indexOf(t) < 0) return this.givenIds.push(t), [
                                "[" + this.storage.getLocal(t) + "]",
                                t
                            ];
                            e++;
                        }
                        return [
                            null,
                            null
                        ];
                    },
                    removeView: function(e) {
                        this.storage.removeLocal(e);
                        var t = this.viewList.indexOf(e);
                        -1 !== t && this.viewList.splice(t, 1), -1 !== (t = this.givenIds.indexOf(e)) && this.givenIds.splice(t, 1), this.storage.setLocal("views", this.viewList.toString()), e === this.actualView && (this.actualView = null);
                    },
                    _getOldViewList: function() {
                        var e = "";
                        this.storage.getLocal("views") ? e = this.storage.getLocal("views") : this.storage.setLocal("views", ""), "" === e ? this.viewList = [] : "function" == typeof e.split && (this.viewList = e.split(","));
                    },
                    _getValidId: function() {
                        var e = Math.floor(1e8 * Math.random()).toString();
                        return this.viewList.indexOf(e) >= 0 ? this._getValidId() : e;
                    },
                    sent: function() {
                        this.givenIds = [];
                    }
                });
                e.exports = r;
            },
            7499: (e, t, i)=>{
                const s = i(550), n = i(7316), { default: r } = i(3582), a = i(3197), o = i(1310), d = i(859), { AnalyticsTag: c } = i(9982);
                var u = s.extend({
                    constructor: function(e) {
                        this.enabled = !0, this.authToken = void 0, this.authType = "Bearer", this.preventZombieViews = !0, this.offline = !1, this.referer = void 0, this.referral = void 0, this.disableCookies = !0, this.forceCookies = !1, this.disableStorage = !1, this["user.email"] = void 0, this["user.type"] = void 0, this["user.name"] = void 0, this["user.obfuscateIp"] = !1, this["user.anonymousId"] = void 0, this["user.privacyProtocol"] = void 0, this["parse.manifest"] = !1, this["parse.manifest.auth"] = {}, this["parse.cdnNameHeader"] = [
                            "x-cdn-forward"
                        ], this["parse.cdnNodeHeader"] = "", this["parse.cdnNode"] = !1, this["parse.cdnNode.list"] = [
                            "Akamai",
                            "Amazon",
                            "Cloudfront",
                            "Level3",
                            "Fastly",
                            "Highwinds",
                            "Telefonica",
                            "Edgecast",
                            "NosOtt"
                        ], this["parse.fdsResponseHost"] = void 0, this["parse.cdnSwitchHeader"] = !1, this["parse.cdnTTL"] = 60, this["network.ip"] = void 0, this["network.isp"] = void 0, this["network.connectionType"] = void 0, this["device.id"] = void 0, this["device.code"] = void 0, this["device.model"] = void 0, this["device.brand"] = void 0, this["device.type"] = void 0, this["device.name"] = void 0, this["device.osName"] = void 0, this["device.osVersion"] = void 0, this["device.browserName"] = void 0, this["device.browserVersion"] = void 0, this["device.browserType"] = void 0, this["device.browserEngine"] = void 0, this["device.EDID"] = void 0, this["device.isAnonymous"] = !1, this["content.transactionCode"] = void 0, this["content.resource"] = void 0, this["content.isLive"] = void 0, this["content.isLive.noSeek"] = !1, this["content.isLive.noMonitor"] = !1, this["content.title"] = void 0, this["content.program"] = void 0, this["content.duration"] = void 0, this["content.fps"] = void 0, this["content.segmentDuration"] = void 0, this["content.bitrate"] = void 0, this["content.totalBytes"] = void 0, this["content.sendTotalBytes"] = !1, this["content.throughput"] = void 0, this["content.rendition"] = void 0, this["content.cdn"] = void 0, this["content.cdnNode"] = void 0, this["content.cdnType"] = void 0, this["content.metadata"] = {}, this["content.metrics"] = {}, this["content.streamingProtocol"] = void 0, this["content.transportFormat"] = void 0, this["content.package"] = void 0, this["content.saga"] = void 0, this["content.tvShow"] = void 0, this["content.season"] = void 0, this["content.episodeTitle"] = void 0, this["content.channel"] = void 0, this["content.id"] = void 0, this["content.imdbId"] = void 0, this["content.gracenoteId"] = void 0, this["content.type"] = void 0, this["content.genre"] = void 0, this["content.language"] = void 0, this["content.autodetect.language"] = !0, this["content.subtitles"] = void 0, this["content.autodetect.subtitles"] = !0, this["content.contractedResolution"] = void 0, this["content.cost"] = void 0, this["content.price"] = void 0, this["content.playbackType"] = void 0, this["content.drm"] = void 0, this["content.encoding.videoCodec"] = void 0, this["content.encoding.audioCodec"] = void 0, this["content.encoding.codecSettings"] = void 0, this["content.encoding.codecProfile"] = void 0, this["content.encoding.containerFormat"] = void 0, this["ad.metadata"] = {}, this["ad.campaign"] = void 0, this["ad.creativeId"] = void 0, this["ad.provider"] = void 0, this["ad.resource"] = void 0, this["ad.title"] = void 0, this["ad.duration"] = void 0, this["ad.expectedPattern"] = void 0, this["ad.givenAds"] = void 0, this["ad.breaksTime"] = void 0, this["ad.expectedBreaks"] = void 0, this["ad.givenBreaks"] = void 0, this["ad.ignore"] = !1, this["ad.blockerDetected"] = void 0, this["ad.postRollTimeout"] = 1e3, this["app.name"] = void 0, this["app.releaseVersion"] = void 0, this["app.https"] = !0, this["background.enabled"] = !0, this["background.settings"] = void 0, this["background.settings.android"] = "stop", this["background.settings.iOS"] = "stop", this["background.settings.desktop"] = void 0, this["background.settings.tv"] = "stop", this["background.settings.playstation"] = "stop", this["smartswitch.configCode"] = void 0, this["smartswitch.groupCode"] = void 0, this["smartswitch.contractCode"] = void 0, this["content.customDimensions"] = {}, this["content.customDimension.1"] = void 0, this["content.customDimension.2"] = void 0, this["content.customDimension.3"] = void 0, this["content.customDimension.4"] = void 0, this["content.customDimension.5"] = void 0, this["content.customDimension.6"] = void 0, this["content.customDimension.7"] = void 0, this["content.customDimension.8"] = void 0, this["content.customDimension.9"] = void 0, this["content.customDimension.10"] = void 0, this["content.customDimension.11"] = void 0, this["content.customDimension.12"] = void 0, this["content.customDimension.13"] = void 0, this["content.customDimension.14"] = void 0, this["content.customDimension.15"] = void 0, this["content.customDimension.16"] = void 0, this["content.customDimension.17"] = void 0, this["content.customDimension.18"] = void 0, this["content.customDimension.19"] = void 0, this["content.customDimension.20"] = void 0, this["ad.customDimension.1"] = void 0, this["ad.customDimension.2"] = void 0, this["ad.customDimension.3"] = void 0, this["ad.customDimension.4"] = void 0, this["ad.customDimension.5"] = void 0, this["ad.customDimension.6"] = void 0, this["ad.customDimension.7"] = void 0, this["ad.customDimension.8"] = void 0, this["ad.customDimension.9"] = void 0, this["ad.customDimension.10"] = void 0, this.forceInit = !1, this["session.metrics"] = {}, this["session.context"] = !1, this["errors.fatal"] = [], this["errors.nonFatal"] = [], this["errors.ignore"] = [], this["pause.ignoreSmallEvents"] = !0, this["check.playerExists"] = !0, this["check.appAnalytics.autoBegin"] = !1, this["check.appAnalytics.enabled"] = !0, this["debug.playerLogs.enabled"] = !1, this["debug.pluginLogs.enabled"] = !1, this["check.videoAnalytics.enabled"] = !0, this["lma.refresh.configuration.enabled"] = !1, this["lma.refresh.configuration.seconds"] = 300, this.linkedViewId = void 0, this.waitForMetadata = !1, this.pendingMetadata = [], this.method = d.GET, this["playhead.monitor"] = !0, this["readyState.monitor"] = !0, this["adapters.overwrite"] = !1, this["adapters.templates"] = {}, this["adapters.properties"] = {}, this.enableExtraMetricCollection = !1, this.renditionQueryInterval = 250, this.enableLegacyBufferBehaviour = !1, this.setOptions(e);
                    },
                    setOptions: function(e, t) {
                        let i, s = !1;
                        if (void 0 === t && (t = this, s = !0, i = new n), void 0 !== e) for(var a in e){
                            let n, o = !1;
                            s && (this.hasOwnProperty(a) || (i.exists(a) ? (n = i.getNewName(a), o = !0) : "function" != typeof e[a] && r.warn(c, 'The option "' + a + '" does not exist, so it cannot be set'))), "object" != typeof t[a] || void 0 === t[a] || Array.isArray(t[a]) || "parse.cdnNode.list" !== a ? o ? t[n] = e[a] : t[a] = e[a] : this.setOptions(e[a], t[a]);
                        }
                    },
                    setExtraParams: function(e) {
                        if ("object" == typeof e && e.length) {
                            for(e.length >= 20 && (e = e.slice(0, 20)); e.length < 20;)e.push(void 0);
                            e.forEach((e, t)=>{
                                this["content.customDimension." + (t + 1).toString()] = e;
                            });
                        }
                    },
                    setCustomDimensions: function() {
                        u.prototype.setExtraParams.apply(this, arguments);
                    },
                    setAdExtraParams: function(e) {
                        if ("object" == typeof e && e.length) {
                            for(e.length >= 10 && (e = e.slice(0, 10)); e.length < 10;)e.push(void 0);
                            e.forEach((e, t)=>{
                                this["ad.customDimension." + (t + 1).toString()] = e;
                            });
                        }
                    },
                    setAdCustomDimensions: function() {
                        u.prototype.setAdExtraParams.apply(this, arguments);
                    },
                    setEnableLegacyBufferBehaviour: function() {
                        u.prototype.setEnableLegacyBufferBehaviour.apply(this, arguments);
                    }
                }, {
                    StreamingProtocol: o,
                    TransportFormat: a,
                    RequestMethod: d
                });
                e.exports = u;
            },
            1870: (e, t, i)=>{
                var s = i(1075), n = i(5100), r = i(8661);
                const { default: a } = i(3582);
                var o = i(829);
                const { default: d } = i(5657);
                var c = i(7499), u = i(4828), l = (i(5129), i(3569)), h = i(4609), p = i(8827), f = i(9675), g = i(7189), m = i(6274);
                const { default: v } = i(7829), { Method: y, AnalyticsTag: T } = i(9982), { default: S } = i(99), { default: E } = i(6443), { default: b } = i(9743);
                var A = s.extend({
                    constructor: function(e, t, s, n) {
                        if (A.instance) return t && (a.notice(T, "Set Options for already existing instance"), A.instance.setOptions(t), A.instance.storage.updateStorageOptions(A.instance.options.disableCookies, A.instance.options.forceCookies, A.instance.options.disableStorage)), s && (a.notice(T, "Set Adapter for already existing instance"), A.instance.setAdapter(s)), a.warn(T, "Only a single plugin instance can be created on npaw context"), A.instance;
                        this.options = new c(t), this.storage = new u(null, this.options.disableCookies, this.options.forceCookies, this.options.disableStorage), this.utils = i(8661), this.uuidGenerator = new m, this.videos = new o(this), this.analyticsRequestHandler = new d(this), this.adapterTemplates = {}, this.appAnalytics = e, this.requestBuilder = new l, this.resourceTransform = new h(this), this.lastEventTime = null, this.browserLoadTimes = new p(this), this.deviceDetector = new g, this.backgroundDetector = new f(this), this.options["background.enabled"] && this.backgroundDetector.startDetection(), s && this.setAdapter(s), this._logInitPluginEvent(t), navigator && navigator.userAgentData && "Windows" === navigator.userAgentData.platform && navigator.userAgentData.getHighEntropyValues && navigator.userAgentData.getHighEntropyValues([
                            "platformVersion"
                        ]).then((e)=>{
                            "Windows" === navigator.userAgentData.platform && (this.majorPlatformVersion = parseInt(e.platformVersion.split(".")[0]));
                        }), A.instance = this;
                    },
                    addOnWillSendRequestListener (e) {
                        this.analyticsRequestHandler.onWillSendVideoRequestListeners.push(e);
                    },
                    removeOnWillSendRequestListener (e) {
                        this.analyticsRequestHandler.onWillSendVideoRequestListeners = this.analyticsRequestHandler.onWillSendVideoRequestListeners.filter((t)=>t !== e);
                    },
                    destroy: function() {
                        this.videos.removeAllAdapters(), this.videos.videos = {};
                    },
                    _setAdapterTemplates: function(e) {
                        this.adapterTemplates = e;
                    },
                    _receiveConfiguration: function(e) {
                        try {
                            if (e.target.response.configurationOptions) {
                                var t = e.target.response.configurationOptions;
                                this.options.setOptions(t, this.options), this.videos.updateAllOptions(t);
                            }
                            this.isRefreshLMAConfigurationEnabled() && this.fastDataTransform && this.fastDataTransform._createConfigurationInterval();
                        } catch (e) {}
                    },
                    _reset: function(e) {
                        this.videos.resetVideo(e);
                    },
                    setOptions: function(e) {
                        if (this._logSetOptionsEvent(e), e) {
                            "boolean" == typeof e["parse.manifest"] && e["parse.manifest"] && (e.waitForMetadata = !0, e.pendingMetadata || (e.pendingMetadata = []), e.pendingMetadata.push("parsedResource")), this.options.setOptions(e), this.storage.updateStorageOptions(this.options.disableCookies, this.options.forceCookies, this.options.disableStorage);
                            for (const t of this.videos.getVideoKeys())this.setVideoOptions(e, t);
                            "boolean" == typeof e["background.enabled"] && (e["background.enabled"] ? this.backgroundDetector.startDetection() : this.backgroundDetector.stopDetection());
                        }
                        S.getInstance().registerCommonVariable(E.Products.VIDEO_ANALYTICS, E.AnalyticsVariables.METHOD_OPTION, b.methodFromString(e.method));
                    },
                    setVideoOptions: function(e, t) {
                        t = t || "default", e && t && this.videos.existsVideo(t) && Object.keys(e).length > 0 && this.videos.getVideo(t).setVideoOptions(e);
                    },
                    disable: function() {
                        this.setOptions({
                            enabled: !1
                        });
                    },
                    enable: function() {
                        this.setOptions({
                            enabled: !0
                        });
                    },
                    getPingTime: function() {
                        return S.getInstance().getFastDataService().getPingTime();
                    },
                    _logInitPluginEvent: function(e) {
                        var t = {
                            logs: e,
                            logAction: "initPlugin",
                            logType: "pluginMethod"
                        };
                        this._sendPluginLogs(t, this.isMethodPostEnabled());
                    },
                    _logSetAdapterEvent: function(e) {
                        var t = {
                            adapter: e,
                            logAction: "setAdapter",
                            logType: "pluginMethod"
                        };
                        this._sendPluginLogs(t, this.isMethodPostEnabled());
                    },
                    _logSetOptionsEvent: function(e) {
                        var t = {
                            logs: e,
                            logAction: "setOptions",
                            logType: "pluginMethod"
                        };
                        this._sendPluginLogs(t, this.isMethodPostEnabled());
                    },
                    _logReceiveDataEvent: function(e) {
                        var t = "";
                        e.data && e.data.target && e.data.target.response && e.data.target.response.msg && (t = JSON.parse(e.data.target.response.msg));
                        var i = {
                            logs: t,
                            logAction: "receiveData",
                            logType: "internalMethod"
                        };
                        this._sendPluginLogs(i, this.isMethodPostEnabled());
                    },
                    _sendPluginLogs: function(e, t) {
                        if (t = t || !1, this.isPluginLogsEnabled() && (e && e.logType && e.logAction && a.notice(T, "PluginLog " + e.logType + ": Action " + e.logAction), this.analyticsRequestHandler && null !== (e = this.requestBuilder.buildParams(e, n.Service.VIDEO_PLUGIN_LOGS, this)))) {
                            var i = t ? y.POST : y.GET;
                            const s = new v(n.Service.VIDEO_PLUGIN_LOGS, e, "", i);
                            this.analyticsRequestHandler.sendRequest(s);
                        }
                    }
                }, {
                    Event: n.WillSendEvent
                });
                r.assign(A.prototype, i(3958)), r.assign(A.prototype, i(4911)), r.assign(A.prototype, i(8907)), r.assign(A.prototype, i(4861)), r.assign(A.prototype, i(96)), A.instance = null, e.exports = A;
            },
            3958: (e, t, i)=>{
                const { default: s } = i(3582);
                var n = i(2176), r = i(1846);
                const { default: a } = i(4243), { AnalyticsTag: o } = i(9982);
                var d = {
                    registerAdapter: function(e, t, i, d) {
                        if (!t) return void s.error(o, "Register Adapter needs an adapter to initialize");
                        if (i = i || {}, d = d || "default", this.videos.existsVideo(d)) i = i || {}, this.videos.getVideo(d).mergeOptions(i), this.setAdapter(new n(d, this.videos.getVideo(d), this, this.adapterTemplates, e, t), d);
                        else {
                            var c = new r(d, this, this.options, null, null);
                            this.getNextViewIndex(c), i = i || {}, c.setVideoOptions(i), this.videos.setVideo(c);
                            var u = new n(d, c, this, this.adapterTemplates, e, t);
                            this.setAdapter(u, d);
                        }
                        a.getInstance().registeredPlayer(!0);
                        let l = i["content.resource"];
                        !l && this.videos.existsAdapter(d) && (l = this.videos.getAdapter(d).getURLToParse(), l || (l = this.videos.getAdapter(d).getResource())), this.resourceTransform.init(l);
                    },
                    setAdapter: function(e, t) {
                        if (t = t || "default", this.browserLoadTimes && this.browserLoadTimes.setPlayerSetupTime(), e.isSetAdapter()) s.warn(o, "Adapters can only be added to a single plugin");
                        else {
                            var i = this.getAdapter(t);
                            i && (e.flags = i.flags, e.chronos = i.chronos, e.fireEventsStruct = i.fireEventsStruct), this.removeAdapter(t), this.videos.setAdapter(e, t);
                        }
                    },
                    getAdapter: function(e) {
                        return e = e || "default", this.videos.getAdapter(e);
                    },
                    removeAdapter: function(e) {
                        e = e || "default", this.videos.existsVideo(e) && this.videos.removeAdapter(this.contentAdapterListeners, e);
                    },
                    getNextViewIndex: function(e) {
                        e.nextView();
                        let t = !0;
                        for(; t;){
                            let i = !1;
                            for (const t of this.videos.getVideoKeys().filter((t)=>t !== e.getVideoKey()))if (e.getViewCode() === this.videos.getVideo(t).getViewCode()) {
                                i = !0;
                                break;
                            }
                            i && e.nextView(), t = i;
                        }
                    }
                };
                e.exports = d;
            },
            4911: (e, t, i)=>{
                var s = i(2176), n = i(1846);
                const { default: r } = i(4243);
                var a = {
                    registerAdsAdapter: function(e, t, i, r) {
                        if (t) {
                            if (r = r || "default", this.videos.existsVideo(r)) this.videos.getVideo(r).mergeOptions(i), this.setAdsAdapter(new s(r, this.videos.getVideo(r), this, this.adapterTemplates, e, t), r);
                            else {
                                var a = new n(r, this, this.options, null, null);
                                a.mergeOptions(i), this.videos.setVideo(a);
                                var o = new s(r, a, this, this.adapterTemplates, e, t);
                                this.setAdsAdapter(o, r);
                            }
                        } else Log.error(AnalyticsTag, "Register Ads Adapter needs an adapter to initialize");
                    },
                    updateAdsAdapter: function(e, t) {
                        t = t || "default", e && (videoObj = this.videos.getVideo(t), videoObj && videoObj.getAdapter() && (adsAdapter = videoObj.getAdapter().getAdapterClass(e), adsAdapter && videoObj.setAdsAdapter(adsAdapter, this, !0)));
                    },
                    getAdsAdapter: function(e) {
                        return e = e || "default", this.videos.getVideo(e).getAdsAdapter();
                    },
                    setAdsAdapter: function(e, t) {
                        t = t || "default", this.videos.getVideo(t).setAdsAdapter(e, this), r.getInstance().registeredAdsPlayer(!0);
                    },
                    removeAdsAdapter: function(e) {
                        e = e || "default", this.videos.existsVideo(e) && this.videos.getVideo(e).removeAdsAdapter();
                    }
                };
                e.exports = a;
            },
            8907: (e, t, i)=>{
                var s = i(9965), n = i(8661), r = i(859);
                const { default: a } = i(99), { default: o } = i(6443);
                var d = {
                    getAccountCode: function() {
                        return a.getInstance().getFastDataService().getAccountCode();
                    },
                    getUsername: function(e) {
                        return this._getGenericOptionsValue("user.name", e);
                    },
                    getPluginVersion: function() {
                        return a.getPluginVersion();
                    },
                    getRequestNumber: function() {
                        return Math.random();
                    },
                    getUserType: function(e) {
                        return this._getGenericOptionsValue("user.type", e);
                    },
                    getAnonymousUser: function(e) {
                        return this._getGenericOptionsValue("user.anonymousId", e);
                    },
                    getReferer: function() {
                        let e = this.options.referer || "";
                        return !e && "undefined" != typeof window && window.location && (e = window.location.href), e;
                    },
                    getReferral: function() {
                        let e = this.options.referral || "";
                        return e || "undefined" == typeof document || (e = document.referrer), e;
                    },
                    getLanguage: function() {
                        let e;
                        return "undefined" != typeof navigator && (e = navigator.language), e;
                    },
                    getScreenResolution: function() {
                        let e;
                        try {
                            if (window && window.screen) {
                                const t = window.devicePixelRatio || 1;
                                e = window.screen.width * t + "x" + window.screen.height * t;
                            }
                        } catch (e) {}
                        return e;
                    },
                    getDeviceInfo: function(e) {
                        const t = {};
                        return this.getDeviceCode(e) && (t.deviceCode = this.getDeviceCode(e)), this.getModel(e) && (t.model = this.getModel(e)), this.getBrand(e) && (t.brand = this.getBrand(e)), this.getDeviceType(e) && (t.deviceType = this.getDeviceType(e)), this.getDeviceName(e) && (t.deviceName = this.getDeviceName(e)), this.getOsName(e) && (t.osName = this.getOsName(e)), this.getOsVersion(e) && (t.osVersion = this.getOsVersion(e)), this.getBrowserName(e) && (t.browserName = this.getBrowserName(e)), this.getBrowserVersion(e) && (t.browserVersion = this.getBrowserVersion(e)), this.getBrowserType(e) && (t.browserType = this.getBrowserType(e)), this.getBrowserEngine(e) && (t.browserEngine = this.getBrowserEngine(e)), t !== {} ? t : void 0;
                    },
                    getDeviceCode: function(e) {
                        return this._getGenericOptionsValue("device.code", e);
                    },
                    getModel: function(e) {
                        return this._getGenericOptionsValue("device.model", e);
                    },
                    getBrand: function(e) {
                        return this._getGenericOptionsValue("device.brand", e);
                    },
                    getDeviceType: function(e) {
                        return this._getGenericOptionsValue("device.type", e);
                    },
                    getDeviceName: function(e) {
                        return this._getGenericOptionsValue("device.name", e);
                    },
                    getOsName: function(e) {
                        return this._getGenericOptionsValue("device.osName", e);
                    },
                    getOsVersion: function(e) {
                        let t = this._getGenericOptionsValue("device.osVersion", e);
                        return void 0 === t && navigator && navigator.userAgentData && this.majorPlatformVersion && "Windows" === navigator.userAgentData.platform && this.majorPlatformVersion >= 13 && (t = "11"), t;
                    },
                    getBrowserName: function(e) {
                        return this._getGenericOptionsValue("device.browserName", e);
                    },
                    getBrowserVersion: function(e) {
                        return this._getGenericOptionsValue("device.browserVersion", e);
                    },
                    getBrowserType: function(e) {
                        return this._getGenericOptionsValue("device.browserType", e);
                    },
                    getBrowserEngine: function(e) {
                        return this._getGenericOptionsValue("device.browserEngine", e);
                    },
                    getIsBlocked: function(e) {
                        return this._getGenericOptionsValue("ad.blockerDetected", e);
                    },
                    isMethodPostEnabled: function() {
                        return this.options.method && this.options.method.toUpperCase() === r.POST;
                    },
                    getDeviceUUID: function(e) {
                        let t;
                        return !e["device.isAnonymous"] && e["device.id"] ? e["device.id"] : (this.options["device.isAnonymous"] || (t = this.options["device.id"] || this.uuidGenerator.getKey()), t);
                    },
                    getLibVersion: function() {
                        return s;
                    },
                    getAppName: function(e) {
                        return this._getGenericOptionsValue("app.name", e);
                    },
                    getAppReleaseVersion: function(e) {
                        return this._getGenericOptionsValue("app.releaseVersion", e);
                    },
                    getIp: function(e) {
                        return this._getGenericOptionsValue("network.ip", e);
                    },
                    getIsp: function(e) {
                        return this._getGenericOptionsValue("network.isp", e);
                    },
                    getConnectionType: function(e) {
                        return this._getGenericOptionsValue("network.connectionType", e);
                    },
                    getEDID: function(e) {
                        const t = this._getGenericOptionsValue("device.EDID", e);
                        return t ? t.toString() : void 0;
                    },
                    getObfuscateIp: function(e) {
                        return this._getGenericOptionsValue("user.obfuscateIp", e);
                    },
                    getPrivacyProtocol: function(e) {
                        let t = this._getGenericOptionsValue("user.privacyProtocol", e);
                        return "string" == typeof t && (t = t.toLowerCase()), "optin" === t || "optout" === t ? t : void 0;
                    },
                    getCustomDimensions: function(e) {
                        const t = this._getGenericOptionsValue("content.customDimensions", e);
                        return "object" == typeof t ? t : void 0;
                    },
                    getExtraparam1: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.1", e);
                    },
                    getExtraparam2: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.2", e);
                    },
                    getExtraparam3: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.3", e);
                    },
                    getExtraparam4: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.4", e);
                    },
                    getExtraparam5: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.5", e);
                    },
                    getExtraparam6: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.6", e);
                    },
                    getExtraparam7: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.7", e);
                    },
                    getExtraparam8: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.8", e);
                    },
                    getExtraparam9: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.9", e);
                    },
                    getExtraparam10: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.10", e);
                    },
                    getExtraparam11: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.11", e);
                    },
                    getExtraparam12: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.12", e);
                    },
                    getExtraparam13: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.13", e);
                    },
                    getExtraparam14: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.14", e);
                    },
                    getExtraparam15: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.15", e);
                    },
                    getExtraparam16: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.16", e);
                    },
                    getExtraparam17: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.17", e);
                    },
                    getExtraparam18: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.18", e);
                    },
                    getExtraparam19: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.19", e);
                    },
                    getExtraparam20: function(e) {
                        return this._getGenericOptionsValue("content.customDimension.20", e);
                    },
                    isParseManifest: function(e) {
                        return this._getGenericOptionsValue("parse.manifest", e);
                    },
                    isParseCdnNode: function(e) {
                        return this._getGenericOptionsValue("parse.cdnNode", e);
                    },
                    isCdnSwitch: function(e) {
                        return this._getGenericOptionsValue("parse.cdnSwitchHeader", e);
                    },
                    getParseCdnNodeList: function(e) {
                        return this._getGenericOptionsValue("parse.cdnNode.list", e);
                    },
                    getParseCdnNodeNameHeader: function(e) {
                        return this._getGenericOptionsValue("parse.cdnNameHeader", e);
                    },
                    getParseNodeHeader: function(e) {
                        return this._getGenericOptionsValue("parse.cdnNodeHeader", e);
                    },
                    canOverwriteAdapters: function(e) {
                        return n.parseBoolean(this._getGenericOptionsValue("adapters.overwrite", e));
                    },
                    getAdaptersProperties: function(e) {
                        return this._getGenericOptionsValue("adapters.properties", e);
                    },
                    getNetworkConnectionType: function() {
                        if (!this.options.enableExtraMetricCollection || !navigator || !navigator.connection) return;
                        const e = navigator.connection.type;
                        return [
                            "wimax"
                        ].includes(e) ? void 0 : e;
                    },
                    getNetworkCellType: function() {
                        if (this.options.enableExtraMetricCollection && navigator && navigator.connection) return this.getNetworkConnectionType() && "wifi" !== this.getNetworkConnectionType() ? navigator.connection.effectiveType : "none";
                    },
                    getNetworkSignalStrength: function() {},
                    getCpuUsed: function() {},
                    getMemoryUsed: function() {
                        if (this.options.enableExtraMetricCollection && performance && performance.memory) return performance.memory.usedJSHeapSize / 1024 / 1024;
                    },
                    getCacheStorageUsed: function() {
                        if (!this.options.enableExtraMetricCollection) return;
                        let e = 0;
                        if ("undefined" != typeof localStorage && localStorage) for(const t in localStorage)localStorage.hasOwnProperty(t) && (e += 2 * (localStorage[t].length + t.length));
                        if ("undefined" != typeof sessionStorage && sessionStorage) for(const t in sessionStorage)sessionStorage.hasOwnProperty(t) && (e += 2 * (sessionStorage[t].length + t.length));
                        return 0 != e ? e : void 0;
                    },
                    getTransferredTraffic: function() {
                        if (this.options.enableExtraMetricCollection) return a.getInstance().getCommonVariable(o.Products.BALANCER, o.BalancerVariables.BALANCER_TRAFFIC);
                    },
                    getImprovedBandwidth: function() {
                        if (this.options.enableExtraMetricCollection) return a.getInstance().getCommonVariable(o.Products.BALANCER, o.BalancerVariables.BALANCER_BITRATE);
                    },
                    isAppAnalyticsAutoBegin: function(e) {
                        return n.parseBoolean(this._getGenericOptionsValue("check.appAnalytics.autoBegin", e));
                    },
                    isAppAnalyticsEnabled: function(e) {
                        return n.parseBoolean(this._getGenericOptionsValue("check.appAnalytics.enabled", e));
                    },
                    isVideoAnalyticsEnabled: function(e) {
                        return n.parseBoolean(this._getGenericOptionsValue("check.videoAnalytics.enabled", e));
                    },
                    isRefreshLMAConfigurationEnabled: function(e) {
                        return n.parseBoolean(this._getGenericOptionsValue("lma.refresh.configuration.enabled", e));
                    },
                    isPluginLogsEnabled: function(e) {
                        return n.parseBoolean(this._getGenericOptionsValue("debug.pluginLogs.enabled", e));
                    },
                    isPlayerLogsEnabled: function(e) {
                        return n.parseBoolean(this._getGenericOptionsValue("debug.playerLogs.enabled", e));
                    },
                    refreshLMAConfigurationSeconds: function(e) {
                        return this._getGenericOptionsValue("lma.refresh.configuration.seconds", e);
                    },
                    getPlayheadMonitorEnabled: function(e) {
                        return this._getGenericOptionsValue("playhead.monitor", e);
                    },
                    getReadyStateMonitorEnabled: function(e) {
                        return this._getGenericOptionsValue("readyState.monitor", e);
                    },
                    getPageName: function() {
                        return this.options["content.title"];
                    },
                    _getGenericOptionsValue: function(e, t) {
                        return t && t[e] ? t[e] : this.options[e];
                    }
                };
                e.exports = d;
            },
            4861: (e)=>{
                e.exports = {
                    fireInit: function(e, t, i) {
                        i = i || "default", this.videos.getVideo(i).fireInit(e, t);
                    },
                    fireError: function(e, t, i, s, n, r) {
                        r = r || "default", this.videos.getVideo(r).fireError(e, t, i, s, n);
                    },
                    fireFatalError: function(e, t, i, s, n, r) {
                        r = r || "default", this.videos.getVideo(r).fireFatalError(e, t, i, s, n);
                    },
                    fireStop: function(e, t, i) {
                        i = i || "default", this.videos.getVideo(i).fireStop(e, t);
                    },
                    fireOfflineEvents: function(e, t) {
                        t = t || "default", this.videos.getVideo(t).fireOfflineEvents(e);
                    }
                };
            },
            96: (e, t, i)=>{
                var s = i(8661);
                const { default: n } = i(99);
                var r = {
                    getFastDataConfig: function() {
                        return this.fastDataTransform.response.msg;
                    },
                    getHost: function() {
                        let e = n.getInstance().getOptions().getFastDataHost();
                        return this.fastDataTransform && this.fastDataTransform.response && this.fastDataTransform.response.host && (e = this.fastDataTransform.response.host), s.addProtocol(s.stripProtocol(e), this.options["app.https"]);
                    },
                    getFastDataHost: function() {
                        return s.addProtocol(s.stripProtocol(n.getInstance().getOptions().getFastDataHost()), this.options["app.https"]);
                    },
                    getSession: function() {
                        var e = n.getInstance().getCoreStorage().getStorages("session");
                        if ("undefined" === e && (e = void 0), !e) {
                            var t = this.getStoredData();
                            if (t) try {
                                e = JSON.parse(t).q.c;
                            } catch (e) {}
                        }
                        return e;
                    },
                    getStorageHost: function() {
                        let e = null;
                        const t = this.getStoredData();
                        if (t) try {
                            e = JSON.parse(t).q.h;
                        } catch (e) {}
                        return e ? s.addProtocol(e, this.options["app.https"]) : e;
                    },
                    getStoredData: function() {
                        return n.getInstance().getCoreStorage().getStorages("data");
                    },
                    getDataTime: function() {
                        return n.getInstance().getCoreStorage().getStorages("dataTime");
                    },
                    setStoredData: function(e) {
                        this.storage.setStorages("data", e);
                    },
                    setSession: function(e) {
                        this.storage.setStorages("session", e);
                    },
                    setDataTime: function(e) {
                        this.storage.setStorages("dataTime", e);
                    }
                };
                e.exports = r;
            },
            3569: (e, t, i)=>{
                var s = i(550);
                const { default: n } = i(3582), { AnalyticsTag: r } = i(9982);
                var a = [
                    "accountCode",
                    "username",
                    "anonymousUser",
                    "rendition",
                    "deviceInfo",
                    "player",
                    "title",
                    "title2",
                    "live",
                    "segmentDuration",
                    "mediaDuration",
                    "mediaResource",
                    "parsedResource",
                    "transactionCode",
                    "properties",
                    "cdn",
                    "profile",
                    "bucket",
                    "playerVersion",
                    "param1",
                    "param2",
                    "param3",
                    "param4",
                    "param5",
                    "param6",
                    "param7",
                    "param8",
                    "param9",
                    "param10",
                    "param11",
                    "param12",
                    "param13",
                    "param14",
                    "param15",
                    "param16",
                    "param17",
                    "param18",
                    "param19",
                    "param20",
                    "dimensions",
                    "playerStartupTime",
                    "obfuscateIp",
                    "privacyProtocol",
                    "p2pEnabled",
                    "pluginVersion",
                    "pluginInfo",
                    "isp",
                    "connectionType",
                    "ip",
                    "referer",
                    "userType",
                    "streamingProtocol",
                    "transportFormat",
                    "householdId",
                    "adsBlocked",
                    "adsExpected",
                    "deviceUUID",
                    "smartswitchConfigCode",
                    "smartswitchGroupCode",
                    "smartswitchContractCode",
                    "libVersion",
                    "nodeHost",
                    "nodeType",
                    "appName",
                    "appReleaseVersion",
                    "package",
                    "saga",
                    "tvshow",
                    "season",
                    "titleEpisode",
                    "channel",
                    "imdbID",
                    "gracenoteID",
                    "contentType",
                    "genre",
                    "contentLanguage",
                    "subtitles",
                    "cost",
                    "price",
                    "playbackType",
                    "email",
                    "drm",
                    "videoCodec",
                    "audioCodec",
                    "codecSettings",
                    "codecProfile",
                    "containerFormat",
                    "contentId",
                    "contractedResolution",
                    "linkedViewId",
                    "edid",
                    "cdnBalancerResponseUUID",
                    "accur_geo_location",
                    "network_type",
                    "network_cell_type",
                    "network_signal_strengh",
                    "cpu_used",
                    "mem_used",
                    "cache_used"
                ], o = [
                    "player",
                    "playhead",
                    "adTitle",
                    "position",
                    "adDuration",
                    "adCampaign",
                    "adCreativeId",
                    "adProvider",
                    "adResource",
                    "adPlayerVersion",
                    "adProperties",
                    "adAdapterVersion",
                    "adInsertionType",
                    "extraparam1",
                    "extraparam2",
                    "extraparam3",
                    "extraparam4",
                    "extraparam5",
                    "extraparam6",
                    "extraparam7",
                    "extraparam8",
                    "extraparam9",
                    "extraparam10",
                    "fullscreen",
                    "audio",
                    "skippable",
                    "adNumber",
                    "adNumberInBreak",
                    "breakNumber"
                ], d = s.extend({
                    constructor: function() {
                        this.lastSent = {};
                    },
                    fetchParams: function(e, t, i, s, a) {
                        e = e || {}, t = t || [];
                        for(let o = 0; o < t.length; o++){
                            const c = t[o];
                            if (e[c]) continue;
                            const u = d.getters[c];
                            let l = !1;
                            for(const t in s)if (s[t] && s[t][u]) {
                                const n = s[t][u](a);
                                void 0 === n || i && this.lastSent[c] === n || (e[c] = n, this.lastSent[c] = n), l = !0;
                                break;
                            }
                            l || n.warn(r, "Trying to call undefined getter " + c + ":" + u);
                        }
                        return e;
                    },
                    getGetters: function() {
                        return d.getters;
                    },
                    getRequiredMetadataParams: function() {
                        return [
                            "live",
                            "rendition"
                        ];
                    },
                    buildBody: function(e, t) {
                        return this.fetchParams(void 0, d.bodyParams[e], !1, t);
                    },
                    buildParams: function(e, t, i, s) {
                        return e = e || {}, this.fetchParams(e, d.params[t], !1, i, s), this.fetchParams(e, d.differentParams[t], !0, i, s), e;
                    },
                    getChangedEntities: function(e) {
                        return this.fetchParams({}, d.differentParams.entities, !0, e);
                    }
                }, {
                    params: {
                        "/data": [
                            "system",
                            "pluginVersion",
                            "requestNumber",
                            "username"
                        ],
                        "/adapters": [
                            "system",
                            "pluginVersion",
                            "requestNumber"
                        ],
                        "/configuration": [
                            "system",
                            "pluginVersion",
                            "requestNumber",
                            "appName",
                            "appReleaseVersion"
                        ],
                        "/infinity/session/pluginLogs": [
                            "logAction",
                            "logType"
                        ],
                        "/infinity/video/pluginLogs": [
                            "logAction",
                            "logType"
                        ],
                        "/init": a,
                        "/start": a,
                        "/joinTime": [
                            "joinDuration",
                            "playhead",
                            "bitrate"
                        ],
                        "/pause": [
                            "playhead",
                            "accountCode",
                            "pluginVersion"
                        ],
                        "/resume": [
                            "pauseDuration",
                            "playhead",
                            "accountCode",
                            "pluginVersion"
                        ],
                        "/seek": [
                            "seekDuration",
                            "playhead",
                            "accountCode",
                            "pluginVersion"
                        ],
                        "/bufferUnderrun": [
                            "bufferDuration",
                            "playhead",
                            "accountCode",
                            "pluginVersion"
                        ],
                        "/error": [
                            "player",
                            "playhead"
                        ].concat(a),
                        "/stop": [
                            "accur_geo_location",
                            "bitrate",
                            "totalBytes",
                            "playhead",
                            "pauseDuration",
                            "metrics",
                            "cdnDownloadedTraffic",
                            "multiCdnInfo",
                            "p2pDownloadedTraffic",
                            "uploadTraffic",
                            "profile",
                            "bucket",
                            "accountCode",
                            "pluginVersion"
                        ],
                        "/infinity/video/event": [],
                        "/adInit": o,
                        "/adStart": o,
                        "/adJoin": [
                            "playhead",
                            "position",
                            "adJoinDuration",
                            "adPlayhead",
                            "adNumber",
                            "adNumberInBreak",
                            "breakNumber"
                        ],
                        "/adPause": [
                            "playhead",
                            "position",
                            "adPlayhead",
                            "adNumber",
                            "adNumberInBreak",
                            "breakNumber"
                        ],
                        "/adResume": [
                            "playhead",
                            "position",
                            "adPlayhead",
                            "adPauseDuration",
                            "adNumber",
                            "adNumberInBreak",
                            "breakNumber"
                        ],
                        "/adBufferUnderrun": [
                            "playhead",
                            "position",
                            "adPlayhead",
                            "adBufferDuration",
                            "adNumber",
                            "adNumberInBreak",
                            "breakNumber"
                        ],
                        "/adStop": [
                            "playhead",
                            "position",
                            "adPlayhead",
                            "adTotalDuration",
                            "adViewedDuration",
                            "adViewability",
                            "adNumber",
                            "adNumberInBreak",
                            "breakNumber"
                        ],
                        "/adClick": [
                            "playhead",
                            "position",
                            "adPlayhead",
                            "adNumber",
                            "adNumberInBreak",
                            "breakNumber"
                        ],
                        "/adError": [
                            "adPlayhead"
                        ].concat(o),
                        "/adManifest": [
                            "givenBreaks",
                            "expectedBreaks",
                            "expectedPattern",
                            "breaksTime"
                        ],
                        "/adBreakStart": [
                            "position",
                            "givenAds",
                            "expectedAds",
                            "breakNumber",
                            "adInsertionType"
                        ],
                        "/adBreakStop": [
                            "position",
                            "breakNumber"
                        ],
                        "/adQuartile": [
                            "position",
                            "adViewedDuration",
                            "adViewability",
                            "adNumber",
                            "adNumberInBreak",
                            "breakNumber"
                        ],
                        "/ping": [
                            "real_traffic",
                            "improved_bandwidth_estimation",
                            "network_type",
                            "network_cell_type",
                            "network_signal_strengh",
                            "cpu_used",
                            "mem_used",
                            "cache_used",
                            "accountCode",
                            "pluginVersion",
                            "droppedFrames",
                            "playrate",
                            "cdnDownloadedTraffic",
                            "multiCdnInfo",
                            "p2pDownloadedTraffic",
                            "uploadTraffic",
                            "latency",
                            "packetLoss",
                            "packetSent",
                            "metrics",
                            "totalBytes",
                            "segmentDuration"
                        ],
                        "/infinity/session/start": [
                            "accountCode",
                            "username",
                            "userType",
                            "anonymousUser",
                            "route",
                            "page",
                            "referer",
                            "referral",
                            "screenResolution",
                            "language",
                            "deviceInfo",
                            "adsBlocked",
                            "deviceUUID",
                            "libVersion",
                            "appName",
                            "appReleaseVersion",
                            "isp",
                            "connectionType",
                            "ip",
                            "obfuscateIp",
                            "privacyProtocol",
                            "dimensions",
                            "param1",
                            "param2",
                            "param3",
                            "param4",
                            "param5",
                            "param6",
                            "param7",
                            "param8",
                            "param9",
                            "param10",
                            "param11",
                            "param12",
                            "param13",
                            "param14",
                            "param15",
                            "param16",
                            "param17",
                            "param18",
                            "param19",
                            "param20",
                            "edid"
                        ],
                        "/infinity/session/stop": [
                            "sessionMetrics"
                        ],
                        "/infinity/session/nav": [
                            "route",
                            "page",
                            "scrollDepth"
                        ],
                        "/infinity/session/beat": [
                            "sessionMetrics"
                        ],
                        "/infinity/session/event": [
                            "accountCode"
                        ],
                        "/offlineEvents": {}
                    },
                    bodyParams: {
                        "/offlineEvents": [
                            "viewJson"
                        ]
                    },
                    differentParams: {
                        entities: [
                            "pluginInfo",
                            "rendition",
                            "title",
                            "title2",
                            "param1",
                            "param2",
                            "param3",
                            "param4",
                            "param5",
                            "param6",
                            "param7",
                            "param8",
                            "param9",
                            "param10",
                            "param11",
                            "param12",
                            "param13",
                            "param14",
                            "param15",
                            "param16",
                            "param17",
                            "param18",
                            "param19",
                            "param20",
                            "cdn",
                            "nodeHost",
                            "nodeType",
                            "nodeTypeString",
                            "subtitles",
                            "contentLanguage",
                            "contentId",
                            "accur_geo_location"
                        ]
                    },
                    getters: {
                        requestNumber: "getRequestNumber",
                        playhead: "getPlayhead",
                        playrate: "getPlayrate",
                        fps: "getFramesPerSecond",
                        segmentDuration: "getSegmentDuration",
                        droppedFrames: "getDroppedFrames",
                        mediaDuration: "getDuration",
                        bitrate: "getBitrate",
                        totalBytes: "getTotalBytes",
                        throughput: "getThroughput",
                        rendition: "getRendition",
                        title: "getTitle",
                        title2: "getTitle2",
                        live: "getIsLive",
                        mediaResource: "getResource",
                        parsedResource: "getParsedResource",
                        transactionCode: "getTransactionCode",
                        properties: "getMetadata",
                        playerVersion: "getPlayerVersion",
                        player: "getPlayerName",
                        cdn: "getCdn",
                        profile: "getProfileName",
                        bucket: "getBucketName",
                        pluginVersion: "getPluginVersion",
                        libVersion: "getLibVersion",
                        userType: "getUserType",
                        streamingProtocol: "getStreamingProtocol",
                        transportFormat: "getTransportFormat",
                        obfuscateIp: "getObfuscateIp",
                        privacyProtocol: "getPrivacyProtocol",
                        householdId: "getHouseholdId",
                        latency: "getLatency",
                        packetLoss: "getPacketLoss",
                        packetSent: "getPacketSent",
                        metrics: "getVideoMetrics",
                        dimensions: "getCustomDimensions",
                        accur_geo_location: "getAccurateGeoLocation",
                        network_type: "getNetworkConnectionType",
                        network_cell_type: "getNetworkCellType",
                        network_signal_strengh: "getNetworkSignalStrength",
                        cpu_used: "getCpuUsed",
                        mem_used: "getMemoryUsed",
                        cache_used: "getCacheStorageUsed",
                        real_traffic: "getTransferredTraffic",
                        improved_bandwidth_estimation: "getImprovedBandwidth",
                        param1: "getExtraparam1",
                        param2: "getExtraparam2",
                        param3: "getExtraparam3",
                        param4: "getExtraparam4",
                        param5: "getExtraparam5",
                        param6: "getExtraparam6",
                        param7: "getExtraparam7",
                        param8: "getExtraparam8",
                        param9: "getExtraparam9",
                        param10: "getExtraparam10",
                        param11: "getExtraparam11",
                        param12: "getExtraparam12",
                        param13: "getExtraparam13",
                        param14: "getExtraparam14",
                        param15: "getExtraparam15",
                        param16: "getExtraparam16",
                        param17: "getExtraparam17",
                        param18: "getExtraparam18",
                        param19: "getExtraparam19",
                        param20: "getExtraparam20",
                        extraparam1: "getAdExtraparam1",
                        extraparam2: "getAdExtraparam2",
                        extraparam3: "getAdExtraparam3",
                        extraparam4: "getAdExtraparam4",
                        extraparam5: "getAdExtraparam5",
                        extraparam6: "getAdExtraparam6",
                        extraparam7: "getAdExtraparam7",
                        extraparam8: "getAdExtraparam8",
                        extraparam9: "getAdExtraparam9",
                        extraparam10: "getAdExtraparam10",
                        position: "getAdPosition",
                        adNumber: "getAdNumber",
                        adNumberInBreak: "getAdNumberInBreak",
                        breakNumber: "getBreakNumber",
                        adPlayhead: "getAdPlayhead",
                        adDuration: "getAdDuration",
                        adCampaign: "getAdCampaign",
                        adCreativeId: "getAdCreativeId",
                        adBitrate: "getAdBitrate",
                        adTitle: "getAdTitle",
                        adResource: "getAdResource",
                        adPlayerVersion: "getAdPlayerVersion",
                        adProperties: "getAdMetadata",
                        adAdapterVersion: "getAdAdapterVersion",
                        givenBreaks: "getGivenBreaks",
                        expectedBreaks: "getExpectedBreaks",
                        expectedPattern: "getExpectedPattern",
                        breaksTime: "getBreaksTime",
                        givenAds: "getGivenAds",
                        expectedAds: "getExpectedAds",
                        adsExpected: "getAdsExpected",
                        adViewedDuration: "getAdViewedDuration",
                        adViewability: "getAdViewability",
                        fullscreen: "getIsFullscreen",
                        audio: "getAudioEnabled",
                        skippable: "getIsSkippable",
                        adProvider: "getAdProvider",
                        adInsertionType: "getAdInsertionType",
                        pluginInfo: "getPluginInfo",
                        isp: "getIsp",
                        connectionType: "getConnectionType",
                        ip: "getIp",
                        deviceInfo: "getDeviceInfo",
                        edid: "getEDID",
                        system: "getAccountCode",
                        accountCode: "getAccountCode",
                        username: "getUsername",
                        anonymousUser: "getAnonymousUser",
                        joinDuration: "getJoinDuration",
                        bufferDuration: "getBufferDuration",
                        seekDuration: "getSeekDuration",
                        pauseDuration: "getPauseDuration",
                        adJoinDuration: "getAdJoinDuration",
                        adBufferDuration: "getAdBufferDuration",
                        adPauseDuration: "getAdPauseDuration",
                        adTotalDuration: "getAdTotalDuration",
                        referer: "getReferer",
                        referral: "getReferral",
                        language: "getLanguage",
                        screenResolution: "getScreenResolution",
                        nodeHost: "getNodeHost",
                        nodeType: "getNodeType",
                        nodeTypeString: "getNodeTypeString",
                        route: "getReferer",
                        page: "getPageName",
                        playerStartupTime: "getPlayerStartupTime",
                        pageLoadTime: "getPageLoadTime",
                        cdnDownloadedTraffic: "getCdnTraffic",
                        multiCdnInfo: "getMultiCdnInfo",
                        p2pDownloadedTraffic: "getP2PTraffic",
                        p2pEnabled: "getIsP2PEnabled",
                        uploadTraffic: "getUploadTraffic",
                        cdnBalancerResponseUUID: "getBalancerResponseId",
                        viewJson: "getOfflineView",
                        deviceUUID: "getDeviceUUID",
                        sessionMetrics: "getSessionMetrics",
                        scrollDepth: "getScrollDepth",
                        adsBlocked: "getIsBlocked",
                        linkedViewId: "getLinkedViewId",
                        smartswitchConfigCode: "getSmartswitchConfigCode",
                        smartswitchGroupCode: "getSmartswitchGroupCode",
                        smartswitchContractCode: "getSmartswitchContractCode",
                        appName: "getAppName",
                        appReleaseVersion: "getAppReleaseVersion",
                        package: "getPackage",
                        saga: "getSaga",
                        tvshow: "getTvShow",
                        season: "getSeason",
                        titleEpisode: "getEpisodeTitle",
                        channel: "getChannel",
                        drm: "getDRM",
                        videoCodec: "getVideoCodec",
                        audioCodec: "getAudioCodec",
                        codecSettings: "getCodecSettings",
                        codecProfile: "getCodecProfile",
                        containerFormat: "getContainerFormat",
                        contentId: "getID",
                        imdbID: "getImdbId",
                        gracenoteID: "getGracenoteID",
                        contentType: "getType",
                        genre: "getGenre",
                        contentLanguage: "getVideoLanguage",
                        subtitles: "getSubtitles",
                        contractedResolution: "getContractedResolution",
                        cost: "getCost",
                        price: "getPrice",
                        playbackType: "getPlaybackType",
                        email: "getEmail"
                    }
                });
                e.exports = d;
            },
            4828: (e, t, i)=>{
                var s = i(550);
                const { default: n } = i(3582), { AnalyticsTag: r } = i(9982);
                var a = s.extend({
                    constructor: function(e, t, i, s) {
                        this.prefix = e || "npaw", this.disableCookies = t, this.forceCookies = i, this.disabled = s;
                    },
                    updateStorageOptions: function(e, t, i) {
                        this.disableCookies = e, this.forceCookies = t, this.disabled = i;
                    },
                    isEnabled: function() {
                        if (this.disabled) return !1;
                        var e = !0;
                        if (!this.forceCookies) try {
                            localStorage.setItem(this.prefix + ".test", "true"), localStorage.removeItem(this.prefix + ".test");
                        } catch (t) {
                            e = !1;
                        }
                        return e;
                    },
                    setLocal: function(e, t) {
                        if (this.disabled) return null;
                        var i = null;
                        try {
                            !this.forceCookies && ("undefined" != typeof localStorage && localStorage || this.disableCookies) ? "undefined" != typeof localStorage && localStorage && (i = localStorage.setItem(this.prefix + "." + e, t)) : i = this._setCookie(this.prefix + ".local." + e, t);
                        } catch (e) {
                            n.error(r, "Npaw App Analytics needs localStorage or cookies, not supported by your browser.");
                        }
                        return i;
                    },
                    getLocal: function(e) {
                        return this.disabled ? null : this._localGetRemove("getItem", "_getCookie", e);
                    },
                    removeLocal: function(e) {
                        return this.disabled ? null : this._localGetRemove("removeItem", "_removeCookie", e);
                    },
                    _localGetRemove: function(e, t, i) {
                        var s = null;
                        try {
                            !this.forceCookies && ("undefined" != typeof localStorage && localStorage || this.disableCookies) ? "undefined" != typeof localStorage && localStorage && (s = localStorage[e](this.prefix + "." + i)) : s = this[t](this.prefix + ".local." + i);
                        } catch (e) {
                            n.error(r, "Npaw App Analytics needs localStorage or cookies, not supported by your browser.");
                        }
                        return s;
                    },
                    setSession: function(e, t) {
                        if (this.disabled) return null;
                        var i = null;
                        try {
                            i = !this.forceCookies && ("undefined" != typeof sessionStorage && sessionStorage || this.disableCookies) ? sessionStorage.setItem(this.prefix + "." + e, t) : this._setCookie(this.prefix + ".session." + e, t);
                        } catch (e) {
                            n.error(r, "Npaw App Analytics needs sessionStorage or cookies, not supported by your browser.");
                        }
                        return i;
                    },
                    getSession: function(e) {
                        return this.disabled ? null : this._sessionGetRemove("getItem", "_getCookie", e);
                    },
                    removeSession: function(e) {
                        return this.disabled ? null : this._sessionGetRemove("removeItem", "_removeCookie", e);
                    },
                    _sessionGetRemove: function(e, t, i) {
                        var s = null;
                        try {
                            s = !this.forceCookies && ("undefined" != typeof sessionStorage && sessionStorage || this.disableCookies) ? sessionStorage[e](this.prefix + "." + i) : this[t](this.prefix + ".session." + i);
                        } catch (e) {
                            n.error(r, "Npaw App Analytics needs sessionStorage or cookies, not supported by your browser.");
                        }
                        return s;
                    },
                    getStorages: function(e) {
                        return this.disabled ? null : this.getSession(e) || this.getLocal(e);
                    },
                    setStorages: function(e, t) {
                        if (this.disabled) return null;
                        this.setSession(e, t), this.setLocal(e, t);
                    },
                    removeStorages: function(e) {
                        if (this.disabled) return null;
                        this.removeSession(e), this.removeLocal(e);
                    },
                    _setCookie: function(e, t) {
                        if ("undefined" != typeof document) {
                            var i = ";";
                            "undefined" != typeof location && (i += "domain=" + location.host.split(".").reverse().splice(0, 2).reverse().join(".") + ";path=/;"), document.cookie = e + "=" + t + i;
                        }
                    },
                    _getCookie: function(e) {
                        if ("undefined" != typeof document) for(var t = e + "=", i = decodeURIComponent(document.cookie).split(";"), s = 0; s < i.length; s++){
                            for(var n = i[s]; " " === n.charAt(0);)n = n.substring(1);
                            if (0 === n.indexOf(t)) return n.substring(t.length, n.length);
                        }
                        return null;
                    },
                    _removeCookie: function(e) {
                        this._setCookie(e, "");
                    }
                });
                e.exports = a;
            },
            8465: (e)=>{
                e.exports = function() {
                    Function.prototype.bind = Function.prototype.bind || function(e) {
                        var t = Array.prototype.slice, i = this, s = t.call(arguments, 1);
                        function n() {
                            var n = i.prototype && this instanceof i;
                            return i.apply(!n && e || this, s.concat(t.call(arguments)));
                        }
                        return n.prototype = i.prototype, n;
                    }, Array.prototype.forEach = Array.prototype.forEach || function(e, t) {
                        if ("function" != typeof e) throw new TypeError(e + " is not a function!");
                        for(var i = this.length, s = 0; s < i; s++)e.call(t, this[s], s, this);
                    }, Math.trunc = Math.trunc || function(e) {
                        return isNaN(e) ? NaN : e > 0 ? Math.floor(e) : Math.ceil(e);
                    };
                };
            },
            1516: (e, t, i)=>{
                var s = i(550), n = i(3598), r = s.extend({
                    constructor: function(e, t) {
                        this.callback = e, this.interval = t || 5e3, this.isRunning = !1, this._timer = null, this.chrono = new n;
                    },
                    start: function() {
                        this.isRunning || (this.isRunning = !0, this._setTick());
                    },
                    stop: function() {
                        if (this.isRunning = !1, this._timer) try {
                            clearTimeout(this._timer), this._timer = null;
                        } catch (e) {
                            "undefined" != typeof atv && (atv.clearTimeout(this._timer), this._timer = null);
                        }
                    },
                    _setTick: function() {
                        if (this.isRunning) {
                            this.chrono.start();
                            try {
                                this._timer = setTimeout((function() {
                                    this.callback(this.chrono.stop()), this._setTick();
                                }).bind(this), this.interval);
                            } catch (e) {
                                "undefined" != typeof atv && (this._timer = atv.setTimeout((function() {
                                    this.callback(this.chrono.stop()), this._setTick();
                                }).bind(this), this.interval));
                            }
                        }
                    }
                });
                e.exports = r;
            },
            8661: (e, t, i)=>{
                const { default: s, LogLevel: n } = i(3582), { AnalyticsTag: r } = i(9982);
                var a = {
                    stripProtocol: function(e) {
                        var t = e;
                        try {
                            t = e.replace(/^(.*?:\/\/|\/\/)/i, "");
                        } catch (e) {
                            s.warn(r, e);
                        }
                        return t;
                    },
                    parseBoolean: function(e) {
                        return "string" == typeof e || e instanceof String ? "true" === e.toLowerCase() : !!e;
                    },
                    elementIsInPage: function(e) {
                        try {
                            return e !== document.body && document.body.contains(e);
                        } catch (e) {
                            s.warn(r, e);
                        }
                        return !0;
                    },
                    addProtocol: function(e, t) {
                        var i = "http://localhost/";
                        try {
                            i = "http://" + e, t || "undefined" != typeof window && 0 === window.location.protocol.indexOf("https") ? i = "https://" + e : "undefined" != typeof window && 0 === window.location.protocol.indexOf("http") && (i = "//" + e);
                        } catch (e) {
                            s.warn(r, e);
                        }
                        return i;
                    },
                    parseNumber: function(e, t) {
                        return !isNaN(e) && e >= 0 && e !== 1 / 0 && e !== -1 / 0 && null != e ? e : t;
                    },
                    logAllEvents: function(e, t, i) {
                        try {
                            if (s.logLevel <= n.DEBUG) {
                                i = i || function(e) {
                                    s.debug(r, "Event: " + e.type);
                                };
                                var a = [
                                    "canplay",
                                    "buffering",
                                    "waiting",
                                    "ended",
                                    "play",
                                    "playing",
                                    "pause",
                                    "resume",
                                    "error",
                                    "abort",
                                    "seek",
                                    "seeking",
                                    "seeked",
                                    "stalled",
                                    "dispose",
                                    "loadeddata",
                                    "loadstart"
                                ];
                                t && (null === t[0] ? (t.shift(), a = t) : a = a.concat(t));
                                for(var o = 0; o < a.length; o++)"function" == typeof e ? e.call(window, a[o], i) : e.on ? e.on(a[o], i) : e.addEventListener && e.addEventListener(a[o], i);
                            }
                        } catch (e) {
                            s.error(r, e);
                        }
                    },
                    buildRenditionString: function(e, t, i) {
                        1 === arguments.length && (i = e, e = null, t = null);
                        var s = null;
                        return e && t && (s = e + "x" + t), "number" == typeof i && !isNaN(i) && i >= 1 && (s ? s += "@" : s = "", s += i < 1e3 ? Math.round(i) + "bps" : i < 1e6 ? (i = Math.round(i / 1e3)) + "Kbps" : (i = Math.round(i / 1e4) / 100) + "Mbps"), s;
                    },
                    buildErrorParams: function(e, t, i) {
                        var s = {};
                        return "object" == typeof e && null !== e ? s = e : (s.errorCode = e || "FAILURE", s.msg = t || s.errorCode, s.errorMetadata = i), s;
                    },
                    calculateAdViewability: function(e, t) {
                        var i = !0;
                        if ("undefined" != typeof window && e && "function" == typeof e.getBoundingClientRect) {
                            var s = e.getBoundingClientRect();
                            if (s.top >= window.innerHeight || s.bottom <= 0 || s.right <= 0 || s.left >= window.innerWidth) i = !1;
                            else {
                                var n = Math.trunc(s.height * s.width), r = s.top > 0 ? s.top : 0, a = s.bottom > window.innerHeight ? window.innerHeight : s.bottom, o = s.left > 0 ? s.left : 0;
                                i = ((s.right > window.innerWidth ? window.innerWidth : s.right) - o) * (a - r) * 100 > n * (t || 50);
                            }
                        }
                        return i;
                    },
                    getMetricsFrom: function(e, t) {
                        var i = e || t;
                        for(var s in i)if ("object" != typeof i[s] || !i[s].value) {
                            var n = {};
                            n.value = i[s], i[s] = n;
                        }
                        return i;
                    },
                    assign: i(1311),
                    isArray: i(6477)
                };
                e.exports = a;
            },
            9965: (e)=>{
                e.exports = "7.2.34-nwf";
            },
            1846: (e, t, i)=>{
                var s = i(1075), n = i(3598), r = i(7499);
                const { default: a } = i(3582);
                var o = i(5100), d = i(8661);
                const { default: c } = i(9743);
                var u = i(2176), l = i(3569), h = i(4833), p = i(5086);
                const { default: f } = i(4243), { default: g } = i(99), { default: m } = i(7829), { default: v } = i(6443), { Method: y, AnalyticsTag: T } = i(9982);
                var S = s.extend({
                    constructor: function(e, t, i, s) {
                        this._key = e, this.plugin = t, this.isInitiated = !1, this.isAdsManifestSent = !1, this.playedPostrolls = 0, this.isBreakStarted = !1, this.initChrono = new n, this.options = new r(i), this._adNumber = 0, this._adNumberInBreak = 0, this.requestBuilder = new l, this.hybridNetwork = new h, this.resizeScrollDetector = new p(t, this), this._adapter = null, this._adsAdapter = null, s && this.setAdapter(s, t), this._pluginLogsQueue = [], this.lastEventTime = null, this.lastKnownLocation = void 0, this.isFetchingLocation = !1, this.sendingPings = !1, this._startPings();
                    },
                    mergeOptions: function(e) {
                        e && this.options.setOptions(e, this.options);
                    },
                    setVideoOptions: function(e) {
                        e && this.options.setOptions(e);
                    },
                    getVideoKey: function() {
                        return this._key;
                    },
                    nextView: function() {
                        return this._viewIndex = (new Date).getTime(), this._viewCode = g.getInstance().getFastDataSessionToken(), g.getInstance().registerCommonVariable(v.Products.VIDEO_ANALYTICS, v.AnalyticsVariables.VIEW_CODE, this._viewIndex), this.getViewCode();
                    },
                    getViewCode: function() {
                        const e = g.getInstance().getFastDataSessionToken();
                        return 0 === e.length || this._viewCode && this._viewCode === e || (this._viewCode = e), this._viewCode + (this._viewIndex ? `_${this._viewIndex}` : "");
                    },
                    setAdapter: function(e, t) {
                        for(var i in this.plugin = t, this._adapter = e, this._adapter.setIsAds(!1), this._adapter._setAdapter = !0, this.contentAdapterListeners = {}, this.contentAdapterListeners[u.Event.START] = this._startListener.bind(this), this.contentAdapterListeners[u.Event.JOIN] = this._joinListener.bind(this), this.contentAdapterListeners[u.Event.DATA_OBJECT] = this._advancedDataListener.bind(this), this.contentAdapterListeners[u.Event.PAUSE] = this._pauseListener.bind(this), this.contentAdapterListeners[u.Event.RESUME] = this._resumeListener.bind(this), this.contentAdapterListeners[u.Event.SEEK_BEGIN] = this._seekBufferBeginListener.bind(this), this.contentAdapterListeners[u.Event.SEEK_END] = this._seekEndListener.bind(this), this.contentAdapterListeners[u.Event.BUFFER_BEGIN] = this._seekBufferBeginListener.bind(this), this.contentAdapterListeners[u.Event.BUFFER_END] = this._bufferEndListener.bind(this), this.contentAdapterListeners[u.Event.ERROR] = this._errorListener.bind(this), this.contentAdapterListeners[u.Event.STOP] = this._stopListener.bind(this), this.contentAdapterListeners[u.Event.VIDEO_EVENT] = this._videoEventListener.bind(this), this.contentAdapterListeners)this._adapter.on(i, this.contentAdapterListeners[i]);
                        this.options.enableExtraMetricCollection && this.shouldStartRenditionTimer();
                    },
                    getAdapter: function() {
                        return this._adapter;
                    },
                    removeAdapter: function() {
                        try {
                            if (this._adapter) {
                                if (this._adapter.dispose(), this.contentAdapterListeners) {
                                    for(var e in this.contentAdapterListeners)this._adapter.off(e, this.contentAdapterListeners[e]);
                                    delete this.contentAdapterListeners;
                                }
                                this._adapter = null;
                            }
                        } catch (e) {
                            a.error(T, "Is not possible to remove adapter for video: " + this._key);
                        }
                    },
                    getAdsAdapter: function() {
                        return this._adsAdapter;
                    },
                    fetchLocation: function() {
                        if (this.isFetchingLocation = !0, navigator && navigator.geolocation) {
                            const e = {
                                enableHighAccuracy: !0,
                                timeout: 1e4
                            };
                            this.lastKnownLocation = void 0, navigator.geolocation.getCurrentPosition((e)=>{
                                this.lastKnownLocation = {
                                    latitude: e.coords.latitude,
                                    longitude: e.coords.longitude
                                }, this.isFetchingLocation = !1;
                            }, (e)=>{
                                this.isFetchingLocation = !1;
                            }, e);
                        } else this.lastKnownLocation = void 0, this.isFetchingLocation = !1;
                    },
                    shouldStartRenditionTimer: function() {
                        if (!this._adapter.getAdapterClass("detectQualityChange") && !this.renditionInterval) {
                            const e = this.options.renditionQueryInterval < 100 ? 100 : this.options.renditionQueryInterval;
                            this.renditionInterval = setInterval(()=>{
                                const e = this._adapter.getRendition();
                                e && this.triggerUpdateRendition(e);
                            }, e || 250);
                        }
                    },
                    triggerUpdateRendition: function(e) {
                        this.lastObservedRendition ? this.lastObservedRendition != e && (this.lastObservedRendition = e) : this.lastObservedRendition = e;
                    },
                    fireInit: function(e, t) {
                        this.isInitiated || (!this.getAdapter() || this.getAdapter() && !this.getAdapter().flags.isStarted) && (this._viewIndex || this.plugin.getNextViewIndex(this), this._startPings(), this.initChrono.start(), this.isInitiated = !0, e = e || {}, t && (e.triggeredEvents = [
                            t
                        ]), this._send(o.WillSendEvent.WILL_SEND_INIT, o.Service.INIT, e), this._adSavedError(), this._adSavedManifest(), a.notice(T, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + o.Service.INIT + ", title/res: " + (e.title || e.mediaResource) + (e.triggeredEvents ? ", eventsTriggered: " + e.triggeredEvents : "")));
                    },
                    fireError: function(e, t, i, s, n, r) {
                        this.fireInit();
                        var c = d.buildErrorParams(e, t, i);
                        c.code && delete c.code, n && (c.triggeredEvents = [
                            n
                        ]);
                        try {
                            (r = r || !1) && this._adapter && this._adapter.flags && this._adapter.flags.isJoined && ((c = c || {}).errorType = "fatal");
                        } catch (e) {}
                        this._send(o.WillSendEvent.WILL_SEND_ERROR, o.Service.ERROR, c), this._adSavedError(), this._adSavedManifest(), a.notice(T, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + o.Service.ERROR + ", errorType: " + c.errorType + ", errorCode: " + c.errorCode + (c.triggeredEvents ? ", eventsTriggered: " + c.triggeredEvents : "")), "fatal" === c.errorType && this.fireStop();
                    },
                    fireFatalError: function(e, t, i, s, n) {
                        this.fireError(e, t, i, s, n, !0);
                    },
                    fireStop: function(e, t) {
                        if (this.isInitiated || this.isStarted) {
                            this._adapter && (this._adapter.flags.isStopped = !0, this._adapter.monitor && this._adapter.monitor.stop()), this._adsAdapter && this.isBreakStarted && (this._adsAdapter.fireStop(), this._adsAdapter.fireAdBreakStop()), e = e || {}, t && (e.triggeredEvents = [
                                t
                            ]), f.getInstance().setTriedSendingNQSStats(!0), this._send(o.WillSendEvent.WILL_SEND_STOP, o.Service.STOP, e, void 0, void 0, ()=>{
                                f.getInstance().addNQSRequest(o.Service.STOP);
                            });
                            var i = this._adapter ? this._adapter.chronos : null;
                            i && (i.total.stop(), i.join.reset(), i.pause.reset(), i.buffer.reset(), i.seek.reset()), this.lastKnownLocation = void 0, this.observedRenditions = [], this.renditionInterval && (clearInterval(this.renditionInterval), this.renditionInterval = void 0), a.notice(T, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + o.Service.STOP + " at " + e.playhead + "s" + (e.triggeredEvents ? ", eventsTriggered: " + e.triggeredEvents : "")), this._reset();
                        }
                    },
                    fireOfflineEvents: function(e) {
                        this.options && !this.options.offline ? this.isInitiated || this._adapter && this._adapter.flags.isStarted || this._adsAdapter && this._adsAdapter.flags.isStarted ? a.error(T, "Adapters have to be stopped") : (this._offlineParams = e, g.getInstance().getFastDataService().getAccountCode() && g.getInstance().getFastDataSessionToken() ? this._generateAndSendOffline() : this.offlineReference = this._generateAndSendOffline.bind(this)) : a.error(T, "To send offline events, offline option must be disabled");
                    },
                    _generateAndSendOffline: function() {
                        if (this.options.disableStorage) return null;
                        const e = this._offlineParams;
                        for(;;){
                            var t = this.requestBuilder.buildBody(o.Service.OFFLINE_EVENTS, [
                                this,
                                this.plugin
                            ]).viewJson;
                            if (null === t[0]) break;
                            var i = this.plugin.getNextViewIndex(this), s = t[0].replace(/CODE_PLACEHOLDER/g, i.toString()).replace(/,"sessionId":"SESSION_PLACEHOLDER"/g, "").replace(/,"sessionRoot":"ROOT_PLACEHOLDER"/g, "");
                            this._send(o.WillSendEvent.WILL_SEND_OFFLINE_EVENTS, o.Service.OFFLINE_EVENTS, e, s, "POST", (function(e, t) {
                                this.plugin.offlineStorage.removeView(t.offlineId);
                            }).bind(this), {
                                offlineId: t[1]
                            });
                        }
                        this.plugin.offlineStorage.sent(), this._offlineParams = null;
                    },
                    _reset: function() {
                        try {
                            this._stopPings(), this._adapter && this._adapter.flags.reset(), this._viewIndex = void 0, this.isInitiated = !1, this.isStarted = !1, this.startDelayed = !1, this.isAdsManifestSent = !1, this.initChrono.reset(), this._totalPrerollsTime = 0, this.requestBuilder.lastSent.breakNumber = 0, this.requestBuilder.lastSent.adNumber = 0, this._savedAdManifest = null, this._savedAdError = null, this.playedPostrolls = 0, this.isBreakStarted = !1, this._adNumber = 0, this._adNumberInBreak = 0;
                        } catch (e) {}
                    },
                    _send: function(e, t, i, s, n, r, a) {
                        const d = c.methodFromString(n), u = (new Date).getTime();
                        this.options.preventZombieViews && this.lastEventTime && u > this.lastEventTime + 6e5 && this.plugin.getNextViewIndex(this), this.lastEventTime = t === o.Service.STOP ? null : u;
                        const l = new m(t, i, this.getVideoKey(), d, void 0, r);
                        this.plugin.resourceTransform.parse(l), i = this.requestBuilder.buildParams(i, t, [
                            this,
                            this.plugin
                        ], this.options), !0 === this.getIsLive() && (i.mediaDuration = this.options["content.duration"], i.playhead = void 0), l.setParams(i), s && l.setBody(s), l.setMethod(d), this.plugin.isMethodPostEnabled() && l.setMethod(y.POST);
                        const h = {
                            params: l.getParams(),
                            plugin: this,
                            adapter: this.getAdapter(),
                            adsAdapter: this.getAdsAdapter()
                        };
                        this.emit(e, h), this.plugin.analyticsRequestHandler && (null !== i || void 0 !== n) && this.options.enabled && (this.plugin.lastServiceSent = t, this.plugin.analyticsRequestHandler.sendRequest(l));
                    },
                    firePlayerLog: function(e) {
                        try {
                            if (this.plugin.isPlayerLogsEnabled()) {
                                if (this._adapter && !this._adapter.isStarted()) e.timemark = (new Date).getTime(), this._pluginLogsQueue.push(e);
                                else {
                                    for(; this._pluginLogsQueue.length > 0;){
                                        var t = this._pluginLogsQueue.shift();
                                        this._sendPlayerLog(t);
                                    }
                                    this._sendPlayerLog(e);
                                }
                            }
                        } catch (e) {}
                    },
                    _sendPlayerLog: function(e) {
                        try {
                            e && e.logType && e.logAction && a.notice(T, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") PlayerLog " + e.logType + ": Action " + e.logAction), this.plugin._comm && e && null !== (e = this.requestBuilder.buildParams(e, o.Service.VIDEO_PLUGIN_LOGS, this, this.options)) && this._send(null, o.Service.VIDEO_PLUGIN_LOGS, e);
                        } catch (e) {}
                    }
                });
                d.assign(S.prototype, i(7319)), d.assign(S.prototype, i(948)), d.assign(S.prototype, i(6061)), d.assign(S.prototype, i(3777)), e.exports = S;
            },
            7319: (e, t, i)=>{
                var s = i(5100), n = i(8661), r = i(2176);
                const { AnalyticsTag: a } = i(9982), { default: o } = i(3582), { default: d } = i(4243);
                var c = {
                    getAdsAdapter: function() {
                        return this._adsAdapter;
                    },
                    setAdsAdapter: function(e, t, i) {
                        if (i = i || !1, e.isSetAdapter()) o.warn(a, "Adapters can only be added to a single plugin");
                        else try {
                            for(var s in this.removeAdsAdapter(), this.plugin = t, this._adsAdapter = e, this._adsAdapter.setIsAds(!0), this.adsAdapterListeners = {}, this.adsAdapterListeners[r.Event.START] = this._adStartListener.bind(this), this.adsAdapterListeners[r.Event.JOIN] = this._adJoinListener.bind(this), this.adsAdapterListeners[r.Event.DATA_OBJECT] = this._adAdvancedDataListener.bind(this), this.adsAdapterListeners[r.Event.PAUSE] = this._adPauseListener.bind(this), this.adsAdapterListeners[r.Event.RESUME] = this._adResumeListener.bind(this), this.adsAdapterListeners[r.Event.BUFFER_BEGIN] = this._adBufferBeginListener.bind(this), this.adsAdapterListeners[r.Event.BUFFER_END] = this._adBufferEndListener.bind(this), this.adsAdapterListeners[r.Event.STOP] = this._adStopListener.bind(this), this.adsAdapterListeners[r.Event.ERROR] = this._adErrorListener.bind(this), this.adsAdapterListeners[r.Event.CLICK] = this._adClickListener.bind(this), this.adsAdapterListeners[r.Event.MANIFEST] = this._adManifestListener.bind(this), this.adsAdapterListeners[r.Event.PODSTART] = this._adBreakStartListener.bind(this), this.adsAdapterListeners[r.Event.PODSTOP] = this._adBreakStopListener.bind(this), this.adsAdapterListeners[r.Event.QUARTILE] = this._adQuartileListener.bind(this), this.adsAdapterListeners)this._adsAdapter.on(s, this.adsAdapterListeners[s]);
                            i && (o.notice(a, "Registering listeners for registered AdsAdapter"), this._adsAdapter.registerListeners());
                        } catch (e) {
                            o.warn(a, "Problem during setAdsAdapter process");
                        }
                    },
                    removeAdsAdapter: function() {
                        if (this._adsAdapter) {
                            if (this._adsAdapter.dispose(), this.adsAdapterListeners) {
                                for(var e in this.adsAdapterListeners)this._adsAdapter.off(e, this.adsAdapterListeners[e]);
                                delete this.adsAdapterListeners;
                            }
                            this.resizeScrollDetector.stopDetection(), this._adsAdapter = void 0;
                        }
                    },
                    _adStartListener: function(e) {
                        this._adapter ? (this._adapter.fireBufferEnd(null, "adStartListener"), this._adapter.fireSeekEnd(null, "adStartListener"), this.isInitiated || this._adapter.flags.isStarted || this._adapter.fireStart(), this._adapter.flags.isPaused && this._adapter.chronos.pause.reset()) : this.fireInit(), this._adsAdapter && (this._adsAdapter.chronos.viewedMax = []);
                        const t = e.data.params || {};
                        t.adNumber = this.getNewAdNumber(), (this.getAdResource() || this.getAdTitle()) && "number" == typeof this.getAdDuration() ? (this.adStartSent = !0, this._adsAdapter.fireManifest(), this._adsAdapter.fireAdBreakStart(), t.adNumberInBreak = this.getNewAdNumberInBreak(), d.getInstance().addNQSAdEvent(r.Event.START, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_START, s.Service.AD_START, t)) : (this.adInitSent = !0, t.adNumberInBreak = this.getNewAdNumberInBreak(), d.getInstance().addNQSAdEvent(r.Event.INIT, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_INIT, s.Service.AD_INIT, t));
                    },
                    _adJoinListener: function(e) {
                        let t = {};
                        n.assign(t, e.data.params || {}), this.adInitSent && !this.adStartSent && (this._adsAdapter.fireManifest(), this._adsAdapter.fireAdBreakStart(), d.getInstance().addNQSAdEvent(r.Event.START, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_START, s.Service.AD_START, t)), this._adsAdapter.startChronoView(), this.adConnected && (this._adsAdapter.chronos.join.startTime = this.adConnectedTime, this._adsAdapter.chronos.total.startTime = this.adConnectedTime, this.adConnectedTime = 0, this.adConnected = !1), t = e.data.params || {}, d.getInstance().addNQSAdEvent(r.Event.JOIN, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_JOIN, s.Service.AD_JOIN, t), this.adInitSent = !1, this.adStartSent = !1;
                    },
                    _adAdvancedDataListener: function(e) {
                        var t = e.data.params || {};
                        this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_DATA_OBJECT, s.Service.DATA_OBJECT, t);
                    },
                    _adPauseListener: function(e) {
                        const t = e.data.params || {};
                        this._adsAdapter.stopChronoView(), d.getInstance().addNQSAdEvent(r.Event.PAUSE, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_PAUSE, s.Service.AD_PAUSE, t);
                    },
                    _adResumeListener: function(e) {
                        const t = e.data.params || {};
                        this._adsAdapter.startChronoView(), d.getInstance().addNQSAdEvent(r.Event.RESUME, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_RESUME, s.Service.AD_RESUME, t);
                    },
                    _adBufferBeginListener: function(e) {
                        o.notice(a, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") Ad Buffer Begin"), this._adsAdapter.stopChronoView(), this._adsAdapter && this._adsAdapter.flags.isPaused && this._adsAdapter.chronos.pause.reset();
                    },
                    _adBufferEndListener: function(e) {
                        const t = e.data.params || {};
                        this._adsAdapter.startChronoView(), d.getInstance().addNQSAdEvent(r.Event.BUFFER_END, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_BUFFER, s.Service.AD_BUFFER, t);
                    },
                    _adStopListener: function(e) {
                        const t = e.data.params || {};
                        if (this._adsAdapter.stopChronoView(), this._adsAdapter.flags.reset(), this._totalPrerollsTime = (this._totalPrerollsTime || 0) + this._adsAdapter.chronos.total.getDeltaTime(), t.position = this.requestBuilder.lastSent.position, d.getInstance().addNQSAdEvent(r.Event.STOP, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_STOP, s.Service.AD_STOP, t), this.requestBuilder.lastSent.position === s.AdPosition.Postroll) {
                            const e = this.options["ad.expectedPattern"];
                            this.playedPostrolls++, (this.requestBuilder.lastSent.givenAds && this.requestBuilder.lastSent.givenAds <= this.playedPostrolls || !this.requestBuilder.lastSent.givenAds && e && e.post && e.post[0] && e.post[0] <= this.playedPostrolls) && this._adapter.fireStop({}, "_adStopListener");
                        }
                        this.adConnected = !0, this.adConnectedTime = (new Date).getTime();
                    },
                    _adErrorListener: function(e) {
                        const t = e.data.params || {};
                        !this._adapter || this._adapter.flags.isStarted || this.isInitiated ? this._blockAdError(e.data.params) || (this._adsAdapter && (this._adsAdapter.fireManifest(), this._adsAdapter.fireAdBreakStart()), this._adsAdapter && this._adsAdapter.flags.isStarted || (t.adNumber = this.getNewAdNumber(), t.adNumberInBreak = this.getNewAdNumberInBreak()), this.isBreakStarted || (t.breakNumber = this.getNewBreakNumber()), d.getInstance().addNQSAdEvent(r.Event.ERROR, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_ERROR, s.Service.AD_ERROR, t)) : this._savedAdError = e;
                    },
                    _adSavedError: function() {
                        this._savedAdError && (this._adErrorListener(this._savedAdError), this._savedAdError = null);
                    },
                    _adSavedManifest: function() {
                        this._savedAdManifest && (this._adManifestListener(this._savedAdManifest), this._savedAdManifest = null);
                    },
                    _blockAdError: function(e) {
                        const t = Date.now();
                        return this._lastAdErrorParams && this._lastAdErrorParams.errorCode === e.errorCode && this._lastAdErrorParams.msg === e.msg && this._lastAdErrorParams.adCreativeId === this.getAdCreativeId() && this._lastAdErrorTime + 5e3 > t ? (this._lastAdErrorTime = t, !0) : (this._lastAdErrorTime = t, this._lastAdErrorParams = e, !1);
                    },
                    _adClickListener: function(e) {
                        const t = e.data.params || {};
                        this._adsAdapter.stopChronoView(), d.getInstance().addNQSAdEvent(r.Event.CLICK, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_CLICK, s.Service.AD_CLICK, t);
                    },
                    _adManifestListener: function(e) {
                        if (!this.isAdsManifestSent) {
                            if (this._adapter && !this._adapter.flags.isStarted && !this.isInitiated) return void (this._savedAdManifest = e);
                            const t = e.data.params || {};
                            this.isAdsManifestSent = !0, d.getInstance().addNQSAdEvent(r.Event.MANIFEST, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_MANIFEST, s.Service.AD_MANIFEST, t);
                        }
                    },
                    _adBreakStartListener: function(e) {
                        if (!this.isBreakStarted) {
                            this.isBreakStarted = !0, this._adapter && this._adapter.firePause();
                            const t = e.data.params || {};
                            t.breakNumber = this.getNewBreakNumber(), d.getInstance().addNQSAdEvent(r.Event.PODSTART, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_POD_START, s.Service.AD_POD_START, t), this.adConnected = !1;
                        }
                    },
                    _adBreakStopListener: function(e) {
                        if (this.isBreakStarted) {
                            this.isBreakStarted = !1;
                            const t = e.data.params || {};
                            t.position = this.requestBuilder.lastSent.position, d.getInstance().addNQSAdEvent(r.Event.PODSTOP, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_POD_STOP, s.Service.AD_POD_STOP, t), this.adConnected = !1, this._adapter && this._adapter.fireResume();
                        }
                    },
                    _adQuartileListener: function(e) {
                        const t = e.data.params || {};
                        t.quartile && (d.getInstance().addNQSAdEvent(r.Event.QUARTILE, t), this._sendAdEventIfAllowed(s.WillSendEvent.WILL_SEND_AD_QUARTILE, s.Service.AD_QUARTILE, t));
                    },
                    _sendAdEventIfAllowed: function(e, t, i) {
                        this.options["ad.ignore"] || (d.getInstance().setTriedSendingNQSAdStats(!0), this._send(e, t, i, void 0, void 0, ()=>{
                            d.getInstance().addNQSAdRequest(t);
                        })), o.notice(a, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + t);
                    }
                };
                e.exports = c;
            },
            948: (e, t, i)=>{
                const { default: s } = i(4243);
                var n = i(5100);
                const r = i(2839), { default: a } = i(3582);
                var o = i(8661), d = i(2176);
                const { AnalyticsTag: c } = i(9982), { default: u } = i(6443), { default: l } = i(99);
                var h = {
                    _startListener: function(e) {
                        !this.plugin.options.enableExtraMetricCollection || this.lastKnownLocation || this.isFetchingLocation || this.fetchLocation(), this.isInitiated ? 0 !== this.initChrono.startTime && (this._adapter.chronos.join.startTime = this.initChrono.startTime) : (this._viewIndex || this.plugin.getNextViewIndex(this), this._startPings());
                        var t = e.data.params || {};
                        s.getInstance().addNQSEvent(d.Event.START, t);
                        var i = this.getResource() && "boolean" == typeof this.getIsLive() && (this.getIsLive() || "number" == typeof this.getDuration() && this.getDuration() > 0) && this.getTitle(), r = l.getInstance().getCommonVariable(u.Products.BALANCER, u.BalancerVariables.DECISION_FINISHED);
                        void 0 === r && (r = !0), (i = !this.options.forceInit && i && this._isExtraMetadataReady() && r && this._isRequiredMetadataReady()) && !this.isInitiated ? (s.getInstance().setTriedSendingNQSStats(!0), this._send(n.WillSendEvent.WILL_SEND_START, n.Service.START, t, void 0, void 0, ()=>{
                            s.getInstance().addNQSRequest(n.Service.START);
                        }), this._adSavedError(), this._adSavedManifest(), a.notice(c, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + n.Service.START + ", title/res: " + (t.title || t.mediaResource) + (t.triggeredEvents ? ", eventsTriggered: " + t.triggeredEvents : "")), this.isStarted = !0) : this.isInitiated || (this.isInitiated = !0, this._adapter.chronos.join.start(), s.getInstance().setTriedSendingNQSStats(!0), this._send(n.WillSendEvent.WILL_SEND_INIT, n.Service.INIT, t, void 0, void 0, ()=>{
                            s.getInstance().addNQSRequest(n.Service.INIT);
                        }), this._adSavedError(), this._adSavedManifest(), a.notice(c, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + n.Service.INIT + ", title/res: " + (t.title || t.mediaResource) + (t.triggeredEvents ? ", eventsTriggered: " + t.triggeredEvents : ""))), this.options.enableExtraMetricCollection && this.shouldStartRenditionTimer();
                    },
                    _retryStart: function(e) {
                        var t = l.getInstance().getCommonVariable(u.Products.BALANCER, u.BalancerVariables.DECISION_FINISHED);
                        void 0 === t && (t = !0), this._isExtraMetadataReady() && t && this._isRequiredMetadataReady() && (this._send(n.WillSendEvent.WILL_SEND_START, n.Service.START, {}), this.startDelayed = !1);
                    },
                    _joinListener: function(e) {
                        var t = {};
                        if (o.assign(t, e.data.params || {}), this._adsAdapter && this._adsAdapter.flags.isStarted) this._adapter.monitor && this._adapter.monitor.stop(), this._adapter.flags.isJoined = !1, this._adapter.chronos.join.stopTime = 0;
                        else {
                            if (s.getInstance().addNQSEvent(d.Event.JOIN, t), this._adapter && (this._adapter.chronos.join.startTime = Math.min(this._adapter.chronos.join.startTime + (this._totalPrerollsTime || 0), (new Date).getTime()), this._totalPrerollsTime = 0), this.isInitiated && !this.isStarted) {
                                var i = l.getInstance().getCommonVariable(u.Products.BALANCER, u.BalancerVariables.DECISION_FINISHED);
                                void 0 === i && (i = !0), this._isExtraMetadataReady() && i && this._isRequiredMetadataReady() ? (s.getInstance().setTriedSendingNQSStats(!0), this._send(n.WillSendEvent.WILL_SEND_START, n.Service.START, t, void 0, void 0, ()=>{
                                    s.getInstance().addNQSRequest(n.Service.START);
                                })) : this.startDelayed = !0, this._adSavedError(), this._adSavedManifest(), a.notice(c, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + n.Service.START + ", title/res: " + (t.title || t.mediaResource) + (t.triggeredEvents ? ", eventsTriggered: " + t.triggeredEvents : "")), this.isStarted = !0;
                            }
                            t = e.data.params || {}, s.getInstance().addNQSEvent(r.JOIN_TIME, t), this._adsAdapter && this.isBreakStarted && this._adsAdapter.fireAdBreakStop(), s.getInstance().setTriedSendingNQSStats(!0), this._send(n.WillSendEvent.WILL_SEND_JOIN, n.Service.JOIN, t, void 0, void 0, ()=>{
                                s.getInstance().addNQSRequest(n.Service.JOIN);
                            }), a.notice(c, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + n.Service.JOIN + ", duration: " + t.joinDuration + "ms" + (t.triggeredEvents ? ", eventsTriggered: " + t.triggeredEvents : ""));
                        }
                    },
                    _advancedDataListener: function(e) {
                        var t = e.data.params || {};
                        this._send(n.WillSendEvent.WILL_SEND_DATA_OBJECT, n.Service.DATA_OBJECT, t), a.notice(c, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + n.Service.DATA_OBJECT + (t.triggeredEvents ? ", eventsTriggered: " + t.triggeredEvents : ""));
                    },
                    _pauseListener: function(e) {
                        this._adapter && (this._adapter.flags.isBuffering || this._adapter.flags.isSeeking || this._adsAdapter && this._adsAdapter.flags.isStarted) && this._adapter.chronos.pause.reset();
                        var t = e.data.params || {};
                        s.getInstance().addNQSEvent(d.Event.PAUSE, t), this._send(n.WillSendEvent.WILL_SEND_PAUSE, n.Service.PAUSE, t), a.notice(c, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + n.Service.PAUSE + " at " + t.playhead + "s" + (t.triggeredEvents ? ", eventsTriggered: " + t.triggeredEvents : ""));
                    },
                    _resumeListener: function(e) {
                        this._adsAdapter && this.isBreakStarted && !this._adsAdapter.flags.isStarted && this._adsAdapter.fireAdBreakStop();
                        var t = e.data.params || {};
                        s.getInstance().addNQSEvent(d.Event.RESUME, t), this._send(n.WillSendEvent.WILL_SEND_RESUME, n.Service.RESUME, t), a.notice(c, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + n.Service.RESUME + ", duration: " + t.pauseDuration + "ms" + (t.triggeredEvents ? ", eventsTriggered: " + t.triggeredEvents : "")), this._adapter.chronos.pause.reset();
                    },
                    _seekBufferBeginListener: function(e) {
                        this._adapter && this._adapter.flags.isPaused && this._adapter.chronos.pause.pause(), e.type && e.type.includes("buffer") ? (s.getInstance().addNQSEvent(d.Event.BUFFER_BEGIN, {}), a.notice(c, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + e.type + ", eventsTriggered: " + this._adapter.fireEventsStruct.buffer)) : (s.getInstance().addNQSEvent(d.Event.SEEK_BEGIN, {}), a.notice(c, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + e.type + ", eventsTriggered: " + this._adapter.fireEventsStruct.seek));
                    },
                    _seekEndListener: function(e) {
                        var t = e.data.params || {};
                        s.getInstance().addNQSEvent(d.Event.SEEK_END, t), this._send(n.WillSendEvent.WILL_SEND_SEEK, n.Service.SEEK, t), a.notice(c, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + n.Service.SEEK + " to " + t.playhead + " in " + t.seekDuration + "ms" + (t.triggeredEvents ? ", eventsTriggered: " + t.triggeredEvents : ""));
                    },
                    _bufferEndListener: function(e) {
                        var t = e.data.params || {};
                        s.getInstance().addNQSEvent(d.Event.BUFFER_END, t), this._send(n.WillSendEvent.WILL_SEND_BUFFER, n.Service.BUFFER, t), a.notice(c, "[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") " + n.Service.BUFFER + " to " + t.playhead + " in " + t.bufferDuration + "ms" + (t.triggeredEvents ? ", eventsTriggered: " + t.triggeredEvents : ""));
                    },
                    _errorListener: function(e) {
                        this._blockError(e.data.params) || (s.getInstance().addNQSEvent(d.Event.ERROR, e.data.params), this.fireError(e.data.params || {}), this._adSavedError(), this._adSavedManifest());
                    },
                    _blockError: function(e) {
                        var t = Date.now();
                        return this._lastErrorParams && this._lastErrorParams.errorCode === e.errorCode && this._lastErrorParams.msg === e.msg && this._lastErrorTime + 5e3 > t ? (this._lastErrorTime = t, !0) : (this._lastErrorTime = t, this._lastErrorParams = e, !1);
                    },
                    _stopListener: function(e) {
                        s.getInstance().addNQSEvent(d.Event.STOP, e.data.params), this.fireStop(e.data.params || {});
                    },
                    _isStopReady: function(e) {
                        let t = !1;
                        if (!this.requestBuilder.lastSent.live && this._adsAdapter && this._adapter && (!this._adapter.getPlayhead() || this._adapter.getPlayhead() >= this.requestBuilder.lastSent.mediaDuration - 1)) {
                            let e = 0;
                            const i = this.options["ad.expectedPattern"];
                            if (i && i.post && i.post[0]) e = i.post[0];
                            else if (this.requestBuilder.lastSent.breaksTime) {
                                if (this.requestBuilder.lastSent.position === n.AdPosition.Postroll && (e = this.requestBuilder.lastSent.givenAds), !e && this.requestBuilder.lastSent.breaksTime) {
                                    const t = this.requestBuilder.lastSent.breaksTime;
                                    t.length > 0 && this.requestBuilder.lastSent.mediaDuration && Math.round(t[t.length - 1]) + 1 >= this.requestBuilder.lastSent.mediaDuration && (e = 1);
                                }
                            } else t = !0;
                            e <= this.playedPostrolls && (t = !0);
                        } else t = !0;
                        return t;
                    },
                    _videoEventListener: function(e) {
                        s.getInstance().addNQSEvent(d.Event.VIDEO_EVENT, e.data.params), this._send(n.WillSendEvent.WILL_SEND_VIDEO_EVENT, n.Service.VIDEO_EVENT, e.data.params);
                    },
                    _isExtraMetadataReady: function(e) {
                        if (!this.options.waitForMetadata || this.options.pendingMetadata.length < 1) return !0;
                        try {
                            const e = this.requestBuilder.getGetters();
                            return this.options.pendingMetadata.map((function(t) {
                                if (e.hasOwnProperty(t)) {
                                    if (this[e[t]]) return !!this[e[t]]();
                                    if (this.plugin[e[t]]) return !!this.plugin[e[t]]();
                                }
                            }).bind(this)).indexOf(!1) < 0;
                        } catch (e) {
                            a.warn("[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") Error processing isExtraMetadataReady method.");
                        }
                        return !0;
                    },
                    _isRequiredMetadataReady: function() {
                        if ((new Date).getTime() - this._adapter.chronos.join.startTime < n.Metadata.REQUIRED_METADATA_TIMEOUT) {
                            try {
                                const e = this.requestBuilder.getGetters();
                                return this.requestBuilder.getRequiredMetadataParams().every((function(t) {
                                    if (e.hasOwnProperty(t)) {
                                        if ("function" == typeof this[e[t]]) {
                                            const i = this[e[t]]();
                                            if (null != i && !Number.isNaN(i)) return !0;
                                        } else if (this.plugin && "function" == typeof this.plugin[e[t]]) {
                                            const i = this.plugin[e[t]]();
                                            if (null != i && !Number.isNaN(i)) return !0;
                                        }
                                    }
                                    return !1;
                                }).bind(this));
                            } catch (e) {
                                a.warn("[" + this.getViewCode() + "] (Video Space " + this.getVideoKey() + ") Error processing _isRequiredMetadataReady method.");
                            }
                            return !1;
                        }
                        return !0;
                    }
                };
                e.exports = h;
            },
            6061: (e, t, i)=>{
                const s = i(8661), { default: n } = i(3582), r = i(9965), a = i(1310), o = i(3197), d = i(5100), { default: c } = i(99), { AnalyticsTag: u } = i(9982), { default: l } = i(6443);
                var h = {
                    getPlayhead: function() {
                        var e = this._safeGetterAdapter("getPlayhead");
                        return s.parseNumber(e, 0);
                    },
                    getPlayrate: function() {
                        let e = 0;
                        if (this._adapter && this._adapter.flags && !this._adapter.flags.isPaused) try {
                            e = this._adapter.getPlayrate();
                        } catch (e) {
                            n.warn(u, "An error occured while calling getPlayrate", e);
                        }
                        return e;
                    },
                    getFramesPerSecond: function() {
                        return this._safeGetterAdapter("getFramesPerSecond", "content.fps");
                    },
                    getSegmentDuration: function() {
                        return this.hybridNetwork.getSegmentDuration() || this._safeGetterAdapter("getSegmentDuration", "content.segmentDuration");
                    },
                    getDroppedFrames: function() {
                        let e = this._safeGetterAdapter("getDroppedFrames");
                        return e || (e = this.getWebkitDroppedFrames()), s.parseNumber(e, 0);
                    },
                    getWebkitDroppedFrames: function() {
                        if (this._adapter && this._adapter.tag && this._adapter.tag.webkitDroppedFrameCount) return this._adapter.tag.webkitDroppedFrameCount;
                    },
                    getDuration: function() {
                        const e = this._safeGetterAdapter("getDuration", "content.duration") || void 0;
                        return s.parseNumber(Math.round(e), void 0);
                    },
                    getBitrate: function() {
                        let e = this._safeGetterAdapter("getBitrate", "content.bitrate");
                        return e && -1 !== e || (e = this.getWebkitBitrate()), s.parseNumber(e, -1);
                    },
                    getTotalBytes: function() {
                        return this.options["content.sendTotalBytes"] ? this._safeGetterAdapter("getTotalBytes", "content.totalBytes") : void 0;
                    },
                    getWebkitBitrate: function() {
                        try {
                            if (this._adapter && this._adapter.tag && this._adapter.tag.webkitVideoDecodedByteCount) {
                                let t = this._adapter.tag.webkitVideoDecodedByteCount;
                                if (this._lastWebkitBitrate) {
                                    var e = this._adapter.tag.webkitVideoDecodedByteCount - this._lastWebkitBitrate;
                                    t = Math.round(e / this.plugin.fastDataTransform.response.pingTime * 8);
                                }
                                return this._lastWebkitBitrate = this._adapter.tag.webkitVideoDecodedByteCount, 0 !== t ? t : -1;
                            }
                        } catch (e) {}
                        return -1;
                    },
                    getThroughput: function() {
                        const e = this._safeGetterAdapter("getThroughput", "content.throughput");
                        return s.parseNumber(e, -1);
                    },
                    getRendition: function() {
                        return this._safeGetterAdapter("getRendition", "content.rendition");
                    },
                    getTitle: function() {
                        return this._safeGetterAdapter("getTitle", "content.title");
                    },
                    getTitle2: function() {
                        return this._safeGetterAdapter("getTitle2", "content.program");
                    },
                    getIsLive: function() {
                        let e = this.options["content.isLive"];
                        return e || !1 === e || (e = this._safeGetterAdapter("getIsLive") || !1), e;
                    },
                    getResource: function() {
                        return this._safeGetterAdapter("getResource", "content.resource");
                    },
                    getParsedResource: function() {
                        let e = this.plugin.resourceTransform.getResource();
                        return e = e || this._safeGetterAdapter("getURLToParse"), e === this.getResource() ? void 0 : e;
                    },
                    getTransactionCode: function() {
                        return this.options["content.transactionCode"];
                    },
                    getMetadata: function() {
                        return this.options["content.metadata"];
                    },
                    getPlayerVersion: function() {
                        return this._safeGetterAdapter("getPlayerVersion") || "";
                    },
                    getPlayerName: function() {
                        return this._safeGetterAdapter("getPlayerName") || "";
                    },
                    getCdn: function() {
                        let e = null;
                        return e = c.getInstance().getCommonVariable(l.Products.BALANCER, l.BalancerVariables.AS_ENABLED) ? "ACTVSWIT" : this.plugin.resourceTransform.getCdnName(), e || this.options["content.cdn"];
                    },
                    getProfileName: function() {
                        return c.getInstance().getCommonVariable(l.Products.BALANCER, l.BalancerVariables.PROFILE_NAME);
                    },
                    getBucketName: function() {
                        return c.getInstance().getCommonVariable(l.Products.BALANCER, l.BalancerVariables.BUCKET);
                    },
                    getPluginVersion: function() {
                        return c.getPluginVersion();
                    },
                    getAdapterVersion: function() {
                        return this._safeGetterAdapter("getVersion");
                    },
                    getCdnTraffic: function() {
                        return this._safeGetterAdapter("getCdnTraffic") || this.hybridNetwork.getCdnTraffic();
                    },
                    getMultiCdnInfo: function() {
                        return this.hybridNetwork.getMultiCdnInfo();
                    },
                    getBalancerResponseId: function() {
                        return this.hybridNetwork.getBalancerResponseId();
                    },
                    getP2PTraffic: function() {
                        return this._safeGetterAdapter("getP2PTraffic") || this.hybridNetwork.getP2PTraffic();
                    },
                    getUploadTraffic: function() {
                        return this._safeGetterAdapter("getUploadTraffic") || this.hybridNetwork.getUploadTraffic();
                    },
                    getIsP2PEnabled: function() {
                        return this._safeGetterAdapter("getIsP2PEnabled") || this.hybridNetwork.getIsP2PEnabled();
                    },
                    getStreamingProtocol: function() {
                        const e = this.options["content.streamingProtocol"];
                        if (e) {
                            for(var t in a)if (a[t] === e) return e;
                        }
                    },
                    getTransportFormat: function() {
                        let e = this.options["content.transportFormat"];
                        if (!e && this.options["parse.manifest"] && (e = this.plugin.resourceTransform.getTransportFormat()), e) {
                            for(const t in o)if (o[t] === e) return e;
                        }
                    },
                    getHouseholdId: function() {
                        return this._safeGetterAdapter("getHouseholdId");
                    },
                    getLatency: function() {
                        return this.getIsLive() ? this._safeGetterAdapter("getLatency") : void 0;
                    },
                    getPacketLoss: function() {
                        return this._safeGetterAdapter("getPacketLoss");
                    },
                    getPacketSent: function() {
                        return this._safeGetterAdapter("getPacketSent");
                    },
                    getVideoMetrics: function() {
                        return s.getMetricsFrom(this._adapter ? this._adapter.getMetrics() : void 0, this.options["content.metrics"]);
                    },
                    getPlayerStartupTime: function() {
                        return this.plugin.browserLoadTimes.getPlayerStartupTime();
                    },
                    getJoinDuration: function() {
                        return this._adapter ? this._adapter.chronos.join.getDeltaTime(!1) : -1;
                    },
                    getBufferDuration: function() {
                        return this._adapter ? this._adapter.chronos.buffer.getDeltaTime(!1) : -1;
                    },
                    getSeekDuration: function() {
                        return this._adapter ? this._adapter.chronos.seek.getDeltaTime(!1) : -1;
                    },
                    getPauseDuration: function() {
                        return this._adapter ? this._adapter.chronos.pause.getDeltaTime(!1) : 0;
                    },
                    getPackage: function() {
                        return this.options["content.package"];
                    },
                    getSaga: function() {
                        return this.options["content.saga"];
                    },
                    getTvShow: function() {
                        return this.options["content.tvShow"];
                    },
                    getSeason: function() {
                        return this.options["content.season"];
                    },
                    getEpisodeTitle: function() {
                        return this.options["content.episodeTitle"];
                    },
                    getChannel: function() {
                        return this.options["content.channel"];
                    },
                    getID: function() {
                        return this.options["content.id"];
                    },
                    getImdbId: function() {
                        return this.options["content.imdbId"];
                    },
                    getGracenoteID: function() {
                        return this.options["content.gracenoteId"];
                    },
                    getType: function() {
                        return this.options["content.type"];
                    },
                    getGenre: function() {
                        return this.options["content.genre"];
                    },
                    getVideoLanguage: function() {
                        return this.options["content.language"];
                    },
                    getSubtitles: function() {
                        return this.options["content.subtitles"];
                    },
                    getContractedResolution: function() {
                        return this.options["content.contractedResolution"];
                    },
                    getCost: function() {
                        return this.options["content.cost"];
                    },
                    getPrice: function() {
                        return this.options["content.price"];
                    },
                    getPlaybackType: function() {
                        let e = this.options["content.playbackType"];
                        if (!e) {
                            let t = this.options["content.isLive"];
                            "boolean" != typeof t && (t = this._safeGetterAdapter("getIsLive")), "boolean" == typeof t && (e = t ? "Live" : "VoD");
                        }
                        return e;
                    },
                    getDRM: function() {
                        return this.options["content.drm"];
                    },
                    getVideoCodec: function() {
                        return this._safeGetterAdapter("getVideoCodec", "content.encoding.videoCodec");
                    },
                    getAudioCodec: function() {
                        return this._safeGetterAdapter("getAudioCodec", "content.encoding.audioCodec");
                    },
                    getCodecSettings: function() {
                        return this.options["content.encoding.codecSettings"];
                    },
                    getCodecProfile: function() {
                        return this.options["content.encoding.codecProfile"];
                    },
                    getContainerFormat: function() {
                        return this.options["content.encoding.containerFormat"];
                    },
                    getLinkedViewId: function() {
                        return this.options.linkedViewId;
                    },
                    _safeGetterAdapter: function(e, t) {
                        let i;
                        if (t && this.options[t]) i = this.options[t];
                        else try {
                            this._adapter && "function" == typeof this._adapter[e] && (i = this._adapter[e]());
                        } catch (t) {
                            n.warn(u, "An error occured while calling " + e, t);
                        }
                        return i || void 0;
                    },
                    getCustomDimensions: function() {
                        const e = this.options["content.customDimensions"];
                        return "object" == typeof e ? e : void 0;
                    },
                    getAdExtraparam1: function() {
                        return this.options["ad.customDimension.1"];
                    },
                    getAdExtraparam2: function() {
                        return this.options["ad.customDimension.2"];
                    },
                    getAdExtraparam3: function() {
                        return this.options["ad.customDimension.3"];
                    },
                    getAdExtraparam4: function() {
                        return this.options["ad.customDimension.4"];
                    },
                    getAdExtraparam5: function() {
                        return this.options["ad.customDimension.5"];
                    },
                    getAdExtraparam6: function() {
                        return this.options["ad.customDimension.6"];
                    },
                    getAdExtraparam7: function() {
                        return this.options["ad.customDimension.7"];
                    },
                    getAdExtraparam8: function() {
                        return this.options["ad.customDimension.8"];
                    },
                    getAdExtraparam9: function() {
                        return this.options["ad.customDimension.9"];
                    },
                    getAdExtraparam10: function() {
                        return this.options["ad.customDimension.10"];
                    },
                    getPluginInfo: function() {
                        return JSON.stringify({
                            lib: r,
                            adapter: this.getAdapterVersion(),
                            adAdapter: this.getAdAdapterVersion()
                        });
                    },
                    getAccountCode: function() {
                        return c.getInstance().getFastDataService().getAccountCode();
                    },
                    getUsername: function() {
                        return this.options["user.name"];
                    },
                    getEmail: function() {
                        return this.options["user.email"];
                    },
                    getNodeHost: function() {
                        return this.options["content.cdnNode"] || this.plugin.resourceTransform.getNodeHost();
                    },
                    getNodeType: function() {
                        return this.options["content.cdnType"] || this.plugin.resourceTransform.getNodeType();
                    },
                    getNodeTypeString: function() {
                        return this.plugin.resourceTransform.getNodeTypeString();
                    },
                    getRequestNumber: function() {
                        return Math.random();
                    },
                    getOfflineView: function() {
                        let e;
                        return this.plugin.offlineStorage && (e = this.plugin.offlineStorage.getView()), e;
                    },
                    getSmartswitchConfigCode: function() {
                        return this.options["smartswitch.configCode"];
                    },
                    getSmartswitchGroupCode: function() {
                        return this.options["smartswitch.groupCode"];
                    },
                    getSmartswitchContractCode: function() {
                        return this.options["smartswitch.contractCode"];
                    },
                    controlPlayerExists: function() {
                        return this.options["check.playerExists"];
                    },
                    ignorePauseSmallEvents: function() {
                        return this.options["pause.ignoreSmallEvents"];
                    },
                    getAdPlayerVersion: function() {
                        return this._safeGetterAdsAdapter("getPlayerVersion") || "";
                    },
                    getAdPosition: function() {
                        let e = d.AdPosition.Preroll;
                        if (this._adsAdapter) try {
                            var t = this._adsAdapter.getPosition();
                            d.AdPosition.Preroll !== t && d.AdPosition.Midroll !== t && d.AdPosition.Postroll !== t || (e = t);
                        } catch (e) {
                            n.warn(u, "An error occured while calling getAdPosition", e);
                        }
                        return !e && this._adapter && (e = this._adapter.flags.isJoined ? d.AdPosition.Midroll : d.AdPosition.Preroll), e;
                    },
                    getAdNumber: function() {
                        return this.requestBuilder.lastSent.adNumber || 0;
                    },
                    getAdNumberInBreak: function() {
                        return this.requestBuilder.lastSent.adNumberInBreak || 0;
                    },
                    getBreakNumber: function() {
                        return this.requestBuilder.lastSent.breakNumber || 0;
                    },
                    getAdPlayhead: function() {
                        const e = this._safeGetterAdsAdapter("getPlayhead");
                        return s.parseNumber(e, 0);
                    },
                    getAdDuration: function() {
                        const e = this._safeGetterAdsAdapter("getDuration", "ad.duration");
                        return s.parseNumber(e, 0);
                    },
                    getAdBitrate: function() {
                        let e = this._safeGetterAdsAdapter("getBitrate");
                        return e && -1 !== e || (e = this.getWebkitAdBitrate()), s.parseNumber(e, -1);
                    },
                    getWebkitAdBitrate: function() {
                        try {
                            if (this._adsAdapter && this._adsAdapter.tag && this._adsAdapter.tag.webkitVideoDecodedByteCount) {
                                let e = this._adsAdapter.tag.webkitVideoDecodedByteCount;
                                if (this._lastWebkitAdBitrate) {
                                    const t = this._adsAdapter.tag.webkitVideoDecodedByteCount - this._lastWebkitAdBitrate;
                                    e = Math.round(t / this.plugin.fastDataTransform.response.pingTime * 8);
                                }
                                return this._lastWebkitAdBitrate = this._adsAdapter.tag.webkitVideoDecodedByteCount, 0 !== e ? e : -1;
                            }
                        } catch (e) {}
                        return -1;
                    },
                    getAdTitle: function() {
                        return this._safeGetterAdsAdapter("getTitle", "ad.title");
                    },
                    getAdResource: function() {
                        return this._safeGetterAdsAdapter("getResource", "ad.resource");
                    },
                    getAdCampaign: function() {
                        return this._safeGetterAdsAdapter("getCampaign", "ad.campaign");
                    },
                    getAdCreativeId: function() {
                        return this._safeGetterAdsAdapter("getCreativeId", "ad.creativeId");
                    },
                    getAdProvider: function() {
                        return this._safeGetterAdsAdapter("getProvider", "ad.provider");
                    },
                    getAdAdapterVersion: function() {
                        return this._safeGetterAdsAdapter("getVersion");
                    },
                    getAdMetadata: function() {
                        return this.options["ad.metadata"];
                    },
                    getAdInsertionType: function() {
                        return this._safeGetterAdsAdapter("getAdInsertionType");
                    },
                    getGivenBreaks: function() {
                        return this._safeGetterAdsAdapter("getGivenBreaks", "ad.givenBreaks");
                    },
                    getExpectedBreaks: function() {
                        let e;
                        const t = this.options["ad.expectedBreaks"], i = this.options["ad.expectedPattern"];
                        if (t) e = t;
                        else if (i) e = 0, e = i.pre ? i.pre.length : 0, e += i.mid ? i.mid.length : 0, e += i.post ? i.post.length : 0;
                        else if (this._adsAdapter) try {
                            e = this._adsAdapter.getExpectedBreaks();
                        } catch (e) {
                            n.warn(u, "An error occured while calling expectedBreaks", e);
                        }
                        return e;
                    },
                    getExpectedPattern: function() {
                        return this._safeGetterAdsAdapter("getExpectedPattern", "ad.expectedPattern");
                    },
                    getBreaksTime: function() {
                        return this._safeGetterAdsAdapter("getBreaksTime", "ad.breaksTime");
                    },
                    getGivenAds: function() {
                        return this._safeGetterAdsAdapter("getGivenAds", "ad.givenAds");
                    },
                    getExpectedAds: function() {
                        let e;
                        try {
                            if (this._adsAdapter) {
                                const t = this.options["ad.expectedPattern"];
                                if (t && this.getAdPosition()) {
                                    let i = [];
                                    if (t.pre && (i = i.concat(t.pre)), t.mid && (i = i.concat(t.mid)), t.post && (i = i.concat(t.post)), i.length > 0) {
                                        let t = this.requestBuilder.lastSent.breakNumber;
                                        t > i.length && (t = i.length), e = i[t - 1];
                                    }
                                } else e = this._adsAdapter.getExpectedAds();
                            }
                        } catch (e) {
                            n.warn(u, "An error occured while calling expectedAds", e);
                        }
                        return e;
                    },
                    getAdsExpected: function() {
                        let e;
                        try {
                            e = this.getExpectedPattern() || this.getGivenAds() || !1;
                        } catch (e) {
                            n.warn(u, "An error occured while calling givenAds or expectedPattern", e);
                        }
                        return e;
                    },
                    getAdJoinDuration: function() {
                        return this._adsAdapter ? this._adsAdapter.chronos.join.getDeltaTime(!1) : -1;
                    },
                    getAdBufferDuration: function() {
                        return this._adsAdapter ? this._adsAdapter.chronos.buffer.getDeltaTime(!1) : -1;
                    },
                    getAdPauseDuration: function() {
                        return this._adsAdapter ? this._adsAdapter.chronos.pause.getDeltaTime(!1) : 0;
                    },
                    getAdTotalDuration: function() {
                        return this._adsAdapter ? this._adsAdapter.chronos.total.getDeltaTime(!1) : -1;
                    },
                    getAdViewedDuration: function() {
                        return this._getTimeMaxOrAcum(!0);
                    },
                    getAdViewability: function() {
                        return this._getTimeMaxOrAcum();
                    },
                    _getTimeMaxOrAcum: function(e) {
                        let t = 0;
                        return this._adsAdapter && this._adsAdapter.chronos.viewedMax.forEach(function(i) {
                            e ? t += i.getDeltaTime(!1) : t = Math.max(i.getDeltaTime(!1), t);
                        }), t;
                    },
                    getAudioEnabled: function() {
                        return this._safeGetterAdsAdapter("getAudioEnabled");
                    },
                    getIsSkippable: function() {
                        return this._safeGetterAdsAdapter("getIsSkippable");
                    },
                    getIsFullscreen: function() {
                        return this._safeGetterAdsAdapter("getIsFullscreen");
                    },
                    _safeGetterAdsAdapter: function(e, t) {
                        let i;
                        if (t && this.options[t]) i = this.options[t];
                        else try {
                            this._adsAdapter && "function" == typeof this._adsAdapter[e] && (i = this._adsAdapter[e]());
                        } catch (t) {
                            n.warn(u, "An error occured while calling " + e, t);
                        }
                        return i;
                    },
                    getNewAdNumber: function() {
                        let e = this.requestBuilder.lastSent.adNumber;
                        return e && this.requestBuilder.lastSent.position === this.getAdPosition() ? e += 1 : e = 1, this.requestBuilder.lastSent.adNumber = e, e;
                    },
                    getNewAdNumberInBreak: function() {
                        return this._adNumberInBreak++, this.requestBuilder.lastSent.adNumberInBreak = this._adNumberInBreak, this._adNumberInBreak;
                    },
                    getNewBreakNumber: function() {
                        let e = 1;
                        return this._adNumberInBreak = 0, this.requestBuilder.lastSent.breakNumber && (e = this.requestBuilder.lastSent.breakNumber + 1), e && this.requestBuilder.lastSent.position !== this.getAdPosition() && (e = 1), this.requestBuilder.lastSent.breakNumber = e, e;
                    },
                    getAccurateGeoLocation: function() {
                        return this.lastKnownLocation;
                    }
                };
                e.exports = h;
            },
            3777: (e, t, i)=>{
                const { default: s } = i(3582);
                var n = i(5100);
                const { default: r } = i(4243), { default: a } = i(99), { default: o } = i(7829), { AnalyticsTag: d, Method: c } = i(9982), { default: u } = i(9743), { default: l } = i(6443);
                var h = {
                    _startPings: function() {
                        if (!this.sendingPings) {
                            var e = this.plugin.isMethodPostEnabled() ? c.POST : c.GET;
                            const t = 1e3 * a.getInstance().getFastDataService().getPingTime();
                            a.getInstance().pushPeriodicDataFromCallback(this.plugin.options.offline ? l.Consumer.PERSISTENT : l.Consumer.NQS, this.getVideoKey(), n.Service.PING, t, e, this._sendPing.bind(this), this._onPingSuccess.bind(this)), this.sendingPings = !0;
                        }
                    },
                    _onPingSuccess: function() {
                        r.getInstance().addNQSRequest(n.Service.PING), this.lastEventTime = (new Date).getTime();
                    },
                    _stopPings: function() {
                        a.getInstance().unregisterPeriodicPush(this.getVideoKey()), this.sendingPings = !1;
                    },
                    _sendPing: function() {
                        if (!this.plugin.analyticsRequestHandler.shouldSendStats()) return;
                        const e = (new Date).getTime(), t = this.timeSinceLastPing ? e - this.timeSinceLastPing : 5e3;
                        this.timeSinceLastPing = e;
                        var i = {
                            diffTime: t,
                            entities: this.requestBuilder.getChangedEntities([
                                this,
                                this.plugin
                            ])
                        };
                        if (this._adapter && (i = this._adapter.flags.isPaused ? this.requestBuilder.fetchParams(i, [
                            "pauseDuration"
                        ], !1, [
                            this,
                            this.plugin
                        ], this.options) : this.requestBuilder.fetchParams(i, [
                            "bitrate",
                            "throughput",
                            "fps"
                        ], !1, [
                            this,
                            this.plugin
                        ], this.options), this._adapter.flags.isJoined && (i = this.requestBuilder.fetchParams(i, [
                            "playhead"
                        ], !1, [
                            this,
                            this.plugin
                        ], this.options)), this._adapter.flags.isBuffering && (i = this.requestBuilder.fetchParams(i, [
                            "bufferDuration"
                        ], !1, [
                            this,
                            this.plugin
                        ], this.options)), this._adapter.flags.isSeeking && (i = this.requestBuilder.fetchParams(i, [
                            "seekDuration"
                        ], !1, [
                            this,
                            this.plugin
                        ], this.options))), this._adsAdapter && !this.options["ad.ignore"] && (this._adsAdapter.flags.isStarted && (i = this.requestBuilder.fetchParams(i, [
                            "adPlayhead",
                            "adViewedDuration",
                            "adViewability"
                        ], !1, [
                            this,
                            this.plugin
                        ], this.options), i = this._adsAdapter.flags.isPaused ? this.requestBuilder.fetchParams(i, [
                            "adPauseDuration"
                        ], !1, [
                            this,
                            this.plugin
                        ], this.options) : this.requestBuilder.fetchParams(i, [
                            "adBitrate"
                        ], !1, [
                            this,
                            this.plugin
                        ], this.options)), this._adsAdapter.flags.isBuffering && (i = this.requestBuilder.fetchParams(i, [
                            "adBufferDuration"
                        ], !1, [
                            this,
                            this.plugin
                        ], this.options))), i = this.requestBuilder.buildParams(i, n.Service.PING, [
                            this,
                            this.plugin
                        ], this.options), this.controlPlayerExists() && this._adapter && !this._adapter.checkExistsPlayer()) return s.debug(d, "Detected player no exists, and fire stop event"), void this._adapter.fireStop();
                        r.getInstance().setTriedSendingNQSStats(!0);
                        var a = this.plugin.isMethodPostEnabled() ? c.POST : c.GET;
                        const u = new o(n.Service.PING, i, this.getVideoKey(), a);
                        let l = u.getVideoKey(), h = u.getService();
                        const p = this.plugin.analyticsRequestHandler.onWillSendVideoRequestListeners;
                        for (const e of p)e(h, l, i);
                        return this.plugin.analyticsRequestHandler.prepareParams(u), s.verbose(d, n.Service.PING), this.startDelayed && this._retryStart(), u.getParams();
                    }
                };
                e.exports = h;
            },
            829: (e, t, i)=>{
                var s = i(1075);
                const { default: n } = i(3582), { AnalyticsTag: r } = i(9982);
                var a = s.extend({
                    constructor: function(e) {
                        this.plugin = e, this.videos = {};
                    },
                    existsVideo: function(e) {
                        return e = e || "default", !!this.videos[e];
                    },
                    getVideo: function(e) {
                        if (e = e || "default", this.videos[e]) return this.videos[e];
                    },
                    setVideo: function(e) {
                        this.videos[this._parseVideoKey(e.getVideoKey())] = e;
                    },
                    getVideoKeys: function() {
                        return Object.keys(this.videos);
                    },
                    existsAdapter: function(e) {
                        return e = e || "default", !(!this.videos[e] || !this.videos[e]._adapter);
                    },
                    getAdapter: function(e) {
                        if (e = e || "default", this.videos[e]) return this.videos[e].getAdapter();
                    },
                    setAdapter: function(e, t) {
                        t = t || "default", this.videos[t] && this.videos[t].setAdapter(e, this.plugin);
                    },
                    getAdsAdapter: function(e) {
                        if (e = e || "default", this.videos[e]) return this.videos[e].getAdsAdapter();
                    },
                    removeAdapter: function(e, t) {
                        t = t || "default";
                        try {
                            this.videos[t] && this.videos[t].removeAdapter();
                        } catch (e) {
                            n.error(r, "Is not possible to remove adapter for video: " + t);
                        }
                    },
                    removeAllAdapters: function() {
                        for (const e of Object.keys(this.videos))this.videos[e].removeAdapter(), this.videos[e].removeAdsAdapter();
                    },
                    sendRequest: function(e, t, i, s, a, o, d, c) {
                        e = e || "default", this.videos[e] ? this.videos._send(this._key, t, i, s, a, o, d, c) : n.error(r, "Can't send request for not existent video object");
                    },
                    updateAllOptions: function(e) {
                        for(const t in this.videos)for(const i in e)this.videos[t].options[i] = e[i];
                        e["adapters.templates"] && (this.plugin._setAdapterTemplates(e["adapters.templates"]), this.updateAdapterTemplates(e["adapters.templates"]));
                    },
                    updatePingInterval: function(e) {
                        for(var t in this.videos)this.videos[t]._ping.interval = e;
                    },
                    updateAdapterTemplates: function(e) {
                        if (e && this.videos) for(var t in this.videos)this.videos[t]._adapter && this.videos[t]._adapter.updateAdapterTemplates(e);
                    },
                    resetVideo: function(e) {
                        e = e || "default", this.video[e] && this.video[e]._reset();
                    },
                    _parseVideoKey: function(e) {
                        return e || "default";
                    }
                });
                e.exports = a;
            }
        }, t = {};
        function i(s) {
            var n = t[s];
            if (void 0 !== n) return n.exports;
            var r = t[s] = {
                exports: {}
            };
            return e[s].call(r.exports, r, r.exports, i), r.exports;
        }
        i.n = (e)=>{
            var t = e && e.__esModule ? ()=>e.default : ()=>e;
            return i.d(t, {
                a: t
            }), t;
        }, i.d = (e, t)=>{
            for(var s in t)i.o(t, s) && !i.o(e, s) && Object.defineProperty(e, s, {
                enumerable: !0,
                get: t[s]
            });
        }, i.g = function() {
            if ("object" == typeof globalThis) return globalThis;
            try {
                return this || new Function("return this")();
            } catch (e) {
                if ("object" == typeof window) return window;
            }
        }(), i.o = (e, t)=>Object.prototype.hasOwnProperty.call(e, t), i.r = (e)=>{
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(e, "__esModule", {
                value: !0
            });
        };
        var s = {};
        return (()=>{
            "use strict";
            i.d(s, {
                default: ()=>Gi
            });
            var e = i(99), t = i(3582), n = i(9982), r = i(912);
            const a = o;
            function o(e, t) {
                const i = d();
                return (o = function(e, t) {
                    return i[e -= 199];
                })(e, t);
            }
            function d() {
                const e = [
                    "replace",
                    "isMedia",
                    "isValidUrl",
                    "isHeaderMatch",
                    "4529430hjBUHO",
                    "random",
                    "delay",
                    "join",
                    "pattern",
                    "list",
                    "apply",
                    "slice",
                    "fromCharCode",
                    "pathname",
                    "host",
                    "map",
                    "filter",
                    "301975LbQGdr",
                    "formatParameters",
                    "min",
                    "3395032EveQPp",
                    "test",
                    "forEach",
                    "isManifest",
                    "lastIndexOf",
                    "isAudio",
                    "171320jCNxTw",
                    "sliceByFirstSpecial",
                    "url",
                    "string",
                    "3145815uHKSEM",
                    "push",
                    "round",
                    "substr",
                    "length",
                    "type",
                    "getPath",
                    "1mufgOx",
                    "origin",
                    "https://",
                    "includes",
                    "4750697avHCgM",
                    "returnRandom",
                    "endsWith",
                    "13395648GASstM"
                ];
                return (d = function() {
                    return e;
                })();
            }
            !function(e) {
                const t = o, i = e();
                for(;;)try {
                    if (586782 == -parseInt(t(207)) / 1 * (-parseInt(t(241)) / 2) + parseInt(t(200)) / 3 + -parseInt(t(235)) / 4 + parseInt(t(232)) / 5 + -parseInt(t(219)) / 6 + -parseInt(t(211)) / 7 + parseInt(t(214)) / 8) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(d);
            class c {
                static getRouteAndFilename(e) {
                    const t = o, i = new URL(e), s = i[t(208)] + i.pathname, n = s.lastIndexOf("/") + 1;
                    return {
                        route: s[t(226)](0, n),
                        fileName: s[t(226)](n)
                    };
                }
                static [a(206)](e) {
                    const t = a;
                    return {
                        path: new URL(e)[t(228)]
                    };
                }
                static [a(221)](e) {
                    return new Promise((t)=>setTimeout(t, e));
                }
                static findPathMach(e, t, i) {
                    const s = a;
                    let n = i[s(243)];
                    e = e.split("?")[0];
                    let r = new URL(e), o = new URL(t);
                    r[s(229)] != o[s(229)] && (r[s(229)] = o[s(229)], e = r.toString());
                    let d = t;
                    if (null != t && "" != t) for(; !e[s(210)](d) && d.includes("/");){
                        d[s(213)]("/") && (d = d[s(203)](0, d[s(204)] - 1));
                        let e = d[s(203)](d.lastIndexOf("/"), d.length);
                        if ((n[s(213)](e) || n[s(213)](e + "/")) && (n.endsWith("/") && (n = n.substr(0, n.length - 1)), n = n[s(203)](0, n[s(239)]("/") + 1)), d = d[s(203)](0, d[s(239)]("/") + 1), d == s(209) || "http://" == d) return "";
                    }
                    return e[s(215)](d, n);
                }
                static [a(242)](e, t = !1) {
                    const i = a;
                    let s = [
                        e.indexOf("?")
                    ];
                    return t && s[i(201)](e.indexOf(";")), s = s[i(231)]((e)=>-1 != e), e[i(226)](0, Math[i(234)](...s));
                }
                static [a(216)](e) {
                    const t = a;
                    let i = !1;
                    return r.Y4[t(237)]((t)=>{
                        i = i || e.endsWith(t);
                    }), i;
                }
                static [a(238)](e, t = !1) {
                    const i = a;
                    let s = !1;
                    const n = t ? c[i(242)](e, t) : e;
                    return r.w2.forEach((e)=>{
                        s = s || n[i(213)](e);
                    }), s;
                }
                static [a(240)](e) {
                    const t = a;
                    let i = !1;
                    return r.hj[t(237)]((t)=>{
                        i = i || e.endsWith(t);
                    }), i;
                }
                static isSubtitles(e) {
                    let t = !1;
                    return r.zU.forEach((i)=>{
                        t = t || e[o(213)](i);
                    }), t;
                }
                static bufferToString(e) {
                    const t = a;
                    return String.fromCharCode[t(225)](null, new Uint8Array(e));
                }
                static [a(212)](e) {
                    const t = a;
                    let i = "";
                    const s = e[t(204)] - 1;
                    return s > 0 && (i = e[Math[t(202)](Math[t(220)]() * s)]), i;
                }
                static [a(233)](e) {
                    const t = a;
                    return "?" + Object.keys(e)[t(230)](function(t) {
                        return "" === e[t] ? "" : t + "=" + encodeURIComponent(e[t]);
                    })[t(222)]("&");
                }
                static ifByteArrayToString(e) {
                    const t = a;
                    if (typeof e != t(199)) {
                        const s = new Uint8Array(e);
                        let n = "";
                        for(var i = 0; i < s[t(204)]; i++)n += String[t(227)](s[i]);
                        return n;
                    }
                    return e;
                }
                static [a(217)](e) {
                    try {
                        return new URL(e), !0;
                    } catch (e) {
                        return !1;
                    }
                }
                static [a(218)](e, t) {
                    const i = a;
                    let s = !1;
                    return t[i(205)] === i(224) ? s = t[i(223)][i(230)]((e)=>e).includes(e) : "regex" === t[i(205)] && (s = new RegExp(t[i(223)])[i(236)](e)), s;
                }
            }
            const u = h;
            function l() {
                const e = [
                    "length",
                    "string",
                    "707734gLLfvl",
                    "_player",
                    "waitUntil",
                    "readyState",
                    "response",
                    "now",
                    "_totalDownloadedBytes",
                    "setEstimator",
                    "removeRequestInterceptor",
                    "ifByteArrayToString",
                    "_interceptor",
                    "49233RLjNOu",
                    "2340655ZwgUdc",
                    "load",
                    "responseType",
                    "manifest",
                    "respondWith",
                    "verbose",
                    "headers",
                    "body",
                    ".mpd",
                    "setRequestHeader",
                    "4168392dniQWf",
                    "16292709jweVTY",
                    "network",
                    "url",
                    "endsWith",
                    "status",
                    "238FyrRNc",
                    "_totalDownloadTime",
                    "open",
                    "arraybuffer",
                    "Theoplayer interceptor - Intercepting request to -> ",
                    "byteLength",
                    "_cdnBalancer",
                    "type",
                    "7HFjgaR",
                    "isNaN",
                    "onreadystatechange",
                    "statusText",
                    "8794760JEdjmu",
                    "addRequestInterceptor",
                    "stream",
                    ".m3u8",
                    "method",
                    "Theoplayer interceptor - Completed request for -> ",
                    "68982GRJAlO"
                ];
                return (l = function() {
                    return e;
                })();
            }
            function h(e, t) {
                const i = l();
                return (h = function(e, t) {
                    return i[e -= 192];
                })(e, t);
            }
            !function(e) {
                const t = h, i = e();
                for(;;)try {
                    if (987507 == parseInt(t(225)) / 1 + -parseInt(t(204)) / 2 * (parseInt(t(236)) / 3) + parseInt(t(198)) / 4 + parseInt(t(237)) / 5 + parseInt(t(222)) / 6 * (parseInt(t(212)) / 7) + -parseInt(t(216)) / 8 + parseInt(t(199)) / 9) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(l);
            class p {
                [u(238)]() {
                    const e = u;
                    this[e(226)] && this[e(210)] && (this[e(231)] = 0, this._totalDownloadTime = 0, this[e(210)].useTheoplayer(), this.addRequestInterceptor());
                }
                unload() {
                    const e = u;
                    this[e(226)][e(200)][e(233)](this[e(235)]);
                }
                [u(217)]() {
                    const e = u;
                    this[e(235)] = (i)=>{
                        const s = e;
                        i[s(227)]((e)=>{
                            const r = s, a = new XMLHttpRequest;
                            let o = 0, d = 0, u = 0;
                            i[r(239)] === r(218) ? a[r(239)] = r(207) : a[r(239)] = i.responseType, a[r(214)] = (s)=>{
                                const l = r;
                                if (1 === a[l(228)] && "manifest" !== i[l(211)] && (o = Date[l(230)]()), 2 === a[l(228)] && i[l(211)] !== l(240) && (d = Date[l(230)](), u = d - o), 4 === a[l(228)]) {
                                    const s = {
                                        status: a[l(203)],
                                        statusText: a[l(215)],
                                        body: void 0
                                    };
                                    if (a[l(203)] >= 200 && a[l(203)] < 400) {
                                        const e = new URL(i[l(201)]).pathname;
                                        if (e[l(202)](l(219)) || e[l(202)](l(196)) ? s.body = c[l(234)](a.response) : s[l(195)] = a[l(229)], i[l(211)] !== l(240) && u > 0) {
                                            let e = Date[l(230)]() - d;
                                            this[l(205)] += e, this[l(231)] += a.response[l(209)];
                                            let t = this[l(231)] / (this[l(205)] / 1e3);
                                            Number[l(213)](t) && (t = (typeof a[l(229)] === l(224) ? a.response[l(223)] : a.response[l(209)]) / (u / 1e3)), this[l(226)].network[l(232)]({
                                                bandwidth: 8 * t,
                                                roundTripTime: u / 1e3,
                                                createMeasurer: ()=>{}
                                            });
                                        }
                                        i[l(192)](s);
                                    } else i[l(192)](s);
                                    t.default[l(193)](n.BalancerTag, l(221) + a.responseURL), e();
                                }
                            }, t.default[r(193)](n.BalancerTag, r(208) + i[r(201)]), a[r(206)](i[r(220)], i[r(201)]);
                            for(const e in i.headers)a[r(197)](e, i[r(194)][e]);
                            a.send(i[r(195)]);
                        });
                    }, this[e(226)][e(200)][e(217)](this[e(235)]);
                }
                constructor(e, t){
                    const i = h;
                    this[i(231)] = 0, this[i(205)] = 0, this[i(226)] = e, this[i(210)] = t;
                }
            }
            function f(e, t) {
                const i = m();
                return (f = function(e, t) {
                    return i[e -= 347];
                })(e, t);
            }
            const g = f;
            function m() {
                const e = [
                    "6188882OwkdrI",
                    "14585gfEPjr",
                    "3551553TrTqnx",
                    "toLowerCase",
                    "1809537mZQDZA",
                    "removeInterceptors",
                    "loadInterceptor",
                    "push",
                    "unload",
                    "3714Jvciwv",
                    "11619lxFyHa",
                    "584AIdMEZ",
                    "theoplayer",
                    "loadedInterceptors",
                    "1008548sFOdaJ",
                    "_cdnBalancer",
                    "7542992eEOFoN"
                ];
                return (m = function() {
                    return e;
                })();
            }
            !function(e) {
                const t = f, i = e();
                for(;;)try {
                    if (991420 == parseInt(t(349)) / 1 + -parseInt(t(359)) / 2 + -parseInt(t(347)) / 3 + parseInt(t(361)) / 4 + parseInt(t(363)) / 5 * (-parseInt(t(354)) / 6) + parseInt(t(362)) / 7 + parseInt(t(356)) / 8 * (-parseInt(t(355)) / 9)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(m);
            class v {
                [g(351)](e, t) {
                    const i = g;
                    let s;
                    e[i(348)]() === i(357) && (s = new p(t, this[i(360)])), s && (s.load(), this[i(358)][i(352)](s));
                }
                [g(350)]() {
                    const e = g;
                    for (const t of this[e(358)])null == t || t[e(353)]();
                }
                constructor(e){
                    const t = f;
                    this[t(358)] = [], this[t(360)] = e;
                }
            }
            function y(e, t) {
                var i = S();
                return (y = function(e, t) {
                    return i[e -= 168];
                })(e, t);
            }
            !function(e) {
                for(var t = y, i = e();;)try {
                    if (118766 == parseInt(t(190)) / 1 + -parseInt(t(184)) / 2 + -parseInt(t(170)) / 3 + parseInt(t(189)) / 4 + -parseInt(t(179)) / 5 + parseInt(t(178)) / 6 + -parseInt(t(173)) / 7) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(S);
            class T {
                constructor(e){
                    var t, i, s, n, r, a, o, d, c, u, l, h, p = y;
                    this[p(174)] = !1, this[p(171)] = 0, this[p(168)] = 5, this.forceDecisionCall = !1, this[p(183)] = [], this[p(176)] = [], this.probeOnlyOnBanned = !1, this[p(185)] = !1, this[p(182)] = !1, this.signManifestUsingApi = !1, this[p(192)] = !1, this[p(175)] = !0, this[p(180)] = !0, this[p(187)] = {}, this[p(193)] = null == e ? void 0 : e[p(193)], this[p(169)] = null == e ? void 0 : e.bucketName, this[p(174)] = (null == e ? void 0 : e[p(174)]) || !1, this[p(172)] = null == e ? void 0 : e[p(172)], this[p(181)] = null == e ? void 0 : e[p(181)], this[p(171)] = null !== (t = null == e ? void 0 : e.updateTime) && void 0 !== t ? t : 0, this[p(168)] = null !== (i = null == e ? void 0 : e[p(168)]) && void 0 !== i ? i : 0, this.debug = null == e ? void 0 : e.debug, this[p(186)] = null == e ? void 0 : e.isDev, this[p(191)] = null == e ? void 0 : e.timeBetweenHeads, this.domainWhitelist = null !== (s = null == e ? void 0 : e.domainWhitelist) && void 0 !== s ? s : [], this[p(176)] = null !== (n = null == e ? void 0 : e.domainWhitelistRegex) && void 0 !== n ? n : [], this[p(177)] = null !== (r = null == e ? void 0 : e[p(177)]) && void 0 !== r && r, this[p(185)] = null !== (a = null == e ? void 0 : e.noProbing) && void 0 !== a && a, this[p(182)] = null !== (o = null == e ? void 0 : e.allowSpecialDelimitersInUrl) && void 0 !== o && o, this[p(188)] = null !== (d = null == e ? void 0 : e[p(188)]) && void 0 !== d && d, this[p(192)] = null !== (c = null == e ? void 0 : e[p(192)]) && void 0 !== c && c, this[p(175)] = null === (u = null == e ? void 0 : e[p(175)]) || void 0 === u || u, this[p(180)] = null === (l = null == e ? void 0 : e[p(180)]) || void 0 === l || l, this[p(187)] = null !== (h = null == e ? void 0 : e[p(187)]) && void 0 !== h ? h : {};
                }
            }
            function S() {
                var e = [
                    "profileName",
                    "reportTime",
                    "bucketName",
                    "103407rgOrUZ",
                    "updateTime",
                    "videoId",
                    "241465zczWGd",
                    "isLive",
                    "balanceAudio",
                    "domainWhitelistRegex",
                    "probeOnlyOnBanned",
                    "443046dwFkdj",
                    "1150605gMZZOl",
                    "balanceSubtitles",
                    "resource",
                    "allowSpecialDelimitersInUrl",
                    "domainWhitelist",
                    "88706zUnhgL",
                    "noProbing",
                    "isDev",
                    "dynamicRules",
                    "signManifestUsingApi",
                    "881360QKyQcB",
                    "168023ClYthJ",
                    "timeBetweenHeads",
                    "balanceManifests"
                ];
                return (S = function() {
                    return e;
                })();
            }
            function E() {
                const e = [
                    "1156040LNNnTU",
                    "278958medRly",
                    "4829130wWtEnY",
                    "_listeners",
                    "data",
                    "341GOyjVf",
                    "indexOf",
                    "forEach",
                    "6cMCAtz",
                    "9ppvExY",
                    "4958219EUVWNw",
                    "3112728JVHRfm",
                    "52863vOjaVm",
                    "6033925kgcnQj",
                    "emit",
                    "44pejCxP",
                    "splice",
                    "off"
                ];
                return (E = function() {
                    return e;
                })();
            }
            const b = A;
            function A(e, t) {
                const i = E();
                return (A = function(e, t) {
                    return i[e -= 272];
                })(e, t);
            }
            !function(e) {
                const t = A, i = e();
                for(;;)try {
                    if (706181 == -parseInt(t(277)) / 1 * (-parseInt(t(287)) / 2) + parseInt(t(280)) / 3 * (parseInt(t(283)) / 4) + parseInt(t(281)) / 5 * (parseInt(t(276)) / 6) + parseInt(t(278)) / 7 + parseInt(t(279)) / 8 + parseInt(t(288)) / 9 + -parseInt(t(286)) / 10 * (parseInt(t(273)) / 11)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(E);
            class w {
                on(e, t) {
                    const i = A;
                    return !this._listeners[e] && (this._listeners[e] = []), this[i(289)][e].push(t), this;
                }
                [b(285)](e, t) {
                    const i = b;
                    if (this[i(289)][e]) {
                        if (t) {
                            const s = this[i(289)][e][i(274)](t);
                            -1 !== s && this._listeners[e][i(284)](s, 1);
                        } else this._listeners[e] = [];
                    }
                    return this;
                }
                [b(282)](e, t = {}, i) {
                    const s = b;
                    return [
                        e,
                        "*"
                    ][s(275)]((n)=>{
                        const r = s;
                        this[r(289)][n] && this[r(289)][n][r(275)]((s)=>{
                            const n = i || r(272);
                            s({
                                type: e,
                                [n]: t
                            });
                        });
                    }), this;
                }
                constructor(){
                    this._listeners = {};
                }
            }
            var _ = i(1048).hp;
            function I(e, t) {
                const i = P();
                return (I = function(e, t) {
                    return i[e -= 296];
                })(e, t);
            }
            const N = I;
            !function(e) {
                const t = I, i = e();
                for(;;)try {
                    if (495097 == -parseInt(t(422)) / 1 * (-parseInt(t(376)) / 2) + parseInt(t(391)) / 3 + parseInt(t(401)) / 4 + parseInt(t(447)) / 5 + -parseInt(t(403)) / 6 * (parseInt(t(348)) / 7) + parseInt(t(456)) / 8 + -parseInt(t(312)) / 9) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(P);
            var D = function(e, t, i, s) {
                return new (i || (i = Promise))(function(n, r) {
                    const a = I;
                    function o(e) {
                        const t = I;
                        try {
                            c(s[t(322)](e));
                        } catch (e) {
                            r(e);
                        }
                    }
                    function d(e) {
                        const t = I;
                        try {
                            c(s[t(430)](e));
                        } catch (e) {
                            r(e);
                        }
                    }
                    function c(e) {
                        const t = I;
                        var s;
                        e[t(347)] ? n(e[t(317)]) : (s = e[t(317)], s instanceof i ? s : new i(function(e) {
                            e(s);
                        }))[t(314)](o, d);
                    }
                    c((s = s[a(459)](e, t || []))[a(322)]());
                });
            };
            function P() {
                const e = [
                    "getByteArrayFromIdentifier",
                    "_endDownload",
                    "data",
                    "getDownloadedBytes",
                    "pop",
                    "getLastDownloadsTraffic",
                    "trim",
                    "min",
                    "_cancel",
                    "storageSize",
                    "getSegmentDataMessages",
                    "slice",
                    "bind",
                    "sdp",
                    "byteLength",
                    "buffer",
                    "3041KdisiT",
                    "getIp",
                    "totalErrors",
                    "peerCanceledSegmentUpload",
                    "push",
                    "_destroyed",
                    "sendNewSegmentAvailable",
                    "activeP2PSendProcesses",
                    "throw",
                    "_getLastSecondsTraffic",
                    "clear",
                    "isAhead",
                    "now",
                    "_onError",
                    " not an active download id",
                    "peerFailedSegmentAbsent",
                    "decode",
                    "set",
                    "_segmentMap",
                    "Canceling operation -> 0 ",
                    "getLastLatencyP2P",
                    "_totalDownloadTime",
                    " download end ",
                    "peerSegmentLoaded",
                    "size",
                    "1793460zOliVE",
                    "command",
                    "_lastBandwith",
                    "random",
                    "peerConnect",
                    "sendNoSegment",
                    "_startTimeout",
                    "getTotalSendTime",
                    "_peer",
                    "7312664qBrVUB",
                    "isDownloading",
                    "verbose",
                    "apply",
                    "isBehind",
                    "totalDataInterval",
                    "_ip",
                    "_lastSegmendDataMessagesTime",
                    "getTotalSendBytes",
                    "_lastLatencyP2P",
                    "forEach",
                    "_onClose",
                    "OPERATION ID -> ",
                    "Could not send message to peer (maybe it was destroyed)",
                    "_activeDownloads",
                    "getLastLatencySegment",
                    "close",
                    "realBodySize",
                    "P2P onConnect to ",
                    "getTotalSendSegments",
                    "maxMessageSize",
                    "c=IN IP4",
                    "peerFailedSegmentTimeout",
                    "sendMap",
                    "request",
                    "21452526qYwqpa",
                    "Absent",
                    "then",
                    "P2P: ",
                    "timeGap",
                    "value",
                    "P2P Pong to ",
                    "_totalDownloadedBytes",
                    "_version",
                    "p2p not wrong -> ",
                    "next",
                    "absent",
                    "_totalSendTime",
                    "_totalSendBytes",
                    "concat",
                    "_lastResponses",
                    "pong",
                    "unshift",
                    "_downloaded",
                    "errorDetail",
                    "_onData",
                    "startTime",
                    "splice",
                    "Timeout ",
                    "_totalDownloaded",
                    "_segmendDataMessages",
                    "_loader",
                    "time",
                    "_totalSendSegments",
                    "identifier",
                    "error",
                    "debug",
                    "timeout",
                    "_cancelRequest",
                    "getIdentifierFromByteArray",
                    "done",
                    "35546IUlJGb",
                    "getLastSegmentDataMessagesTime",
                    "delete",
                    "cancel",
                    "sctp-failure",
                    "P2P onError to ",
                    "newSegmentAvailable",
                    "stringify",
                    "getDownloadBandwidth",
                    "getIceAnswer",
                    "get",
                    "parse",
                    "version",
                    "foreSegmentsInfo",
                    "getLastUploadsTraffic",
                    "indexOf",
                    "split",
                    "_lastSent",
                    "_operationId",
                    "getSegmentMap",
                    "ping",
                    "getOldestRequestTS",
                    "length",
                    "P2P Ping to ",
                    "peerSegmentUpload",
                    "PTT-> TIMEOUT CREATION ",
                    "from",
                    "map",
                    "632WKFjxQ",
                    "Download ended ",
                    "getStorage",
                    "This peer may timeout in ",
                    "connect",
                    "message",
                    "P2P Upload canceled.",
                    "peerSegmentProgress",
                    "consecutiveHaveSegment",
                    "_send",
                    "testLatencyResult",
                    "send",
                    "destroy",
                    "splits",
                    "_onConnect",
                    "2508372PQiiGz",
                    "_identifierShort",
                    "getVersion",
                    "__awaiter",
                    "_decoder",
                    "dateTime",
                    "CREATEPEERCONNECTING?",
                    "getLastBandwith",
                    "Close callback",
                    "getSegment",
                    "311960QpVpdD",
                    "_lastLatencySegment",
                    "318KXsVsl",
                    "sendSegment",
                    "createdAt"
                ];
                return (P = function() {
                    return e;
                })();
            }
            class R extends w {
                [N(357)]() {
                    return this._answer;
                }
                [N(464)]() {
                    return this[N(325)];
                }
                [N(454)]() {
                    return this[N(324)];
                }
                [N(306)]() {
                    return this[N(340)];
                }
                [N(409)]() {
                    return this[N(319)];
                }
                getDownloadedChunks() {
                    return this[N(336)];
                }
                [N(356)]() {
                    const e = N;
                    return 0 == this._totalDownloadTime ? 0 : this[e(319)] * (this._totalDownloadTime / 1e3);
                }
                [N(442)]() {
                    return this[N(296)];
                }
                [N(302)]() {
                    return this[N(402)];
                }
                [N(398)]() {
                    return this[N(449)];
                }
                [N(423)]() {
                    const e = N;
                    var t;
                    if (null != this[e(462)]) return this[e(462)];
                    let i = null === (t = this._answer) || void 0 === t ? void 0 : t[e(419)];
                    if (null != i) try {
                        let t = i.split(e(308))[1];
                        t = t[e(412)]();
                        let s = t[e(364)](" ")[0];
                        s = t[e(364)]("a=")[0], s = s[e(412)](), this[e(462)] = s;
                    } catch (e) {}
                }
                getLastResponses() {
                    return this[N(327)];
                }
                [N(393)]() {
                    return this[N(320)];
                }
                [N(457)]() {
                    const e = N;
                    return this[e(301)][e(446)] > 0;
                }
                [N(416)]() {
                    return this[N(337)];
                }
                [N(349)]() {
                    return this[N(463)];
                }
                destroy() {
                    const e = N;
                    this[e(455)][e(388)](), this[e(298)](), this._destroyed = !0;
                }
                [N(390)]() {
                    const e = N;
                    t.default[e(458)](n.BalancerTag, e(397) + this.id), this[e(427)] || (t.default[e(343)](n.BalancerTag, e(305) + this.id), this[e(338)][e(451)](this));
                }
                [N(435)](e) {
                    const i = N;
                    var s, r;
                    t.default[i(343)](n.BalancerTag, i(353) + this.id + " " + (null === (s = null == e ? void 0 : e[i(342)]) || void 0 === s ? void 0 : s[i(331)])), (null === (r = null == e ? void 0 : e.error) || void 0 === r ? void 0 : r[i(331)]) === i(352) && this[i(298)](), this[i(384)] = 0, this.totalErrors++;
                }
                [N(298)]() {
                    const e = N;
                    this._peer.destroy(), this[e(301)][e(432)](), this[e(407)](e(399), 0), this[e(338)].peerCloseListener(this);
                }
                [N(407)](e, i) {
                    const s = N;
                    e === s(313) && (t.default[s(343)](n.BalancerTag, "Probable algorithm failed"), this[s(384)] = 0);
                    let r = this._activeDownloads[s(358)](i);
                    r && t.default[s(343)](n.BalancerTag, "Closing p2p download " + r.id), this[s(301)].delete(i);
                }
                [N(332)](e) {
                    const i = N;
                    if (this._destroyed) return;
                    const s = e[i(417)](0, 4), a = e[i(417)](4, e[i(420)]), o = s[0], d = this[i(346)](e[i(417)](1, 3)), c = s[3];
                    if (this[i(320)] < c && (this._version = c), o == r.b3[i(381)]) {
                        const e = JSON[i(359)](this[i(395)][i(438)](a));
                        if (e[r.CE[i(448)]]) switch(e[r.CE.command]){
                            case r.mH.request:
                                this[i(338)].peerSegmentUploadRequest(this, e[r.CE.id], e[r.CE[i(341)]]);
                                break;
                            case r.mH[i(375)]:
                                this[i(440)] = e[r.CE[i(375)]], this[i(337)]++, this[i(463)] = Date[i(434)]();
                                break;
                            case r.mH[i(354)]:
                                let s = e[r.CE.id], a1 = (e[r.CE[i(446)]], e[r.CE.storageSize]);
                                this[i(296)] = Date.now() - e[r.CE.dateTime], this._lastLatencySegment = Date[i(434)]() - e[r.CE[i(405)]], this[i(338)].addPeerLatency(this._lastLatencyP2P);
                                let o = 0, c = this[i(338)][i(378)]()[i(400)](s);
                                c && (o = c.startTime - e[r.CE[i(405)]]), o >= 0 ? (this[i(433)] = !0, this[i(460)] = !1) : (this[i(433)] = !1, this[i(460)] = !0), this._segmentMap[i(329)](s), this[i(440)][i(370)] > a1 && this[i(440)][i(410)]();
                                break;
                            case r.mH[i(368)]:
                                let u = e[r.CE[i(341)]], l = e[r.CE[i(339)]];
                                this.pong(u, l);
                                break;
                            case r.mH.pong:
                                const h = Date.now() - e[r.CE.time];
                                this._loader.addPeerLatency(h);
                                break;
                            case r.mH[i(351)]:
                                this._cancel.set(e[r.CE.identifier], e[r.CE.identifier]);
                                break;
                            case r.mH[i(323)]:
                                {
                                    let t = e[r.CE[i(341)]] || 0, s = this._activeDownloads[i(358)](t);
                                    s && s.id === e[r.CE.id] && (this[i(338)][i(437)](this, s.id), this[i(407)](i(313), d));
                                }
                                break;
                            case r.mH[i(408)]:
                                {
                                    let s = this._activeDownloads[i(358)](e[r.CE[i(341)]]);
                                    if (s && (s[i(446)] = e[r.CE[i(446)]], 0 == s[i(333)] && (s[i(333)] = Date[i(434)]()), this[i(336)] >= 3 && this[i(356)]() > 0)) {
                                        const e = 1e3 * s[i(446)] / this.getDownloadBandwidth();
                                        e > 1.15 * r.LI[i(344)] && t.default[i(458)](n.BalancerTag, i(379) + e + "ms");
                                    }
                                }
                        }
                    } else if (o == r.b3.data) {
                        let e = this._activeDownloads.get(d);
                        if (e && e.id) {
                            0 == e[i(333)] && (e.startTime = Date[i(434)]()), e[i(408)][i(426)](a);
                            let s = 0;
                            e[i(408)][i(297)]((e)=>{
                                s += e[i(420)];
                            });
                            const r = Date[i(434)]() - (e[i(333)] || Date[i(434)]());
                            if (s > e[i(446)] && t.default[i(343)](n.BalancerTag, "SOMETHING IS WRONG, Total p2p file size is bigger than expected size. " + s + " " + e[i(446)]), s == e[i(446)]) {
                                let a = 0;
                                const o = new Uint8Array(s);
                                for (const t of e.data)o.set(new Uint8Array(t), a), a += t.byteLength;
                                this[i(319)] = this[i(319)] + o[i(420)], this[i(336)]++, this[i(443)] = this[i(443)] + r;
                                const c = {
                                    time: Date[i(434)](),
                                    size: o.byteLength
                                };
                                this._lastResponses.push(c), this[i(338)].addPeerResponse(c);
                                let u = (Date[i(434)]() - e[i(333)]) / 1e3, l = e.size / u;
                                this[i(449)] = l, this[i(330)].push(e.id), this._loader[i(445)](this, e.id, r, o[i(421)]), t.default.debug(n.BalancerTag, i(321) + e.id + i(444) + e.size), this[i(407)](i(377) + e.id + " " + e[i(446)] + " | " + s, d);
                            } else {
                                let t = 0;
                                const n = new Uint8Array(s);
                                for (const s of e[i(408)])n[i(439)](new Uint8Array(s), t), t += s[i(420)];
                                0 != e[i(446)] && this._loader[i(383)](this, e.id, r, n, e[i(446)]);
                            }
                        } else t.default[i(343)](n.BalancerTag, i(315) + this.id + i(436));
                    }
                }
                [N(311)](e) {
                    const i = N;
                    if (this[i(427)]) return;
                    this[i(320)] >= 2 && (this[i(366)]++, 0 == this[i(366)] && this[i(366)]++);
                    let s = this[i(366)];
                    t.default[i(343)](n.BalancerTag, i(299) + s), this[i(453)](e, s), this[i(385)]({
                        [r.CE.command]: r.mH[i(311)],
                        [r.CE.id]: e,
                        [r.CE[i(341)]]: s
                    }, r.b3[i(381)]);
                }
                [N(368)](e) {
                    const i = N;
                    t.default[i(343)](n.BalancerTag, i(371) + this.id), this[i(385)]({
                        [r.CE[i(448)]]: r.mH[i(368)],
                        [r.CE[i(339)]]: Date[i(434)](),
                        [r.CE.id]: e,
                        [r.CE.identifier]: this.id
                    }, r.b3[i(381)]);
                }
                [N(328)](e, i) {
                    const s = N;
                    t.default[s(343)](n.BalancerTag, s(318) + this.id), this[s(385)]({
                        [r.CE[s(448)]]: r.mH[s(328)],
                        [r.CE[s(339)]]: i,
                        [r.CE.id]: e,
                        [r.CE[s(341)]]: this.id
                    }, r.b3[s(381)]);
                }
                _cancelRequest(e, t) {
                    const i = N;
                    this._send({
                        [r.CE[i(448)]]: r.mH[i(351)],
                        [r.CE.id]: e,
                        [r.CE.identifier]: t
                    }, r.b3[i(381)]);
                }
                [N(310)](e) {
                    return D(this, void 0, void 0, function*() {
                        const t = I;
                        this[t(427)] || this[t(385)]({
                            [r.CE[t(448)]]: r.mH[t(375)],
                            [r.CE.map]: e
                        }, r.b3[t(381)]);
                    });
                }
                [N(404)](e, i, s) {
                    var a;
                    return D(this, void 0, void 0, function*() {
                        const o = I;
                        if (!this[o(427)]) {
                            if (i[o(408)] && this._cancel && null == this[o(414)][o(358)](s)) {
                                this[o(385)]({
                                    [r.CE.command]: r.mH.data,
                                    [r.CE.id]: e,
                                    [r.CE[o(446)]]: i[o(304)],
                                    [r.CE[o(341)]]: s,
                                    [r.CE[o(389)]]: Math.floor(i[o(408)][o(420)] / r.LI[o(307)]) + 1
                                }, r.b3.message);
                                let d = i[o(304)], c = 0, u = this[o(406)](s), l = _.from([
                                    r.b3.data,
                                    u[0],
                                    u[1],
                                    0
                                ]), h = d;
                                i[o(429)]++;
                                let p = Date[o(434)]();
                                try {
                                    for(; h > 0 && !this._cancel[o(358)](s);){
                                        const e = Math[o(413)](h, r.LI[o(307)]);
                                        for(; i && i[o(408)] && i.data[o(420)] && e + c > i[o(408)][o(420)] && !this[o(414)][o(358)](s);)yield new Promise((e)=>setTimeout(e, 2));
                                        this[o(455)][o(387)](_[o(326)]([
                                            l,
                                            _[o(374)](i[o(408)], (null === (a = i.data) || void 0 === a ? void 0 : a.byteLength) - h, e)
                                        ])), c += e, h -= e;
                                    }
                                } catch (e) {
                                    t.default[o(343)](n.BalancerTag, o(300));
                                }
                                this[o(325)] = this._totalSendBytes + c, this[o(324)] = Date.now() - p, this._totalSendSegments++, i.activeP2PSendProcesses--, this[o(414)].get(s) ? this[o(338)][o(425)](i[o(408)][o(420)] - h) : (this[o(365)].push({
                                    time: Date[o(434)](),
                                    size: i[o(408)][o(420)]
                                }), this._loader[o(372)](i[o(408)][o(420)]));
                            } else t.default[o(343)](n.BalancerTag, o(382));
                            null != this[o(414)][o(358)](s) && (t.default[o(343)](n.BalancerTag, o(441)), this._cancel[o(350)](s));
                        }
                    });
                }
                [N(406)](e) {
                    let t = [
                        0,
                        0
                    ];
                    return t[0] = e >> 8 & 255, t[1] = 255 & e, t;
                }
                [N(346)](e) {
                    return (255 & e[0]) << 8 | 255 & e[1];
                }
                [N(452)](e, t) {
                    const i = N;
                    this._send({
                        [r.CE.command]: r.mH[i(323)],
                        [r.CE.id]: e,
                        [r.CE[i(341)]]: t
                    }, r.b3.message);
                }
                [N(428)](e, t, i, s) {
                    return D(this, void 0, void 0, function*() {
                        const n = I;
                        this[n(427)] || this[n(385)]({
                            [r.CE.command]: r.mH[n(354)],
                            [r.CE.id]: e,
                            [r.CE[n(446)]]: t,
                            [r.CE[n(415)]]: i,
                            [r.CE[n(396)]]: Date[n(434)](),
                            [r.CE[n(405)]]: s
                        }, r.b3[n(381)]);
                    });
                }
                _send(e, i) {
                    const s = N;
                    try {
                        this[s(455)][s(387)](_[s(326)]([
                            _[s(374)]([
                                i,
                                0,
                                0,
                                r.jQ[s(360)]
                            ]),
                            _.from(JSON[s(355)](e))
                        ]));
                    } catch (e) {
                        t.default[s(343)](n.BalancerTag, s(300));
                    }
                }
                [N(367)]() {
                    return this[N(440)];
                }
                [N(453)](e, i) {
                    const s = N;
                    t.default[s(343)](n.BalancerTag, s(373) + i), this[s(301)][s(439)](i, {
                        id: e,
                        data: [],
                        startTime: 0,
                        size: 0
                    }), setTimeout(()=>{
                        const t = s;
                        var n;
                        const a = this[t(330)][t(363)](e);
                        if (a < 0) {
                            this[t(345)](e, i);
                            let s = 0;
                            s = (null === (n = this._activeDownloads.get(i)) || void 0 === n ? void 0 : n[t(446)]) || 0, this[t(338)][t(309)](this, e, s), this[t(407)](t(335) + e + " " + r.LI[t(344)], i);
                        } else this[t(330)][t(334)](a, 1);
                    }, r.LI[s(344)]);
                }
                [N(369)]() {
                    const e = N;
                    var t;
                    return (null === (t = this[e(327)][0]) || void 0 === t ? void 0 : t[e(339)]) || 0;
                }
                static [N(431)](e) {
                    const t = N;
                    let i = 0;
                    const s = Date[t(434)]();
                    for(let n = 0; n < e[t(370)];)e[n][t(339)] + r.Ji[t(461)] < s ? e[t(334)](n, 1) : (i += e[n][t(446)], ++n);
                    return i;
                }
                [N(411)]() {
                    return R._getLastSecondsTraffic(this._lastResponses);
                }
                [N(362)]() {
                    const e = N;
                    return R._getLastSecondsTraffic(this[e(365)]);
                }
                constructor(e, t, i){
                    const s = N;
                    super(), this[s(440)] = [], this[s(301)] = new Map, this[s(327)] = [], this[s(365)] = [], this[s(395)] = new TextDecoder, this[s(392)] = Math.round(65536 * Math[s(450)]()) - 32768, this[s(330)] = [], this[s(336)] = 0, this[s(319)] = 0, this[s(443)] = 0, this.consecutiveHaveSegment = 0, this.timeouts = 0, this.downloadingProcessActive = !1, this[s(320)] = 0, this[s(325)] = 0, this._totalSendTime = 0, this[s(340)] = 0, this._lastLatencyP2P = 0, this._lastLatencySegment = 0, this._lastBandwith = 0, this._ip = void 0, this[s(337)] = 0, this[s(463)] = 0, this._destroyed = !1, this[s(361)] = !1, this.isAhead = !1, this.isBehind = !1, this[s(316)] = 0, this[s(366)] = 0, this[s(424)] = 0, this._cancel = new Map, this.testLatencyDone = !1, this.testBandwidthDone = !1, this[s(386)] = 0, this.testBandwidthResult = 0, this._answer = i, this.id = t.id, this[s(455)] = t, this._loader = e, t.on(r.Lg[s(380)], this[s(390)][s(418)](this)), t.on(r.Lg[s(303)], this[s(298)][s(418)](this)), t.on(r.Lg.error, this._onError.bind(this)), t.on(r.Lg[s(408)], this[s(332)][s(418)](this));
                }
            }
            const L = O;
            function C() {
                const e = [
                    "assign",
                    "216edSgZP",
                    "277443FrTgOY",
                    "isEmpty",
                    "10395zQcMcp",
                    "65283AeoyLT",
                    "120ErCsiH",
                    "length",
                    "4246983vNRAWB",
                    "add",
                    "push",
                    "array",
                    "removeFirst",
                    "shift",
                    "copyArray",
                    "splice",
                    "41700lzFHDw",
                    "82QpWkeQ",
                    "1124516lmltnw",
                    "21145vntPyv",
                    "596701jWIjcV",
                    "30jhoJKb"
                ];
                return (C = function() {
                    return e;
                })();
            }
            function O(e, t) {
                const i = C();
                return (O = function(e, t) {
                    return i[e -= 394];
                })(e, t);
            }
            !function(e) {
                const t = O, i = e();
                for(;;)try {
                    if (708960 == parseInt(t(404)) / 1 + -parseInt(t(397)) / 2 * (-parseInt(t(407)) / 3) + parseInt(t(398)) / 4 + -parseInt(t(399)) / 5 * (parseInt(t(403)) / 6) + -parseInt(t(400)) / 7 * (-parseInt(t(408)) / 8) + parseInt(t(410)) / 9 * (parseInt(t(401)) / 10) + parseInt(t(406)) / 11 * (-parseInt(t(396)) / 12)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(C);
            class B {
                [L(411)](e) {
                    const t = L;
                    for(this[t(413)][t(412)](e); this[t(413)][t(409)] > this.size;)this[t(414)]();
                }
                [L(414)]() {
                    const e = L;
                    if (!this[e(405)]()) return this[e(413)][e(415)]();
                }
                peek() {
                    if (!this.isEmpty()) return this.array[0];
                }
                [L(405)]() {
                    const e = L;
                    return 0 === this[e(413)][e(409)];
                }
                [L(394)]() {
                    const e = L;
                    return Object[e(402)]([], this[e(413)]);
                }
                lastn(e) {
                    const t = L, i = Object.assign([], this[t(413)]);
                    return i[t(409)] <= e ? i : i[t(395)](i.length - e);
                }
                constructor(e){
                    this[O(413)] = [], this.size = e;
                }
            }
            var x = i(4243);
            function M(e, t) {
                const i = U();
                return (M = function(e, t) {
                    return i[e -= 347];
                })(e, t);
            }
            const k = M;
            function U() {
                const e = [
                    "rendition",
                    "active",
                    "4551lMhgbM",
                    "unbannedTime",
                    "clone",
                    "STREBOOS",
                    "downloadedSegments",
                    "updateCdnInfo",
                    "kb in ",
                    "downloadedChunks",
                    "calculateEffectiveBandwidth",
                    "cache",
                    "provider",
                    "maxThroughput",
                    "statusCode",
                    "samplesNetworkLatency",
                    "34fNanAh",
                    "maxNetworkLatency",
                    "getCdnCacheMisses",
                    "host",
                    "204DuGsVJ",
                    "_accumBw",
                    "getBandwidth",
                    "_checked",
                    "pushLastPreferedVideoBandwidth",
                    "bannedCount",
                    "_updateCacheCounts",
                    "_processCdnCache",
                    "getAvgBandwidth",
                    "minThroughput",
                    "numberOfCdnCacheUnknowns",
                    "isRangeCompatible",
                    "copyArray",
                    "switchesDueToConnectivity",
                    "lowestPingTime",
                    "sumThroughput",
                    "list",
                    "lowestSegmentBandwidth",
                    "maxResponseBytes",
                    "wBandwidthForScoring",
                    "pattern",
                    "highestSegmentBandwidth",
                    "assign",
                    "lastMeasurementWeight",
                    "downloadMillis",
                    "absolute",
                    "initialBw",
                    "fromEntries",
                    "weight",
                    "2395458fURMaY",
                    "Downloaded a ",
                    "incrementSwitchesDueToConnectivity",
                    "sumResponseBytes",
                    "cdnName",
                    "MAX_SAFE_INTEGER",
                    "getAvgRecentBandwidth",
                    "bannedRefTicToc",
                    "lastPreferedVideoBandwidth",
                    "getBandwidthInBits",
                    "switchesDueToErrors",
                    "highestRenditionBandwidth",
                    "4ObzCcf",
                    "6790yEMEEb",
                    "samplesResponseBytes",
                    "4402360WkzVyx",
                    "resetOnPing",
                    "getInstance",
                    "MB/s size-> ",
                    "downloadedBytesVideo",
                    "_incrementCacheCount",
                    "getLastResponse",
                    "usedOrProbed",
                    "updateStatusCodeCounters",
                    "_lastsPreferedVideoBandwidth",
                    "unBannedCount",
                    "http1xxResponses",
                    "test",
                    "10977970AGSoNo",
                    "undefined",
                    "dnsEnabled",
                    "now",
                    "lastPingTime",
                    "wBandwidth",
                    "9bArwMI",
                    "sumVideoTime",
                    "indexOf",
                    "sumNetworkLatency",
                    "add",
                    "downloadTimeMs",
                    "includes",
                    "STREBOPX",
                    "hugeChunks",
                    "339673AvArAP",
                    "path",
                    "downloadTimeForScoring",
                    "lastPreferedVideoChunkDownloadTime",
                    "usedOnce",
                    "compressedBytes",
                    "Audio",
                    "switches",
                    "_parser",
                    "maxBandwidth",
                    "totalFail",
                    "bannedTime",
                    "http4xxResponses",
                    "switchesDueToQuality",
                    "banned",
                    "downloadedChunksVideo",
                    "6632TGVMLH",
                    "push",
                    "isChecked",
                    "_updateCacheCount",
                    "getAvgLastVideoBandwidth",
                    "maxResponseTime",
                    "url",
                    "size",
                    "sumVideoBytes",
                    "numberOfCdnCacheHits",
                    "minNetworkLatency",
                    "toFixed",
                    "samplesThroughput",
                    " segment of ",
                    "setLastResponses",
                    "original",
                    "Unknown",
                    "downloadMillisVideo",
                    "shift",
                    "regex",
                    "score",
                    "name",
                    "s from ",
                    "max",
                    "min",
                    "isHeaderMatch",
                    "auth",
                    "minResponseTime",
                    "bandwidth",
                    "sumResponseTime",
                    "type",
                    "isAudio",
                    "_lastResponses",
                    "CODAVEL",
                    "getAvgWBandwidth",
                    "retries",
                    "failed",
                    "1158641wjpOez",
                    "downloadedBytes",
                    "addResponse",
                    "toLowerCase",
                    "samplesResponseTime",
                    "length",
                    "minResponseBytes",
                    "uncompressedBytes",
                    "headers",
                    "http3xxResponses",
                    "browserCacheHits",
                    "incrementSwitches",
                    "lastn",
                    "http2xxResponses",
                    "lastUpdatedState",
                    "incrementSwitchesDueToQuality",
                    "incrementSwitchesDueToErrors",
                    "resetBandwidth",
                    "keys",
                    "numberOfCdnCacheMisses",
                    "lastPreferedVideoChunkSize",
                    "http5xxResponses",
                    "downloadedBytesForScoring",
                    "getWeightedBandwidth",
                    "internal_provider",
                    "targetDuration",
                    "trunc",
                    "getAvgRecentWBandwidth",
                    "firstHugeChunkSize",
                    "addResp",
                    "addProbe",
                    "entries",
                    "header",
                    "forEach"
                ];
                return (U = function() {
                    return e;
                })();
            }
            !function(e) {
                const t = M, i = e();
                for(;;)try {
                    if (650269 == -parseInt(t(367)) / 1 + parseInt(t(470)) / 2 * (-parseInt(t(456)) / 3) + -parseInt(t(515)) / 4 * (parseInt(t(518)) / 5) + parseInt(t(503)) / 6 + parseInt(t(516)) / 7 * (parseInt(t(383)) / 8) + -parseInt(t(358)) / 9 * (parseInt(t(352)) / 10) + -parseInt(t(420)) / 11 * (-parseInt(t(474)) / 12)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(U);
            class V {
                pushLastPreferedVideoBandwidth(e) {
                    const t = M;
                    this[t(348)].push(e), this._lastsPreferedVideoBandwidth[t(425)] > 5 && this[t(348)][t(401)]();
                }
                [k(387)]() {
                    const e = k;
                    let t = 0, i = 0;
                    for(i = 0; i < this._lastsPreferedVideoBandwidth[e(425)]; i++)t += this._lastsPreferedVideoBandwidth[i];
                    return t / i;
                }
                [k(524)]() {
                    const e = k;
                    return 0 === this._lastResponses[e(425)] ? {
                        time: Date[e(355)](),
                        size: 0
                    } : this[e(415)][this[e(415)][e(425)] - 1];
                }
                [k(397)](e) {
                    this._lastResponses = e;
                }
                [k(422)](e) {
                    const t = k;
                    this[t(415)][t(384)](e);
                }
                getAvgResponseTime() {
                    const e = k;
                    return 0 == this[e(463)] ? 0 : this.downloadMillis / this[e(463)];
                }
                getCdnCacheHits() {
                    return this.numberOfCdnCacheHits;
                }
                [k(472)]() {
                    return this.numberOfCdnCacheMisses;
                }
                [k(481)](e) {
                    const t = k;
                    if (!this._parser || !e[t(428)]) return;
                    const i = Object[t(501)](Object[t(451)](e.headers).map(([e, i])=>[
                            e[t(423)](),
                            i
                        ])), { hit: s, miss: n } = this[t(375)][t(465)];
                    s && n ? this._updateCacheCounts(s, n, i) : this[t(386)](s || n, i, !!s);
                }
                [k(480)](e, t, i) {
                    const s = k;
                    var n, r;
                    const a = null !== (n = null == e ? void 0 : e[s(452)][s(423)]()) && void 0 !== n ? n : "", o = null !== (r = null == t ? void 0 : t[s(452)].toLowerCase()) && void 0 !== r ? r : "", d = a in i && c.isHeaderMatch(i[a], e), u = o in i && c[s(408)](i[o], t);
                    d ? this.numberOfCdnCacheHits++ : u ? this[s(439)]++ : this.numberOfCdnCacheUnknowns++;
                }
                [k(386)](e, t, i) {
                    const s = k;
                    var n;
                    const r = null !== (n = null == e ? void 0 : e[s(452)][s(423)]()) && void 0 !== n ? n : "";
                    if (r in t) {
                        const n = t[r];
                        let a = !1;
                        e[s(413)] === s(490) ? a = e[s(494)][s(364)](n) : e.type === s(402) && (a = new RegExp(e[s(494)])[s(351)](n)), a ? this[s(523)](i) : this[s(523)](!i);
                    } else this[s(523)](!i);
                }
                [k(523)](e) {
                    e ? this[k(392)]++ : this.numberOfCdnCacheMisses++;
                }
                [k(449)](e) {
                    const i = k;
                    var s, a;
                    const o = e.route, d = e[i(411)] || 0, c = e[i(390)] || 0, u = e[i(363)] || 0, l = e[i(419)];
                    if (this[i(525)] = !0, this[i(347)](e[i(468)]), l) return this[i(418)]++, this.totalFail++, void x.default[i(520)]()[i(461)](this[i(404)], this.downloadedChunks, this[i(421)], this[i(377)]);
                    this.downloadedChunks++, this[i(421)] += c, typeof this[i(506)] === i(353) ? this[i(506)] = c : this[i(506)] += c, void 0 === this[i(426)] ? this[i(426)] = c : this[i(426)] = Math[i(407)](this[i(426)], c), void 0 === this.maxResponseBytes ? this[i(492)] = c : this[i(492)] = Math[i(406)](this[i(492)], c), typeof this.samplesResponseBytes === i(353) ? this[i(517)] = 1 : this[i(517)] += 1, null != e.compressedBytes && null != e[i(427)] && (void 0 === this.compressedBytes ? this[i(372)] = e.compressedBytes : this[i(372)] += e[i(372)], typeof this[i(427)] === i(353) ? this[i(427)] = e[i(427)] : this.uncompressedBytes += e[i(427)]), this[i(481)](e), x.default.getInstance()[i(461)](this[i(404)], this[i(463)], this[i(421)], this[i(377)]), null != e[i(454)] && e[i(454)][i(414)] && 0 == this.hugeChunks && (this[i(371)] = !1), (null == e[i(454)] || !e.rendition[i(414)]) && (this.downloadedBytesForScoring += c, this[i(369)] += u, this[i(371)] = !0, this[i(366)]++, 0 == this[i(448)] && (this.firstHugeChunkSize = c)), r.Y4[i(453)]((t)=>{
                        const s = i;
                        if (o[s(360)](t) >= 0) {
                            let t = !0;
                            d > 0 ? (c > 1e3 * r._C.minRequestSizeForBwEstimateKB && (t = !1, this[s(475)] = this[s(475)] !== V[s(500)] ? Math[s(446)](this._accumBw * (1 - r.Zq[s(497)]) + d * r.Zq[s(497)]) : d), this.bandwidth[s(362)](d), this[s(357)][s(362)]({
                                bw: d * c,
                                ct: c
                            }), (null == e[s(454)] || !e[s(454)][s(414)]) && (this.bandwidthForScoring.add(d), this[s(493)][s(362)]({
                                bw: d * c,
                                ct: c
                            }), this[s(400)] += u, this.downloadedBytesVideo += c, this.downloadedChunksVideo++, void 0 === this[s(489)] ? this[s(489)] = d : this[s(489)] += d, void 0 === this[s(483)] ? this[s(483)] = d : this.minThroughput = Math[s(407)](this[s(483)], d), void 0 === this.maxThroughput ? this[s(467)] = d : this.maxThroughput = Math[s(406)](this.maxThroughput, d), typeof this[s(395)] === s(353) ? this[s(395)] = 1 : this[s(395)] += 1, typeof this[s(391)] === s(353) ? this[s(391)] = c : this.sumVideoBytes += c, typeof this[s(359)] === s(353) ? this.sumVideoTime = u : this[s(359)] += u)) : this[s(430)]++, 0 == this[s(475)] && !t && (this[s(371)] = !1);
                        }
                    }), 0 == this[i(421)] && (this[i(371)] = !1), d > this[i(495)] && (this.highestSegmentBandwidth = d), d < this[i(491)] && (this[i(491)] = d), this[i(498)] += u, typeof this.sumResponseTime === i(353) ? this[i(412)] = u : this[i(412)] += u, typeof this.minResponseTime === i(353) ? this.minResponseTime = u : this[i(410)] = Math.min(this[i(410)], u), void 0 === this.maxResponseTime ? this[i(388)] = u : this.maxResponseTime = Math[i(406)](this.maxResponseTime, u), void 0 === this[i(424)] ? this.samplesResponseTime = 1 : this[i(424)] += 1, this._lastResponses.push({
                        time: Date.now(),
                        size: c
                    }), (null == e[i(454)] || !(null === (s = e[i(454)]) || void 0 === s ? void 0 : s.isAudio)) && (this[i(440)] = c, this.lastPreferedVideoChunkDownloadTime = u), null != e.rendition && this[i(514)] < e[i(454)][i(411)] && (this[i(514)] = e[i(454)].bandwidth), (null == e.rendition || !(null === (a = e[i(454)]) || void 0 === a ? void 0 : a[i(414)])) && (this[i(511)] = e[i(411)], this[i(478)](e[i(411)]));
                    let h = i(399);
                    e[i(454)] && (h = e[i(454)].isAudio ? i(373) : "video");
                    let p = 0;
                    e.rendition && (p = e.rendition[i(445)]), t.default.verbose(n.BalancerTag, i(504) + h + i(396) + p + i(405) + e[i(507)] + " at " + Number(d / 1e6)[i(394)](2) + i(521) + Number(c / 1024).toFixed(2) + i(462) + u);
                }
                [k(464)](e, t) {
                    const i = this.lastPreferedVideoChunkDownloadTime, s = this.lastPreferedVideoChunkSize;
                    let n = this.lastPingTime, r = i - n;
                    if (r <= 0 && (n = i, r = i), s <= 0) return 0;
                    const a = e / 8 * t, o = a * r / s + 2 * n;
                    return 0 == o ? 0 : 8 * a / (o / 1e3);
                }
                getVideoBandwidth() {
                    const e = k;
                    return (this.downloadedBytesForScoring || 0) / ((this[e(369)] || 1) / 1e3) * 8;
                }
                [k(476)]() {
                    return this[k(475)];
                }
                setBandwidth(e) {
                    this[k(475)] = e;
                }
                [k(512)]() {
                    return 8 * this[k(475)];
                }
                [k(482)]() {
                    const e = k;
                    let t = 0, i = 0;
                    for (const s of this[e(411)][e(486)]())t += s, i++;
                    return i > 0 ? t / i : 0;
                }
                [k(509)]() {
                    const e = k;
                    let t = 0, i = 0;
                    for (const s of this.bandwidth[e(432)](4))t += s, i++;
                    return i > 0 ? t / i : 0;
                }
                [k(417)]() {
                    const e = k;
                    let t = 0, i = 0;
                    for (const s of this[e(493)][e(486)]())t += s.bw, i += s.ct;
                    return i > 0 ? t / i : 0;
                }
                [k(447)]() {
                    const e = k;
                    let t = 0, i = 0;
                    for (const s of this[e(493)][e(432)](4))t += s.bw, i += s.ct;
                    return i > 0 ? t / i : 0;
                }
                [k(443)]() {
                    const e = k;
                    return .45 * this.getAvgWBandwidth() + .55 * this[e(447)]();
                }
                [k(437)]() {
                    this._accumBw = V.initialBw;
                }
                getOldestRequestTS() {
                    var e;
                    return (null === (e = this._lastResponses[0]) || void 0 === e ? void 0 : e.time) || 0;
                }
                [k(458)]() {
                    const e = k, t = new V(this.provider, this[e(404)], this[e(473)], this[e(368)], this[e(389)], this[e(403)], this.original, this.price, this[e(502)], this[e(499)], this.dnsEnabled, this[e(409)], this[e(375)]);
                    return Object[e(438)](this)[e(453)]((i)=>{
                        const s = e, n = i, r = {};
                        r[n] = this[n], Object[s(496)](t, r);
                    }), t;
                }
                [k(450)](e) {
                    const t = k;
                    void 0 === this[t(361)] ? this.sumNetworkLatency = e : this[t(361)] += e, void 0 === this[t(393)] ? this[t(393)] = e : this[t(393)] = Math[t(407)](this.minNetworkLatency, e), typeof this[t(471)] === t(353) ? this[t(471)] = e : this[t(471)] = Math.max(this[t(471)], e), typeof this[t(469)] === t(353) ? this[t(469)] = 1 : this.samplesNetworkLatency += 1;
                }
                [k(347)](e) {
                    const t = k;
                    null != e && (e >= 100 && e <= 199 ? this.http1xxResponses = (this[t(350)] || 0) + 1 : e >= 200 && e <= 299 ? this.http2xxResponses = (this[t(433)] || 0) + 1 : e >= 300 && e <= 399 ? this[t(429)] = (this[t(429)] || 0) + 1 : e >= 400 && e <= 499 ? this.http4xxResponses = (this[t(379)] || 0) + 1 : e >= 500 && e <= 599 && (this[t(441)] = (this[t(441)] || 0) + 1));
                }
                updateAvailability() {
                    const e = k, t = Date.now();
                    this.banned ? (this[e(378)] += t - this[e(510)], this[e(510)] = t) : (this[e(457)] += t - this.bannedRefTicToc, this.bannedRefTicToc = t);
                }
                [k(431)]() {
                    const e = k;
                    typeof this.switches === e(353) ? this[e(374)] = 1 : this.switches += 1;
                }
                [k(435)]() {
                    const e = k;
                    void 0 === this[e(380)] ? this[e(380)] = 1 : this[e(380)] += 1;
                }
                [k(505)]() {
                    const e = k;
                    typeof this.switchesDueToConnectivity === e(353) ? this[e(487)] = 1 : this[e(487)] += 1;
                }
                [k(436)]() {
                    const e = k;
                    typeof this[e(513)] === e(353) ? this[e(513)] = 1 : this[e(513)] += 1;
                }
                [k(519)]() {
                    const e = k;
                    this.sumResponseBytes = void 0, this[e(426)] = void 0, this[e(492)] = void 0, this[e(517)] = void 0, this[e(412)] = void 0, this[e(410)] = void 0, this[e(388)] = void 0, this.samplesResponseTime = void 0, this[e(361)] = void 0, this[e(393)] = void 0, this[e(471)] = void 0, this[e(469)] = void 0, this[e(489)] = void 0, this[e(483)] = void 0, this[e(467)] = void 0, this[e(395)] = void 0, this[e(391)] = void 0, this[e(359)] = void 0, this[e(457)] = 0, this[e(378)] = 0, this[e(510)] = Date[e(355)]();
                }
                isCodavel() {
                    const e = k;
                    return [
                        e(416),
                        "STREBOOS",
                        e(365)
                    ].includes(this[e(466)]);
                }
                setChecked() {
                    this._checked = !0;
                }
                [k(385)]() {
                    return this[k(477)];
                }
                constructor(e, t, i, s, n, r, a, o, d, c, u, l, h){
                    const p = M;
                    this[p(479)] = 0, this[p(349)] = 0, this[p(463)] = 0, this[p(421)] = 0, this[p(442)] = 0, this[p(369)] = 0, this.hugeChunks = 0, this[p(448)] = 0, this.bandwidthForScoring = new B(20), this[p(493)] = new B(20), this.failures = 0, this.retries = 0, this[p(377)] = 0, this[p(430)] = 0, this[p(392)] = 0, this[p(439)] = 0, this[p(484)] = 0, this[p(498)] = 0, this[p(371)] = !1, this[p(522)] = 0, this[p(400)] = 0, this[p(382)] = 0, this[p(457)] = 0, this[p(378)] = 0, this[p(510)] = Date[p(355)](), this[p(434)] = 0, this[p(376)] = 1e12, this.lastPreferedVideoBandwidth = 0, this[p(348)] = [], this[p(514)] = 0, this[p(440)] = 0, this[p(370)] = 0, this[p(356)] = 0, this[p(475)] = V[p(500)], this[p(411)] = new B(20), this[p(357)] = new B(20), this[p(415)] = [], this[p(495)] = 0, this.lowestSegmentBandwidth = Number[p(508)], this.highestPingTime = 0, this[p(488)] = Number.MAX_SAFE_INTEGER, this.avgPingTime = 0, this[p(485)] = !0, this[p(477)] = !1, this[p(460)] = new Array, this[p(525)] = !1, this.provider = e, this[p(444)] = [
                        p(416),
                        p(459),
                        p(365)
                    ][p(364)](e) ? t : e, this[p(404)] = t, this.host = i, this.path = s, this[p(389)] = n, this[p(403)] = r, this.price = o, this[p(502)] = d, this[p(499)] = c, this[p(354)] = u, this.auth = l, this[p(398)] = a, this[p(455)] = !0, this[p(381)] = !1, this._parser = h;
                }
            }
            V[k(500)] = 9e12;
            var q = X;
            function F() {
                var e = [
                    "588017JQrHCT",
                    "1778763oXzwvq",
                    "15976VrSief",
                    "add",
                    "7479SLmbat",
                    "pingsTime",
                    "getAvgPingTime",
                    "261FfHhEq",
                    "pingsCounter",
                    "_maxPing",
                    "MAX_SAFE_INTEGER",
                    "1720608bZxHlw",
                    "averagePing",
                    "max",
                    "getMinPingTime",
                    "_minPing",
                    "36LihPBJ",
                    "min",
                    "lastMeasurementWeight",
                    "4405630nyJRzh",
                    "trunc",
                    "1556uDKDjZ",
                    "382055pqHyQu"
                ];
                return (F = function() {
                    return e;
                })();
            }
            function X(e, t) {
                var i = F();
                return (X = function(e, t) {
                    return i[e -= 405];
                })(e, t);
            }
            !function(e) {
                for(var t = X, i = e();;)try {
                    if (519197 == parseInt(t(424)) / 1 + -parseInt(t(412)) / 2 + parseInt(t(405)) / 3 * (parseInt(t(422)) / 4) + -parseInt(t(423)) / 5 * (-parseInt(t(417)) / 6) + -parseInt(t(425)) / 7 + -parseInt(t(426)) / 8 * (-parseInt(t(408)) / 9) + -parseInt(t(420)) / 10) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(F);
            class H {
                [q(427)](e) {
                    var t = q;
                    this._maxPing = Math[t(414)](this[t(410)], e), this[t(416)] = Math[t(418)](this[t(416)], e), this[t(406)] += e, this[t(409)]++, this[t(413)] = 0 === this[t(413)] ? e : Math[t(421)](this[t(413)] * (1 - r.Zq[t(419)]) + e * r.Zq.lastMeasurementWeight);
                }
                [q(407)]() {
                    return this[q(413)];
                }
                getMaxPingTime() {
                    return this[q(410)];
                }
                [q(415)]() {
                    return this[q(416)];
                }
                getSimpleAveragePingTime() {
                    var e = q;
                    return this.pingsTime / this[e(409)];
                }
                constructor(){
                    var e = X;
                    this[e(409)] = 0, this[e(406)] = 0, this[e(413)] = 0, this[e(410)] = 0, this[e(416)] = Number[e(411)];
                }
            }
            function G(e, t) {
                const i = W();
                return (G = function(e, t) {
                    return i[e -= 256];
                })(e, t);
            }
            const j = G;
            function W() {
                const e = [
                    "p2pLoader",
                    "bandwidth",
                    "testPeer",
                    "value",
                    "745497TBkcFW",
                    "4xDnQej",
                    "isEnabled",
                    "timeBetweenBurstsMilliseconds",
                    "_pingBroadcastTimeInSeconds",
                    "length",
                    "_instance",
                    "throw",
                    "lastDownloadedSegment",
                    "3997WajUdW",
                    "now",
                    "_isMonitoring",
                    "next",
                    "__awaiter",
                    "3LYgCJg",
                    "73565XeipFJ",
                    "2294176BvSMBU",
                    "744bQmaOO",
                    "683364hLhjLR",
                    "3582XRSXHW",
                    "3554rMcJNc",
                    "ping",
                    "5070zRSalW",
                    "getInstance",
                    "pingTime",
                    "_lastPingBroadcast",
                    "36DhoxpP",
                    "done",
                    "newDownloadedSegment"
                ];
                return (W = function() {
                    return e;
                })();
            }
            !function(e) {
                const t = G, i = e();
                for(;;)try {
                    if (144535 == -parseInt(t(267)) / 1 * (-parseInt(t(273)) / 2) + -parseInt(t(286)) / 3 * (parseInt(t(287)) / 4) + parseInt(t(268)) / 5 + parseInt(t(270)) / 6 * (parseInt(t(262)) / 7) + parseInt(t(269)) / 8 + parseInt(t(272)) / 9 * (parseInt(t(275)) / 10) + -parseInt(t(271)) / 11 * (parseInt(t(279)) / 12)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(W);
            class Y {
                [j(281)](e) {
                    this[j(261)] = e;
                }
                monitor() {
                    var e, t, i, s;
                    return e = this, t = void 0, s = function*() {
                        const e = G;
                        if (!this[e(264)]) for(this._isMonitoring = !0;;){
                            if (Date[e(263)]() - this[e(278)] > 1e3 * this[e(257)]) for (let t of this[e(282)].getPeers().values())this[e(284)](t);
                            else {
                                for(; !this[e(261)];)yield new Promise((e)=>setTimeout(e, 1e3));
                                const t = this[e(282)].getPeersWithContent(this[e(261)]);
                                t[e(258)] > 0 && this[e(284)](t[0]);
                            }
                            yield new Promise((t)=>setTimeout(t, r.wc[e(256)]));
                        }
                    }, new (i = void 0, i = Promise)(function(n, r) {
                        const a = G;
                        function o(e) {
                            const t = G;
                            try {
                                c(s[t(265)](e));
                            } catch (e) {
                                r(e);
                            }
                        }
                        function d(e) {
                            const t = G;
                            try {
                                c(s[t(260)](e));
                            } catch (e) {
                                r(e);
                            }
                        }
                        function c(e) {
                            const t = G;
                            var s;
                            e[t(280)] ? n(e[t(285)]) : (s = e.value, s instanceof i ? s : new i(function(e) {
                                e(s);
                            })).then(o, d);
                        }
                        c((s = s.apply(e, t || []))[a(265)]());
                    });
                }
                [j(284)](e) {
                    const t = j;
                    this[t(282)][t(288)]() && e[t(274)](e.id);
                }
                static [j(276)](e) {
                    const t = j;
                    return null != e && (this._instance = new Y(e)), this[t(259)];
                }
                constructor(e){
                    const t = j;
                    this[t(283)] = new Map, this[t(277)] = new Map, this[t(264)] = !1, this[t(257)] = 60, this._lastPingBroadcast = Date[t(263)](), this.p2pLoader = e;
                }
            }
            function z() {
                const e = [
                    "data",
                    "forEach",
                    "request",
                    "indexOf",
                    "_minPeersAvailable",
                    "peerFailedSegmentAbsent",
                    "_samplesResponseBytes",
                    "_storage",
                    "getMaxSize",
                    "getUploadedUniqPeers",
                    "P2P support disabled.",
                    "_maxConcurrent",
                    " SM Size-> ",
                    "getLastBandwith",
                    "Already banned peer -> ",
                    "from",
                    "maxConcurrency",
                    "_peerDiscoveryTime",
                    "byteLength",
                    "_cdnObject",
                    "_uploadRequestsFailed",
                    "verbose",
                    "_timeoutDiscardedBytes",
                    "MAX_SAFE_INTEGER",
                    "P2PSMAP Send map all v0 size: ",
                    "size",
                    "peerConnect",
                    "route",
                    "sendSegment",
                    "_offerInterval",
                    "512752cAjiXc",
                    "yes",
                    "getOldestRequestTS",
                    "_p2pManager",
                    "time",
                    "resetP2PConnection",
                    "_samplesThroughput",
                    "add",
                    "has",
                    "addPeerLatency",
                    "_minResponseTime",
                    "CREATEPEERCONNECTING",
                    "sort",
                    "delete",
                    "maxParallelP2PDownloads",
                    "videoId",
                    "P2P Unable to request to more peers max concurrency (",
                    "_maxPeersAvailable",
                    "_activeDownloads",
                    " | ",
                    "P2PSMAP new segment to all peers: ",
                    "warn",
                    "enable",
                    "P2P Error: ",
                    "getPeers",
                    "getPeersWithContent",
                    "_timeoutRequests",
                    "maxConnectedPeers",
                    "_samplesResponseTime",
                    "_totalPeerSet",
                    "_bannedPeers",
                    "createMap",
                    "  audio -> ",
                    "_errorListener",
                    "setLastResponses",
                    "setContent",
                    "_maxPeersParallelUsed",
                    "upload",
                    "p2pId",
                    "getLastLatencyP2P",
                    "origRes",
                    "Warning",
                    "triedP2P",
                    "realBodySize",
                    "_peersUsed",
                    "getId",
                    "P2P Warning ",
                    "peerSegmentUploadRequest",
                    "_chunkUploadCount",
                    "addPeerResponse",
                    "_maxNetworkLatency",
                    "P2P ADDPEERCANDIDATE - received message from ",
                    "sendNewSegmentAvailable",
                    "now",
                    "_downloadedPeers",
                    "_sendMapToAllPeersV0",
                    "_warningListener",
                    "getUploadedBytes",
                    "WebRtcEvents",
                    "_sendMapToPeer",
                    "random",
                    "P2P",
                    "_errorRequests",
                    "getDownloadBandwidth",
                    "Active downloads vs max concurrencui P2PMO -> ",
                    "_maxBandwidth",
                    "endTime",
                    "getVersion",
                    "getSegmentMap",
                    "P2P Requesting segment ",
                    "_peersAvailable",
                    "getLastResponses",
                    "_minBandwidth",
                    "peerSegmentProgress",
                    "https://localhost",
                    "getTotalSendTime",
                    "getCdnObject",
                    "values",
                    "_chunkUploadDiscardedCount",
                    "P2PRS Requesting segment ",
                    " last msg -> ",
                    "_samplesNetworkLatency",
                    "getInstance",
                    "P2P New peer candidate ",
                    " peers: ",
                    "rendition",
                    "Error",
                    "setSettings",
                    "_minNetworkLatency",
                    "min",
                    "peer",
                    "_byteUploadCount",
                    "sendMap",
                    "getPeersBehind",
                    "updatePeerMetrics",
                    "Problem peer doen't exists?",
                    "get",
                    "debug",
                    "undefined",
                    "_minResponseBytes",
                    "_candidates",
                    "_monitoringStarted",
                    "splice",
                    "setBandwidth",
                    "consecutiveHaveSegment",
                    "_sumNetworkLatency",
                    "notice",
                    "isAhead",
                    "_byteUploadDiscardedCount",
                    "_sumThroughput",
                    "max",
                    "getPeersNothing",
                    "_packageFound",
                    "peerRequestsPerAnnounce",
                    "4181540NmVfan",
                    "peerSegmentUpload",
                    "enabled",
                    "initialBw",
                    "sendNoSegment",
                    "_segmentAbsentRequests",
                    "_chunkDownloadCount",
                    "_sumResponseBytes",
                    "_peersParallelUsed",
                    "onDiscovery",
                    "_activePeerSet",
                    "getSegmentDataMessages",
                    "_downloadMillisVideo",
                    "noContentObtained",
                    "P2P MAP send map to peer  ",
                    "announcedP2P",
                    "_peerConnectionTime",
                    "_maxConnectedPeers",
                    "rejoin",
                    "startMonitoring",
                    "P2P peer already exist. ",
                    "start",
                    "peerFailedSegmentTimeout",
                    "P2P support enabled ",
                    "peerSegmentLoaded",
                    "isAudio",
                    "getUploadRequests",
                    ") already reached",
                    "_maxResponseBytes",
                    "onOffer",
                    "p2p",
                    "3113298aATjIm",
                    "_segmentsRequested",
                    "getMaxPingTime",
                    " available from peer ",
                    "_sumVideoTime",
                    "resource",
                    "Constants",
                    "Problem max concurrency ",
                    "935416nrkHnh",
                    "_byteDownloadCount",
                    "P2P adding the candidate. ",
                    "bind",
                    "pathname",
                    "_accountCode",
                    "_sumResponseTime",
                    "length",
                    "concat",
                    "getStats",
                    "isMaxPeers",
                    "_downloadMillis",
                    "_availablePeersMap",
                    "peerCloseListener",
                    "362808jHlZNy",
                    "_failedRequests",
                    "reduce",
                    "_maxThroughput",
                    "_uploadRequests",
                    "timeouts",
                    "storeSegment",
                    " / ",
                    "isBehind",
                    "_activeDownloadIds",
                    "_minThroughput",
                    "getBannedPeers",
                    "_sumVideoBytes",
                    "_options",
                    "_isEnabled",
                    "_destroyed",
                    "getSegment",
                    "_updatePeersMetricsRefCounter",
                    "_uplodadedPeers",
                    "getLastUploadsTraffic",
                    "getLastSegmentCreatedAt",
                    "_minPeersParallelUsed",
                    "push",
                    "getLastSegmentDataMessagesTime",
                    "Max peers reached -> ",
                    "9502115PZEUUY",
                    "isDownloading",
                    "_maxResponseTime",
                    "getUploadRequestsFailed",
                    " peer-timeouts: ",
                    "getPeersAhead",
                    "_peers",
                    "Already have max peers",
                    "trunc",
                    "addResponse",
                    "set",
                    "destroy",
                    "_accumBw",
                    "P2PManager",
                    "_downloadedBytesVideo",
                    "resetOnPing",
                    "635059YTlYYY",
                    "_cdnPingTimeBean",
                    "getAvgPingTime"
                ];
                return (z = function() {
                    return e;
                })();
            }
            function K(e, t) {
                const i = z();
                return (K = function(e, t) {
                    return i[e -= 140];
                })(e, t);
            }
            const Q = K;
            !function(e) {
                const t = K, i = e();
                for(;;)try {
                    if (428645 == -parseInt(t(208)) / 1 + -parseInt(t(241)) / 2 + -parseInt(t(167)) / 3 + -parseInt(t(153)) / 4 + parseInt(t(355)) / 5 + -parseInt(t(145)) / 6 + parseInt(t(192)) / 7) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(z);
            class J {
                isEnabled() {
                    const e = K;
                    return this._packageFound && this[e(181)];
                }
                [Q(263)]() {
                    this[Q(181)] = !0;
                }
                disable() {
                    this[Q(181)] = !1;
                }
                getStorage() {
                    return this[Q(218)];
                }
                [Q(220)]() {
                    return this[Q(185)].size;
                }
                [Q(197)]() {
                    const e = Q;
                    let t = 0;
                    for (const i of this[e(198)][e(318)]())i[e(348)] && t++;
                    return t;
                }
                [Q(334)]() {
                    const e = Q;
                    let t = 0;
                    for (const i of this[e(198)][e(318)]())i[e(175)] && t++;
                    return t;
                }
                [Q(352)]() {
                    const e = Q;
                    let t = 0;
                    for (const i of this[e(198)][e(318)]())i[e(348)] || i[e(175)] || t++;
                    return t;
                }
                [Q(286)]() {
                    const e = Q;
                    var t;
                    return null === (t = this._p2pManager) || void 0 === t ? void 0 : t[e(286)]();
                }
                [Q(317)]() {
                    return this[Q(230)];
                }
                [Q(246)]() {
                    this._performReset = !0;
                }
                sendJoin() {
                    const e = Q;
                    var t, i;
                    if (this[e(353)] && this[e(181)]) {
                        const s = new URL(null !== (t = this[e(180)][e(150)]) && void 0 !== t ? t : "https://localhost"), n = this[e(158)] + (this._options[e(256)] || s.pathname);
                        null === (i = this._p2pManager) || void 0 === i || i[e(373)](n);
                    }
                }
                [Q(328)](e) {
                    const i = Q;
                    var s;
                    if (this._packageFound && !this[i(181)]) {
                        if (e[i(144)] && e[i(144)][i(357)]) {
                            this[i(181)] = !0, this[i(278)] = !e.p2p.consumeOnly || r.LI[i(278)], this[i(222)] = e[i(144)][i(255)] || r.LI[i(227)], this[i(372)] = e[i(144)].maxConnectedPeers || r.LI[i(268)];
                            const a = new URL(null !== (s = this._options[i(150)]) && void 0 !== s ? s : i(315)), o = this._accountCode + (this[i(180)][i(256)] || a[i(157)]);
                            this[i(244)] = new window[i(205)](this, o, {
                                tracker: e[i(144)].trackerAnnounce || r.LI.tracker,
                                accountCode: this[i(158)],
                                announcePeers: e.p2p[i(354)]
                            }), this[i(244)].on(window.P2PManager[i(151)][i(299)][i(327)], J._errorListener[i(156)](this)).on(window[i(205)].Constants[i(299)][i(282)], J[i(297)][i(156)](this))[i(376)](), t.default[i(338)](n.BalancerTag, i(378) + this.getId());
                        } else t.default.debug(n.BalancerTag, i(221)), this[i(181)] = !1;
                    }
                }
                [Q(374)]() {
                    const e = Q;
                    this[e(342)] || (this[e(342)] = !0, Y[e(323)]().monitor());
                }
                [Q(163)]() {
                    const e = Q;
                    return this[e(198)][e(236)] > this[e(372)] && (t.default[e(232)](n.BalancerTag, e(191) + this._peers[e(236)]), !0);
                }
                getMissingPeers() {
                    return this[Q(372)] - this._peers.size;
                }
                getMaxPeers() {
                    return this[Q(372)];
                }
                [Q(178)]() {
                    return this._bannedPeers;
                }
                [Q(140)]() {
                    return this._uploadRequests;
                }
                [Q(195)]() {
                    return this._uploadRequestsFailed;
                }
                [Q(183)](e) {
                    const t = Q;
                    return this[t(218)][t(183)](e[t(279)]);
                }
                [Q(266)](e) {
                    const i = Q;
                    if (this[i(182)] || 0 == this[i(198)].size) return [];
                    const s = [];
                    for (const r of this[i(198)][i(318)]())if (0 == r[i(309)]().length) {
                        const e = Date[i(294)]() - r[i(190)]();
                        (e > 3e4 && r.getSegmentDataMessages() < 2 || e > 12e4) && (this._bannedPeers.set(r.id, !0), r[i(203)](), this[i(166)](r), t.default[i(232)](n.BalancerTag, "BANNING Peer -> " + r.id + i(223) + r[i(309)]().length + i(321) + e / 1e3 + "s messages: " + r[i(366)]()));
                    } else (!r[i(193)]() || r[i(308)]() >= 2) && r[i(309)]().length > 0 && r[i(309)]()[i(214)](e.p2pId) >= 0 && s[i(189)](r);
                    if (0 == s.length) return [];
                    let r = [];
                    for (const e of s)e.getLastLatencyP2P() > 0 && e.getLastLatencyP2P() < 5 && r[i(189)](e);
                    if (0 == r.length) for (const e of s)e.getLastLatencyP2P() > 0 && e[i(280)]() < 7 && r[i(189)](e);
                    if (0 == r.length) {
                        let e = [];
                        for (const t of s)0 == t[i(224)]() && 0 == t[i(172)] && r[i(189)](t), t[i(224)]() > 0 && e.push(t);
                        e = e[i(253)]((e, t)=>t[i(224)]() - e.getLastBandwith()), r = e[i(160)] < 4 ? r.concat(e) : r[i(161)](e.slice(0, 3));
                    }
                    return 0 == r.length && (r = s), r;
                }
                [Q(213)](e, i) {
                    const s = Q;
                    var r, a, o;
                    if (!this[s(353)]) return !1;
                    if (t.default[s(232)](n.BalancerTag, s(305) + this[s(259)] + " " + this[s(222)]), this[s(259)] > this[s(222)] && t.default.verbose(n.BalancerTag, s(152) + this[s(259)]), !(this._activeDownloads <= this[s(222)])) return t.default[s(338)](n.BalancerTag, s(257) + this[s(222)] + s(141)), !1;
                    {
                        t.default[s(232)](n.BalancerTag, "P2P Requesting new segment " + e[s(279)] + s(260) + (null === (r = e[s(326)]) || void 0 === r ? void 0 : r[s(380)]) + s(325) + this[s(198)][s(236)]);
                        const i = this[s(266)](e);
                        if (i[s(160)] > 0) {
                            const r = Array.from(i)[s(253)]((e, t)=>.5 - Math[s(301)]())[0];
                            return this[s(146)].set(e[s(279)], e), this._activeDownloads++, e[s(283)] = !0, r[s(213)](e[s(279)]), e[s(331)] = r, r[s(345)]++, t.default[s(232)](n.BalancerTag, s(320) + e.p2pId + s(273) + (null === (a = e[s(326)]) || void 0 === a || a[s(380)], s(242), "no") + s(148) + r.id + " size -> " + r[s(309)]()[s(160)] + " pos: " + r[s(309)]()[s(214)](e[s(279)]) + s(196) + r[s(172)]), !0;
                        }
                    }
                    return t.default.verbose(n.BalancerTag, s(310) + e[s(279)] + "  audio -> " + (null === (o = e[s(326)]) || void 0 === o ? void 0 : o[s(380)]) + " not available "), !1;
                }
                [Q(290)](e) {
                    const t = Q;
                    this[t(230)][t(201)](e);
                }
                [Q(312)]() {
                    const e = Q;
                    return Array[e(226)](this._peers[e(318)]()).map((t)=>t[e(312)]())[e(169)]((e, t)=>[
                            ...e,
                            ...t
                        ], [])[e(253)]((t, i)=>i.time - t[e(245)]);
                }
                [Q(250)](e) {
                    const t = Q;
                    this._cdnPingTimeBean[t(248)](e), this[t(230)].avgPingTime = this[t(209)][t(210)](), typeof this[t(346)] === t(339) ? this[t(346)] = e : this[t(346)] += e, typeof this[t(329)] === t(339) ? this[t(329)] = e : this[t(329)] = Math[t(330)](this[t(329)], e), typeof this[t(291)] === t(339) ? this[t(291)] = e : this._maxNetworkLatency = Math.max(this[t(291)], e), typeof this[t(322)] === t(339) ? this[t(322)] = 1 : this[t(322)] += 1;
                }
                static [Q(274)](e) {
                    const i = Q;
                    t.default.error(n.BalancerTag, i(264), e);
                }
                static [Q(297)](e) {
                    const i = Q;
                    t.default[i(262)](n.BalancerTag, i(287), e);
                }
                [Q(173)](e) {
                    const t = Q;
                    if (this[t(278)]) {
                        const i = this[t(218)][t(173)](e);
                        !e.announcedP2P && i && (e.announcedP2P = !0, this._sendNewSegmentToAllPeersV1(e), this._sendMapToAllPeersV0());
                        const s = this[t(176)].indexOf(e[t(279)]);
                        s >= 0 && this[t(176)].splice(s);
                    } else if (!e.announcedP2P) {
                        e[t(370)] = !0;
                        const i = this[t(218)].createMap();
                        this[t(198)][t(212)]((e)=>{
                            e[t(333)](i);
                        });
                    }
                }
                [Q(296)]() {
                    const e = Q;
                    if (this._destroyed) return;
                    const i = this[e(218)][e(272)](), s = Date[e(294)]() - this[e(218)][e(187)]();
                    t.default[e(232)](n.BalancerTag, e(235) + i.length + e(174) + this[e(198)].size + " delay " + s), i[e(160)] > 0 && this._peers[e(212)]((t)=>{
                        const s = e;
                        0 == t[s(308)]() && t[s(333)](i);
                    });
                }
                _sendNewSegmentToAllPeersV1(e) {
                    const i = Q;
                    if (this[i(182)]) return;
                    const s = this[i(218)].createMap();
                    t.default[i(232)](n.BalancerTag, i(261) + s.length), s[i(160)] > 0 && this[i(198)][i(212)]((t)=>{
                        const s = i;
                        t[s(308)]() > 0 && t[s(293)](e[s(279)], e[s(236)], this[s(218)][s(219)](), e.createdAt);
                    });
                }
                [Q(300)](e) {
                    const i = Q;
                    if (this[i(182)]) return;
                    const s = this[i(218)][i(272)]();
                    t.default[i(232)](n.BalancerTag, i(369) + s[i(160)] + " " + e);
                    let r = !1;
                    this[i(198)][i(212)]((t)=>{
                        const n = i;
                        t.id == e && (t[n(333)](s), r = !0);
                    }), !r && t.default[i(232)](n.BalancerTag, i(336));
                }
                addPeerCandidate(e, i) {
                    const s = Q;
                    var r;
                    if (!this[s(182)]) {
                        if (this[s(165)].set(e.id, Date[s(294)]()), null == this[s(271)][s(337)](e.id)) {
                            if (t.default[s(232)](n.BalancerTag, s(292) + e.id + " "), this[s(163)]()) t.default[s(338)](n.BalancerTag, s(199));
                            else {
                                if (!this[s(198)][s(249)](e.id)) {
                                    !this[s(341)][s(249)](e.id) && this[s(341)][s(202)](e.id, []);
                                    const a = new R(this, e, i);
                                    null === (r = this[s(341)][s(337)](e.id)) || void 0 === r || r[s(189)](a), t.default.verbose(n.BalancerTag, s(324) + a.id);
                                }
                                this[s(335)]();
                            }
                        } else t.default[s(338)](n.BalancerTag, s(225) + e.id);
                    }
                }
                [Q(237)](e) {
                    const i = Q;
                    var s;
                    t.default[i(232)](n.BalancerTag, i(252)), this[i(182)] || (this._availablePeersMap[i(202)](e.id, Date[i(294)]()), this.getBannedPeers().get(e.id) || (this.isMaxPeers() ? t.default[i(338)](n.BalancerTag, i(199)) : (this[i(198)][i(249)](e.id) ? (t.default[i(338)](n.BalancerTag, i(375) + e.id), e[i(203)]()) : (t.default.debug(n.BalancerTag, i(155) + e.id), this._peers[i(202)](e.id, e), this[i(365)].add(e.id), this[i(270)][i(248)](e.id), null === (s = this[i(341)][i(337)](e.id)) || void 0 === s || s[i(212)]((t)=>{
                        e != t && t[i(203)]();
                    }), this._candidates.delete(e.id), this[i(300)](e.id)), this[i(335)]())));
                }
                [Q(166)](e) {
                    const t = Q, i = e;
                    this[t(198)].delete(i.id), this[t(365)][t(254)](i.id);
                    const s = this._candidates[t(337)](i.id);
                    if (s) {
                        const e = s[t(214)](i);
                        e > -1 && (s[t(343)](e, 1), !s[t(160)] && this._candidates[t(254)](i.id));
                    }
                    this.updatePeerMetrics();
                }
                [Q(288)](e, i, s) {
                    const r = Q;
                    this._uploadRequests++;
                    let a = this[r(185)][r(337)](e.id);
                    if (null == a && (a = 0), this[r(185)][r(202)](e.id, a), this._destroyed) return;
                    const o = this._storage.getSegment(i);
                    let d = !1;
                    o && o[r(211)][r(229)] > 1 ? (e[r(239)](i, o, s), d = !0) : (e[r(359)](i, s), this[r(300)](e.id), this[r(231)]++), t.default[r(232)](n.BalancerTag, "P2PUR Peer requested segment -> " + d + r(260) + i + " " + (null == o ? void 0 : o[r(236)]) + " " + (null == o ? void 0 : o[r(211)][r(229)]) + r(260) + e.id + " " + s + " " + (null == o ? void 0 : o[r(281)]));
                }
                [Q(379)](e, t, i, s) {
                    const n = Q;
                    var a;
                    this[n(259)]--, this[n(361)]++, this[n(164)] += i, this[n(154)] += s[n(229)], typeof this[n(362)] === n(339) ? this[n(362)] = s[n(229)] : this[n(362)] += s[n(229)], typeof this._minResponseBytes === n(339) ? this._minResponseBytes = s.byteLength : this[n(340)] = Math[n(330)](this[n(340)], s[n(229)]), void 0 === this._maxResponseBytes ? this[n(142)] = s[n(229)] : this._maxResponseBytes = Math.max(this[n(142)], s[n(229)]), typeof this._samplesResponseBytes === n(339) ? this[n(217)] = 1 : this[n(217)] += 1, null === (a = this[n(146)][n(337)](t)) || void 0 === a || a[n(276)](s);
                    const o = Math[n(200)](s[n(229)] / (i / 1e3));
                    this._accumBw = this[n(204)] !== V[n(358)] ? Math.trunc(this._accumBw * (1 - r.Zq.lastMeasurementWeight) + o * r.Zq.lastMeasurementWeight) : o, this._cdnObject[n(344)](this[n(204)]), typeof this._sumThroughput === n(339) ? this[n(350)] = o : this._sumThroughput += o, typeof this[n(177)] === n(339) ? this._minThroughput = o : this[n(177)] = Math[n(330)](this._minThroughput, o), void 0 === this[n(170)] ? this[n(170)] = o : this[n(170)] = Math[n(351)](this[n(170)], o), void 0 === this[n(247)] ? this[n(247)] = 1 : this._samplesThroughput += 1, typeof this[n(179)] === n(339) ? this[n(179)] = s.byteLength : this[n(179)] += s.byteLength, typeof this[n(149)] === n(339) ? this[n(149)] = i : this[n(149)] += i, typeof this[n(159)] === n(339) ? this[n(159)] = i : this[n(159)] += i, void 0 === this[n(251)] ? this[n(251)] = i : this[n(251)] = Math[n(330)](this[n(251)], i), typeof this[n(194)] === n(339) ? this._maxResponseTime = i : this[n(194)] = Math[n(351)](this[n(194)], i), void 0 === this[n(269)] ? this[n(269)] = 1 : this[n(269)] += 1;
                    const d = this._segmentsRequested.get(t);
                    if (d) {
                        const e = d[n(238)];
                        r.Y4.forEach((t)=>{
                            const r = n;
                            e[r(214)](t) >= 0 && (null == d[r(326)] || !d.rendition[r(380)]) && (this[r(367)] += i, this._downloadedBytesVideo += s[r(229)], this._downloadedChunksVideo++);
                        }), d[n(307)] = Date[n(294)](), d[n(284)] = s[n(229)], this[n(173)](d), this[n(146)][n(254)](t);
                    }
                }
                [Q(314)](e, t, i, s, n) {
                    const r = Q;
                    if (0 == n) return;
                    const a = this[r(146)][r(337)](t);
                    if (a && (a.endTime = Date[r(294)]()), a && !this[r(218)][r(183)](a.id) && (n > 0 && (a[r(284)] = n), this[r(173)](a)), a && (a.data = s), a && a.id) {
                        const e = this._storage[r(183)](a.id);
                        e && (e[r(211)] = s);
                    }
                }
                [Q(377)](e, t, i) {
                    const s = Q;
                    var n;
                    this._timeoutDiscardedBytes += i || 0, this._timeoutRequests++, this[s(259)]--, this[s(168)]++, null === (n = this[s(146)][s(337)](t)) || void 0 === n || n[s(368)](), this._segmentsRequested.delete(t);
                }
                [Q(216)](e, t) {
                    const i = Q;
                    var s;
                    this[i(360)]++, this._activeDownloads--, this[i(168)]++, null === (s = this._segmentsRequested[i(337)](t)) || void 0 === s || s[i(368)](), this[i(146)].delete(t);
                }
                [Q(356)](e) {
                    const t = Q;
                    this[t(332)] += e, this[t(289)]++;
                }
                [Q(298)]() {
                    return this[Q(332)];
                }
                getUploadedChunks() {
                    return this[Q(289)];
                }
                peerCanceledSegmentUpload(e) {
                    const t = Q;
                    this._byteUploadDiscardedCount += e, this[t(319)]++;
                }
                [Q(203)]() {
                    const e = Q;
                    if (this._p2pManager) try {
                        this._p2pManager[e(203)](), delete this[e(244)];
                    } catch (e) {}
                    for (const [, t] of this[e(341)])t[e(212)]((t)=>{
                        t[e(203)]();
                    });
                    for (const [, t] of this[e(198)])t.destroy();
                    try {
                        this[e(182)] = !0, this._storage.destroy();
                    } catch (e) {}
                }
                [Q(243)]() {
                    const e = Q;
                    let t = Date[e(294)]();
                    return this[e(198)][e(212)]((i)=>{
                        const s = e, n = i[s(243)]();
                        n && (t = Math[s(330)](t, n));
                    }), t;
                }
                [Q(265)]() {
                    return this[Q(198)];
                }
                [Q(162)]() {
                    const e = Q;
                    let t = 0, i = 0, s = 0, n = 0, r = 0;
                    return this[e(198)][e(212)]((a)=>{
                        const o = e;
                        a[o(304)]() > 0 && (t += a[o(304)](), this[o(306)] = Math[o(200)](Math.max(this[o(306)], a[o(304)]())), this[o(313)] = Math[o(200)](Math[o(330)](this._minBandwidth, a.getDownloadBandwidth())), i++), s += a.getLastDownloadsTraffic(), n += a[o(186)](), r += a[o(316)]();
                    }), t /= i || 1, t = Math[e(200)](t), {
                        downloadEnabled: !0,
                        uploadEnabled: this[e(278)],
                        uploadedBytes: this._byteUploadCount,
                        uploadedTime: r,
                        uploadedChunks: this[e(289)],
                        discardedUploadedChunks: this[e(319)],
                        discardedUploadedBytes: this[e(349)],
                        downloadedSegments: this[e(361)],
                        downloadedBytes: this._byteDownloadCount,
                        discardedDownloadedBytes: this[e(233)],
                        failedRequests: {
                            total: this._failedRequests,
                            absent: this[e(360)],
                            timeout: this[e(267)],
                            error: this[e(303)]
                        },
                        activePeers: this[e(198)][e(236)],
                        totalPeers: this._peers[e(236)],
                        downloadMillis: this[e(164)],
                        maxBandwidth: this[e(306)],
                        minBandwidth: this[e(313)],
                        downloadAvgBw: t,
                        lastSecondsDownloadTraffic: s,
                        lastSecondsUploadTraffic: n,
                        downloadMillisVideo: this[e(367)],
                        downloadBytesVideo: this[e(206)],
                        downloadChunksVideo: this._downloadedChunksVideo,
                        avgPingTime: this._cdnPingTimeBean[e(210)](),
                        minPingTime: this[e(209)].getMinPingTime(),
                        maxPingTime: this._cdnPingTimeBean[e(147)](),
                        sumResponseBytes: this[e(362)],
                        minResponseBytes: this._minResponseBytes,
                        maxResponseBytes: this[e(142)],
                        samplesResponseBytes: this[e(217)],
                        sumResponseTime: this._sumResponseTime,
                        minResponseTime: this[e(251)],
                        maxResponseTime: this[e(194)],
                        samplesResponseTime: this[e(269)],
                        sumNetworkLatency: this._sumNetworkLatency,
                        minNetworkLatency: this[e(329)],
                        maxNetworkLatency: this[e(291)],
                        samplesNetworkLatency: this[e(322)],
                        sumThroughput: this[e(350)],
                        minThroughput: this[e(177)],
                        maxThroughput: this[e(170)],
                        samplesThroughput: this[e(247)],
                        sumVideoBytes: this._sumVideoBytes,
                        sumVideoTime: this[e(149)],
                        peersAvailable: this[e(311)],
                        maxPeersAvailable: this._maxPeersAvailable,
                        minPeersAvailable: this[e(215)],
                        peersUsed: this[e(285)],
                        peersParallelUsed: this[e(363)],
                        maxPeersParallelUsed: this[e(277)],
                        minPeersParallelUsed: this[e(188)],
                        peerDiscoveryTime: this._peerDiscoveryTime,
                        peerConnectionTime: this[e(371)]
                    };
                }
                [Q(207)]() {
                    const e = Q;
                    this[e(362)] = void 0, this._minResponseBytes = void 0, this[e(142)] = void 0, this[e(217)] = void 0, this._sumResponseTime = void 0, this[e(251)] = void 0, this[e(194)] = void 0, this[e(269)] = void 0, this[e(346)] = void 0, this[e(329)] = void 0, this[e(291)] = void 0, this[e(322)] = void 0, this[e(350)] = void 0, this[e(177)] = void 0, this[e(170)] = void 0, this[e(247)] = void 0, this._sumVideoBytes = void 0, this[e(149)] = void 0, this[e(371)] = void 0, this[e(228)] = void 0, this._updatePeersMetricsRefCounter = 0;
                }
                [Q(143)](e, t) {
                    const i = Q;
                    this[i(240)] = t, this[i(165)][i(202)](e, Date.now());
                }
                [Q(335)]() {
                    const e = Q, t = Date[e(294)]() - this[e(240)] + 15e3;
                    this._availablePeersMap[e(212)]((i, s)=>{
                        i < t && this[e(165)].delete(s);
                    }), this._updatePeersMetricsRefCounter++, this[e(285)] = this._peers[e(236)], this[e(363)] = this[e(365)][e(236)], this._peersAvailable = this[e(165)].size, 1 == this[e(184)] ? (this[e(188)] = this[e(365)][e(236)], this._maxPeersParallelUsed = this[e(365)].size, this._minPeersAvailable = this[e(165)].size, this[e(258)] = this[e(165)][e(236)]) : ((null == this[e(188)] || this[e(188)] > this[e(365)][e(236)]) && (this[e(188)] = this[e(365)][e(236)]), (null == this[e(277)] || this[e(277)] < this[e(365)][e(236)]) && (this._maxPeersParallelUsed = this._activePeerSet[e(236)]), (null == this[e(215)] || this[e(215)] > this[e(165)][e(236)]) && (this._minPeersAvailable = this[e(165)].size), (null == this._maxPeersAvailable || this[e(258)] < this[e(165)][e(236)]) && (this[e(258)] = this[e(165)][e(236)]));
                }
                onConnected(e) {
                    this[Q(371)] = e;
                }
                [Q(364)](e) {
                    this._peerDiscoveryTime = e;
                }
                constructor(e, i, s){
                    const a = K;
                    this[a(278)] = r.LI[a(278)], this[a(181)] = !1, this[a(353)] = !1, this[a(222)] = r.LI.maxConcurrency, this[a(372)] = r.LI[a(268)], this[a(198)] = new Map, this[a(271)] = new Map, this[a(341)] = new Map, this._activeDownloads = 0, this._segmentsRequested = new Map, this[a(176)] = [], this[a(342)] = !1, this._performReset = !1, this[a(295)] = new Map, this[a(185)] = new Map, this[a(306)] = 0, this._minBandwidth = Number[a(234)], this[a(233)] = 0, this._failedRequests = 0, this._timeoutRequests = 0, this[a(360)] = 0, this[a(303)] = 0, this[a(164)] = 0, this[a(154)] = 0, this._chunkDownloadCount = 0, this[a(270)] = new Set, this[a(365)] = new Set, this[a(165)] = new Map, this[a(184)] = 0, this[a(240)] = 45e3, this[a(204)] = V[a(358)], this._downloadMillisVideo = 0, this[a(206)] = 0, this._downloadedChunksVideo = 0, this[a(349)] = 0, this[a(319)] = 0, this[a(289)] = 0, this[a(332)] = 0, this[a(171)] = 0, this[a(231)] = 0, this[a(182)] = !1, this[a(158)] = e, this._options = i, this[a(218)] = s, this._cdnObject = new V(a(302), a(302), "", "", "", 1, !1, 0, 0, !1, !1), this[a(230)][a(344)](this[a(204)]), this[a(230)][a(275)](this[a(312)]()), this[a(209)] = new H, window.P2PManager ? this._packageFound = !0 : t.default[a(347)](n.BalancerTag, "P2P dependency does not exist. Disabling P2P!");
                }
            }
            function $() {
                const e = [
                    "get",
                    "183073KVSccU",
                    "_cdnPriority",
                    " because not used yet",
                    "length",
                    "getBandwidthInBits",
                    "size",
                    "debug",
                    " highest segment bandwidth -> ",
                    "_bestScoredCdn",
                    "downloadedChunks",
                    "last bandwidth",
                    " reference bandwidth ",
                    "P2P",
                    "delete",
                    "wasActiveSwitchingDecisionPerformed",
                    "floor",
                    " is: ",
                    "noProbing",
                    "320ImscWG",
                    "random",
                    "useP2P",
                    "1296120BqEleQ",
                    "filter",
                    "_getCdnToProbe",
                    "banned",
                    "name",
                    "Estimated bandwidth based on ",
                    "getInstance",
                    "forEach",
                    "_cdnList",
                    "4544sUDPmR",
                    "_highetsSegmentBandwidth",
                    "toFixed",
                    " of ",
                    "Original",
                    "_getNotUsedCdn",
                    "time",
                    "usedOnce",
                    "Fastest CDN is -> ",
                    "Current bandwidth for ",
                    "cdnPriority",
                    "_qualityPriority",
                    "233526nTfwBT",
                    "set",
                    "usedSelectorAPIResponse",
                    "sort",
                    "avgPingTime",
                    "getCDN",
                    "_p2pLoader",
                    "currentCDN",
                    " Mbps",
                    "maximumRelativeDeltaForTrial",
                    "push",
                    "verbose",
                    "683366FacUUV",
                    "setChecked",
                    "getVideoBandwidth",
                    "15dkwRcn",
                    "some",
                    "from",
                    "_options",
                    "_activeSwitching",
                    "_bandwidthThreshold",
                    "2438072ukKuxc",
                    "minimumDurationSinceLastUsedForTrialMilliseconds",
                    "values",
                    "27RFNNhK",
                    "Performing probe to ",
                    "isManifest",
                    "isChecked",
                    "now",
                    "getPeersWithContent",
                    "qualityPriority",
                    "getLastResponse",
                    " Active switching method -> ",
                    "541638SZUfxx",
                    "trim",
                    "CDN Candidates -> ",
                    "1254qbnohz",
                    "active"
                ];
                return ($ = function() {
                    return e;
                })();
            }
            const Z = ee;
            function ee(e, t) {
                const i = $();
                return (ee = function(e, t) {
                    return i[e -= 447];
                })(e, t);
            }
            !function(e) {
                const t = ee, i = e();
                for(;;)try {
                    if (384411 == parseInt(t(486)) / 1 + parseInt(t(498)) / 2 + -parseInt(t(522)) / 3 * (-parseInt(t(474)) / 4) + -parseInt(t(501)) / 5 * (parseInt(t(519)) / 6) + -parseInt(t(507)) / 7 + -parseInt(t(465)) / 8 * (-parseInt(t(510)) / 9) + parseInt(t(462)) / 10 * (-parseInt(t(525)) / 11)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }($);
            class te {
                [Z(491)](e, i) {
                    const s = Z;
                    let a = s(478);
                    const o = new Map;
                    let d = 0, c = !0;
                    if (this._cdnList[s(472)](function(e, t) {
                        const i = s;
                        d += e[i(453)], !e.banned && e[i(523)] && (o[i(487)](t, e), c = !1);
                    }), c && (o.clear(), this._cdnList[s(472)](function(e, t) {
                        const i = s;
                        e.active && (e[i(468)] = !1, o[i(487)](t, e));
                    })), (0 === this[s(492)][s(515)](e)[s(447)] || !e[s(464)]) && o[s(457)](s(456)), t.default[s(497)](n.BalancerTag, s(521) + o[s(449)] + s(477) + this[s(473)][s(449)] + s(518) + this[s(505)]), o.delete(s(478)), 0 == o.size) return a = s(478), !this[s(505)] && d > 0 && (a = i[s(493)]), i[s(493)] = a, 0 === a[s(447)] ? s(478) : a;
                    if (o[s(449)] > 0) {
                        if (x.default[s(471)]()[s(488)](!0), x.default[s(471)]()[s(458)](void 0 !== this[s(505)]), this[s(505)]) {
                            const t = i[s(493)];
                            switch(this[s(505)]){
                                case r.m.qualityPriority:
                                    a = this[s(485)](e, o, i);
                                    break;
                                case r.m.cdnPriority:
                                    a = this[s(526)](e, o, i);
                                    break;
                                default:
                                    let t1;
                                    t1 = this[s(452)](e, o), a = null === t1 ? "" : t1[s(469)];
                            }
                            "" !== t && a !== s(478) && t !== a && x.default[s(471)]().setSwitchedCdns(!0);
                        } else {
                            let t;
                            t = this[s(452)](e, o), null === t || t[s(513)]() ? a = 0 !== d || e[s(512)] ? i[s(493)] : "" : (a = t.name, i.currentCDN = a, t[s(499)]());
                        }
                    }
                    return a && "" != a[s(520)]() ? a : s(478);
                }
                [Z(485)](e, i, s) {
                    const a = Z, o = this[a(504)].noProbing ? new Map(this[a(473)]) : i;
                    0 === this[a(492)].getPeersWithContent(e)[a(447)] && o[a(457)](a(456));
                    const d = this[a(467)](o, r.m[a(516)], s[a(493)]);
                    if (d) return t.default.debug(n.BalancerTag, a(511) + d.name), s[a(493)] = d.name, d[a(469)];
                    const c = this[a(479)](e);
                    if (c) return t.default[a(450)](n.BalancerTag, "Selected " + c + a(527)), c;
                    let u = "", l = 0;
                    return i.forEach((e)=>{
                        const i = a, s = e[i(500)]();
                        t.default.verbose(n.BalancerTag, e.name + i(455) + s / 1e6 + " | estimated bandwidth " + e.getBandwidth() + i(451) + this[i(475)] / 1e6), l < e.getBandwidth() && (l = e.getBandwidth(), u = e[i(469)]);
                    }), t.default[a(450)](n.BalancerTag, a(482) + u), s[a(493)] = u, u;
                }
                _cdnPriority(e, i, s) {
                    const a = Z;
                    var o, d;
                    const c = this[a(504)].noProbing ? new Map(this[a(473)]) : i;
                    0 === this._p2pLoader[a(515)](e)[a(447)] && c[a(457)](a(456));
                    const u = this._getCdnToProbe(c, r.m[a(484)], s[a(493)]);
                    if (u) return t.default[a(450)](n.BalancerTag, a(511) + u[a(469)]), s.currentCDN = u[a(469)], u[a(469)];
                    const l = Array.from(i[a(509)]())[a(466)]((e)=>e[a(448)]() / 1e3 > this[a(506)] && !e.banned);
                    if (!l[a(502)]((e)=>e.name === s[a(493)])) {
                        const e = i.get(s[a(493)]);
                        e && (e.lastUpdatedState = 3);
                    }
                    let h = null !== (d = null === (o = l[0]) || void 0 === o ? void 0 : o[a(469)]) && void 0 !== d ? d : "";
                    if ("" === h) {
                        const e = Array[a(503)](i[a(509)]());
                        e[a(489)]((e, t)=>t.getBandwidth() - e.getBandwidth()), h = e[0][a(469)];
                    }
                    return s[a(493)] = h, h;
                }
                [Z(452)](e, t) {
                    var i;
                    return null !== (i = Array[Z(503)](t.values())[0]) && void 0 !== i ? i : null;
                }
                _getNotUsedCdn(e) {
                    const t = Z, i = [];
                    for (const [e, s] of this._cdnList)s[t(523)] && !s[t(468)] && !s.usedOnce && i.push(s[t(469)]);
                    if (0 === this[t(492)][t(515)](e).length || !e[t(464)]) {
                        const e = i.indexOf(t(456));
                        e > -1 && i.splice(e, 1);
                    }
                    if (0 == i[t(447)]) return;
                    const s = i[Math[t(459)](Math[t(463)]() * i[t(447)])], n = this[t(473)].get(s);
                    return null != n && (n[t(481)] = !0), s;
                }
                [Z(467)](e, i, s) {
                    const a = Z;
                    let o = Array[a(503)](e[a(509)]()).filter((e)=>e[a(469)] !== s);
                    if (i === r.m[a(484)]) {
                        o = [];
                        for (const [t, i] of e){
                            if (t === s) break;
                            o[a(496)](i);
                        }
                    }
                    o[a(489)]((e, t)=>e[a(517)]()[a(480)] - t.getLastResponse().time);
                    const d = e[a(524)](s);
                    if (!d) return;
                    const c = d.avgPingTime, u = d.getBandwidthInBits(), l = i === r.m[a(484)] ? 1e3 * this[a(506)] : d[a(448)](), h = o[a(466)]((e)=>{
                        const i = a;
                        if (Date[i(514)]() - e[i(517)]()[i(480)] >= r.Zq[i(508)]) return !0;
                        const o = !0 === this[i(504)][i(461)], d = o ? e.getBandwidthInBits() : c * u / e[i(490)];
                        return t.default[i(450)](n.BalancerTag, i(470) + (o ? i(454) : "latency") + " for " + e[i(469)] + i(460) + (d / 1e6)[i(476)](2) + " Mbps"), t.default[i(450)](n.BalancerTag, i(483) + s + ": " + (u / 1e6).toFixed(2) + i(494)), (d - l) / l >= -r.Zq[i(495)];
                    });
                    return 0 === h.length ? void 0 : h.sort((e, t)=>e[a(517)]().time - t[a(517)]()[a(480)])[0];
                }
                constructor(e, t, i, s, n, r){
                    const a = ee;
                    this[a(473)] = e, this._activeSwitching = s, this[a(506)] = t, this._highetsSegmentBandwidth = i, this[a(492)] = n, this._options = r;
                }
            }
            const ie = ne;
            !function(e) {
                const t = ne, i = e();
                for(;;)try {
                    if (727548 == parseInt(t(243)) / 1 * (parseInt(t(306)) / 2) + -parseInt(t(273)) / 3 * (-parseInt(t(280)) / 4) + -parseInt(t(247)) / 5 + -parseInt(t(305)) / 6 + -parseInt(t(291)) / 7 * (parseInt(t(248)) / 8) + -parseInt(t(278)) / 9 + parseInt(t(282)) / 10) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(ae);
            var se = function(e, t, i, s) {
                return new (i || (i = Promise))(function(n, r) {
                    const a = ne;
                    function o(e) {
                        const t = ne;
                        try {
                            c(s[t(265)](e));
                        } catch (e) {
                            r(e);
                        }
                    }
                    function d(e) {
                        try {
                            c(s.throw(e));
                        } catch (e) {
                            r(e);
                        }
                    }
                    function c(e) {
                        const t = ne;
                        var s;
                        e[t(286)] ? n(e[t(244)]) : (s = e[t(244)], s instanceof i ? s : new i(function(e) {
                            e(s);
                        }))[t(313)](o, d);
                    }
                    c((s = s[a(242)](e, t || []))[a(265)]());
                });
            };
            function ne(e, t) {
                const i = ae();
                return (ne = function(e, t) {
                    return i[e -= 229];
                })(e, t);
            }
            class re {
                static [ie(254)](e) {
                    const t = ie;
                    return !this._instance && (this._instance = new re), null != e && this._instance[t(296)](e), this[t(252)];
                }
                [ie(296)](e) {
                    const t = ie;
                    this.loader = e, this[t(267)] = !0;
                }
                [ie(309)](e) {
                    this[ie(268)] = e;
                }
                [ie(236)](e) {
                    this[ie(260)] = e;
                }
                stopMonitor() {
                    this[ie(267)] = !1;
                }
                setHeadOnBannedOnly(e = !1) {
                    this[ie(239)] = e;
                }
                [ie(300)](e = !1) {
                    this[ie(287)] = e;
                }
                [ie(253)](e) {
                    return se(this, void 0, void 0, function*() {
                        const t = ne;
                        this[t(268)] = e;
                        const i = new Map;
                        for (const s of e.values())i[t(238)](s[t(314)], new H), this[t(285)] = i;
                        if (!this[t(272)]) for(this[t(272)] = !0; this[t(267)];){
                            for(; !this[t(260)];)yield new Promise((e)=>setTimeout(e, 1e3));
                            if (!this[t(287)]) for (const e of this._cdns[t(246)]())this[t(260)] && e.name !== t(264) && (yield this[t(274)](e, this[t(260)]), yield new Promise((e)=>setTimeout(e, r.wc[t(262)])));
                            yield new Promise((e)=>setTimeout(e, r.wc[t(263)]));
                        }
                    });
                }
                [ie(233)](e, t) {
                    const i = ie;
                    var s, n, r;
                    const a = Date[i(323)]() - e;
                    re[i(254)]()[i(255)].set(t[i(314)], a);
                    const o = re[i(254)]()[i(285)].get(t[i(314)]);
                    null == o || o[i(276)](a), t.lastPingTime = a, t.avgPingTime = null !== (s = null == o ? void 0 : o[i(284)]()) && void 0 !== s ? s : t[i(292)], t[i(277)] = null !== (n = null == o ? void 0 : o.getMaxPingTime()) && void 0 !== n ? n : t[i(277)], t[i(293)] = null !== (r = null == o ? void 0 : o[i(271)]()) && void 0 !== r ? r : t[i(293)], t.addProbe(a);
                }
                [ie(274)](e, i) {
                    return se(this, void 0, void 0, function*() {
                        const s = ne;
                        if (this[s(299)] && this.loader[s(308)] && e.active && e[s(304)] != s(269) && (!this[s(239)] || e[s(275)])) {
                            if (i) {
                                let r = this[s(299)][s(250)][s(261)](i, !0, e.name);
                                if (r = i[s(251)](r), r) {
                                    const i = Math.floor(1e9 * Math[s(270)]());
                                    r = r[s(231)]("?") ? r + s(320) + i : r + s(259) + i;
                                    let a = 0;
                                    e.isRangeCompatible && (a = yield this._performGetCheck(e, r)), (!e[s(289)] || 1 === a) && (e[s(289)] = !1, t.default.verbose(n.BalancerTag, "Probing with range failed failed. Falling back to HEAD request on the next probe"));
                                } else t.default[s(241)](n.BalancerTag, s(301) + e[s(314)] + " // " + i[s(232)]);
                            } else t.default[s(241)](n.BalancerTag, s(266) + e[s(314)]);
                        }
                    });
                }
                [ie(315)](e, t) {
                    return se(this, void 0, void 0, function*() {
                        return yield this._performCheck("GET", e, t);
                    });
                }
                [ie(279)](e, t) {
                    return se(this, void 0, void 0, function*() {
                        const i = ne;
                        return yield this[i(237)](i(258), e, t);
                    });
                }
                _performCheck(e, i, s) {
                    return se(this, void 0, void 0, function*() {
                        const a = ne, o = new XMLHttpRequest, d = Date[a(323)](), c = this;
                        return i[a(281)] = !0, new Promise(function(u, l) {
                            const h = a;
                            o[h(303)] = function() {
                                const r = h;
                                if (4 === o[r(307)]) {
                                    let a = 0;
                                    if (e === r(288) && 206 !== o[r(257)] && o[r(257)] >= 200 && o[r(257)] < 400) a = 1;
                                    else if (o[r(257)] >= 200 && o[r(257)] < 300) {
                                        if (i[r(275)]) {
                                            const e = Date[r(323)]();
                                            i[r(322)] += e - i.bannedRefTicToc, i[r(240)] = e, i[r(275)] = !1, i[r(298)]++;
                                        }
                                        i[r(245)] = 0, t.default.verbose(n.BalancerTag, "HEALTHY CDN " + s + " " + o.status), i[r(302)] = 0, i[r(319)]() && null != c[r(299)] && c.loader.CDNLoader[r(295)]();
                                    } else if (o[r(257)] >= 400) {
                                        if (t.default.verbose(n.BalancerTag, r(290) + s + " " + o[r(257)]), null != i.auth && i[r(294)].enabled && !i[r(294)][r(297)]) {
                                            if (403 != o.status && !i[r(275)]) {
                                                const e = Date[r(323)]();
                                                i[r(283)] += e - i[r(240)], i[r(240)] = e, i[r(275)] = !0, i[r(235)]++;
                                            }
                                        } else if (!i[r(275)]) {
                                            const e = Date[r(323)]();
                                            i[r(283)] += e - i.bannedRefTicToc, i[r(240)] = e, i[r(275)] = !0, i[r(235)]++;
                                        }
                                        i[r(302)] = 1, i[r(319)]() && null != c[r(299)] && c[r(299)][r(250)][r(234)](1);
                                    }
                                    0 === a && c[r(233)](d, i), u(a);
                                }
                            }, o[h(249)] = function() {
                                const e = h;
                                if (t.default[e(241)](n.BalancerTag, e(290) + s + " " + o.status), i[e(275)]) {
                                    const t = Date[e(323)]();
                                    i[e(322)] += t - i.bannedRefTicToc, i[e(240)] = t;
                                } else {
                                    const t = Date.now();
                                    i[e(283)] += t - i.bannedRefTicToc, i[e(240)] = t, i[e(275)] = !0, i[e(235)]++;
                                }
                                i[e(302)] = 2, i[e(319)]() && null != c[e(299)] && c[e(299)].CDNLoader[e(234)](2), u(0);
                            }, o[h(318)] = function() {
                                const e = h;
                                if (t.default.verbose(n.BalancerTag, e(317) + s + " " + o.status), i[e(275)]) {
                                    const t = Date[e(323)]();
                                    i[e(322)] += t - i[e(240)], i[e(240)] = t;
                                } else {
                                    const t = Date[e(323)]();
                                    i[e(283)] += t - i[e(240)], i[e(240)] = t, i[e(275)] = !0, i.bannedCount++;
                                }
                                i[e(302)] = 2, i[e(319)]() && null != c[e(299)] && c[e(299)][e(250)][e(234)](2), u(0);
                            }, o[h(310)](e, s), e === h(288) && o[h(312)](h(256), h(230)), o[h(229)] = r.wc[h(316)], o[h(321)]();
                        });
                    });
                }
                constructor(){
                    const e = ie;
                    this[e(285)] = new Map, this[e(255)] = new Map, this[e(272)] = !1, this._cdns = new Map, this.shouldMonitor = !0, this.probeOnlyOnBanned = !1, this[e(287)] = !1;
                }
            }
            function ae() {
                const e = [
                    "open",
                    "__awaiter",
                    "setRequestHeader",
                    "then",
                    "name",
                    "_performGetCheck",
                    "callTimeoutMilliseconds",
                    "BANNING CDN DUE TO TIMEOUT ",
                    "ontimeout",
                    "isCodavel",
                    "&rnpaw=",
                    "send",
                    "bannedTime",
                    "now",
                    "timeout",
                    "bytes=0-0",
                    "includes",
                    "url",
                    "_afterCheck",
                    "onCodavelFailedResponse",
                    "bannedCount",
                    "newDownloadedSegment",
                    "_performCheck",
                    "set",
                    "probeOnlyOnBanned",
                    "bannedRefTicToc",
                    "verbose",
                    "apply",
                    "7siRClw",
                    "value",
                    "failures",
                    "values",
                    "5874930lhrulK",
                    "32xgXHKM",
                    "onerror",
                    "CDNLoader",
                    "addParametersToUrl",
                    "_instance",
                    "monitor",
                    "getInstance",
                    "monitoring",
                    "Range",
                    "status",
                    "HEAD",
                    "?rnpaw=",
                    "lastDownloadedSegment",
                    "updateUrl",
                    "timeBetweenCallsMilliseconds",
                    "timeBetweenBurstsMilliseconds",
                    "P2P",
                    "next",
                    "PINGTIME No available resources to test ",
                    "shouldMonitor",
                    "_cdns",
                    "ORIGINAL",
                    "random",
                    "getMinPingTime",
                    "_isMonitoring",
                    "33hvkMDB",
                    "testCdn",
                    "banned",
                    "add",
                    "highestPingTime",
                    "12862476iHRxrd",
                    "_performHeadCheck",
                    "262340GVoySP",
                    "usedOrProbed",
                    "25721470aLJnTh",
                    "unbannedTime",
                    "getAvgPingTime",
                    "pingsTime",
                    "done",
                    "noProbing",
                    "GET",
                    "isRangeCompatible",
                    "BANNING CDN ",
                    "1989316javUGa",
                    "avgPingTime",
                    "lowestPingTime",
                    "auth",
                    "onCodavelSucessfullResponse",
                    "setLoader",
                    "authenticate_probes",
                    "unBannedCount",
                    "loader",
                    "setNoProbing",
                    "UNABLE TO GENERATE URL FOR PROBING CHECK ",
                    "lastUpdatedState",
                    "onload",
                    "provider",
                    "830328mGjJnf",
                    "375216mqjcwd",
                    "readyState",
                    "getIsEnabled",
                    "updateCdnList"
                ];
                return (ae = function() {
                    return e;
                })();
            }
            class oe {
                setRequestsPerformed(e) {
                    this.requestsPerformed = e;
                }
                setTrafficServerInBytes(e) {
                    this.trafficServedInBytes = e;
                }
                setFailedRequests(e) {
                    this.failedRequests = e;
                }
                getFailedRequestsPercentage() {
                    const e = this.requestsPerformed + this.failedRequests;
                    return 0 !== e ? this.failedRequests / e * 100 : 0;
                }
                generateRow() {
                    let e = 0 !== this.requestsPerformed ? this.failedRequests / this.requestsPerformed * 100 : 0;
                    e = 0 === this.requestsPerformed && this.failedRequests > 0 ? 100 : e;
                    let t = "";
                    return e > 70 ? t = "red" : e > 30 && (t = "yellow"), {
                        row: "%c" + [
                            this.name,
                            this.provider,
                            this.requestsPerformed + this.failedRequests,
                            e.toFixed(0),
                            (this.trafficServedInBytes / 1048576).toFixed(2)
                        ].map((e)=>e.toString().padEnd(18)).join(""),
                        color: t
                    };
                }
                constructor(e, t){
                    this.columns = [
                        "CDN",
                        "Provider",
                        "# of requests",
                        "% of failed req.",
                        "Traffic served (MB)"
                    ], this.requestsPerformed = 0, this.trafficServedInBytes = 0, this.failedRequests = 0, this.name = e, this.provider = t;
                }
            }
            var de = i(6443);
            function ce(e, t) {
                const i = le();
                return (ce = function(e, t) {
                    return i[e -= 128];
                })(e, t);
            }
            const ue = ce;
            !function(e) {
                const t = ce, i = e();
                for(;;)try {
                    if (277483 == parseInt(t(153)) / 1 * (parseInt(t(333)) / 2) + -parseInt(t(382)) / 3 + parseInt(t(207)) / 4 * (parseInt(t(146)) / 5) + parseInt(t(214)) / 6 * (-parseInt(t(241)) / 7) + parseInt(t(303)) / 8 + -parseInt(t(142)) / 9 * (-parseInt(t(324)) / 10) + -parseInt(t(144)) / 11) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(le);
            function le() {
                const e = [
                    "getPluginVersion",
                    "&advanceproxy=true",
                    "throw",
                    "getInstance",
                    "startMonitoring",
                    "1786340JtBchM",
                    "Updated",
                    "getRouteAndFilename",
                    "avgApiCallResponseTime",
                    "lastUsedCdn",
                    "updateSettings",
                    "_highestChunkBandwidth",
                    "append_to_url",
                    "balanceManifests",
                    "2lTjJYA",
                    "https",
                    "active",
                    "_chunkCount",
                    "codavelSwitchesDueToConnectivity",
                    "route",
                    "bannedTime",
                    "setHeadOnBannedOnly",
                    " -> banned ",
                    "host",
                    "open",
                    "__awaiter",
                    "monitoringStarted",
                    "apiCallResponses",
                    "registerCommonVariable",
                    "totalFail",
                    "getCommonVariable",
                    "progressDownloadedBytes",
                    "_probeOnBanned",
                    "codavelBanCount",
                    "value",
                    "origRes",
                    "unbannedTime",
                    "setSettings",
                    "https://",
                    "_retries",
                    "getRecommendedManifest",
                    "profileName",
                    "currentRenditionBandwidth",
                    "downloadedBytes",
                    "join",
                    "_highestRenditionBandwidth",
                    "CDN priority",
                    "timeBetweenCallsMilliseconds",
                    "cleanCdnList",
                    "minimumDurationSinceLastUsedForTrialMilliseconds",
                    "_cdnList",
                    "response",
                    "firstHugeChunkSize",
                    "onCodavelSucessfullResponse",
                    "codavelProvidersState",
                    "url",
                    "callTimeoutMilliseconds",
                    "onSucessfullApiResponse",
                    "domainWhitelistRegex",
                    "length",
                    "_probingInfo",
                    "providers",
                    "isCodavel",
                    "1109979LLbXTl",
                    "warn",
                    "bandwidthThreshold",
                    "enabled",
                    "getBucket",
                    "signUrl",
                    "cdnBalanceMethod",
                    "gotEmptyResponse",
                    "signed_url_info",
                    "downloadedBytesForScoring",
                    "incrementSwitchesDueToConnectivity",
                    "_totalDownloadedBytes",
                    "Products",
                    "setNoProbing",
                    "replace",
                    "codavelSwitchesDueToQuality",
                    "], nor one of the whitelisted domains [",
                    "priorityCdn",
                    "setResourceInfo",
                    "verbose",
                    "downloadMillis",
                    "isLive",
                    "trunc",
                    "path",
                    "addCdn",
                    " | ",
                    "send",
                    "instantBandwidth",
                    "getSignedUrlFromApi",
                    "addResp",
                    "UUID",
                    "9dNQTHS",
                    "values",
                    "1954513NAGzxx",
                    "incrementSwitchesDueToQuality",
                    "1842605XQCWFg",
                    "renditionCount",
                    "FAILED -> ",
                    "resetOnPing",
                    "updateCdnList",
                    "price",
                    "_activeRequests",
                    "462709rBmaRJ",
                    "every",
                    "_bandwidthThreshold",
                    "updateProgressStats",
                    "getCdnList",
                    "concat",
                    "forEach",
                    "getAccountCode",
                    "retries",
                    "getCDN",
                    "fileName",
                    "_cdnPeakBandwidth",
                    "codavelUnbanTime",
                    "setActiveSwitchingEnabled",
                    "_failedRequests",
                    "BALANCER",
                    "_options",
                    "dnsEnabled",
                    "_secure",
                    "changeStatusCDN",
                    "_method",
                    "isEnabled",
                    "provider",
                    "updateCDNStatsOnSuccess",
                    "incrementSwitchesDueToErrors",
                    "score",
                    "codavelUnbanCount",
                    "cdnPriority",
                    "p2pAvailable",
                    "probeOnlyOnBanned",
                    "maxApiCallResponseTime",
                    "Bypassed ",
                    "&orresource= ",
                    "size",
                    "P2P",
                    "ORIGINAL",
                    "setMaxBandwidth",
                    "_noProbing",
                    "Quality priority",
                    "formatParameters",
                    "apiCallErrors",
                    "codavelSwitchesDueToErrors",
                    "emit",
                    "codavelAllBanned",
                    "bannedRefTicToc",
                    "minRequestSizeForBwEstimateKB",
                    "discarded",
                    "Invalid regex expression ",
                    "segmentDuration",
                    "max",
                    "Error: unable to obtain API response for signed URL (status: ",
                    "Original",
                    "auth_action_info",
                    "clear",
                    "4wOkMRt",
                    "absolute",
                    "includes",
                    "isNotOnWhitelist",
                    "decisionCallWaitTime",
                    "initializated",
                    " / ",
                    "6EbJGQm",
                    "duration",
                    "startsWith",
                    "activeSwitchingPriority",
                    "getCdnObject",
                    "updateUrl",
                    "_lastChunksLapse",
                    "getIsLive",
                    "isMasterPlaylist",
                    "usedOnce",
                    "Disabled",
                    "VERBOSE",
                    "getStats",
                    "codavelBanRefTicToc",
                    "codavelSwitches",
                    "codavelBanTime",
                    "maxBandwidth",
                    "rendition",
                    "authenticate_probes",
                    "noProbing",
                    "decisionReloadIntervalPerManifestMilliseconds",
                    "lastCodavelRequestStatus",
                    "_firstRequestTime",
                    "next",
                    " because its host is not one of the currently active CDN hosts: [",
                    "announcedCdns",
                    "sign_all_requests",
                    "2237109TjRGME",
                    "GET",
                    "pathName",
                    "getSecure",
                    "lastMeasurementWeight",
                    "?orresource=",
                    "delete",
                    "getFastDataService",
                    "http://",
                    "Error updating url -> ",
                    "get",
                    "updateCodavelBanTimes",
                    "isValidUrl",
                    "weight",
                    "_cdnLastInstantBandwith",
                    "banned",
                    "resource",
                    "qualityPriority",
                    "lastPreferedVideoBandwidth",
                    "status",
                    "default",
                    "isManifest",
                    "lastUpdatedState",
                    "DECISION_FINISHED",
                    "parser",
                    "_p2pLoader",
                    "_resource",
                    "bannedCount",
                    "min",
                    "delay",
                    "from",
                    "onCodavelSwitched",
                    "incrementSwitches",
                    "activeSwitching",
                    "push",
                    "downloadTimeForScoring",
                    "changeCDN",
                    "cdnName",
                    "isNotOnCdnList",
                    "finalUrl",
                    "_lastChunkTime",
                    "now",
                    "test",
                    "onFailedApiResponse",
                    "processedApiCall",
                    "removeActiveSegment",
                    "apiHost",
                    "downloadedChunks",
                    "STREBOPX",
                    "setLogLevel",
                    "auth",
                    "minApiCallResponseTime",
                    "_responseUUID",
                    "map",
                    "domainWhitelist",
                    "Error parsing Balancer API response for signed URL: ",
                    "getForceDecision",
                    "failures",
                    "name",
                    "true",
                    "onCodavelFailedResponse",
                    "filter",
                    "1079056PrRekR",
                    "LAST_USED_CDN",
                    "_cdnInstantBandwith",
                    "bucketName",
                    "timeBetweenBurstsMilliseconds",
                    "token",
                    "maximumRelativeDeltaForTrial",
                    "_activeSwitching",
                    "signManifestUsingApi",
                    "_activeCdnRequests",
                    "currentRenditionPos",
                    "failed",
                    "debug",
                    "getSegmentDuration",
                    "STREBOOS",
                    "set"
                ];
                return (le = function() {
                    return e;
                })();
            }
            class he extends w {
                [ue(244)]() {
                    const e = ue;
                    return null != this[e(171)] && this[e(171)];
                }
                getActiveRequests() {
                    return this[ue(152)];
                }
                [ue(389)]() {
                    const e = ue;
                    this[e(212)] = !1, this[e(369)][e(206)]();
                }
                [ue(356)](e, i) {
                    const s = ue;
                    var a, o, d, u, l, h, p, f, g, m, v, y, T, S, E, b;
                    if (this.initializated) return this[s(329)](e, i);
                    this._cdnList = new Map;
                    try {
                        !0 === (null == e ? void 0 : e[s(315)]) && t.default[s(290)](t.LogLevel[s(225)]);
                        let n = c[s(253)](null !== (a = this[s(169)][s(257)]) && void 0 !== a ? a : "") ? c[s(326)](this[s(169)][s(257)]) : {
                            route: "",
                            fileName: ""
                        };
                        this[s(171)] = (null !== (d = null === (o = this._options[s(257)]) || void 0 === o ? void 0 : o.indexOf(s(357))) && void 0 !== d ? d : -1) > -1 || void 0, this[s(267)][s(163)] = n[s(163)], this[s(267)][s(338)] = n.route, this._responseUUID = e[s(141)], this._method = e[s(388)], this[s(310)] = e.activeSwitching, this[s(155)] = null !== (u = e[s(384)]) && void 0 !== u ? u : r.Ow[s(261)], this[s(351)] = e.probeOnlyOnBanned, this[s(190)] = e[s(233)];
                        let A = void 0 !== e[s(274)];
                        re.getInstance()[s(395)](null !== (l = this._noProbing) && void 0 !== l ? l : this._options[s(233)]), this[s(310)] === r.m.cdnPriority ? re[s(322)]()[s(340)](null !== (h = this[s(351)]) && void 0 !== h ? h : this[s(169)][s(182)]) : re[s(322)]()[s(340)](!1), x.default[s(322)]()[s(166)](A), r.Zq[s(245)] = null !== (p = e[s(245)]) && void 0 !== p ? p : r.Zq[s(245)], r.Zq[s(309)] = null !== (f = e.maximumRelativeDeltaForTrial) && void 0 !== f ? f : r.Zq[s(309)], r.Zq[s(368)] = null !== (g = e[s(368)]) && void 0 !== g ? g : r.Zq[s(368)], r.wc[s(375)] = null !== (m = e.callTimeoutMilliseconds) && void 0 !== m ? m : r.wc[s(375)], r.wc[s(307)] = null !== (v = e.timeBetweenBurstsMilliseconds) && void 0 !== v ? v : r.wc.timeBetweenBurstsMilliseconds, r.wc[s(366)] = null !== (y = e[s(366)]) && void 0 !== y ? y : r.wc[s(366)], r.df[s(211)] = null !== (T = e[s(211)]) && void 0 !== T ? T : r.df.decisionCallWaitTime, r.df[s(234)] = null !== (S = e[s(234)]) && void 0 !== S ? S : r.df[s(234)], r._C[s(198)] = null !== (E = e[s(198)]) && void 0 !== E ? E : r._C[s(198)];
                        let w = 0, _ = !1, I = [];
                        I = A ? (null === (b = e[s(380)]) || void 0 === b ? void 0 : b[s(158)](e[s(199)] || [])) || [] : e.providers || [], x.default[s(322)]()[s(367)](), this._p2pLoader.isEnabled() && (this[s(312)].P2P = 0, this._cdnList[s(318)](s(187), this[s(266)][s(218)]())), this[s(181)] = this[s(266)][s(174)](), this[s(310)] == s(258) ? this[s(217)] = s(191) : this[s(310)] == s(180) ? this[s(217)] = s(365) : this[s(217)] = "Disabled", I.forEach((e)=>{
                            w += e.score || 0;
                        });
                        let N = !1;
                        I[s(159)]((t)=>{
                            const n = s, r = t.score || 0, a = c[n(253)](t[n(374)]) ? c.getRouteAndFilename(t[n(374)])[n(338)] : "";
                            _ = _ || a === i;
                            const o = new V(t[n(175)], t[n(299)], t[n(342)], t[n(134)], a, r, a === i, t[n(151)], t.weight, t.absolute, t[n(170)], t.auth, e[n(265)]);
                            o.host = t[n(342)], x.default[n(322)]()[n(135)](t[n(299)], new oe(t.name, t[n(175)])), this[n(369)][n(318)](t[n(299)], o), this[n(373)] = new Map(Array[n(271)](this[n(369)][n(143)]())[n(302)]((e)=>e.isCodavel())[n(294)]((e)=>[
                                    e[n(299)],
                                    e[n(256)]
                                ])), this[n(252)](), this._activeCdnRequests[t[n(299)]] = 0, !N && (this.priorityCdn = t[n(299)], N = !0);
                        });
                    } catch (e) {
                        t.default[s(383)](n.BalancerTag, e);
                    }
                    this[s(239)] = this._cdnList.size - (this[s(266)][s(174)]() ? 1 : 0), this[s(212)] = !0;
                }
                [ue(329)](e, i) {
                    const s = ue;
                    var n, a, o;
                    !0 === (null == e ? void 0 : e[s(315)]) && t.default[s(290)](t.LogLevel.VERBOSE), this._method = e.cdnBalanceMethod, this[s(310)] = e.activeSwitching, this[s(351)] = e[s(182)], this[s(190)] = e[s(233)], this[s(181)] = this[s(266)][s(174)](), this[s(310)] == s(258) ? this[s(217)] = "Quality priority" : this._activeSwitching == s(180) ? this[s(217)] = s(365) : this[s(217)] = s(224), re[s(322)]()[s(395)](null !== (n = this[s(190)]) && void 0 !== n ? n : this[s(169)][s(233)]), this[s(310)] === r.m[s(180)] ? re[s(322)]()[s(340)](null !== (a = this._probeOnBanned) && void 0 !== a ? a : this[s(169)][s(182)]) : re[s(322)]()[s(340)](!1);
                    let d = !1;
                    const u = (null === (o = e[s(380)]) || void 0 === o ? void 0 : o.concat(e[s(199)] || [])) || [], l = new Map;
                    let h = !1;
                    u.forEach((t)=>{
                        const n = s, r = this[n(369)][n(251)](t[n(299)]);
                        if (r) {
                            r[n(335)] = !0, r.host != t[n(342)] && (r[n(342)] = t[n(342)]), r[n(134)] != t[n(134)] && (r.path = t[n(134)]);
                            let e = c.getRouteAndFilename(t[n(374)])[n(338)];
                            r.url != e && (r[n(374)] = e), r[n(291)] != t[n(291)] && (r[n(291)] = t[n(291)]), l.set(t[n(299)], r);
                        } else {
                            const s = t[n(178)] || 0, r = c[n(326)](t[n(374)])[n(338)];
                            d = d || r === i;
                            const a = new V(t[n(175)], t[n(299)], t[n(342)], t[n(134)], r, s, r === i, t.price, t[n(254)], t[n(208)], t[n(170)], t[n(291)], e[n(265)]);
                            this[n(369)][n(318)](t[n(299)], a), l[n(318)](t.name, a), this._activeCdnRequests[t[n(299)]] = 0;
                        }
                        !h && (this[n(128)] = t[n(299)], h = !0);
                    }), this[s(239)] = this[s(369)][s(186)] - (this[s(266)][s(174)]() ? 1 : 0), this[s(369)] = l;
                    const p = u.map((e)=>e[s(299)]);
                    this[s(369)][s(159)]((e)=>{
                        const t = s;
                        p[t(209)](e[t(299)]) || e[t(175)] == t(188) || e[t(175)] == t(187) || (e.active = !1);
                    }), this[s(373)] = new Map(Array.from(this[s(369)][s(143)]())[s(302)]((e)=>e[s(381)]())[s(294)]((e)=>[
                            e.name,
                            e[s(256)]
                        ])), this[s(252)]();
                }
                [ue(323)]() {
                    const e = ue;
                    this._activeSwitching && (this.monitoringStarted ? re[e(322)]()[e(150)](this[e(369)]) : (this[e(345)] = !0, re.getInstance().monitor(this._cdnList)));
                }
                updateCDNStatsOnFailure(e, i) {
                    const s = ue;
                    if (this[s(312)][e] < 1) return;
                    this[s(156)]();
                    const r = this._cdnList[s(251)](e);
                    if (this[s(312)][e]--, 0 == i[s(161)] && this[s(167)]++, null != r && r[s(161)]--, r && !r[s(256)]) {
                        if (r[s(256)]) {
                            const e = Date[s(282)]();
                            r[s(339)] += e - r[s(197)], r.bannedRefTicToc = e;
                        } else {
                            const e = Date[s(282)]();
                            r[s(355)] += e - r.bannedRefTicToc, r.bannedRefTicToc = e, r[s(256)] = !0, r[s(268)]++;
                        }
                        r[s(256)] = !0, r[s(268)]++;
                    }
                    r && t.default[s(130)](n.BalancerTag, s(148) + r[s(299)] + s(341) + r[s(256)]), r && (i[s(314)] = !0, r.addResp(i), r.failures++, r[s(348)]++, r[s(223)] = !0), this[s(373)] = new Map(Array[s(271)](this[s(369)].values())[s(302)]((e)=>e[s(381)]())[s(294)]((e)=>[
                            e.name,
                            e.banned
                        ])), this[s(252)]();
                }
                [ue(286)](e) {
                    const t = ue;
                    this[t(152)][t(247)](e.id), this[t(312)][e[t(278)]]--, this._chunkCount++;
                }
                [ue(176)](e) {
                    const t = ue;
                    var i, s;
                    if (e[t(222)] && (this[t(201)] = e[t(201)]), this.updateProgressStats(), null != e[t(350)]) {
                        if (this._totalDownloadedBytes = this[t(393)] + e[t(186)], 0 != e[t(215)]) {
                            const i = 8 * e[t(186)] / e[t(215)];
                            this._highestChunkBandwidth < i && (this[t(330)] = i);
                        }
                        null === (i = this[t(369)][t(251)]((null == e ? void 0 : e[t(278)]) || "")) || void 0 === i || i[t(140)](e);
                    } else e[t(262)] && (this[t(169)][t(311)] || this[t(169)][t(332)]) && (null === (s = this[t(369)][t(251)]((null == e ? void 0 : e[t(278)]) || "")) || void 0 === s || s[t(140)](e));
                    this[t(373)] = new Map(Array[t(271)](this._cdnList[t(143)]())[t(302)]((e)=>e[t(381)]())[t(294)]((e)=>[
                            e.name,
                            e[t(256)]
                        ])), this.updateCodavelBanTimes();
                }
                [ue(157)]() {
                    return this[ue(369)];
                }
                updateProgressStats() {
                    const e = ue, t = new Map, i = new Map;
                    this[e(152)][e(159)]((i)=>{
                        const s = e, n = i[s(138)], r = i[s(278)];
                        let a = t[s(251)](r);
                        null == a && (a = 0), a += n, t.set(r, a);
                    }), this[e(305)] = t, t[e(159)]((t, i)=>{
                        const s = e, n = this[s(164)].get(i);
                        null == n ? this[s(164)][s(318)](i, t) : n < t && this[s(164)].set(i, t);
                    }), t[e(159)]((t, i)=>{
                        const s = e;
                        0 != t && this[s(255)][s(318)](i, t);
                    });
                    let s = 0;
                    i[e(159)]((e, t)=>{
                        s += e;
                    });
                }
                [ue(139)](i, s, r) {
                    const a = ue;
                    var o, d, u;
                    const l = e.default[a(322)]()[a(248)]().getAccountCode(), h = null !== (o = this[a(169)].profileName) && void 0 !== o ? o : "", p = null !== (d = this._options[a(306)]) && void 0 !== d ? d : a(261), f = (this[a(169)].isDev, null !== (u = this[a(169)][a(132)]) && void 0 !== u && u);
                    let g = s;
                    const m = new XMLHttpRequest;
                    let v = g + "/" + l + "/" + (this[a(169)].profileName ? h + "/" : "") + a(387);
                    v = v[a(396)]("//", "/"), v = a(357) + v;
                    const y = {
                        resource: i,
                        live: "" + f,
                        extended: a(300),
                        npawPluginInfo: a(300),
                        originCode: null !== this._options[a(306)] && void 0 !== this[a(169)][a(306)] ? p : "",
                        v: e.default[a(319)]()
                    };
                    if (m[a(343)](a(242), v + c[a(192)](y), !1), m[a(137)](), m[a(260)] >= 200 && m[a(260)] <= 300) try {
                        if (m[a(370)]) {
                            const e = JSON.parse(m[a(370)]);
                            for (const t of e.providers)if (t[a(299)] === r && t.auth && t[a(291)][a(390)]) return t[a(291)][a(390)].signed_url;
                        }
                    } catch (e) {
                        t.default[a(315)](n.BalancerTag, a(296) + e);
                    }
                    else t.default.debug(n.BalancerTag, a(203) + m.status + ")");
                }
                [ue(219)](i, s = !1, r) {
                    const a = ue;
                    var o, d, c, u, l, h, p, f, g, m, v, y, T, S;
                    const E = this[a(279)](i.url), b = this[a(210)](i[a(374)]), A = i[a(262)] && !i[a(314)], w = E && b, _ = null !== (o = this[a(169)][a(332)]) && void 0 !== o && o || null !== (d = this[a(169)][a(311)]) && void 0 !== d && d;
                    if (_) {
                        if (E && b) {
                            const e = Array[a(271)](this[a(369)].values())[a(294)]((e)=>'"' + e[a(342)] + '"'), s = (null !== (c = this[a(169)][a(295)]) && void 0 !== c ? c : [])[a(158)](null !== (u = this[a(169)][a(377)]) && void 0 !== u ? u : []).map((e)=>'"' + e + '"');
                            return void t.default[a(315)](n.BalancerTag, a(184) + i.url + a(238) + e[a(363)](",") + a(398) + s[a(363)](",") + "] (balancerManifest: " + _ + ")");
                        }
                    } else if (A || w) {
                        if (E && b) {
                            const e = Array.from(this._cdnList.values())[a(294)]((e)=>'"' + e.host + '"'), s = (null !== (l = this[a(169)][a(295)]) && void 0 !== l ? l : [])[a(158)](null !== (h = this[a(169)][a(377)]) && void 0 !== h ? h : [])[a(294)]((e)=>'"' + e + '"');
                            t.default[a(315)](n.BalancerTag, a(184) + i[a(374)] + a(238) + e.join(",") + a(398) + s[a(363)](",") + "]");
                        }
                        return;
                    }
                    if (r) {
                        const t = this[a(369)][a(251)](r);
                        if (t) {
                            let n = (i[a(374)][a(216)](a(334)) ? a(357) : a(249)) + t[a(342)];
                            if (t.provider === a(317) || t[a(175)] === a(289) ? n += "/" + e.default[a(322)]().getFastDataService().getAccountCode() + "/" + (null !== (p = this[a(169)][a(360)]) && void 0 !== p ? p : a(261)) + "/" + (null !== (f = this[a(169)][a(306)]) && void 0 !== f ? f : a(261)) : n += t[a(134)], n += i[a(243)], (t[a(175)] === a(317) || t[a(175)] === a(289)) && (n += n.includes("?") ? a(185) + i[a(354)] : a(246) + i[a(354)]), t[a(175)] === a(289) && (n += a(320)), null != t[a(291)] && t[a(291)][a(385)] && (!s || s && t[a(291)][a(232)])) {
                                if (t[a(291)].auth_action_info === a(331)) {
                                    const e = (null === (g = t[a(291)][a(390)]) || void 0 === g ? void 0 : g[a(308)]) || "";
                                    n += n.includes("?") ? "&" + e : "?" + e;
                                } else if (t[a(291)].auth_action_info === a(240)) {
                                    const e = this[a(139)](n, this[a(287)], t[a(299)]);
                                    e && (n = e);
                                }
                            }
                            return n;
                        }
                    }
                    let I = new Map;
                    I = new Map(this[a(369)]);
                    let N = "", D = "";
                    const P = (null === (m = i[a(231)]) || void 0 === m ? void 0 : m.bandwidth) || 0;
                    for(this._highestRenditionBandwidth < P && (this[a(364)] = P); (!N || "" == N) && (D = new te(I, this[a(155)], this[a(364)], this[a(310)], this[a(266)], this[a(169)])[a(162)](i, this[a(379)]), e.default.getInstance()[a(347)](de.default[a(394)].BALANCER, de.default.BalancerVariables[a(304)], "Original" === D ? "Origin" : D), D !== a(187));){
                        const s = this[a(369)][a(251)](D);
                        try {
                            if (s && "Original" != D) {
                                if (N = (i[a(374)][a(216)](a(334)) ? "https://" : a(249)) + s.host, "STREBOOS" === s[a(175)] || "STREBOPX" === s[a(175)]) {
                                    const t = e.default[a(322)]().getFastDataService()[a(160)]();
                                    N += "/" + t + "/" + (null !== (v = this[a(169)][a(360)]) && void 0 !== v ? v : a(261)) + "/" + (null !== (y = this._options[a(306)]) && void 0 !== y ? y : a(261));
                                } else N += s.path;
                                N += i.pathName, (s.provider === a(317) || s.provider === a(289)) && (N += N[a(209)]("?") ? a(185) + i.origRes : a(246) + i.origRes), s.provider === a(289) && (N += a(320)), "" == N && t.default[a(315)](n.BalancerTag, a(250) + i.url + " / " + (null === (T = this[a(267)]) || void 0 === T ? void 0 : T[a(338)]) + a(213) + s.name);
                            } else D == a(204) && (N = i[a(374)]);
                        } catch (e) {}
                        I[a(247)](D);
                    }
                    if (D === a(187)) N = a(187);
                    else {
                        this[a(312)][D]++;
                        const e = this[a(369)][a(251)](D);
                        if (null != e && null != e[a(291)] && e[a(291)][a(385)] && (!s || s && e.auth[a(232)])) {
                            if ("append_to_url" === e[a(291)][a(205)]) {
                                const t = (null === (S = e[a(291)][a(390)]) || void 0 === S ? void 0 : S[a(308)]) || "";
                                N += N[a(209)]("?") ? "&" + t : "?" + t;
                            } else if (e[a(291)].auth_action_info === a(240)) {
                                const t = this.getSignedUrlFromApi(N, this[a(287)], e[a(299)]);
                                t && (N = t);
                            }
                        }
                        if (i[a(280)] = N, e && i[a(277)](N, e[a(299)], e.provider), t.default.verbose(n.BalancerTag, "New url -> " + N + a(136) + i.cdnName), this.lastUsedCdn != D && this[a(328)] !== a(204) && void 0 !== this.lastUsedCdn) {
                            const e = this[a(369)][a(251)](this[a(328)]), t = this[a(369)][a(251)](D);
                            null != e && (e[a(381)]() && null != t && !t.isCodavel() && (3 == e[a(263)] && this[a(301)](3), this[a(272)]()), e[a(273)](), 2 == e[a(263)] ? e[a(392)]() : 1 == e.lastUpdatedState ? e[a(177)]() : 3 == e[a(263)] && e[a(145)]());
                        }
                        this.lastUsedCdn = D;
                    }
                    return N;
                }
                [ue(129)](e) {
                    const t = ue, i = c[t(253)](null != e ? e : "") ? c[t(326)](e) : {
                        route: "",
                        fileName: ""
                    };
                    this._resource[t(163)] = i[t(163)], this[t(267)][t(338)] = i[t(338)];
                }
                [ue(359)]() {
                    var t, i, s, n;
                    return t = this, i = void 0, n = function*() {
                        const t = ce;
                        let i = 0;
                        for(; !e.default[t(322)]()[t(349)](de.default.Products[t(168)], de.default.BalancerVariables[t(264)]) && i++ < 5;)yield c[t(270)](300);
                        if (5 === i) return this[t(267)][t(338)] + this[t(267)][t(163)];
                        const s = Array[t(271)](this[t(369)][t(143)]())[t(302)]((e)=>e[t(299)] !== t(187));
                        return s[t(378)] > 0 ? s[0][t(374)] + this._resource[t(163)] : this[t(267)][t(338)] + this._resource[t(163)];
                    }, new (s = void 0, s = Promise)(function(e, r) {
                        function a(e) {
                            const t = ce;
                            try {
                                d(n[t(237)](e));
                            } catch (e) {
                                r(e);
                            }
                        }
                        function o(e) {
                            const t = ce;
                            try {
                                d(n[t(321)](e));
                            } catch (e) {
                                r(e);
                            }
                        }
                        function d(t) {
                            const i = ce;
                            var n;
                            t.done ? e(t[i(353)]) : (n = t[i(353)], n instanceof s ? n : new s(function(e) {
                                e(n);
                            })).then(a, o);
                        }
                        d((n = n.apply(t, i || [])).next());
                    });
                }
                [ue(226)]() {
                    const e = ue, t = [];
                    let i = 0, s = 0, n = 0, r = 0, a = 0, o = 0, d = 0, c = 0;
                    return this[e(369)][e(159)]((u)=>{
                        const l = e;
                        if (u.name === l(187)) return;
                        u.updateAvailability();
                        let h = (u.downloadedBytes || 0) / ((u[l(131)] || 1) / 1e3) * 8;
                        const p = (u[l(391)] || 0) / ((u[l(276)] || 1) / 1e3) * 8;
                        null == h && (h = 0);
                        const f = this[l(393)] / ((Date[l(282)]() - this[l(236)]) / 1e3) * 8, g = this[l(164)][l(251)](u[l(299)]) || 0, m = this[l(305)].get(u[l(299)]) || 0, v = this[l(255)][l(251)](u[l(299)]) || 0;
                        t[l(275)]({
                            downloadedBytes: u[l(362)],
                            downloadedChunks: u[l(288)],
                            bandwidth: Math[l(133)](h),
                            instantBandwidth: Math.trunc(m),
                            lastInstantBandwidth: Math.trunc(v),
                            peakBandwidth: Math[l(133)](g),
                            failures: u.failures,
                            totalFailures: u[l(348)],
                            retries: u.retries,
                            downloadTime: u[l(131)],
                            provider: u[l(175)],
                            profileName: u[l(299)],
                            isActive: u[l(335)],
                            ptb: f,
                            usedOnce: u[l(223)],
                            hugeChunks: u.hugeChunks,
                            firstHugeChunkSize: u[l(371)],
                            lastChunksLapse: this._lastChunksLapse,
                            maxBandwidth: u.maxBandwidth,
                            banned: u[l(256)],
                            lastBandwidth: u[l(259)],
                            scoringBandwidth: p
                        }), i += u.downloadedBytes, s += h, n += g, r += m, a += u[l(288)], o += u[l(131)], d += u[l(298)], c += u[l(161)];
                    }), {
                        responseUUID: this[e(293)],
                        totalDownloadedBytes: i,
                        totalDownloadedChunks: a,
                        totalDownloadedTime: o,
                        totalFailures: d,
                        totalRetries: c,
                        activeSwitching: this[e(310)] || "",
                        mode: this[e(173)] || "",
                        totalBandwidth: Math[e(133)](s),
                        totalInstantBandwidth: Math[e(133)](r),
                        totalPeakBandwidth: Math[e(133)](n),
                        cdns: t,
                        currentRenditionBandwidth: this.currentRenditionBandwidth,
                        currentRenditionPos: this[e(313)],
                        renditionCount: this[e(147)]
                    };
                }
                [ue(172)](e, t) {
                    const i = ue;
                    let s = !1, n = 0;
                    return !t && this[i(369)][i(159)]((e)=>{
                        e[i(335)] && n++;
                    }), this[i(369)][i(159)]((r)=>{
                        const a = i;
                        r[a(299)] === e && (t && (r[a(335)] = !0, s = !0), !t && n > 1 && (r[a(335)] = !1, s = !0));
                    }), s;
                }
                [ue(189)](e, t) {
                    const i = ue, s = this[i(369)][i(251)](e);
                    return null != s && (s[i(230)] = t, this[i(195)](r.yl[i(325)], {
                        loader: this
                    }), !0);
                }
                getMaxBandwidth(e) {
                    const t = ue, i = this[t(369)][t(251)](e);
                    return null != i ? i.maxBandwidth : 0;
                }
                [ue(252)]() {
                    const e = ue, t = Date.now();
                    if (0 === this[e(373)][e(186)]) return void (this.codavelBanRefTicToc = t);
                    const i = Array.from(this[e(373)].values())[e(154)]((e)=>e);
                    i !== this[e(196)] ? i ? (this.codavelUnbanTime += t - this[e(227)], this.codavelBanRefTicToc = t, this[e(352)]++) : (this[e(229)] += t - this[e(227)], this[e(227)] = t, this[e(179)]++) : i ? (this[e(229)] += t - this[e(227)], this[e(227)] = t) : (this[e(165)] += t - this[e(227)], this[e(227)] = t), this.codavelAllBanned = i;
                }
                [ue(149)]() {
                    const e = ue;
                    this[e(229)] = 0, this.codavelUnbanTime = 0, this[e(227)] = Date[e(282)](), this[e(285)] = !1, this[e(327)] = void 0, this[e(292)] = void 0, this.maxApiCallResponseTime = void 0, this[e(193)] = void 0, this[e(346)] = void 0;
                }
                [ue(272)]() {
                    const e = ue;
                    this[e(228)]++, 2 == this[e(235)] ? this[e(337)]++ : 1 == this[e(235)] ? this[e(194)]++ : 3 == this[e(235)] && this.codavelSwitchesDueToQuality++;
                }
                [ue(372)]() {
                    this.lastCodavelRequestStatus = 0;
                }
                [ue(301)](e) {
                    this.lastCodavelRequestStatus = e;
                }
                [ue(284)]() {
                    const e = ue;
                    null == this[e(193)] ? this[e(193)] = 1 : this.apiCallErrors += 1, this.processedApiCall = !0;
                }
                [ue(376)](e) {
                    const t = ue;
                    null == this.apiCallResponses ? this.apiCallResponses = 1 : this.apiCallResponses += 1, null == this[t(292)] ? this[t(292)] = e : this[t(292)] = Math[t(269)](this[t(292)], e), null == this.avgApiCallResponseTime ? this.avgApiCallResponseTime = e : this[t(327)] = this[t(327)] + (e - this[t(327)]) / this[t(346)], null == this[t(183)] ? this[t(183)] = e : this[t(183)] = Math[t(202)](this.maxApiCallResponseTime, e), this.processedApiCall = !0;
                }
                [ue(386)]() {
                    const e = ue;
                    return this[e(169)][e(306)];
                }
                [ue(221)]() {
                    const e = ue;
                    return this._options[e(132)];
                }
                [ue(297)]() {
                    return this[ue(169)].forceDecisionCall;
                }
                [ue(316)]() {
                    return this[ue(201)];
                }
                [ue(279)](e) {
                    const t = ue;
                    let i = !1;
                    const s = new URL(e);
                    for (const e of this._cdnList[t(143)]())if (e[t(342)] === s[t(342)]) {
                        i = !0;
                        break;
                    }
                    return !i;
                }
                isNotOnWhitelist(e) {
                    const i = ue;
                    var s, r;
                    let a = !1;
                    const o = new URL(e);
                    for (const e of null !== (s = this[i(169)][i(377)]) && void 0 !== s ? s : [])try {
                        if (new RegExp(e)[i(283)](o[i(342)])) {
                            a = !0;
                            break;
                        }
                    } catch (s) {
                        t.default[i(315)](n.BalancerTag, i(200) + e);
                    }
                    for (const e of null !== (r = this[i(169)][i(295)]) && void 0 !== r ? r : []){
                        if (a) break;
                        if (e === o[i(342)]) {
                            a = !0;
                            break;
                        }
                    }
                    return !a;
                }
                constructor(e, t, i, s){
                    const n = ue;
                    super(), this[n(155)] = r.Ow[n(261)], this._cdnList = new Map, this[n(312)] = new Map, this._activeRequests = new Map, this[n(167)] = 0, this[n(336)] = 0, this[n(379)] = {
                        currentCDN: ""
                    }, this[n(330)] = 0, this[n(364)] = 0, this[n(255)] = new Map, this._cdnInstantBandwith = new Map, this[n(164)] = new Map, this[n(358)] = new Map, this[n(393)] = 0, this[n(236)] = 0, this[n(281)] = 0, this[n(220)] = 0, this[n(361)] = 0, this[n(313)] = 0, this[n(147)] = 0, this[n(212)] = !1, this.monitoringStarted = !1, this.codavelAllBanned = !1, this.codavelBanCount = 0, this[n(179)] = 0, this[n(229)] = 0, this.codavelUnbanTime = 0, this.codavelSwitches = 0, this[n(337)] = 0, this[n(194)] = 0, this[n(397)] = 0, this[n(227)] = Date[n(282)](), this[n(235)] = 0, this[n(373)] = new Map, this.processedApiCall = !1, this[n(327)] = void 0, this[n(292)] = void 0, this.maxApiCallResponseTime = void 0, this[n(193)] = void 0, this[n(346)] = void 0, this.p2pAvailable = !1, this.bolinaAvailable = !1, this[n(217)] = "", this.priorityCdn = "", this[n(239)] = 0, this.segmentDuration = void 0, this[n(169)] = e, this._resource = t, this[n(266)] = i, this[n(287)] = s;
                }
            }
            const pe = fe;
            function fe(e, t) {
                const i = ge();
                return (fe = function(e, t) {
                    return i[e -= 371];
                })(e, t);
            }
            function ge() {
                const e = [
                    "_localMem",
                    "p2pId",
                    "has",
                    "66392OalpGb",
                    "destroy",
                    "_expTime",
                    "3649355MAPLDV",
                    "set",
                    "_loader",
                    "_maxSize",
                    "_removeOldSegments",
                    "cachedSegmentsCount",
                    "9687630hOzpJR",
                    "storeSegment",
                    "hasSegment",
                    "getLastSegmentId",
                    "readyForP2P",
                    "min",
                    "7778652rLZhDO",
                    "now",
                    "size",
                    "_reduceMemSize",
                    "5448BXccXO",
                    "createdAt",
                    "_lastSegmentId",
                    "endTime",
                    "delete",
                    "getSize",
                    "3807aXkUpb",
                    "data",
                    "16939WkICLX",
                    "22720ybLMjM",
                    "getSegment",
                    "6yxASMW",
                    "startTime",
                    "getMaxSize",
                    "forEach",
                    "p2p",
                    "push",
                    "P2P: Segment not ready yet for segment map",
                    "clear",
                    "expiration",
                    "345wZqtrJ",
                    "1UpEYGX",
                    "count",
                    "debug",
                    "2034260bGIEmY",
                    "11dpeTSp",
                    "get",
                    "getLastSegmentCreatedAt"
                ];
                return (ge = function() {
                    return e;
                })();
            }
            !function(e) {
                const t = fe, i = e();
                for(;;)try {
                    if (966014 == parseInt(t(379)) / 1 * (parseInt(t(382)) / 2) + parseInt(t(378)) / 3 * (parseInt(t(389)) / 4) + parseInt(t(392)) / 5 * (parseInt(t(419)) / 6) + -parseInt(t(404)) / 7 + -parseInt(t(417)) / 8 * (parseInt(t(414)) / 9) + parseInt(t(398)) / 10 * (-parseInt(t(383)) / 11) + -parseInt(t(408)) / 12 * (-parseInt(t(416)) / 13)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(ge);
            class me {
                setSettings(e) {
                    const t = fe, i = e[t(373)];
                    i && (this[t(391)] = i.cachedSegmentExpiration || r.dR.expiration, this[t(395)] = Math[t(403)](i[t(397)] || r.dR[t(380)], r.dR.safeMaxCount));
                }
                [pe(371)]() {
                    return this[pe(395)];
                }
                [pe(418)](e) {
                    const t = pe;
                    return this[t(386)][t(384)](e);
                }
                [pe(400)](e) {
                    const t = pe;
                    return this[t(386)][t(388)](e);
                }
                [pe(399)](e) {
                    const t = pe;
                    return !this.hasSegment(e[t(387)]) && void 0 !== e[t(415)] && (this._lastSegmentId = e[t(387)], this[t(386)][t(393)](e[t(387)], e), this[t(407)](), !0);
                }
                _removeOldSegments() {
                    const e = pe, t = Date[e(405)]() - this._expTime;
                    this[e(386)][e(372)]((i, s)=>{
                        const n = e;
                        i[n(420)] < t && this[n(386)][n(412)](s);
                    });
                }
                [pe(407)]() {
                    const e = pe;
                    let t, i;
                    this._localMem.size - this._maxSize > 0 && (i = Date[e(405)](), t = "", this[e(386)][e(372)]((s, n)=>{
                        const r = e;
                        s[r(411)] < i && (t = n, i = s[r(411)]);
                    }), this[e(386)][e(412)](t), this[e(407)]());
                }
                createMap() {
                    const e = pe, i = [];
                    for (const [, s] of this[e(386)])s[e(402)] ? i[e(374)](s.p2pId) : t.default[e(381)](n.BalancerTag, e(375));
                    return i;
                }
                [pe(390)]() {
                    const e = pe;
                    this._localMem[e(376)]();
                }
                [pe(413)]() {
                    const e = pe;
                    return this[e(386)][e(406)];
                }
                [pe(401)]() {
                    return this[pe(410)];
                }
                [pe(385)]() {
                    const e = pe;
                    var t;
                    return (null === (t = this[e(386)][e(384)](this[e(410)])) || void 0 === t ? void 0 : t[e(409)]) || 0;
                }
                constructor(e){
                    const t = fe;
                    this[t(386)] = new Map, this[t(395)] = r.dR[t(380)], this[t(391)] = r.dR[t(377)], this._lastSegmentId = "", this[t(394)] = e, setInterval(()=>{
                        this[t(396)]();
                    }, 1e3);
                }
            }
            var ve = i(8641), ye = i.n(ve);
            function Te(e, t) {
                var i = Ee();
                return (Te = function(e, t) {
                    return i[e -= 200];
                })(e, t);
            }
            !function(e) {
                for(var t = Te, i = e();;)try {
                    if (485381 == parseInt(t(206)) / 1 * (-parseInt(t(211)) / 2) + parseInt(t(207)) / 3 * (parseInt(t(203)) / 4) + parseInt(t(204)) / 5 * (-parseInt(t(210)) / 6) + -parseInt(t(205)) / 7 + -parseInt(t(201)) / 8 + parseInt(t(202)) / 9 + parseInt(t(209)) / 10 * (parseInt(t(212)) / 11)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(Ee);
            class Se {
                constructor(){
                    var e = Te;
                    this[e(208)] = "", this[e(200)] = 0;
                }
            }
            function Ee() {
                var e = [
                    "9auSwkB",
                    "uri",
                    "23210smduDk",
                    "18BgdnQp",
                    "346HDzCzw",
                    "3487QkipYE",
                    "pos",
                    "1785168NSRNmH",
                    "3522906YneGhA",
                    "955432kYgwGv",
                    "819440wwWVMq",
                    "4181681njkcQx",
                    "267WahPbM"
                ];
                return (Ee = function() {
                    return e;
                })();
            }
            const be = Ae;
            function Ae(e, t) {
                const i = we();
                return (Ae = function(e, t) {
                    return i[e -= 182];
                })(e, t);
            }
            function we() {
                const e = [
                    "uri",
                    "9684342SeImwF",
                    "36626490EavNJf",
                    "24ePSBUL",
                    "4WAXwFa",
                    "bandwidth",
                    "633xalNwz",
                    "addSegment",
                    "3536712Gvkoxv",
                    "693447sKnImi",
                    "set",
                    "9816JeSTiu",
                    "get",
                    "segments",
                    "isMaxRendition",
                    "4081885KJGGwJ",
                    "size",
                    "pos",
                    "getSegmentsSize",
                    "getSegment",
                    "1045051zTWgzK"
                ];
                return (we = function() {
                    return e;
                })();
            }
            !function(e) {
                const t = Ae, i = e();
                for(;;)try {
                    if (634692 == -parseInt(t(183)) / 1 + parseInt(t(185)) / 2 * (-parseInt(t(201)) / 3) + -parseInt(t(199)) / 4 * (-parseInt(t(189)) / 5) + parseInt(t(198)) / 6 * (-parseInt(t(194)) / 7) + -parseInt(t(182)) / 8 + -parseInt(t(196)) / 9 + parseInt(t(197)) / 10) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(we);
            class _e {
                [be(202)](e, t, i) {
                    const s = be;
                    let n = new Se;
                    n.uri = t, n[s(191)] = i, this[s(187)][s(184)](e, n);
                }
                [be(193)](e) {
                    const t = be;
                    return this[t(187)][t(186)](e);
                }
                [be(192)]() {
                    const e = be;
                    return this[e(187)][e(190)];
                }
                getSegments() {
                    return this.segments;
                }
                constructor(){
                    const e = Ae;
                    this[e(195)] = "", this[e(200)] = 0, this.isAudio = !1, this.bandwidthPosition = -1, this.targetDuration = 0, this[e(187)] = new Map, this[e(188)] = !1;
                }
            }
            const Ie = Ne;
            function Ne(e, t) {
                const i = De();
                return (Ne = function(e, t) {
                    return i[e -= 338];
                })(e, t);
            }
            function De() {
                const e = [
                    "isMasterPlaylist",
                    "29894lHrgtV",
                    "bandwidth",
                    "uri",
                    "57752JbbBJk",
                    "variants",
                    "addRendition",
                    "66RcfzBH",
                    "8483354spqEcG",
                    "7831TwrLJR",
                    "parse",
                    "forEach",
                    "audio",
                    "targetDuration",
                    "10bsrlei",
                    "isAudio",
                    "203MlcuCS",
                    "segments",
                    "3016431FXdHHN",
                    "239004NvyGyj",
                    "24tDTgSQ",
                    "endsWith",
                    "8805GaLzzH",
                    "1218yZCRdX",
                    "getRenditions"
                ];
                return (De = function() {
                    return e;
                })();
            }
            !function(e) {
                const t = Ne, i = e();
                for(;;)try {
                    if (244019 == -parseInt(t(339)) / 1 + parseInt(t(356)) / 2 * (-parseInt(t(362)) / 3) + -parseInt(t(349)) / 4 + -parseInt(t(352)) / 5 * (parseInt(t(353)) / 6) + parseInt(t(346)) / 7 * (-parseInt(t(359)) / 8) + parseInt(t(348)) / 9 * (-parseInt(t(344)) / 10) + -parseInt(t(338)) / 11 * (-parseInt(t(350)) / 12)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(De);
            class Pe {
                static [Ie(340)](e, t, i) {
                    const s = Ie, n = ye()[s(340)](t);
                    if (n[s(355)]) null != n[s(360)] && n[s(360)][s(341)](function(e) {
                        const t = s, n = new _e;
                        n[t(357)] = e[t(357)], n[t(358)] = e[t(358)], i[t(361)](e[t(358)], n), null != e[t(342)] && e[t(342)].forEach(function(e) {
                            const s = t, n = new _e;
                            n[s(358)] = e.uri, n[s(345)] = !0, i[s(361)](e[s(358)], n);
                        });
                    });
                    else {
                        let t = !1;
                        i[s(354)]()[s(341)]((r, a)=>{
                            const o = s;
                            e[o(351)](a) && (null != n[o(347)] && n.segments[o(341)](function(e) {
                                const t = o;
                                i.addSegment(a, e[t(358)], e[t(358)]);
                            }), null != n[o(343)] && (r[o(343)] = n[o(343)]), t = !0);
                        });
                    }
                    return n;
                }
            }
            var Re = i(9731), Le = i.n(Re), Ce = i(2553), Oe = i.n(Ce);
            const Be = function(e, t) {
                if (/^[a-z]+:/i.test(t)) return t;
                /^data:/.test(e) && (e = Oe().location && Oe().location.href || "");
                var i = "function" == typeof Oe().URL, s = /^\/\//.test(e), n = !Oe().location && !/\/\//i.test(e);
                if (i ? e = new (Oe()).URL(e, Oe().location || "http://example.com") : /\/\//i.test(e) || (e = Le().buildAbsoluteURL(Oe().location && Oe().location.href || "", e)), i) {
                    var r = new URL(t, e);
                    return n ? r.href.slice(18) : s ? r.href.slice(r.protocol.length) : r.href;
                }
                return Le().buildAbsoluteURL(e, t);
            };
            var xe = i(1048).hp;
            var Me = i(7937), ke = function(e) {
                return !!e && "object" == typeof e;
            }, Ue = function e() {
                for(var t = arguments.length, i = new Array(t), s = 0; s < t; s++)i[s] = arguments[s];
                return i.reduce(function(t, i) {
                    return "object" != typeof i || Object.keys(i).forEach(function(s) {
                        Array.isArray(t[s]) && Array.isArray(i[s]) ? t[s] = t[s].concat(i[s]) : ke(t[s]) && ke(i[s]) ? t[s] = e(t[s], i[s]) : t[s] = i[s];
                    }), t;
                }, {});
            }, Ve = function(e) {
                return Object.keys(e).map(function(t) {
                    return e[t];
                });
            }, qe = function(e) {
                return e.reduce(function(e, t) {
                    return e.concat(t);
                }, []);
            }, Fe = function(e) {
                if (!e.length) return [];
                for(var t = [], i = 0; i < e.length; i++)t.push(e[i]);
                return t;
            }, Xe = function(e, t) {
                for(var i = 0; i < e.length; i++)if (t(e[i])) return i;
                return -1;
            }, He = function(e) {
                var t = e.baseUrl, i = void 0 === t ? "" : t, s = e.source, n = void 0 === s ? "" : s, r = e.range, a = void 0 === r ? "" : r, o = e.indexRange, d = void 0 === o ? "" : o, c = {
                    uri: n,
                    resolvedUri: Be(i || "", n)
                };
                if (a || d) {
                    var u, l = (a || d).split("-"), h = Oe().BigInt ? Oe().BigInt(l[0]) : parseInt(l[0], 10), p = Oe().BigInt ? Oe().BigInt(l[1]) : parseInt(l[1], 10);
                    h < Number.MAX_SAFE_INTEGER && "bigint" == typeof h && (h = Number(h)), p < Number.MAX_SAFE_INTEGER && "bigint" == typeof p && (p = Number(p)), "bigint" == typeof (u = "bigint" == typeof p || "bigint" == typeof h ? Oe().BigInt(p) - Oe().BigInt(h) + Oe().BigInt(1) : p - h + 1) && u < Number.MAX_SAFE_INTEGER && (u = Number(u)), c.byterange = {
                        length: u,
                        offset: h
                    };
                }
                return c;
            }, Ge = function(e) {
                return e && "number" != typeof e && (e = parseInt(e, 10)), isNaN(e) ? null : e;
            }, je = {
                static: function(e) {
                    var t = e.duration, i = e.timescale, s = void 0 === i ? 1 : i, n = e.sourceDuration, r = e.periodDuration, a = Ge(e.endNumber), o = t / s;
                    return "number" == typeof a ? {
                        start: 0,
                        end: a
                    } : "number" == typeof r ? {
                        start: 0,
                        end: r / o
                    } : {
                        start: 0,
                        end: n / o
                    };
                },
                dynamic: function(e) {
                    var t = e.NOW, i = e.clientOffset, s = e.availabilityStartTime, n = e.timescale, r = void 0 === n ? 1 : n, a = e.duration, o = e.periodStart, d = void 0 === o ? 0 : o, c = e.minimumUpdatePeriod, u = void 0 === c ? 0 : c, l = e.timeShiftBufferDepth, h = void 0 === l ? 1 / 0 : l, p = Ge(e.endNumber), f = (t + i) / 1e3, g = s + d, m = f + u - g, v = Math.ceil(m * r / a), y = Math.floor((f - g - h) * r / a), T = Math.floor((f - g) * r / a);
                    return {
                        start: Math.max(0, y),
                        end: "number" == typeof p ? p : Math.min(v, T)
                    };
                }
            }, We = function(e) {
                var t = e.type, i = e.duration, s = e.timescale, n = void 0 === s ? 1 : s, r = e.periodDuration, a = e.sourceDuration, o = je[t](e), d = (function(e, t) {
                    for(var i = [], s = e; s < t; s++)i.push(s);
                    return i;
                })(o.start, o.end).map(function(e) {
                    return function(t) {
                        var i = e.duration, s = e.timescale, n = void 0 === s ? 1 : s, r = e.periodStart, a = e.startNumber;
                        return {
                            number: (void 0 === a ? 1 : a) + t,
                            duration: i / n,
                            timeline: r,
                            time: t * i
                        };
                    };
                }(e));
                if ("static" === t) {
                    var c = d.length - 1, u = "number" == typeof r ? r : a;
                    d[c].duration = u - i / n * c;
                }
                return d;
            }, Ye = function(e) {
                var t = e.baseUrl, i = e.initialization, s = void 0 === i ? {} : i, n = e.sourceDuration, r = e.indexRange, a = void 0 === r ? "" : r, o = e.periodStart, d = e.presentationTime, c = e.number, u = void 0 === c ? 0 : c, l = e.duration;
                if (!t) throw new Error("NO_BASE_URL");
                var h = He({
                    baseUrl: t,
                    source: s.sourceURL,
                    range: s.range
                }), p = He({
                    baseUrl: t,
                    source: t,
                    indexRange: a
                });
                if (p.map = h, l) {
                    var f = We(e);
                    f.length && (p.duration = f[0].duration, p.timeline = f[0].timeline);
                } else n && (p.duration = n, p.timeline = o);
                return p.presentationTime = d || o, p.number = u, [
                    p
                ];
            }, ze = [
                "AUDIO",
                "SUBTITLES"
            ], Ke = 1 / 60, Qe = function(e) {
                var t, i;
                return (t = e, i = function(e) {
                    return e.timeline;
                }, Ve(t.reduce(function(e, t) {
                    return t.forEach(function(t) {
                        e[i(t)] = t;
                    }), e;
                }, {}))).sort(function(e, t) {
                    return e.timeline > t.timeline ? 1 : -1;
                });
            }, Je = function(e) {
                var t, i, s = [];
                return t = e, i = function(e, t, i, n) {
                    s = s.concat(e.playlists || []);
                }, ze.forEach(function(e) {
                    for(var s in t.mediaGroups[e])for(var n in t.mediaGroups[e][s]){
                        var r = t.mediaGroups[e][s][n];
                        i(r);
                    }
                }), s;
            }, $e = function(e) {
                var t = e.playlist, i = e.mediaSequence;
                t.mediaSequence = i, t.segments.forEach(function(e, i) {
                    e.number = t.mediaSequence + i;
                });
            }, Ze = function(e) {
                return Ve(e.reduce(function(e, t) {
                    var i, s = t.attributes.id + (t.attributes.lang || "");
                    e[s] ? (t.segments && (t.segments[0] && (t.segments[0].discontinuity = !0), (i = e[s].segments).push.apply(i, t.segments)), t.attributes.contentProtection && (e[s].attributes.contentProtection = t.attributes.contentProtection)) : (e[s] = t, e[s].attributes.timelineStarts = []);
                    return e[s].attributes.timelineStarts.push({
                        start: t.attributes.periodStart,
                        timeline: t.attributes.periodStart
                    }), e;
                }, {})).map(function(e) {
                    var t;
                    return e.discontinuityStarts = (t = e.segments || [], t.reduce(function(e, t, i) {
                        return t.discontinuity && e.push(i), e;
                    }, [])), e;
                });
            }, et = function(e, t) {
                var i, s, n, r = (i = e.sidx) && i.uri + "-" + (n = "bigint" == typeof (s = i.byterange).offset || "bigint" == typeof s.length ? Oe().BigInt(s.offset) + Oe().BigInt(s.length) - Oe().BigInt(1) : s.offset + s.length - 1, s.offset + "-" + n), a = r && t[r] && t[r].sidx;
                return a && function(e, t, i) {
                    var s, n = e.sidx.map ? e.sidx.map : null, r = e.sidx.duration, a = e.timeline || 0, o = e.sidx.byterange, d = o.offset + o.length, c = t.timescale, u = t.references.filter(function(e) {
                        return 1 !== e.referenceType;
                    }), l = [], h = e.endList ? "static" : "dynamic", p = e.sidx.timeline, f = p, g = e.mediaSequence || 0;
                    s = "bigint" == typeof t.firstOffset ? Oe().BigInt(d) + t.firstOffset : d + t.firstOffset;
                    for(var m = 0; m < u.length; m++){
                        var v, y = t.references[m], T = y.referencedSize, S = y.subsegmentDuration;
                        v = "bigint" == typeof s ? s + Oe().BigInt(T) - Oe().BigInt(1) : s + T - 1;
                        var E = Ye({
                            baseUrl: i,
                            timescale: c,
                            timeline: a,
                            periodStart: p,
                            presentationTime: f,
                            number: g,
                            duration: S,
                            sourceDuration: r,
                            indexRange: s + "-" + v,
                            type: h
                        })[0];
                        n && (E.map = n), l.push(E), s += "bigint" == typeof s ? Oe().BigInt(T) : T, f += S / c, g++;
                    }
                    e.segments = l;
                }(e, a, e.sidx.resolvedUri), e;
            }, tt = function(e, t) {
                if (void 0 === t && (t = {}), !Object.keys(t).length) return e;
                for(var i in e)e[i] = et(e[i], t);
                return e;
            }, it = function(e) {
                var t, i = e.attributes, s = e.segments, n = e.sidx, r = e.discontinuityStarts, a = {
                    attributes: (t = {
                        NAME: i.id,
                        AUDIO: "audio",
                        SUBTITLES: "subs",
                        RESOLUTION: {
                            width: i.width,
                            height: i.height
                        },
                        CODECS: i.codecs,
                        BANDWIDTH: i.bandwidth
                    }, t["PROGRAM-ID"] = 1, t),
                    uri: "",
                    endList: "static" === i.type,
                    timeline: i.periodStart,
                    resolvedUri: "",
                    targetDuration: i.duration,
                    discontinuityStarts: r,
                    timelineStarts: i.timelineStarts,
                    segments: s
                };
                return i.contentProtection && (a.contentProtection = i.contentProtection), n && (a.sidx = n), a;
            }, st = function(e) {
                var t = e.attributes;
                return "video/mp4" === t.mimeType || "video/webm" === t.mimeType || "video" === t.contentType;
            }, nt = function(e) {
                var t = e.attributes;
                return "audio/mp4" === t.mimeType || "audio/webm" === t.mimeType || "audio" === t.contentType;
            }, rt = function(e) {
                var t = e.attributes;
                return "text/vtt" === t.mimeType || "text" === t.contentType;
            }, at = function(e) {
                return e ? Object.keys(e).reduce(function(t, i) {
                    var s = e[i];
                    return t.concat(s.playlists);
                }, []) : [];
            }, ot = function(e) {
                var t, i = e.dashPlaylists, s = e.locations, n = e.sidxMapping, r = void 0 === n ? {} : n, a = e.previousManifest;
                if (!i.length) return {};
                var o = i[0].attributes, d = o.sourceDuration, c = o.type, u = o.suggestedPresentationDelay, l = o.minimumUpdatePeriod, h = Ze(i.filter(st)).map(it), p = Ze(i.filter(nt)), f = Ze(i.filter(rt)), g = i.map(function(e) {
                    return e.attributes.captionServices;
                }).filter(Boolean), m = {
                    allowCache: !0,
                    discontinuityStarts: [],
                    segments: [],
                    endList: !0,
                    mediaGroups: (t = {
                        AUDIO: {},
                        VIDEO: {}
                    }, t["CLOSED-CAPTIONS"] = {}, t.SUBTITLES = {}, t),
                    uri: "",
                    duration: d,
                    playlists: tt(h, r)
                };
                l >= 0 && (m.minimumUpdatePeriod = 1e3 * l), s && (m.locations = s), "dynamic" === c && (m.suggestedPresentationDelay = u);
                var v, y, T, S, E, b, A, w = 0 === m.playlists.length, _ = p.length ? function(e, t, i) {
                    var s;
                    void 0 === t && (t = {}), void 0 === i && (i = !1);
                    var n = e.reduce(function(e, n) {
                        var r = n.attributes.role && n.attributes.role.value || "", a = n.attributes.lang || "", o = n.attributes.label || "main";
                        if (a && !n.attributes.label) {
                            var d = r ? " (" + r + ")" : "";
                            o = "" + n.attributes.lang + d;
                        }
                        e[o] || (e[o] = {
                            language: a,
                            autoselect: !0,
                            default: "main" === r,
                            playlists: [],
                            uri: ""
                        });
                        var c = et(function(e, t) {
                            var i, s = e.attributes, n = e.segments, r = e.sidx, a = e.mediaSequence, o = e.discontinuitySequence, d = e.discontinuityStarts, c = {
                                attributes: (i = {
                                    NAME: s.id,
                                    BANDWIDTH: s.bandwidth,
                                    CODECS: s.codecs
                                }, i["PROGRAM-ID"] = 1, i),
                                uri: "",
                                endList: "static" === s.type,
                                timeline: s.periodStart,
                                resolvedUri: "",
                                targetDuration: s.duration,
                                discontinuitySequence: o,
                                discontinuityStarts: d,
                                timelineStarts: s.timelineStarts,
                                mediaSequence: a,
                                segments: n
                            };
                            return s.contentProtection && (c.contentProtection = s.contentProtection), r && (c.sidx = r), t && (c.attributes.AUDIO = "audio", c.attributes.SUBTITLES = "subs"), c;
                        }(n, i), t);
                        return e[o].playlists.push(c), void 0 === s && "main" === r && ((s = n).default = !0), e;
                    }, {});
                    return s || (n[Object.keys(n)[0]].default = !0), n;
                }(p, r, w) : null, I = f.length ? function(e, t) {
                    return void 0 === t && (t = {}), e.reduce(function(e, i) {
                        var s = i.attributes.lang || "text";
                        return e[s] || (e[s] = {
                            language: s,
                            default: !1,
                            autoselect: !1,
                            playlists: [],
                            uri: ""
                        }), e[s].playlists.push(et(function(e) {
                            var t, i = e.attributes, s = e.segments, n = e.mediaSequence, r = e.discontinuityStarts, a = e.discontinuitySequence;
                            void 0 === s && (s = [
                                {
                                    uri: i.baseUrl,
                                    timeline: i.periodStart,
                                    resolvedUri: i.baseUrl || "",
                                    duration: i.sourceDuration,
                                    number: 0
                                }
                            ], i.duration = i.sourceDuration);
                            var o = ((t = {
                                NAME: i.id,
                                BANDWIDTH: i.bandwidth
                            })["PROGRAM-ID"] = 1, t);
                            return i.codecs && (o.CODECS = i.codecs), {
                                attributes: o,
                                uri: "",
                                endList: "static" === i.type,
                                timeline: i.periodStart,
                                resolvedUri: i.baseUrl || "",
                                targetDuration: i.duration,
                                timelineStarts: i.timelineStarts,
                                discontinuityStarts: r,
                                discontinuitySequence: a,
                                mediaSequence: n,
                                segments: s
                            };
                        }(i), t)), e;
                    }, {});
                }(f, r) : null, N = h.concat(at(_), at(I)), D = N.map(function(e) {
                    return e.timelineStarts;
                });
                return m.timelineStarts = Qe(D), v = N, y = m.timelineStarts, v.forEach(function(e) {
                    e.mediaSequence = 0, e.discontinuitySequence = Xe(y, function(t) {
                        return t.timeline === e.timeline;
                    }), e.segments && e.segments.forEach(function(e, t) {
                        e.number = t;
                    });
                }), _ && (m.mediaGroups.AUDIO.audio = _), I && (m.mediaGroups.SUBTITLES.subs = I), g.length && (m.mediaGroups["CLOSED-CAPTIONS"].cc = g.reduce(function(e, t) {
                    return t ? (t.forEach(function(t) {
                        var i = t.channel, s = t.language;
                        e[s] = {
                            autoselect: !1,
                            default: !1,
                            instreamId: i,
                            language: s
                        }, t.hasOwnProperty("aspectRatio") && (e[s].aspectRatio = t.aspectRatio), t.hasOwnProperty("easyReader") && (e[s].easyReader = t.easyReader), t.hasOwnProperty("3D") && (e[s]["3D"] = t["3D"]);
                    }), e) : e;
                }, {})), a ? (S = (T = {
                    oldManifest: a,
                    newManifest: m
                }).oldManifest, E = T.newManifest, b = S.playlists.concat(Je(S)), A = E.playlists.concat(Je(E)), E.timelineStarts = Qe([
                    S.timelineStarts,
                    E.timelineStarts
                ]), function(e) {
                    var t = e.oldPlaylists, i = e.timelineStarts;
                    e.newPlaylists.forEach(function(e) {
                        e.discontinuitySequence = Xe(i, function(t) {
                            return t.timeline === e.timeline;
                        });
                        var s = function(e, t) {
                            for(var i = 0; i < e.length; i++)if (e[i].attributes.NAME === t) return e[i];
                            return null;
                        }(t, e.attributes.NAME);
                        if (s && !e.sidx) {
                            var n = e.segments[0], r = Xe(s.segments, function(e) {
                                return Math.abs(e.presentationTime - n.presentationTime) < Ke;
                            });
                            if (-1 === r) return $e({
                                playlist: e,
                                mediaSequence: s.mediaSequence + s.segments.length
                            }), e.segments[0].discontinuity = !0, e.discontinuityStarts.unshift(0), void ((!s.segments.length && e.timeline > s.timeline || s.segments.length && e.timeline > s.segments[s.segments.length - 1].timeline) && e.discontinuitySequence--);
                            s.segments[r].discontinuity && !n.discontinuity && (n.discontinuity = !0, e.discontinuityStarts.unshift(0), e.discontinuitySequence--), $e({
                                playlist: e,
                                mediaSequence: s.segments[r].number
                            });
                        }
                    });
                }({
                    oldPlaylists: b,
                    newPlaylists: A,
                    timelineStarts: E.timelineStarts
                }), E) : m;
            }, dt = function(e, t, i) {
                var s = e.NOW, n = e.clientOffset, r = e.availabilityStartTime, a = e.timescale, o = void 0 === a ? 1 : a, d = e.periodStart, c = void 0 === d ? 0 : d, u = e.minimumUpdatePeriod, l = (s + n) / 1e3 + (void 0 === u ? 0 : u) - (r + c);
                return Math.ceil((l * o - t) / i);
            }, ct = function(e, t) {
                for(var i = e.type, s = e.minimumUpdatePeriod, n = void 0 === s ? 0 : s, r = e.media, a = void 0 === r ? "" : r, o = e.sourceDuration, d = e.timescale, c = void 0 === d ? 1 : d, u = e.startNumber, l = void 0 === u ? 1 : u, h = e.periodStart, p = [], f = -1, g = 0; g < t.length; g++){
                    var m = t[g], v = m.d, y = m.r || 0, T = m.t || 0;
                    f < 0 && (f = T), T && T > f && (f = T);
                    var S = void 0;
                    if (y < 0) {
                        var E = g + 1;
                        S = E === t.length ? "dynamic" === i && n > 0 && a.indexOf("$Number$") > 0 ? dt(e, f, v) : (o * c - f) / v : (t[E].t - f) / v;
                    } else S = y + 1;
                    for(var b = l + p.length + S, A = l + p.length; A < b;)p.push({
                        number: A,
                        duration: v / c,
                        time: f,
                        timeline: h
                    }), f += v, A++;
                }
                return p;
            }, ut = /\$([A-z]*)(?:(%0)([0-9]+)d)?\$/g, lt = function(e, t) {
                return e.replace(ut, function(e) {
                    return function(t, i, s, n) {
                        if ("$$" === t) return "$";
                        if (void 0 === e[i]) return t;
                        var r = "" + e[i];
                        return "RepresentationID" === i ? r : (n = s ? parseInt(n, 10) : 1, r.length >= n ? r : "" + new Array(n - r.length + 1).join("0") + r);
                    };
                }(t));
            }, ht = function(e, t) {
                var i = {
                    RepresentationID: e.id,
                    Bandwidth: e.bandwidth || 0
                }, s = e.initialization, n = void 0 === s ? {
                    sourceURL: "",
                    range: ""
                } : s, r = He({
                    baseUrl: e.baseUrl,
                    source: lt(n.sourceURL, i),
                    range: n.range
                }), a = function(e, t) {
                    return e.duration || t ? e.duration ? We(e) : ct(e, t) : [
                        {
                            number: e.startNumber || 1,
                            duration: e.sourceDuration,
                            time: 0,
                            timeline: e.periodStart
                        }
                    ];
                }(e, t);
                return a.map(function(t) {
                    i.Number = t.number, i.Time = t.time;
                    var s = lt(e.media || "", i), n = e.timescale || 1, a = e.presentationTimeOffset || 0, o = e.periodStart + (t.time - a) / n;
                    return {
                        uri: s,
                        timeline: t.timeline,
                        duration: t.duration,
                        resolvedUri: Be(e.baseUrl || "", s),
                        map: r,
                        number: t.number,
                        presentationTime: o
                    };
                });
            }, pt = function(e, t) {
                var i = e.duration, s = e.segmentUrls, n = void 0 === s ? [] : s, r = e.periodStart;
                if (!i && !t || i && t) throw new Error("SEGMENT_TIME_UNSPECIFIED");
                var a, o = n.map(function(t) {
                    return function(e, t) {
                        var i = e.baseUrl, s = e.initialization, n = void 0 === s ? {} : s, r = He({
                            baseUrl: i,
                            source: n.sourceURL,
                            range: n.range
                        }), a = He({
                            baseUrl: i,
                            source: t.media,
                            range: t.mediaRange
                        });
                        return a.map = r, a;
                    }(e, t);
                });
                return i && (a = We(e)), t && (a = ct(e, t)), a.map(function(t, i) {
                    if (o[i]) {
                        var s = o[i], n = e.timescale || 1, a = e.presentationTimeOffset || 0;
                        return s.timeline = t.timeline, s.duration = t.duration, s.number = t.number, s.presentationTime = r + (t.time - a) / n, s;
                    }
                }).filter(function(e) {
                    return e;
                });
            }, ft = function(e) {
                var t, i, s = e.attributes, n = e.segmentInfo;
                n.template ? (i = ht, t = Ue(s, n.template)) : n.base ? (i = Ye, t = Ue(s, n.base)) : n.list && (i = pt, t = Ue(s, n.list));
                var r = {
                    attributes: s
                };
                if (!i) return r;
                var a = i(t, n.segmentTimeline);
                if (t.duration) {
                    var o = t, d = o.duration, c = o.timescale, u = void 0 === c ? 1 : c;
                    t.duration = d / u;
                } else a.length ? t.duration = a.reduce(function(e, t) {
                    return Math.max(e, Math.ceil(t.duration));
                }, 0) : t.duration = 0;
                return r.attributes = t, r.segments = a, n.base && t.indexRange && (r.sidx = a[0], r.segments = []), r;
            }, gt = function(e, t) {
                return Fe(e.childNodes).filter(function(e) {
                    return e.tagName === t;
                });
            }, mt = function(e) {
                return e.textContent.trim();
            }, vt = function(e) {
                var t = /P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:([\d.]*)S)?)?/.exec(e);
                if (!t) return 0;
                var i = t.slice(1), s = i[0], n = i[1], r = i[2], a = i[3], o = i[4], d = i[5];
                return 31536e3 * parseFloat(s || 0) + 2592e3 * parseFloat(n || 0) + 86400 * parseFloat(r || 0) + 3600 * parseFloat(a || 0) + 60 * parseFloat(o || 0) + parseFloat(d || 0);
            }, yt = {
                mediaPresentationDuration: function(e) {
                    return vt(e);
                },
                availabilityStartTime: function(e) {
                    var t;
                    return /^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/.test(t = e) && (t += "Z"), Date.parse(t) / 1e3;
                },
                minimumUpdatePeriod: function(e) {
                    return vt(e);
                },
                suggestedPresentationDelay: function(e) {
                    return vt(e);
                },
                type: function(e) {
                    return e;
                },
                timeShiftBufferDepth: function(e) {
                    return vt(e);
                },
                start: function(e) {
                    return vt(e);
                },
                width: function(e) {
                    return parseInt(e, 10);
                },
                height: function(e) {
                    return parseInt(e, 10);
                },
                bandwidth: function(e) {
                    return parseInt(e, 10);
                },
                startNumber: function(e) {
                    return parseInt(e, 10);
                },
                timescale: function(e) {
                    return parseInt(e, 10);
                },
                presentationTimeOffset: function(e) {
                    return parseInt(e, 10);
                },
                duration: function(e) {
                    var t = parseInt(e, 10);
                    return isNaN(t) ? vt(e) : t;
                },
                d: function(e) {
                    return parseInt(e, 10);
                },
                t: function(e) {
                    return parseInt(e, 10);
                },
                r: function(e) {
                    return parseInt(e, 10);
                },
                DEFAULT: function(e) {
                    return e;
                }
            }, Tt = function(e) {
                return e && e.attributes ? Fe(e.attributes).reduce(function(e, t) {
                    var i = yt[t.name] || yt.DEFAULT;
                    return e[t.name] = i(t.value), e;
                }, {}) : {};
            }, St = {
                "urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b": "org.w3.clearkey",
                "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed": "com.widevine.alpha",
                "urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95": "com.microsoft.playready",
                "urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb": "com.adobe.primetime"
            }, Et = function(e, t) {
                return t.length ? qe(e.map(function(e) {
                    return t.map(function(t) {
                        return Be(e, mt(t));
                    });
                })) : e;
            }, bt = function(e) {
                var t = gt(e, "SegmentTemplate")[0], i = gt(e, "SegmentList")[0], s = i && gt(i, "SegmentURL").map(function(e) {
                    return Ue({
                        tag: "SegmentURL"
                    }, Tt(e));
                }), n = gt(e, "SegmentBase")[0], r = i || t, a = r && gt(r, "SegmentTimeline")[0], o = i || n || t, d = o && gt(o, "Initialization")[0], c = t && Tt(t);
                c && d ? c.initialization = d && Tt(d) : c && c.initialization && (c.initialization = {
                    sourceURL: c.initialization
                });
                var u = {
                    template: c,
                    segmentTimeline: a && gt(a, "S").map(function(e) {
                        return Tt(e);
                    }),
                    list: i && Ue(Tt(i), {
                        segmentUrls: s,
                        initialization: Tt(d)
                    }),
                    base: n && Ue(Tt(n), {
                        initialization: Tt(d)
                    })
                };
                return Object.keys(u).forEach(function(e) {
                    u[e] || delete u[e];
                }), u;
            }, At = function(e, t, i) {
                return function(s) {
                    var n, r = Tt(s), a = Et(t, gt(s, "BaseURL")), o = gt(s, "Role")[0], d = {
                        role: Tt(o)
                    }, c = Ue(e, r, d), u = gt(s, "Accessibility")[0], l = "urn:scte:dash:cc:cea-608:2015" === (n = Tt(u)).schemeIdUri ? ("string" != typeof n.value ? [] : n.value.split(";")).map(function(e) {
                        var t, i;
                        if (i = e, /^CC\d=/.test(e)) {
                            var s = e.split("=");
                            t = s[0], i = s[1];
                        } else /^CC\d$/.test(e) && (t = e);
                        return {
                            channel: t,
                            language: i
                        };
                    }) : "urn:scte:dash:cc:cea-708:2015" === n.schemeIdUri ? ("string" != typeof n.value ? [] : n.value.split(";")).map(function(e) {
                        var t = {
                            channel: void 0,
                            language: void 0,
                            aspectRatio: 1,
                            easyReader: 0,
                            "3D": 0
                        };
                        if (/=/.test(e)) {
                            var i = e.split("="), s = i[0], n = i[1], r = void 0 === n ? "" : n;
                            t.channel = s, t.language = e, r.split(",").forEach(function(e) {
                                var i = e.split(":"), s = i[0], n = i[1];
                                "lang" === s ? t.language = n : "er" === s ? t.easyReader = Number(n) : "war" === s ? t.aspectRatio = Number(n) : "3D" === s && (t["3D"] = Number(n));
                            });
                        } else t.language = e;
                        return t.channel && (t.channel = "SERVICE" + t.channel), t;
                    }) : void 0;
                    l && (c = Ue(c, {
                        captionServices: l
                    }));
                    var h = gt(s, "Label")[0];
                    if (h && h.childNodes.length) {
                        var p = h.childNodes[0].nodeValue.trim();
                        c = Ue(c, {
                            label: p
                        });
                    }
                    var f = gt(s, "ContentProtection").reduce(function(e, t) {
                        var i = Tt(t);
                        i.schemeIdUri && (i.schemeIdUri = i.schemeIdUri.toLowerCase());
                        var s = St[i.schemeIdUri];
                        if (s) {
                            e[s] = {
                                attributes: i
                            };
                            var n = gt(t, "cenc:pssh")[0];
                            if (n) {
                                var r = mt(n);
                                e[s].pssh = r && function(e) {
                                    for(var t, i = (t = e, Oe().atob ? Oe().atob(t) : xe.from(t, "base64").toString("binary")), s = new Uint8Array(i.length), n = 0; n < i.length; n++)s[n] = i.charCodeAt(n);
                                    return s;
                                }(r);
                            }
                        }
                        return e;
                    }, {});
                    Object.keys(f).length && (c = Ue(c, {
                        contentProtection: f
                    }));
                    var g = bt(s), m = gt(s, "Representation"), v = Ue(i, g);
                    return qe(m.map(function(e, t, i) {
                        return function(s) {
                            var n = gt(s, "BaseURL"), r = Et(t, n), a = Ue(e, Tt(s)), o = bt(s);
                            return r.map(function(e) {
                                return {
                                    segmentInfo: Ue(i, o),
                                    attributes: Ue(a, {
                                        baseUrl: e
                                    })
                                };
                            });
                        };
                    }(c, a, v)));
                };
            }, wt = function(e, t) {
                return function(i, s) {
                    var n = Et(t, gt(i.node, "BaseURL")), r = Ue(e, {
                        periodStart: i.attributes.start
                    });
                    "number" == typeof i.attributes.duration && (r.periodDuration = i.attributes.duration);
                    var a = gt(i.node, "AdaptationSet"), o = bt(i.node);
                    return qe(a.map(At(r, n, o)));
                };
            }, _t = function(e, t) {
                void 0 === t && (t = {});
                var i = function(e, t) {
                    void 0 === t && (t = {});
                    var i = t, s = i.manifestUri, n = void 0 === s ? "" : s, r = i.NOW, a = void 0 === r ? Date.now() : r, o = i.clientOffset, d = void 0 === o ? 0 : o, c = gt(e, "Period");
                    if (!c.length) throw new Error("INVALID_NUMBER_OF_PERIOD");
                    var u = gt(e, "Location"), l = Tt(e), h = Et([
                        n
                    ], gt(e, "BaseURL"));
                    l.type = l.type || "static", l.sourceDuration = l.mediaPresentationDuration || 0, l.NOW = a, l.clientOffset = d, u.length && (l.locations = u.map(mt));
                    var p = [];
                    return c.forEach(function(e, t) {
                        var i = Tt(e), s = p[t - 1];
                        i.start = function(e) {
                            var t = e.attributes, i = e.priorPeriodAttributes, s = e.mpdType;
                            return "number" == typeof t.start ? t.start : i && "number" == typeof i.start && "number" == typeof i.duration ? i.start + i.duration : i || "static" !== s ? null : 0;
                        }({
                            attributes: i,
                            priorPeriodAttributes: s ? s.attributes : null,
                            mpdType: l.type
                        }), p.push({
                            node: e,
                            attributes: i
                        });
                    }), {
                        locations: l.locations,
                        representationInfo: qe(p.map(wt(l, h)))
                    };
                }(function(e) {
                    if ("" === e) throw new Error("DASH_EMPTY_MANIFEST");
                    var t, i, s = new Me.DOMParser;
                    try {
                        i = (t = s.parseFromString(e, "application/xml")) && "MPD" === t.documentElement.tagName ? t.documentElement : null;
                    } catch (e) {}
                    if (!i || i && i.getElementsByTagName("parsererror").length > 0) throw new Error("DASH_INVALID_XML");
                    return i;
                }(e), t), s = i.representationInfo.map(ft);
                return ot({
                    dashPlaylists: s,
                    locations: i.locations,
                    sidxMapping: t.sidxMapping,
                    previousManifest: t.previousManifest
                });
            };
            function It() {
                const e = [
                    "resolvedUri",
                    "189gZSWID",
                    "../",
                    "3614015dINQPf",
                    "targetDuration",
                    "playlists",
                    "777594iQMCKo",
                    "61580XyZKGB",
                    "BANDWIDTH",
                    "segments",
                    "1rtdwTw",
                    "6631304NJMUyM",
                    "Error parsing MPD manifest: ",
                    "6258469Khkosz",
                    "attributes",
                    "42NkEdcH",
                    "parse",
                    "233790cyvEcQ",
                    "182916cxNDQm",
                    "addRendition",
                    "uri",
                    "addSegment"
                ];
                return (It = function() {
                    return e;
                })();
            }
            const Nt = Dt;
            function Dt(e, t) {
                const i = It();
                return (Dt = function(e, t) {
                    return i[e -= 125];
                })(e, t);
            }
            !function(e) {
                const t = Dt, i = e();
                for(;;)try {
                    if (740531 == -parseInt(t(138)) / 1 * (-parseInt(t(134)) / 2) + parseInt(t(143)) / 3 * (parseInt(t(135)) / 4) + parseInt(t(131)) / 5 + -parseInt(t(146)) / 6 + -parseInt(t(141)) / 7 + parseInt(t(139)) / 8 + -parseInt(t(129)) / 9 * (parseInt(t(145)) / 10)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(It);
            class Pt {
                static [Nt(144)](e, i, s, r) {
                    const a = Nt, o = i;
                    try {
                        let t = _t(o, {
                            url: e
                        })[a(133)];
                        for (var d of t){
                            let e = new _e;
                            e.bandwidth = d.attributes[a(136)], e[a(126)] = d.resolvedUri, e[a(132)] = d[a(132)];
                            let t = e[a(126)];
                            for (var c of ((!e[a(126)] || "" == e[a(126)]) && (t = d[a(142)]), s[a(125)](t, e), d[a(137)])){
                                let e = c[a(126)];
                                for(; e.startsWith(a(130));)e = e.replace(a(130), "");
                                s[a(127)](t, c[a(128)], e);
                            }
                        }
                    } catch (e) {
                        t.default.debug(n.BalancerTag, a(140), e);
                    }
                }
            }
            const Rt = Ct;
            function Lt() {
                const e = [
                    "cdnProvider",
                    "finalUrl",
                    "headers",
                    "P2PManager",
                    "failed",
                    "length",
                    "compressedBytes",
                    "_resource",
                    "pathName",
                    "5144vSSoXo",
                    "1017003Eotjma",
                    " renditions -> ",
                    "includes",
                    "trunc",
                    "origRes",
                    "useP2P",
                    "round",
                    "progressDownloadedBytesLastUpdate",
                    "3442744tVMJlU",
                    "9HYqGog",
                    "endTime",
                    "4Rqqdqf",
                    "12654202beTPNL",
                    "debug",
                    "changeCDN",
                    "Range",
                    "noContentObtained",
                    "data",
                    "url",
                    "toJSON",
                    "failedOriginalCount",
                    "loaded",
                    "Parsed HLS manifest -> ",
                    "slice",
                    "function",
                    "3850qCyzqv",
                    "ORIGINAL",
                    "isMedia",
                    "3810iANsCy",
                    "download",
                    "verbose",
                    " Total time -> ",
                    "arrayBuffer",
                    "lastEstimatedTime",
                    "initialEstimatedTime",
                    "segmentDuration",
                    "name",
                    "byteLength",
                    "peer",
                    "getEntriesByType",
                    "bandwidth",
                    "getNewUrl",
                    " downloaded by p2p -> ",
                    "now",
                    "params",
                    "isManifest",
                    "triedP2P",
                    "downloadTimeMs",
                    "announcedP2P",
                    "readyForP2P",
                    "realBodySize",
                    "8187770SunAtl",
                    "floor",
                    "cachedSize",
                    "ifByteArrayToString",
                    "instantBandwidth",
                    "emit",
                    "BYTLELENGHT ",
                    "pathname",
                    "Problem slicing the array",
                    "triedCdns",
                    "updateP2PId",
                    "Done ",
                    "High risk of buffer. ",
                    "111623FIkUTd",
                    "onSuccess",
                    ".m3u8",
                    "duration",
                    "startTime",
                    "search",
                    "cdnName",
                    "createdAt",
                    "host",
                    "retryBecauseNewHeaders",
                    "endsWith",
                    "p2pId",
                    "hash",
                    "isMasterPlaylist",
                    "addParametersToUrl",
                    "route",
                    "targetDuration",
                    "size",
                    "parse",
                    "total",
                    "uncompressedBytes",
                    ".mpd",
                    "Success",
                    "progressDownloadedBytes",
                    "sliceByFirstSpecial",
                    "resource",
                    "Parsed DASH manifest -> ",
                    "588TyPjIm",
                    "getPerfLoadTime",
                    "Util"
                ];
                return (Lt = function() {
                    return e;
                })();
            }
            function Ct(e, t) {
                const i = Lt();
                return (Ct = function(e, t) {
                    return i[e -= 164];
                })(e, t);
            }
            !function(e) {
                const t = Ct, i = e();
                for(;;)try {
                    if (611011 == -parseInt(t(234)) / 1 * (parseInt(t(181)) / 2) + parseInt(t(170)) / 3 + parseInt(t(169)) / 4 * (-parseInt(t(195)) / 5) + parseInt(t(198)) / 6 * (-parseInt(t(261)) / 7) + parseInt(t(178)) / 8 * (-parseInt(t(179)) / 9) + parseInt(t(221)) / 10 + parseInt(t(182)) / 11) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(Lt);
            class Ot extends w {
                [Rt(231)]() {
                    const e = Rt;
                    var i;
                    if (!window[e(267)]) return;
                    const s = (null === (i = this[e(266)]) || void 0 === i ? void 0 : i[e(185)]) || "";
                    t.default[e(183)](n.BalancerTag, "Update P2P ID " + this[e(168)] + s), this[e(245)] = window[e(267)][e(263)].hash(this.pathName + s);
                }
                [Rt(211)](e) {
                    const t = Rt;
                    let i = !1;
                    this[t(215)] ? (this[t(215)] && this[t(164)] || this.isManifest && e) && (i = !0) : i = !0;
                    let s = i ? this[t(265)] : this.url;
                    return this[t(214)] && (s = s[t(172)]("?") ? s + "&" + this[t(214)] : s + "?" + this.params), s;
                }
                [Rt(248)](e) {
                    const t = Rt;
                    let i = e;
                    return this[t(214)] && i && (i = i[t(172)]("?") ? i + "&" + this[t(214)] : i + "?" + this[t(214)]), i;
                }
                [Rt(184)](e, t, i) {
                    const s = Rt;
                    if (i != s(196)) {
                        const i = new URL(e);
                        this.host = i[s(242)], this[s(249)] = i[s(228)], this[s(230)].push(t);
                    }
                    this[s(240)] = t, this[s(264)] = i;
                }
                setContent(e) {
                    const t = Rt;
                    this[t(187)] = e, this.size = e[t(207)], this[t(226)](r.yL[t(256)], {
                        segment: this,
                        data: e
                    });
                }
                [Rt(186)]() {
                    this[Rt(226)](r.yL.Fail, {
                        segment: this
                    });
                }
                [Rt(262)](e) {
                    const t = Rt;
                    var i;
                    if ("undefined" != typeof performance && typeof performance[t(209)] === t(194)) {
                        const s = performance[t(209)](t(259));
                        if (s && s[t(165)] > 0) for (const n of s){
                            const s = n[t(189)]();
                            if (null === (i = null == s ? void 0 : s[t(206)]) || void 0 === i ? void 0 : i.includes(e)) return Math[t(176)](null == s ? void 0 : s.duration);
                        }
                    }
                    return -1;
                }
                onProgress(e, i) {
                    const s = Rt;
                    i[s(253)] > 0 && (this[s(220)] = i[s(253)]), 0 == this[s(177)] && (this[s(177)] = this[s(238)]);
                    const r = Date.now(), a = r - this[s(177)];
                    if (this.endTime = Date[s(213)](), a < 150) return;
                    0 != a && (this[s(225)] = (i[s(191)] - this[s(257)]) / ((r - this[s(177)]) / 1e3) * 8, this.progressDownloadedBytesLastUpdate = r, i[s(191)] && (this.progressDownloadedBytes = i[s(191)]));
                    const o = (r - this[s(238)]) / (i.loaded / i[s(253)]);
                    this[s(204)] = 0 == this[s(204)] ? o : this[s(204)], this[s(203)] = o, this[s(237)] > 0 && 0 != o && 1e3 * this[s(237)] < o && t.default.debug(n.BalancerTag, s(233) + this[s(174)]), t.default.verbose(n.BalancerTag, s(232) + this.origRes + s(201) + (Date[s(213)]() - this[s(238)]));
                }
                [Rt(235)](e, i, s = !1) {
                    const r = Rt;
                    if (this[r(180)] = Date[r(213)](), null == e || 0 == e[r(165)]) return !1;
                    this[r(217)] = this.endTime - this.startTime, this[r(262)](this[r(249)]);
                    const a = s ? c[r(258)](this.url) : this[r(188)], o = new URL(a)[r(228)];
                    if (o[r(244)](r(236))) {
                        e = c[r(224)](e);
                        const i = Pe.parse(this[r(188)], e, this[r(167)]);
                        this[r(247)] = i.isMasterPlaylist, t.default[r(183)](n.BalancerTag, r(192) + this.url + r(171) + this[r(167)].getRenditions()[r(251)]), null != i[r(250)] && (this[r(205)] = 1e3 * i[r(250)]);
                    }
                    if (o[r(244)](r(255))) {
                        e = c[r(224)](e);
                        const i = {
                            duration: void 0
                        };
                        Pt[r(252)](this.url, e, this._resource, i), this[r(247)] = !0, t.default[r(183)](n.BalancerTag, r(260) + this.url + " renditions -> " + this[r(167)].getRenditions()[r(251)]), null != i[r(237)] && (this[r(205)] = 1e3 * i[r(237)]);
                    }
                    if (t.default[r(200)](n.BalancerTag, r(227) + e.byteLength + r(212) + this[r(216)]), 0 != e[r(207)]) try {
                        this.data = e[r(193)](0, e[r(207)]), this[r(251)] = this[r(217)] > 5 ? this.data[r(207)] : 0, this[r(223)] = this.downloadTimeMs > 5 ? 0 : this[r(187)][r(207)], this[r(210)] = Math[r(173)](this[r(217)] > 5 ? this[r(187)].byteLength / (this.downloadTimeMs / 1e3) : 0), this[r(187)][r(207)] > 0 && (this[r(220)] = this[r(187)][r(207)]), this[r(225)] = 0, this[r(257)] = this[r(251)];
                        const t = parseInt(i, 10);
                        !isNaN(t) && t > 0 && (this[r(166)] = t, this[r(254)] = this[r(187)].byteLength || e[r(207)] || this[r(220)]);
                    } catch (e) {
                        t.default[r(183)](n.BalancerTag, r(229));
                    }
                    else this[r(187)][r(207)] != this.realBodySize && (this[r(187)] = new ArrayBuffer(1));
                    return this[r(177)] = this[r(180)], !0;
                }
                constructor(e, t, i, s = {}, n = 3, r = !1, a = !1){
                    const o = Ct;
                    var d;
                    super(), this[o(168)] = "", this[o(187)] = new ArrayBuffer(1), this[o(251)] = 0, this[o(210)] = 0, this[o(238)] = 0, this[o(180)] = 0, this[o(217)] = 0, this[o(164)] = !1, this.timeout = !1, this[o(257)] = 0, this[o(177)] = 0, this[o(225)] = 0, this.duration = 0, this.initialEstimatedTime = 0, this[o(203)] = 0, this[o(215)] = !1, this[o(247)] = !1, this[o(197)] = !1, this[o(199)] = !0, this[o(220)] = 0, this[o(219)] = !0, this[o(218)] = !1, this.activeP2PSendProcesses = 0, this[o(243)] = 0, this.forceHttp = !1, this[o(208)] = void 0, this[o(241)] = Date[o(213)](), this[o(190)] = 0, this.segmentDuration = void 0;
                    const c = new URL(t);
                    this[o(188)] = t, this[o(265)] = t, this.origRes = t, this[o(242)] = c[o(242)], this[o(249)] = c.pathname, this.params = c[o(239)], this[o(266)] = s, this.retries = n, this[o(175)] = r, this[o(216)] = !1, this[o(240)] = "", this[o(264)] = "", this[o(202)] = a, this[o(230)] = [], this[o(167)] = i, this[o(168)] = e, this.id = Math[o(222)](100 * Math.random()) + "-" + Date[o(213)]();
                    const u = (null === (d = this[o(266)]) || void 0 === d ? void 0 : d.Range) || "";
                    this[o(245)] = window.P2PManager ? window.P2PManager[o(263)][o(246)](this[o(168)] + u) : "" + this.pathName + u;
                }
            }
            function Bt() {
                const e = [
                    "bandwidths",
                    "updateAvailableBandwidths",
                    "set",
                    "getBandwidthsPos",
                    "clean",
                    "getSize",
                    "pos",
                    "masterUri",
                    "delete",
                    "3539176nJEYNF",
                    "push",
                    "300KZATYO",
                    "cleaning",
                    "getRendition",
                    "312252ZEcSNx",
                    "2415207OkdYdD",
                    "getSegments",
                    "isMaxRendition",
                    "get",
                    "renditions",
                    "7zrzOrS",
                    "uri",
                    "addSegment",
                    "bandwidthPosition",
                    "1362488VsnWSb",
                    "forEach",
                    "73449VMDhFc",
                    "endsWith",
                    "bandwidth",
                    "lastCleanPos",
                    "getRenditions",
                    "getSegmentsSize",
                    "route",
                    "43914uPYArX",
                    "192ZBZHaD",
                    "fileName",
                    "isAudio",
                    "83005TlGwBV"
                ];
                return (Bt = function() {
                    return e;
                })();
            }
            function xt(e, t) {
                const i = Bt();
                return (xt = function(e, t) {
                    return i[e -= 317];
                })(e, t);
            }
            const Mt = xt;
            !function(e) {
                const t = xt, i = e();
                for(;;)try {
                    if (491639 == -parseInt(t(325)) / 1 + -parseInt(t(354)) / 2 + parseInt(t(345)) / 3 + parseInt(t(344)) / 4 + parseInt(t(329)) / 5 * (parseInt(t(326)) / 6) + -parseInt(t(350)) / 7 * (parseInt(t(339)) / 8) + parseInt(t(318)) / 9 * (parseInt(t(341)) / 10)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(Bt);
            class kt {
                [Mt(334)]() {
                    const e = Mt;
                    this.cleaning || this[e(336)] - this.lastCleanPos > 1e5 && (this[e(342)] = !0, this[e(338)](this[e(321)], this[e(321)] + 5e3), this.lastCleanPos = this[e(321)] + 5e3, this[e(342)] = !1);
                }
                [Mt(352)](e, t, i) {
                    const s = Mt;
                    var n;
                    this[s(336)]++, null === (n = this[s(349)][s(348)](e)) || void 0 === n || n[s(352)](t, i, this[s(336)]);
                }
                [Mt(335)]() {
                    const e = Mt;
                    let t = 0;
                    for (let i of this.renditions.values())t += i[e(323)]();
                    return t;
                }
                [Mt(338)](e, t) {
                    const i = Mt;
                    for (let s of this[i(349)].values())for (let [n, r] of s[i(346)]())r.pos >= e && r[i(336)] <= t && s[i(346)]()[i(338)](n);
                }
                addRendition(e, t) {
                    const i = Mt;
                    this[i(349)][i(332)](e, t), this[i(331)]();
                }
                [Mt(322)]() {
                    return this[Mt(349)];
                }
                getVideoRenditions() {
                    const e = Mt;
                    let t = new Map;
                    return this[e(349)][e(317)](function(i, s) {
                        const n = e;
                        i.isAudio || t[n(332)](s, i);
                    }), t;
                }
                [Mt(343)](e) {
                    const t = Mt;
                    let i;
                    return this[t(349)].forEach(function(s) {
                        const n = t;
                        s[n(346)]()[n(317)](function(t) {
                            const r = n;
                            e[r(319)](t[r(351)]) && (i = s);
                        });
                    }), i;
                }
                updateAvailableBandwidths() {
                    const e = Mt;
                    let t = new Array;
                    this[e(349)][e(317)](function(i) {
                        const s = e;
                        i[s(328)] || t[s(340)](Number(i.bandwidth));
                    }), t.sort(function(e, t) {
                        return e - t;
                    }), this[e(330)] = t, this[e(349)][e(317)]((t)=>{
                        const i = e;
                        !t[i(328)] && (t[i(353)] = this[i(333)](t[i(320)]), t[i(353)] + 1 == this[i(330)].length && (t[i(347)] = !0));
                    });
                }
                [Mt(333)](e) {
                    const t = Mt;
                    let i = 0, s = -1;
                    return this[t(330)][t(317)](function(t) {
                        e == t && (s = i), i++;
                    }), s;
                }
                constructor(){
                    const e = xt;
                    this[e(337)] = "", this[e(349)] = new Map, this[e(324)] = "", this[e(327)] = "", this[e(330)] = [], this[e(336)] = 0, this[e(321)] = 0, this.cleaning = !1;
                }
            }
            const Ut = qt;
            !function(e) {
                const t = qt, i = e();
                for(;;)try {
                    if (312657 == -parseInt(t(536)) / 1 + -parseInt(t(530)) / 2 + parseInt(t(482)) / 3 + parseInt(t(528)) / 4 + parseInt(t(503)) / 5 * (-parseInt(t(549)) / 6) + parseInt(t(546)) / 7 * (parseInt(t(524)) / 8) + parseInt(t(465)) / 9 * (parseInt(t(463)) / 10)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(Vt);
            function Vt() {
                const e = [
                    "next",
                    "options",
                    "_manifestMap",
                    "disable",
                    "394968LeorAp",
                    "lastIndexOf",
                    "defaultReportTimeout",
                    "414VHUxlL",
                    "createUpdateTimer",
                    "clearReportTimeout",
                    "devHost",
                    "adsAnalyticsEnabled",
                    "API call failed with status code ",
                    "timeout",
                    "getIsEnabled",
                    "P2PLoader",
                    "parse",
                    "response",
                    "-js",
                    "Origin",
                    "CDNLoader",
                    "Using ",
                    "DECISION_FINISHED",
                    "Error parsing Balancer API response: ",
                    "debug",
                    "unregisterCommonVariable",
                    "readyState",
                    "getRouteAndFilename",
                    "https://",
                    "PROFILE_NAME",
                    "replace",
                    "120gJPmfb",
                    "delete",
                    "526329qwsGcS",
                    "BUCKET",
                    "getInstance",
                    "getPluginVersion",
                    "AS_ENABLED",
                    "code",
                    "onSucessfullApiResponse",
                    "performHashmapCleanup",
                    "gotEmptyResponse",
                    "true",
                    "Performing decision request with URL ",
                    "_loader",
                    "wasSelectorCommunicationSuccessful",
                    " in manifest hashmap",
                    "value",
                    "onerror",
                    "signManifestUsingApi",
                    "484449FLMVEi",
                    "status",
                    "loadBalancerData",
                    "LAST_USED_CDN",
                    "setBalancerEnabled",
                    "slice",
                    "split",
                    "has",
                    "onload",
                    "BALANCER",
                    "get",
                    "shouldPerformDecision",
                    "setAdsAnalyticsEnabled",
                    "registerCommonVariable",
                    "decisionReloadIntervalPerManifestMilliseconds",
                    "now",
                    "apply",
                    "Removing ",
                    "verbose",
                    "host",
                    "send",
                    "6910rXdFRv",
                    "Empty response received",
                    "start",
                    "diagnosticTool",
                    "setSettings",
                    "Storing ",
                    "Not performing decision since time between requests has not passed yet.",
                    "then",
                    "formatParameters",
                    " for /decision requests",
                    "pathname",
                    "getReportTimeout",
                    "route",
                    "isUsingLegacy",
                    "deleteOldestFromManifestMap",
                    "size",
                    "setVideoAnalyticsEnabled",
                    "done",
                    "startMonitoring",
                    "open",
                    " + (host: ",
                    "48gFVDqN",
                    "activeSwitching",
                    "API call failed due to a network error.",
                    "BalancerVariables",
                    "125212hPHXgf",
                    "storage",
                    "633578zmoPdb",
                    "onFailedApiResponse",
                    "setReportTimeout",
                    "videoAnalyticsEnabled",
                    "Products",
                    "Creating setTimeout for decision request with resource ",
                    "508298fgubCZ",
                    " from manifest hashmap since older than ",
                    "GET",
                    "Using development environment -> ",
                    "qualityPriority",
                    "includes"
                ];
                return (Vt = function() {
                    return e;
                })();
            }
            function qt(e, t) {
                const i = Vt();
                return (qt = function(e, t) {
                    return i[e -= 453];
                })(e, t);
            }
            class Ft {
                [Ut(484)](i, s, a, o, d, u, l, h, p, f, g) {
                    var m, v, y, T;
                    return m = this, v = void 0, T = function*() {
                        const m = qt;
                        if (!this._loader[m(556)]()) return void e.default[m(467)]()[m(495)](de.default[m(534)][m(491)], de.default[m(527)].DECISION_FINISHED, !0);
                        if (!this[m(493)](s)) return t.default[m(456)](n.BalancerTag, m(509)), void this[m(550)](i, s, a, o, null != d && d, null != u && u, h, p, f, g);
                        const v = Date[m(497)](), y = c.isValidUrl(s) ? this[m(459)](s) : {
                            route: "",
                            fileName: ""
                        };
                        t.default[m(500)](n.BalancerTag, m(539) + u);
                        let T = u ? r.df[m(552)] : r.df[m(501)];
                        T = f || T, t.default[m(456)](n.BalancerTag, m(453) + T + m(512));
                        const S = new XMLHttpRequest;
                        let E = T + "/" + i + "/" + (h ? h + "/" : "") + "decision";
                        E = E[m(462)]("//", "/"), E = m(460) + E;
                        const b = {
                            resource: "" + y[m(515)] + y.fileName,
                            live: "" + a,
                            extended: m(474),
                            npawPluginInfo: "true",
                            originCode: null != p ? p : "",
                            v: e.default[m(468)]()[m(488)](m(560))[0],
                            dynamicRules: null != g ? g : ""
                        }, A = this;
                        yield new Promise((i, a)=>{
                            const o = m;
                            S[o(490)] = function() {
                                const a = o;
                                var d, c, u, l, f, g, m, T, E, b, w;
                                if (4 === S[a(458)]) {
                                    if (S[a(483)] > 0 && (10 === A[a(544)][a(518)] && !A[a(544)][a(489)](s) && A.deleteOldestFromManifestMap(), A[a(472)](), A[a(544)].set(s, Date[a(497)]()), t.default[a(500)](n.BalancerTag, a(508) + s + a(478))), S[a(483)] >= 200 && S[a(483)] <= 300) {
                                        const i = Date[a(497)]() - v;
                                        A[a(476)][a(562)][a(471)](i);
                                        try {
                                            if (S[a(559)]) {
                                                A[a(543)] = JSON[a(558)](S[a(559)]), e.default.getInstance()[a(495)](de.default[a(534)].BALANCER, de.default[a(527)][a(461)], h), e.default[a(467)]()[a(495)](de.default[a(534)][a(491)], de.default[a(527)][a(466)], p), A._loader[a(529)][a(507)](A[a(543)]), A[a(476)][a(557)] && (A._loader[a(557)][a(507)](A[a(543)]), A[a(476)][a(557)].startMonitoring()), A._loader[a(562)][a(507)](A[a(543)], y[a(515)]), A[a(476)][a(562)][a(521)]();
                                                const t = [
                                                    r.m.cdnPriority,
                                                    r.m[a(540)]
                                                ][a(541)](A[a(543)][a(525)]) && A[a(476)][a(562)].getCdnList()[a(518)] > 0;
                                                e.default.getInstance()[a(516)]() ? e.default.getInstance().setActiveSwitchingOnLegacy(t) : e.default[a(467)]()[a(495)](de.default[a(534)].BALANCER, de.default[a(527)][a(469)], t), x.default[a(467)]()[a(477)](!0), x.default[a(467)]()[a(486)](null === (c = null === (d = A[a(543)]) || void 0 === d ? void 0 : d[a(506)]) || void 0 === c ? void 0 : c.balancerEnabled), x.default.getInstance()[a(519)](null === (l = null === (u = A[a(543)]) || void 0 === u ? void 0 : u[a(506)]) || void 0 === l ? void 0 : l[a(533)]), x.default.getInstance()[a(494)](null === (g = null === (f = A.options) || void 0 === f ? void 0 : f[a(506)]) || void 0 === g ? void 0 : g[a(553)]), x.default[a(467)]()[a(532)](null === (T = null === (m = A[a(543)]) || void 0 === m ? void 0 : m[a(506)]) || void 0 === T ? void 0 : T[a(555)]);
                                            } else t.default.debug(n.BalancerTag, "Empty response received from Balancer API"), A[a(476)].P2PLoader[a(545)](), A[a(476)][a(562)][a(473)](), x.default.getInstance()[a(477)](!1, a(504)), e.default[a(467)]()[a(495)](de.default[a(534)][a(491)], de.default.BalancerVariables[a(485)], a(561));
                                        } catch (e) {
                                            t.default[a(456)](n.BalancerTag, a(455), e);
                                        }
                                    } else {
                                        const i = JSON[a(558)](S[a(559)]);
                                        x.default.getInstance()[a(477)](!1, i.messages[0][a(470)]), e.default.getInstance().registerCommonVariable(de.default[a(534)][a(491)], de.default[a(527)].LAST_USED_CDN, a(561)), t.default.debug(n.BalancerTag, a(554) + S[a(483)]), A[a(476)][a(562)][a(531)]();
                                    }
                                    e.default.getInstance()[a(495)](de.default.Products[a(491)], de.default[a(527)][a(454)], !0);
                                    const i = x.default[a(467)]()[a(514)]();
                                    i != x.default[a(548)] && (null !== (w = null === (b = null === (E = A[a(543)]) || void 0 === E ? void 0 : E[a(506)]) || void 0 === b ? void 0 : b[a(555)]) && void 0 !== w ? w : i) != i && (x.default[a(467)]()[a(551)](), x.default.getInstance()[a(505)]());
                                }
                                i();
                            }, S[o(480)] = function() {
                                const e = o;
                                A[e(476)][e(562)][e(531)](), t.default.debug(n.BalancerTag, e(526)), i();
                            }, l ? S[o(522)](o(538), E + c[o(511)](b), !1) : S[o(522)](o(538), E + c[o(511)](b)), e.default[o(467)]()[o(495)](de.default[o(534)][o(491)], de.default.BalancerVariables[o(454)], !1), e.default.getInstance().unregisterCommonVariable(de.default[o(534)][o(491)], de.default[o(527)][o(461)]), e.default[o(467)]().unregisterCommonVariable(de.default[o(534)][o(491)], de.default.BalancerVariables[o(466)]), e.default[o(467)]()[o(457)](de.default[o(534)][o(491)], de.default[o(527)].AS_ENABLED), t.default[o(500)](n.BalancerTag, o(475) + E + c[o(511)](b) + o(523) + T + ")"), S[o(502)]();
                        }), this.createUpdateTimer(i, s, a, o, null != d && d, null != u && u, h, p, f);
                    }, new (y = void 0, y = Promise)(function(e, t) {
                        const i = qt;
                        function s(e) {
                            const i = qt;
                            try {
                                r(T[i(542)](e));
                            } catch (e) {
                                t(e);
                            }
                        }
                        function n(e) {
                            try {
                                r(T.throw(e));
                            } catch (e) {
                                t(e);
                            }
                        }
                        function r(t) {
                            const i = qt;
                            var r;
                            t[i(520)] ? e(t[i(479)]) : (r = t.value, r instanceof y ? r : new y(function(e) {
                                e(r);
                            }))[i(510)](s, n);
                        }
                        r((T = T[i(498)](m, v || []))[i(542)]());
                    });
                }
                [Ut(550)](e, i, s, r, a, o, d, c, u, l) {
                    const h = Ut;
                    r > 0 && (t.default[h(500)](n.BalancerTag, h(535) + i), setTimeout(()=>{
                        const t = h;
                        var n;
                        this.loadBalancerData(e, i, s, r, a, o, null !== (n = this[t(543)][t(481)]) && void 0 !== n && n, d, c, u, l);
                    }, 1e3 * r));
                }
                getRouteAndFilename(e) {
                    const t = Ut, i = new URL(e), s = i.origin + i[t(513)], n = s[t(547)]("/") + 1;
                    return {
                        route: s.slice(0, n),
                        fileName: s[t(487)](n)
                    };
                }
                [Ut(493)](e) {
                    const t = Ut;
                    var i;
                    if (!this[t(544)][t(489)](e)) return !0;
                    {
                        const s = null !== (i = this[t(544)][t(492)](e)) && void 0 !== i ? i : Date[t(497)]();
                        if (Date.now() - s > r.df.decisionReloadIntervalPerManifestMilliseconds) return !0;
                    }
                    return !1;
                }
                performHashmapCleanup() {
                    const e = Ut;
                    this[e(544)].forEach((i, s)=>{
                        const a = e;
                        Date.now() - i > r.df[a(496)] && (t.default[a(500)](n.BalancerTag, a(499) + s + a(537) + r.df[a(496)] + "ms"), this[a(544)].delete(s));
                    });
                }
                [Ut(517)]() {
                    const e = Ut;
                    let t, i = 1 / 0;
                    this[e(544)].forEach((e, s)=>{
                        e < i && (i = e, t = s);
                    }), void 0 !== t && this[e(544)][e(464)](t);
                }
                constructor(e){
                    const t = qt;
                    this[t(544)] = new Map, this[t(476)] = e;
                }
            }
            function Xt() {
                const e = [
                    "16JzRfSo",
                    "progressDownloadedBytesLastUpdate",
                    "then",
                    "size",
                    "apply",
                    "812103oNLYNt",
                    "startTime",
                    "13830ehwqUU",
                    "27pgTWgB",
                    "delay",
                    "now",
                    "downloadTimeMs",
                    "endTime",
                    "54386GKqfyl",
                    "147570QfHCtP",
                    "done",
                    "40766869OHscST",
                    "294GDibPq",
                    "bandwidth",
                    "value",
                    "instantBandwidth",
                    "next",
                    "5121XMSDPa",
                    "throw",
                    "291272KfhqkZ",
                    "limit",
                    "859890wDubnB"
                ];
                return (Xt = function() {
                    return e;
                })();
            }
            const Ht = Gt;
            !function(e) {
                const t = Gt, i = e();
                for(;;)try {
                    if (667293 == -parseInt(t(340)) / 1 + -parseInt(t(348)) / 2 * (-parseInt(t(343)) / 3) + -parseInt(t(335)) / 4 * (parseInt(t(361)) / 5) + parseInt(t(349)) / 6 * (-parseInt(t(352)) / 7) + parseInt(t(359)) / 8 + -parseInt(t(357)) / 9 * (parseInt(t(342)) / 10) + parseInt(t(351)) / 11) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(Xt);
            function Gt(e, t) {
                const i = Xt();
                return (Gt = function(e, t) {
                    return i[e -= 335];
                })(e, t);
            }
            class jt {
                [Ht(360)](e, t) {
                    var i, s, n, r;
                    return i = this, s = void 0, r = function*() {
                        const i = Gt;
                        let s = t.size / (t[i(346)] / 1e3) * 8;
                        if (0 != e && s > e) {
                            let s = 1e3 * t.size * 8 / e, n = (Date[i(345)](), t.startTime, s - t.downloadTimeMs);
                            n > 0 && (yield c[i(344)](n)), t[i(347)] = Date[i(345)](), t[i(346)] = t[i(347)] - t[i(341)], t[i(353)] = t[i(338)] / (t[i(346)] / 1e3), t[i(355)] = 0, t[i(336)] = t.endTime;
                        }
                    }, new (n = void 0, n = Promise)(function(e, t) {
                        const a = Gt;
                        function o(e) {
                            try {
                                c(r.next(e));
                            } catch (e) {
                                t(e);
                            }
                        }
                        function d(e) {
                            const i = Gt;
                            try {
                                c(r[i(358)](e));
                            } catch (e) {
                                t(e);
                            }
                        }
                        function c(t) {
                            const i = Gt;
                            var s;
                            t[i(350)] ? e(t[i(354)]) : (s = t[i(354)], s instanceof n ? s : new n(function(e) {
                                e(s);
                            }))[i(337)](o, d);
                        }
                        c((r = r[a(339)](i, s || []))[a(356)]());
                    });
                }
            }
            function Wt() {
                var e = [
                    "switches_due_errors",
                    "network_latency",
                    "max_response_bytes",
                    "internal_unbanned",
                    "internal_switches_due_quality",
                    "cache_miss_chunks",
                    "response_bytes_samples",
                    "errors",
                    "max_throughput",
                    "provider",
                    "80757LTUFDr",
                    "max_network_latency",
                    "max_ping_time",
                    "is_banned",
                    "max_bandwidth",
                    "network_latency_samples",
                    "65400prtIcV",
                    "cache_hit_chunks",
                    "unbanned_time",
                    "max_response_time",
                    "135LiLFhu",
                    "72PCgkZB",
                    "104OfWxsT",
                    "response_time",
                    "throughput_samples",
                    "266714roqPoJ",
                    "downloaded_bytes",
                    "internal_switches_due_connectivity",
                    "http_1XX",
                    "internal_banned",
                    "min_response_bytes",
                    "video_downloaded_bytes",
                    "video_downloaded_chunks",
                    "resource",
                    "banned_time",
                    "24988jQWIAr",
                    "6636cpBjch",
                    "switches",
                    "891WpdyZw",
                    "3yhltaX",
                    "http_2XX",
                    "throughput",
                    "1362970WjIXhW",
                    "http_5XX",
                    "54fPmJqh",
                    "http_3XX",
                    "avg_ping_time",
                    "109290cQwTGq",
                    "min_network_latency",
                    "unbanned",
                    "banned",
                    "internal_switches_due_errors",
                    "switches_due_quality",
                    "internal_is_banned",
                    "is_active",
                    "internal_unbanned_time",
                    "40287IdqVgu",
                    "time",
                    "min_throughput"
                ];
                return (Wt = function() {
                    return e;
                })();
            }
            function Yt(e, t) {
                var i = Wt();
                return (Yt = function(e, t) {
                    return i[e -= 420];
                })(e, t);
            }
            !function(e) {
                for(var t = Yt, i = e();;)try {
                    if (411067 == parseInt(t(440)) / 1 * (parseInt(t(436)) / 2) + -parseInt(t(470)) / 3 * (parseInt(t(422)) / 4) + -parseInt(t(421)) / 5 * (parseInt(t(448)) / 6) + parseInt(t(426)) / 7 * (-parseInt(t(423)) / 8) + parseInt(t(445)) / 9 * (parseInt(t(443)) / 10) + -parseInt(t(439)) / 11 * (parseInt(t(476)) / 12) + -parseInt(t(457)) / 13 * (-parseInt(t(437)) / 14)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(Wt);
            class zt {
                constructor(e, t, i, s, n, r, a, o, d, c, u, l, h, p, f, g, m, v, y, T, S, E, b, A, w, _, I, N, D, P, R, L, C, O, B, x, M, k, U, V, q, F, X, H, G, j, W, Y, z, K, Q, J, $, Z, ee, te, ie, se, ne, re){
                    var ae = Yt;
                    this[ae(469)] = e, this.internal_provider = t, this.is_p2p = i, this[ae(427)] = n, this.downloaded_chunks = r, this.response_bytes = T, this[ae(431)] = S, this[ae(462)] = E, this[ae(466)] = b, this[ae(424)] = A, this.min_response_time = w, this[ae(420)] = _, this.response_time_samples = I, this[ae(461)] = N, this[ae(449)] = D, this[ae(471)] = P, this[ae(475)] = R, this[ae(442)] = L, this[ae(459)] = C, this[ae(468)] = O, this[ae(425)] = B, this[ae(467)] = a, this[ae(429)] = x, this[ae(441)] = M, this[ae(446)] = k, this.http_4XX = U, this[ae(444)] = V, this[ae(478)] = q, this[ae(435)] = F, this.compressed_video_bytes = H, this.uncompressed_video_bytes = X, this[ae(438)] = G, this.switches_due_connectivity = j, this[ae(460)] = W, this[ae(453)] = Y, this[ae(458)] = o, this[ae(474)] = d, this.min_bandwidth = c, this[ae(451)] = K, this[ae(450)] = Q, this[ae(447)] = u, this.min_ping_time = l, this[ae(472)] = h, this[ae(473)] = z, this[ae(455)] = s, this[ae(434)] = p, this[ae(424)] = A, this[ae(477)] = f, this[ae(465)] = g, this[ae(432)] = m, this[ae(433)] = v, this.video_time = y, this[ae(454)] = J, this[ae(430)] = $, this[ae(463)] = Z, this.internal_switches = ee, this[ae(464)] = te, this[ae(428)] = ie, this[ae(452)] = se, this.internal_banned_time = ne, this[ae(456)] = re;
                }
            }
            function Kt() {
                var e = [
                    "4660250AokxDz",
                    "network_latency_samples",
                    "peer_discovery_time",
                    "response_bytes_samples",
                    "late_uploaded_chunks",
                    "145576kmDaBW",
                    "min_throughput",
                    "peers_available",
                    "max_ping_time",
                    "peers_parallel_used",
                    "max_response_bytes",
                    "max_response_time",
                    "peers_used",
                    "upload_time",
                    "active_peers",
                    "missed_downloaded_chunks",
                    "min_peers_parallel_used",
                    "avg_ping_time",
                    "time",
                    "resource",
                    "5370804xYDsTt",
                    "1605834uUpiHb",
                    "5390133XNRSqC",
                    "errors",
                    "peers",
                    "video_time",
                    "min_ping_time",
                    "min_peers_available",
                    "max_peers_parallel_used",
                    "max_peers_available",
                    "uploaded_chunks",
                    "downloaded_chunks",
                    "provider",
                    "video_downloaded_chunks",
                    "timeout_errors",
                    "throughput_samples",
                    "min_bandwidth",
                    "min_response_time",
                    "min_network_latency",
                    "1556736inxkWj",
                    "max_throughput",
                    "1778kixRIM",
                    "throughput",
                    "network_latency",
                    "max_network_latency",
                    "519900HSPfrz",
                    "uploaded_bytes",
                    "other_errors"
                ];
                return (Kt = function() {
                    return e;
                })();
            }
            function Qt(e, t) {
                var i = Kt();
                return (Qt = function(e, t) {
                    return i[e -= 493];
                })(e, t);
            }
            !function(e) {
                for(var t = Qt, i = e();;)try {
                    if (938426 == -parseInt(t(494)) / 1 + -parseInt(t(512)) / 2 + -parseInt(t(495)) / 3 + parseInt(t(493)) / 4 + -parseInt(t(521)) / 5 + parseInt(t(518)) / 6 + -parseInt(t(514)) / 7 * (-parseInt(t(526)) / 8)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(Kt);
            class Jt {
                constructor(e, t, i, s, n, r, a, o, d, c, u, l, h, p, f, g, m, v, y, T, S, E, b, A, w, _, I, N, D, P, R, L, C, O, B, x, M, k, U, V, q, F, X, H, G, j, W, Y, z, K, Q, J){
                    var $ = Qt;
                    this[$(505)] = e, this.internal_provider = t, this.is_p2p = i, this.downloaded_bytes = s, this[$(504)] = n, this[$(496)] = r, this[$(539)] = a, this.max_bandwidth = o, this[$(509)] = d, this[$(538)] = c, this[$(499)] = u, this[$(529)] = l, this[$(540)] = h, this.video_downloaded_bytes = p, this[$(506)] = f, this[$(498)] = g, this[$(519)] = m, this[$(503)] = v, this[$(534)] = y, this[$(525)] = T, this.late_uploaded_bytes = S, this.late_downloaded_bytes = E, this[$(536)] = b, this[$(507)] = A, this[$(520)] = w, this[$(535)] = _, this[$(497)] = I, this.response_bytes = N, this.min_response_bytes = D, this[$(531)] = P, this[$(524)] = R, this.response_time = L, this[$(510)] = C, this[$(532)] = O, this.response_time_samples = B, this[$(516)] = x, this[$(511)] = M, this[$(517)] = k, this[$(522)] = U, this[$(515)] = V, this[$(527)] = q, this[$(513)] = F, this[$(508)] = X, this[$(528)] = H, this[$(502)] = G, this[$(500)] = j, this[$(533)] = W, this[$(530)] = Y, this[$(501)] = z, this[$(537)] = K, this[$(523)] = Q, this.peer_connection_time = J;
                }
            }
            function $t(e, t) {
                var i = ei();
                return ($t = function(e, t) {
                    return i[e -= 435];
                })(e, t);
            }
            !function(e) {
                for(var t = $t, i = e();;)try {
                    if (930347 == -parseInt(t(445)) / 1 * (-parseInt(t(437)) / 2) + -parseInt(t(438)) / 3 + parseInt(t(439)) / 4 * (-parseInt(t(444)) / 5) + -parseInt(t(449)) / 6 + parseInt(t(435)) / 7 + parseInt(t(450)) / 8 * (parseInt(t(447)) / 9) + parseInt(t(453)) / 10 * (parseInt(t(443)) / 11)) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(ei);
            class Zt {
                constructor(e, t, i, s, n, r, a, o, d, c, u, l, h, p, f, g){
                    var m = $t;
                    this[m(436)] = e, this[m(446)] = t, this[m(454)] = i, this[m(440)] = s, this[m(451)] = n, this.bucket = r, this[m(456)] = a, this[m(441)] = o, this[m(448)] = d, this[m(455)] = c, this.p2pAvailable = u, this[m(457)] = l, this[m(442)] = h, this.priorityCdn = p, this[m(452)] = f, this.announcedCdns = g;
                }
            }
            function ei() {
                var e = [
                    "bolinaAvailable",
                    "9488549qAgIxC",
                    "apiCallErrors",
                    "4DQZPhq",
                    "3313272trDjEs",
                    "20xWTmJS",
                    "apiCallsAvgResponseTime",
                    "videoId",
                    "activeSwitchingPriority",
                    "3064853ZzIicq",
                    "1503540BWeGKL",
                    "770947RIZGht",
                    "apiCallResponses",
                    "9TPTmEq",
                    "forceDecision",
                    "3988200uXXeeS",
                    "8215896SUWqwJ",
                    "apiCallsMaxResponseTime",
                    "chunkDuration",
                    "10lnMGnm",
                    "apiCallsMinResponseTime",
                    "requestPlatform",
                    "isLive"
                ];
                return (ei = function() {
                    return e;
                })();
            }
            const ti = ii;
            !function(e) {
                const t = ii, i = e();
                for(;;)try {
                    if (766354 == parseInt(t(404)) / 1 + -parseInt(t(345)) / 2 * (-parseInt(t(349)) / 3) + -parseInt(t(433)) / 4 + parseInt(t(418)) / 5 * (parseInt(t(380)) / 6) + parseInt(t(378)) / 7 * (-parseInt(t(288)) / 8) + parseInt(t(428)) / 9 * (-parseInt(t(406)) / 10) + parseInt(t(477)) / 11) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(si);
            function ii(e, t) {
                const i = si();
                return (ii = function(e, t) {
                    return i[e -= 266];
                })(e, t);
            }
            function si() {
                const e = [
                    "P2P",
                    "announcedCdns",
                    "getCdnList",
                    "maxPeersParallelUsed",
                    "stringify",
                    "getStats",
                    "codavelSwitchesDueToErrors",
                    "updateAvailability",
                    "lowestPingTime",
                    "lastCdnStats",
                    "uploadedTime",
                    "updatePeerMetrics",
                    "peersAvailable",
                    "totalPeers",
                    "some",
                    "takeIf",
                    "http2xxResponses",
                    "timeoutErrors",
                    "started",
                    "getPluginVersion",
                    "bannedCount",
                    "minPeersParallelUsed",
                    "reportRequest",
                    "startsWith",
                    "switches",
                    "lowestSegmentBandwidth",
                    "getIsLive",
                    "banned",
                    "8027140mHWQJD",
                    "lastP2pStats",
                    "samplesNetworkLatency",
                    "isEnabled",
                    "codavelBanCount",
                    "BalancerPing: ",
                    "lastReportedCodavelSwitchesDueToConnectivity",
                    "videoId",
                    "uploadedBytes",
                    "http_2XX",
                    "activePeers",
                    "sumVideoBytes",
                    "downloadMillisVideo",
                    "size",
                    "switchesDueToConnectivity",
                    "registerCommonVariable",
                    "samplesResponseTime",
                    "codavelUnbanTime",
                    "lastReportedCodavelBanTime",
                    "MIN_SAFE_INTEGER",
                    "codavelUnbanCount",
                    "lastReportedCodavelSwitchesDueToErrors",
                    "http3xxResponses",
                    "uncompressedBytes",
                    "forEach",
                    "isUsingLegacy",
                    "videoTime",
                    "maxPingTime",
                    "lastReportedCodavelSwitchesDueToQuality",
                    "minPeersAvailable",
                    "error",
                    "Products",
                    "getFastDataService",
                    "peersParallelUsed",
                    "http4xxResponses",
                    "8KcAIOv",
                    "sumResponseTime",
                    "clone",
                    "every",
                    "http1xxResponses",
                    "getOptions",
                    "downloadBytesVideo",
                    "host",
                    "bucket",
                    "-js",
                    "isCodavel",
                    "p2pAvailable",
                    "unbannedCount",
                    "downloadedBytes",
                    "peerConnectionTime",
                    "millis",
                    "lateUploadedChunks",
                    "minResponseBytes",
                    "switchesDueToErrors",
                    "highestSegmentBandwidth",
                    "BalancerVariables",
                    "compressedBytes",
                    "downloadedSegments",
                    "profileName",
                    "accountCode",
                    "chunkDuration",
                    "uploadedChunks",
                    "CDNLoader",
                    "discardedUploadedBytes",
                    "missedDownloadedChunks",
                    "discardedUploadedChunks",
                    "active",
                    "internal_provider",
                    "setTriedSendingBalancerStats",
                    "_instance",
                    "otherErrors",
                    "getSegmentDuration",
                    "maxPeersAvailable",
                    "stopped",
                    "codavelAllBanned",
                    "codavelBanTime",
                    "apiCallsAvgResponseTime",
                    "next",
                    "offline",
                    "minNetworkLatency",
                    "failedRequests",
                    "processedApiCall",
                    "priorityCdn",
                    "isLive",
                    "getTime",
                    "METHOD_OPTION",
                    "minApiCallResponseTime",
                    "cacheHit",
                    "downloadedChunksVideo",
                    "http_4XX",
                    "values",
                    "pushPeriodicDataFromCallback",
                    "2vAqUkC",
                    "report",
                    "downloadChunksVideo",
                    "downloadMillis",
                    "3598851ifmbcL",
                    "get",
                    "switchesDueToQuality",
                    "P2PLoader",
                    "maxApiCallResponseTime",
                    "BALANCER",
                    "total",
                    "lastReportedCodavelUnbanCount",
                    "getPingTime",
                    "MAX_SAFE_INTEGER",
                    "BALANCER_BITRATE",
                    "minThroughput",
                    "getBucket",
                    "downloadedBytesVideo",
                    "provider",
                    "takeMax",
                    "avgPingTime",
                    "getReportInterval",
                    "VIDEO_ANALYTICS",
                    "undefined",
                    "usedOrProbed",
                    "lateDownloadedBytes",
                    "takeMin",
                    "verbose",
                    "name",
                    "addNQSRequest",
                    "trunc",
                    "resource",
                    "codavelSwitchesDueToQuality",
                    "3640791eSiawB",
                    "token",
                    "708lYRUhx",
                    "totalFailures",
                    "value",
                    "unBannedCount",
                    "minResponseTime",
                    "getCommonVariable",
                    "http_5XX",
                    "bannedTime",
                    "sumThroughput",
                    "lastReportedCodavelUnbanTime",
                    "lastReportedCodavelSwitches",
                    "errors",
                    "getViewCode",
                    "minBandwidth",
                    "discardedDownloadedBytes",
                    "loader",
                    "getInstance",
                    "maxResponseBytes",
                    "peerDiscoveryTime",
                    "activeSwitchingPriority",
                    "maxBandwidth",
                    "totalFail",
                    "minPingTime",
                    "Consumer",
                    "572450zstkuH",
                    "split",
                    "2459380oCjXPK",
                    "from",
                    "set",
                    "apiCallsMinResponseTime",
                    "peersUsed",
                    "avgApiCallResponseTime",
                    "apiCallErrors",
                    "maxResponseTime",
                    "NQS",
                    "maxNetworkLatency",
                    "uuid",
                    "sumNetworkLatency",
                    "605pqbfzT",
                    "getCdnCacheMisses",
                    "maxThroughput",
                    "samplesThroughput",
                    "GET",
                    "highestPingTime",
                    "http_1XX",
                    "http5xxResponses",
                    "codavelSwitchesDueToConnectivity",
                    "resetOnPing",
                    "27uUPJGA",
                    "requestPlatform",
                    "BLACK_HOLE",
                    "codavelSwitches",
                    "samplesResponseBytes",
                    "1967216cFIDye",
                    "absent",
                    "sumVideoTime",
                    "lastReportedCodavelBanCount",
                    "bolinaAvailable",
                    "getFastDataSessionToken",
                    "cacheMiss",
                    "downloadedChunks",
                    "unbannedTime",
                    "then",
                    "http_3XX",
                    "updateCodavelBanTimes",
                    "AnalyticsVariables",
                    "getCdnCacheHits",
                    "hasValuesChanged",
                    "sumResponseBytes"
                ];
                return (si = function() {
                    return e;
                })();
            }
            class ni {
                static [ti(396)](e) {
                    const t = ti;
                    return null == this._instance && null != e ? this[t(322)] = new ni(e) : null != e && null != this[t(322)] && (null == e ? void 0 : e[t(416)]) != this[t(322)][t(395)][t(416)] && (this._instance.report(), this._instance = new ni(e)), this[t(322)];
                }
                updateData(t, i, s, a, o) {
                    var d, c, u, l, h;
                    return c = this, u = void 0, h = function*() {
                        const c = ii;
                        if (this[c(295)] = t, this[c(379)] = i, this[c(312)] = s, this[c(311)] = null != a ? a : "", this[c(376)] = o, !(e.default[c(396)]().isUsingLegacy() && this.token[c(472)](c(368)) || this[c(467)])) {
                            const t = r.xC.CDN;
                            e.default.getInstance()[c(344)](e.default.getInstance()[c(293)]()[c(331)] ? de.default[c(403)][c(430)] : de.default[c(403)][c(414)], t, t, 1e3 * this.loader[c(366)](), null !== (d = e.default[c(396)]()[c(385)](de.default[c(284)][c(367)], de.default[c(445)][c(338)])) && void 0 !== d ? d : n.Method[c(422)], ()=>{
                                const t = c;
                                if (e.default[t(396)]().wasStartSent()) return x.default[t(396)]()[t(321)](!0), ni[t(396)]()[t(346)]();
                            }, ()=>{
                                const e = c;
                                x.default[e(396)]()[e(374)](t);
                            }), this.started = !0;
                        }
                    }, new (l = void 0, l = Promise)(function(e, t) {
                        const i = ii;
                        function s(e) {
                            try {
                                r(h.next(e));
                            } catch (e) {
                                t(e);
                            }
                        }
                        function n(e) {
                            try {
                                r(h.throw(e));
                            } catch (e) {
                                t(e);
                            }
                        }
                        function r(t) {
                            const i = ii;
                            var r;
                            t.done ? e(t.value) : (r = t[i(382)], r instanceof l ? r : new l(function(e) {
                                e(r);
                            }))[i(442)](s, n);
                        }
                        r((h = h.apply(c, u || []))[i(330)]());
                    });
                }
                [ti(346)]() {
                    const i = ti;
                    try {
                        if (!this[i(326)]) {
                            const s = this[i(395)][i(315)][i(451)](), r = Array[i(407)](s[i(343)]())[i(291)]((e)=>!e[i(369)]), a = new Map;
                            let o;
                            o = r ? new Map : new Map(s);
                            let d = 0, c = 0;
                            this[i(395)][i(315)][i(444)](), this[i(395)][i(352)][i(460)]();
                            let u = !1;
                            if (o.forEach((e)=>{
                                const t = i;
                                e[t(456)]();
                                const s = e[t(290)](), n = this[t(458)][t(350)](e[t(373)]);
                                d += s[t(488)] || 0, c += s.sumVideoTime || 0;
                                const r = {
                                    downloadedBytesVideo: s[t(362)],
                                    downloadedChunksVideo: s[t(341)],
                                    videoTime: s[t(489)],
                                    downloadedBytes: s.downloadedBytes,
                                    downloadedChunks: s[t(440)],
                                    sumResponseBytes: s[t(448)],
                                    minResponseBytes: s[t(305)],
                                    maxResponseBytes: s.maxResponseBytes,
                                    samplesResponseBytes: s[t(432)],
                                    sumResponseTime: s[t(289)],
                                    minResponseTime: s[t(384)],
                                    maxResponseTime: s.maxResponseTime,
                                    samplesResponseTime: s[t(269)],
                                    sumNetworkLatency: s[t(417)],
                                    minNetworkLatency: s[t(332)],
                                    maxNetworkLatency: s[t(415)],
                                    samplesNetworkLatency: s[t(479)],
                                    sumThroughput: s[t(388)],
                                    minThroughput: s[t(360)],
                                    maxThroughput: s[t(420)],
                                    samplesThroughput: s[t(421)],
                                    totalFailures: s[t(401)],
                                    http_1XX: s[t(292)],
                                    http_2XX: s[t(465)],
                                    http_3XX: s[t(275)],
                                    http_4XX: s[t(287)],
                                    http_5XX: s.http5xxResponses,
                                    unbannedTime: s[t(441)],
                                    bannedTime: s[t(387)],
                                    compressedBytes: s[t(309)],
                                    uncompressedBytes: s[t(276)],
                                    switches: s[t(473)],
                                    switchesDueToConnectivity: s.switchesDueToConnectivity,
                                    switchesDueToErrors: s[t(306)],
                                    switchesDueToQuality: s[t(351)],
                                    millis: s[t(348)],
                                    bannedCount: s[t(469)],
                                    unbannedCount: s.unBannedCount,
                                    avgPingTime: s[t(365)],
                                    minPingTime: s[t(457)] === Number.MAX_SAFE_INTEGER ? 0 : s[t(457)],
                                    maxPingTime: s[t(423)],
                                    cacheHit: s[t(446)](),
                                    cacheMiss: s[t(419)](),
                                    minBandwidth: s[t(474)] === Number[t(358)] ? 0 : s.lowestSegmentBandwidth,
                                    maxBandwidth: s[t(307)]
                                };
                                n && (r[t(362)] -= n[t(362)], r[t(341)] -= n[t(341)], r[t(279)] -= n[t(489)], r[t(301)] -= n[t(301)], r.downloadedChunks -= n[t(440)], r[t(381)] -= n[t(401)], null != r.http_1XX && null != n[t(292)] && (r[t(424)] -= n[t(292)]), null != r[t(486)] && null != n[t(465)] && (r.http_2XX -= n.http2xxResponses), null != r[t(443)] && null != n.http3xxResponses && (r[t(443)] -= n[t(275)]), null != r.http_4XX && null != n[t(287)] && (r[t(342)] -= n[t(287)]), null != r[t(386)] && null != n[t(425)] && (r.http_5XX -= n.http5xxResponses), null != r[t(309)] && null != n.compressedBytes && (r[t(309)] -= n[t(309)]), null != r[t(276)] && null != n[t(276)] && (r.uncompressedBytes -= n[t(276)]), null != r.switches && null != n[t(473)] && (r[t(473)] -= n[t(473)]), null != r[t(267)] && null != n[t(267)] && (r.switchesDueToConnectivity -= n[t(267)]), null != r[t(306)] && null != n.switchesDueToErrors && (r.switchesDueToErrors -= n[t(306)]), null != r[t(351)] && null != n[t(351)] && (r[t(351)] -= n[t(351)]), r[t(303)] -= n[t(348)], r[t(469)] -= n[t(469)], r[t(300)] -= n[t(383)], r[t(365)] -= n[t(365)], r[t(402)] = 0 == r[t(402)] ? r.minPingTime : r[t(402)] - n[t(457)], r[t(280)] = 0 == r.maxPingTime ? r[t(280)] : r[t(280)] - n[t(423)], r[t(340)] -= n[t(446)](), r[t(439)] -= n.getCdnCacheMisses(), r[t(393)] = 0 == r[t(393)] ? r[t(393)] : r[t(393)] - n.lowestSegmentBandwidth, r[t(400)] = 0 == r.maxBandwidth ? r[t(400)] : r.maxBandwidth - n.highestSegmentBandwidth);
                                const o = e.isCodavel() ? "CODAVEL" : e[t(363)];
                                if (e[t(298)]()) {
                                    if (u) {
                                        const i = new zt(o, e[t(320)], !1, e[t(319)], this.takeIf(r.downloadedBytes, (e)=>0 != e), this[t(464)](r[t(440)], (e)=>0 != e), this[t(464)](r[t(381)], (e)=>0 != e), this[t(464)](r[t(303)], (e)=>0 != e), this[t(464)](r.maxBandwidth, (e)=>0 != e), this[t(464)](r[t(393)], (e)=>0 != e), this[t(464)](r[t(365)], (e)=>0 != e), this.takeIf(r[t(402)], (e)=>0 != e), this[t(464)](r[t(280)], (e)=>0 != e), this[t(376)], this[t(464)](r[t(340)], (e)=>0 != e), this[t(464)](r[t(439)], (e)=>0 != e), this[t(464)](r[t(362)], (e)=>0 != e), this.takeIf(r.downloadedChunksVideo, (e)=>0 != e), this[t(464)](r[t(279)], (e)=>0 != e), r[t(448)], this.takeMin(r[t(305)]), this.takeMax(r[t(397)]), r.samplesResponseBytes, r[t(289)], this[t(371)](r[t(384)]), this[t(364)](r.maxResponseTime), r[t(269)], r[t(417)], this[t(371)](r.minNetworkLatency), this[t(364)](r.maxNetworkLatency), r[t(479)], r[t(388)], this[t(371)](r.minThroughput), this[t(364)](r[t(420)]), r[t(421)], this[t(464)](r[t(424)], (e)=>0 != e), this.takeIf(r[t(486)], (e)=>0 != e), this[t(464)](r.http_3XX, (e)=>0 != e), this[t(464)](r[t(342)], (e)=>0 != e), this[t(464)](r[t(386)], (e)=>0 != e), void 0, void 0, this[t(464)](r.uncompressedBytes, (e)=>0 != e), this.takeIf(r[t(309)], (e)=>0 != e), void 0, void 0, void 0, void 0, void 0, void 0, void 0, e[t(476)], this[t(464)](r[t(469)], (e)=>0 != e), this.takeIf(r[t(300)], (e)=>0 != e), this[t(464)](r[t(473)], (e)=>0 != e), this[t(464)](r[t(267)], (e)=>0 != e), this[t(464)](r.switchesDueToErrors, (e)=>0 != e), this[t(464)](r.switchesDueToQuality, (e)=>0 != e), r[t(387)], r.unbannedTime);
                                        a[t(408)](e.name, i), this[t(458)][t(408)](e[t(373)], s);
                                    } else {
                                        let i = 0;
                                        null != this[t(395)][t(315)][t(481)] && (i = null != this.lastReportedCodavelBanCount ? this.loader[t(315)].codavelBanCount - this[t(436)] : this[t(395)].CDNLoader[t(481)]);
                                        let n = 0;
                                        null != this.loader[t(315)][t(273)] && (n = null != this[t(356)] ? this[t(395)].CDNLoader[t(273)] - this.lastReportedCodavelUnbanCount : this[t(395)].CDNLoader[t(273)]);
                                        let d = 0;
                                        null != this.loader[t(315)][t(328)] && (d = null != this.lastReportedCodavelBanTime ? this[t(395)][t(315)][t(328)] - this[t(271)] : this[t(395)][t(315)].codavelBanTime);
                                        let c = 0;
                                        null != this[t(395)].CDNLoader[t(270)] && (c = null != this[t(389)] ? this[t(395)][t(315)].codavelUnbanTime - this.lastReportedCodavelUnbanTime : this[t(395)][t(315)][t(270)]);
                                        let l = 0;
                                        null != this[t(395)].CDNLoader.codavelSwitches && (l = null != this.lastReportedCodavelSwitches ? this[t(395)][t(315)][t(431)] - this.lastReportedCodavelSwitches : this[t(395)][t(315)][t(431)]);
                                        let h = 0;
                                        null != this.loader[t(315)][t(377)] && (h = null != this[t(281)] ? this[t(395)].CDNLoader[t(377)] - this[t(281)] : this.loader.CDNLoader[t(377)]);
                                        let p = 0;
                                        null != this.loader[t(315)][t(426)] && (p = null != this[t(483)] ? this[t(395)][t(315)][t(426)] - this[t(483)] : this[t(395)][t(315)].codavelSwitchesDueToConnectivity);
                                        let f = 0;
                                        null != this.loader[t(315)][t(455)] && (f = null != this.lastReportedCodavelSwitchesDueToErrors ? this[t(395)][t(315)].codavelSwitchesDueToErrors - this[t(274)] : this[t(395)][t(315)][t(455)]);
                                        const g = new zt(o, e[t(320)], !1, e[t(319)], this[t(464)](r[t(301)], (e)=>0 != e), this[t(464)](r[t(440)], (e)=>0 != e), this[t(464)](r[t(381)], (e)=>0 != e), this.takeIf(r[t(303)], (e)=>0 != e), this[t(464)](r[t(400)], (e)=>0 != e), this.takeIf(r[t(393)], (e)=>0 != e), this[t(464)](r[t(365)], (e)=>0 != e), this[t(464)](r[t(402)], (e)=>0 != e), this.takeIf(r.maxPingTime, (e)=>0 != e), this[t(376)], this[t(464)](r[t(340)], (e)=>0 != e), this[t(464)](r.cacheMiss, (e)=>0 != e), this[t(464)](r[t(362)], (e)=>0 != e), this[t(464)](r[t(341)], (e)=>0 != e), this[t(464)](r[t(279)], (e)=>0 != e), r[t(448)], this[t(371)](r.minResponseBytes), this[t(364)](r.maxResponseBytes), r[t(432)], r[t(289)], this[t(371)](r.minResponseTime), this[t(364)](r.maxResponseTime), r[t(269)], r[t(417)], this[t(371)](r[t(332)]), this[t(364)](r[t(415)]), r[t(479)], r[t(388)], this[t(371)](r[t(360)]), this[t(364)](r.maxThroughput), r[t(421)], this.takeIf(r[t(424)], (e)=>0 != e), this[t(464)](r[t(486)], (e)=>0 != e), this[t(464)](r[t(443)], (e)=>0 != e), this.takeIf(r[t(342)], (e)=>0 != e), this.takeIf(r[t(386)], (e)=>0 != e), c, d, this[t(464)](r[t(276)], (e)=>0 != e), this[t(464)](r[t(309)], (e)=>0 != e), this[t(464)](l, (e)=>0 != e), this[t(464)](p, (e)=>0 != e), this[t(464)](f, (e)=>0 != e), this[t(464)](h, (e)=>0 != e), this.loader[t(315)][t(327)], this[t(464)](i, (e)=>0 != e), this[t(464)](n, (e)=>0 != e), e[t(476)], this[t(464)](r.bannedCount, (e)=>0 != e), this[t(464)](r[t(300)], (e)=>0 != e), this[t(464)](r[t(473)], (e)=>0 != e), this[t(464)](r.switchesDueToConnectivity, (e)=>0 != e), this[t(464)](r[t(306)], (e)=>0 != e), this[t(464)](r[t(351)], (e)=>0 != e), r[t(387)], r[t(441)]);
                                        a[t(408)](e.name, g), this.lastCdnStats.set(e[t(373)], s), u = !0;
                                    }
                                } else {
                                    const i = new zt(o, e[t(320)], !1, e.active, this[t(464)](r[t(301)], (e)=>0 != e), this[t(464)](r[t(440)], (e)=>0 != e), this[t(464)](r[t(381)], (e)=>0 != e), this[t(464)](r.millis, (e)=>0 != e), this[t(464)](r.maxBandwidth, (e)=>0 != e), this.takeIf(r[t(393)], (e)=>0 != e), this[t(464)](r[t(365)], (e)=>0 != e), this.takeIf(r[t(402)], (e)=>0 != e), this[t(464)](r[t(280)], (e)=>0 != e), this[t(376)], this[t(464)](r.cacheHit, (e)=>0 != e), this[t(464)](r.cacheMiss, (e)=>0 != e), this[t(464)](r.downloadedBytesVideo, (e)=>0 != e), this[t(464)](r.downloadedChunksVideo, (e)=>0 != e), this.takeIf(r.videoTime, (e)=>0 != e), r.sumResponseBytes, this.takeMin(r[t(305)]), this[t(364)](r[t(397)]), r[t(432)], r[t(289)], this.takeMin(r[t(384)]), this[t(364)](r.maxResponseTime), r[t(269)], r[t(417)], this[t(371)](r[t(332)]), this[t(364)](r.maxNetworkLatency), r[t(479)], r.sumThroughput, this[t(371)](r[t(360)]), this.takeMax(r[t(420)]), r[t(421)], this[t(464)](r[t(424)], (e)=>0 != e), this[t(464)](r[t(486)], (e)=>0 != e), this.takeIf(r[t(443)], (e)=>0 != e), this.takeIf(r[t(342)], (e)=>0 != e), this[t(464)](r[t(386)], (e)=>0 != e), r[t(441)], r.bannedTime, this[t(464)](r.uncompressedBytes, (e)=>0 != e), this[t(464)](r[t(309)], (e)=>0 != e), this.takeIf(r[t(473)], (e)=>0 != e), this[t(464)](r[t(267)], (e)=>0 != e), this[t(464)](r[t(306)], (e)=>0 != e), this[t(464)](r[t(351)], (e)=>0 != e), e[t(476)], this.takeIf(r[t(469)], (e)=>0 != e), this.takeIf(r[t(300)], (e)=>0 != e));
                                    a[t(408)](e[t(373)], i), this[t(458)].set(e.name, s);
                                }
                            }), this[i(395)][i(352)][i(480)]()) {
                                const e = this[i(395)][i(352)][i(454)](), t = this[i(478)][i(350)](i(449));
                                d += e[i(488)] || 0, c += e[i(435)] || 0;
                                const s = {
                                    downloadedBytes: e.downloadedBytes,
                                    downloadedChunks: e[i(310)],
                                    errors: e[i(333)][i(355)],
                                    millis: e.downloadMillis,
                                    maxBandwidth: e[i(400)],
                                    minBandwidth: e[i(393)] === Number[i(358)] ? 0 : e[i(393)],
                                    avgPingTime: e[i(365)],
                                    minPingTime: e[i(402)] === Number[i(358)] ? 0 : e[i(402)],
                                    maxPingTime: e[i(280)],
                                    downloadMillisVideo: e[i(489)],
                                    downloadBytesVideo: e[i(294)],
                                    downloadChunksVideo: e[i(347)],
                                    uploadedBytes: e[i(485)],
                                    uploadedChunks: e.uploadedChunks,
                                    uploadedTime: e[i(459)],
                                    lateUploadedChunks: e[i(318)],
                                    lateUploadedBytes: e[i(316)],
                                    lateDownloadedBytes: e[i(394)],
                                    missedDownloadedChunks: e[i(333)].absent,
                                    timeoutErrors: e[i(333)].timeout,
                                    otherErrors: e[i(333)][i(283)],
                                    activePeers: e[i(487)],
                                    totalPeers: e[i(462)],
                                    sumResponseBytes: e.sumResponseBytes,
                                    minResponseBytes: e.minResponseBytes,
                                    maxResponseBytes: e.maxResponseBytes,
                                    samplesResponseBytes: e[i(432)],
                                    sumResponseTime: e[i(289)],
                                    minResponseTime: e.minResponseTime,
                                    maxResponseTime: e[i(413)],
                                    samplesResponseTime: e.samplesResponseTime,
                                    sumNetworkLatency: e[i(417)],
                                    minNetworkLatency: e[i(332)],
                                    maxNetworkLatency: e[i(415)],
                                    samplesNetworkLatency: e[i(479)],
                                    sumThroughput: e[i(388)],
                                    minThroughput: e.minThroughput,
                                    maxThroughput: e[i(420)],
                                    samplesThroughput: e[i(421)],
                                    peersAvailable: e[i(461)],
                                    minPeersAvailable: e[i(282)],
                                    maxPeersAvailable: e[i(325)],
                                    peersUsed: e.peersUsed,
                                    peersParallelUsed: e[i(286)],
                                    minPeersParallelUsed: e[i(470)],
                                    maxPeersParallelUsed: e[i(452)],
                                    peerDiscoveryTime: e[i(398)],
                                    peerConnectionTime: e[i(302)]
                                };
                                t && (s[i(301)] -= t[i(301)], s[i(440)] -= t[i(310)], s[i(391)] -= t[i(333)].total, s.millis -= t[i(348)], s[i(400)] = 0 == s.maxBandwidth ? s.maxBandwidth : s[i(400)] - t[i(400)], s[i(393)] = 0 == s[i(393)] ? s.minBandwidth : s.minBandwidth - t[i(393)], s[i(365)] -= t.avgPingTime, s[i(402)] = 0 == s.minPingTime ? s[i(402)] : s.minPingTime - t.minPingTime, s[i(280)] = 0 == s[i(280)] ? s[i(280)] : s[i(280)] - t.maxPingTime, s[i(402)] -= t[i(402)], s[i(280)] -= t[i(280)], s[i(489)] -= t.downloadMillisVideo, s[i(294)] -= t[i(294)], s[i(347)] -= t.downloadChunksVideo, s[i(485)] -= t[i(485)], s[i(314)] -= t[i(314)], s.uploadedTime -= t[i(459)], s[i(304)] -= t[i(318)], s.lateUploadedBytes -= t.discardedUploadedBytes, s[i(370)] -= t[i(394)], s[i(317)] -= t[i(333)][i(434)], s[i(466)] -= t[i(333)].timeout, s[i(323)] -= t.failedRequests[i(283)], s[i(487)] -= t[i(487)], s[i(462)] -= t[i(462)], null != s.peersAvailable && null != t[i(461)] && (s[i(461)] -= t[i(461)]), null != s.peersUsed && null != t.peersUsed && (s[i(410)] -= t[i(410)]), null != s[i(286)] && null != t[i(286)] && (s[i(286)] -= t.peersParallelUsed), null != s[i(398)] && null != t[i(398)] && (s[i(398)] -= t[i(398)]), null != s[i(302)] && null != t[i(302)] && (s.peerConnectionTime -= t.peerConnectionTime));
                                const n = new Jt(i(449), i(449), !0, this[i(464)](s[i(301)], (e)=>0 != e), this[i(464)](s[i(440)], (e)=>0 != e), this[i(464)](s[i(391)], (e)=>0 != e), this[i(464)](s.millis, (e)=>0 != e), this.takeIf(s[i(400)], (e)=>0 != e), this[i(464)](s[i(393)], (e)=>0 != e), this[i(464)](s[i(365)], (e)=>0 != e), this.takeIf(s[i(402)], (e)=>0 != e), this[i(464)](s[i(280)], (e)=>0 != e), this.resource, this[i(464)](s.downloadBytesVideo, (e)=>0 != e), this[i(464)](s[i(347)], (e)=>0 != e), this.takeIf(s[i(489)], (e)=>0 != e), this[i(464)](s[i(485)], (e)=>0 != e), this[i(464)](s.uploadedChunks, (e)=>0 != e), this[i(464)](s[i(459)], (e)=>0 != e), this[i(464)](s[i(304)], (e)=>0 != e), this.takeIf(s.lateUploadedBytes, (e)=>0 != e), this.takeIf(s[i(370)], (e)=>0 != e), this[i(464)](s[i(317)], (e)=>0 != e), this[i(464)](s.timeoutErrors, (e)=>0 != e), this[i(464)](s[i(323)], (e)=>0 != e), this[i(464)](s[i(487)], (e)=>0 != e), this[i(464)](s[i(462)], (e)=>0 != e), s[i(448)], s[i(305)], s[i(397)], s[i(432)], s[i(289)], s[i(384)], s[i(413)], s[i(269)], s[i(417)], s[i(332)], s.maxNetworkLatency, s[i(479)], s[i(388)], s.minThroughput, s[i(420)], s[i(421)], this[i(464)](s[i(461)], (e)=>0 != e), this[i(364)](s.maxPeersAvailable), this.takeMin(s[i(282)]), this[i(464)](s.peersUsed, (e)=>0 != e), this.takeIf(s.peersParallelUsed, (e)=>0 != e), this.takeMax(s[i(452)]), this[i(371)](s[i(470)]), this.takeIf(s[i(398)], (e)=>0 != e), this[i(464)](s[i(302)], (e)=>0 != e));
                                a[i(408)](i(449), n), this[i(478)][i(408)](i(449), e);
                            }
                            const l = {};
                            a.forEach((e, t)=>{
                                l[t] = e;
                            });
                            const h = c > 0 ? 8 * d * 1e3 / c : 0;
                            let p;
                            if (e.default[i(396)]()[i(268)](de.default[i(284)][i(354)], de.default[i(308)].BALANCER_TRAFFIC, d), e.default[i(396)]()[i(268)](de.default[i(284)][i(354)], de.default.BalancerVariables[i(359)], h), this.loader.CDNLoader[i(334)] && (p = new Zt(this[i(395)].CDNLoader[i(412)], this.loader[i(315)].apiCallResponses, void 0 !== this[i(395)].CDNLoader[i(339)] ? Math[i(375)](this[i(395)][i(315)][i(339)]) : void 0, void 0 !== this.loader.CDNLoader.avgApiCallResponseTime ? Math.trunc(this[i(395)][i(315)][i(411)]) : void 0, void 0 !== this.loader[i(315)][i(353)] ? Math[i(375)](this[i(395)][i(315)].maxApiCallResponseTime) : void 0, this[i(395)].CDNLoader[i(361)](), this[i(395)][i(315)][i(475)](), this.token, this.loader.CDNLoader.getForceDecision(), "Plugin", this[i(395)][i(315)][i(299)], this[i(395)].CDNLoader[i(437)], this[i(395)][i(315)][i(399)], this[i(395)][i(315)][i(335)], this[i(395)].CDNLoader[i(324)](), this[i(395)][i(315)][i(450)])), o[i(277)]((e)=>{
                                e[i(427)]();
                            }), this[i(395)][i(352)][i(480)]() && this.loader[i(352)][i(427)](), this[i(395)][i(315)][i(427)](), t.default[i(372)](n.BalancerTag, i(482) + JSON[i(453)](l)), a[i(266)] > 0) return this[i(471)](this[i(379)], this[i(312)], this[i(311)], this[i(376)], JSON[i(453)](l), p);
                        }
                    } catch (e) {}
                }
                [ti(447)](e) {
                    const t = ti;
                    return Object.keys(e)[t(463)]((t)=>0 != e[t]);
                }
                takeIf(e, t) {
                    return void 0 !== e && t(e) ? e : void 0;
                }
                [ti(371)](e) {
                    return void 0 !== e ? e : Number[ti(358)];
                }
                [ti(364)](e) {
                    return void 0 !== e ? e : Number[ti(272)];
                }
                [ti(471)](t, i, s, n, r, a) {
                    const o = ti;
                    if ("" == r || "{}" == r) return;
                    let d = {};
                    return d = null != a ? {
                        timemark: (new Date).getTime(),
                        code: e.default[o(396)]()[o(278)]() ? e.default.getInstance()[o(392)]() : t,
                        sessionRoot: e.default[o(396)]()[o(438)](),
                        v: e.default[o(468)]()[o(405)](o(297))[0],
                        pluginVersion: e.default.getPluginVersion(),
                        pingTime: e.default[o(396)]()[o(285)]()[o(357)](),
                        token: t,
                        accountCode: i,
                        profileName: s,
                        data: r,
                        api_errors: a[o(412)],
                        api_responses: a.apiCallResponses,
                        api_min_response_time: a[o(409)],
                        api_avg_response_time: a[o(329)],
                        api_max_response_time: a.apiCallsAvgResponseTime,
                        bucket: a[o(296)],
                        is_live: a[o(336)],
                        video_id: a[o(484)],
                        force_decision: a.forceDecision,
                        request_platform: a[o(429)],
                        p2p_available: a.p2pAvailable,
                        bolina_available: a.bolinaAvailable,
                        active_switching_priority: a[o(399)],
                        priority_cdn: a[o(335)],
                        chunk_duration: a[o(313)],
                        announced_cdns: a[o(450)]
                    } : {
                        timemark: (new Date)[o(337)](),
                        code: e.default[o(396)]()[o(278)]() ? e.default.getInstance()[o(392)]() : t,
                        sessionRoot: e.default[o(396)]()[o(438)](),
                        v: e.default[o(468)]()[o(405)](o(297))[0],
                        pingTime: e.default.getInstance()[o(285)]()[o(357)](),
                        token: t,
                        accountCode: i,
                        profileName: s,
                        data: r
                    }, d;
                }
                constructor(e){
                    const t = ti;
                    this[t(467)] = !1, this[t(326)] = !1, this[t(458)] = new Map, this[t(478)] = new Map, this[t(295)] = "", this[t(379)] = "", this.accountCode = "", this.profileName = "", this.resource = "", this[t(271)] = void 0, this[t(389)] = void 0, this.lastReportedCodavelBanCount = void 0, this[t(356)] = void 0, this[t(390)] = void 0, this.lastReportedCodavelSwitchesDueToQuality = void 0, this[t(274)] = void 0, this.lastReportedCodavelSwitchesDueToConnectivity = void 0, this[t(395)] = e;
                }
            }
            const ri = {
                randomUUID: "undefined" != typeof crypto && crypto.randomUUID && crypto.randomUUID.bind(crypto)
            };
            let ai;
            const oi = new Uint8Array(16);
            function di() {
                if (!ai && (ai = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !ai)) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
                return ai(oi);
            }
            const ci = [];
            for(let e = 0; e < 256; ++e)ci.push((e + 256).toString(16).slice(1));
            const ui = function(e, t, i) {
                if (ri.randomUUID && !t && !e) return ri.randomUUID();
                const s = (e = e || {}).random || (e.rng || di)();
                if (s[6] = 15 & s[6] | 64, s[8] = 63 & s[8] | 128, t) {
                    i = i || 0;
                    for(let e = 0; e < 16; ++e)t[i + e] = s[e];
                    return t;
                }
                return function(e, t = 0) {
                    return ci[e[t + 0]] + ci[e[t + 1]] + ci[e[t + 2]] + ci[e[t + 3]] + "-" + ci[e[t + 4]] + ci[e[t + 5]] + "-" + ci[e[t + 6]] + ci[e[t + 7]] + "-" + ci[e[t + 8]] + ci[e[t + 9]] + "-" + ci[e[t + 10]] + ci[e[t + 11]] + ci[e[t + 12]] + ci[e[t + 13]] + ci[e[t + 14]] + ci[e[t + 15]];
                }(s);
            }, li = hi;
            !function(e) {
                const t = hi, i = e();
                for(;;)try {
                    if (966593 == -parseInt(t(151)) / 1 + -parseInt(t(126)) / 2 + parseInt(t(136)) / 3 + parseInt(t(187)) / 4 * (-parseInt(t(238)) / 5) + -parseInt(t(162)) / 6 + -parseInt(t(156)) / 7 * (-parseInt(t(129)) / 8) + parseInt(t(259)) / 9) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(pi);
            function hi(e, t) {
                const i = pi();
                return (hi = function(e, t) {
                    return i[e -= 125];
                })(e, t);
            }
            function pi() {
                const e = [
                    "retries",
                    "value",
                    "total",
                    "duration",
                    "statsReportBusinessObject",
                    "getSegment",
                    "done",
                    "isAudio",
                    "errorEM",
                    "isEnabled",
                    "updateCDNStatsOnSuccess",
                    "__awaiter",
                    "totalBandwidth",
                    "onProcessSegmentSuccess",
                    "10429488EgrgTg",
                    "request",
                    "status",
                    "setActive",
                    "downloadedBytes",
                    "byteLength",
                    "replace",
                    "reportTime",
                    "segmentsMap",
                    "updateData",
                    "then",
                    "options",
                    "loadCDNBalancerData",
                    "_$1",
                    "922690xjhMBW",
                    "isManifest",
                    "getFastDataSessionToken",
                    "4168xrzpuS",
                    "getMaxBandwidth",
                    "response",
                    "isLive",
                    "verbose",
                    "getVideoRenditions",
                    "processSegment",
                    "1112082tQjgLR",
                    "onAbort",
                    "setMaxBandwith",
                    "download",
                    "renditionCount",
                    "onProgress",
                    "readyStateChangeEM",
                    "disable",
                    "signManifestUsingApi",
                    "getInstance",
                    "bandwidth",
                    "CDNLoader",
                    "camelToSnake",
                    "VIEW_CODE",
                    "length",
                    "805518QimHSq",
                    "apiHost",
                    "downloadMillis",
                    "getReportInterval",
                    "P2PLoader",
                    "23849NdOyAK",
                    "failed",
                    "statusCode",
                    "timeBetweenHeads",
                    "enable",
                    "progressEM",
                    "4985148UimVZn",
                    "the status is -> ",
                    "profileName",
                    "apply",
                    "updateCDNStatsOnFailure",
                    "host",
                    "dynamicRules",
                    "cdnProvider",
                    "Content-Length",
                    "cdns",
                    " for ",
                    "setManifestResource",
                    "downloadedSegments",
                    "d1.npaw.com",
                    "timeBetweenBurstsMilliseconds",
                    "getStats",
                    "onProcessSegmentFail",
                    "P2P",
                    "Request was canceled due a timeout -> ",
                    "loadEM",
                    "toString",
                    "storeSegment",
                    "getCommonVariable",
                    "uuid",
                    "data",
                    "961036XXcXph",
                    "isMedia",
                    "Fail",
                    "headers",
                    "loadBalancerData",
                    "SEGMENT FAILED WITH STATUS ",
                    "currentRenditionPos",
                    "error",
                    "trunc",
                    "getRendition",
                    "updateTime",
                    "downloadAvgBw",
                    "enableCDN will be deprecated use setActive instead.",
                    "AnalyticsVariables",
                    "stringify",
                    "changeStatusCDN",
                    "Detected rendition -> ",
                    " -> ",
                    "realBodySize",
                    "debug",
                    "_balancerBusinessObject",
                    "timeout",
                    "_accountCode",
                    "resource",
                    "isDev",
                    "bucketName",
                    "allowSpecialDelimitersInUrl",
                    "now",
                    "storage",
                    "set",
                    "rendition",
                    "bandwidthPosition",
                    "getResponseHeader",
                    "forceDecisionCall",
                    "useP2P",
                    "size",
                    "clean",
                    "delete",
                    "_options",
                    "_segments",
                    "loadStartEM",
                    "next",
                    "requestReadTimeout",
                    "Success",
                    "pathname",
                    "_resource",
                    " isAudio ",
                    "totalDownloadedBytes",
                    "newDownloadedSegment",
                    "enableCDN",
                    "readTimeoutMilliseconds",
                    "5NdwHbb",
                    "readyState",
                    "getIsEnabled",
                    "triedP2P",
                    "warn",
                    "url",
                    "cdnName"
                ];
                return (pi = function() {
                    return e;
                })();
            }
            class fi {
                [li(154)]() {
                    const e = li;
                    return !this[e(225)][e(266)] || this[e(225)][e(266)] < 1 ? 5 : this[e(225)][e(266)];
                }
                camelToSnake(e) {
                    const t = li, i = {};
                    for(const s in e)e.hasOwnProperty(s) && (i[s[t(265)](/([A-Z])/g, t(125)).toLowerCase()] = e[s]);
                    return i;
                }
                [li(271)](e) {
                    const t = li;
                    var i, s, n, r, a, o, d, c, u, l;
                    const h = this._options[t(168)] ? JSON[t(201)](this[t(148)](this[t(225)][t(168)])) : "";
                    null != e && e && this._balancerBusinessObject.loadBalancerData(this[t(209)], "/", null !== (i = this[t(225)][t(132)]) && void 0 !== i && i, null !== (s = this[t(225)][t(197)]) && void 0 !== s ? s : 0, null !== (n = this[t(225)].debug) && void 0 !== n && n, null !== (r = this._options[t(211)]) && void 0 !== r && r, null !== (a = this[t(225)].signManifestUsingApi) && void 0 !== a && a, this[t(225)][t(164)], this[t(225)][t(212)], this[t(225)][t(167)], h), this[t(225)].resource && "" != this._options[t(210)] && this[t(207)][t(191)](this[t(209)], this[t(225)][t(210)], null !== (o = this[t(225)][t(132)]) && void 0 !== o && o, null !== (d = this[t(225)].updateTime) && void 0 !== d ? d : 0, null !== (c = this[t(225)][t(206)]) && void 0 !== c && c, null !== (u = this[t(225)][t(211)]) && void 0 !== u && u, null !== (l = this[t(225)].signManifestUsingApi) && void 0 !== l && l, this._options[t(164)], this[t(225)][t(212)], this[t(225)][t(167)], h);
                }
                [li(135)](i, s, a, o, d = r._C.retries, u = !1, l) {
                    const h = li, p = c[h(188)](i[h(231)]), f = !p && c[h(127)](i[h(231)], this[h(225)][h(213)]), g = this[h(155)][h(254)]() && p;
                    t.default.verbose(n.BalancerTag, "P2P PATH FOR ID " + i[h(231)]);
                    const m = new Ot(i[h(231)], i.href, this[h(232)], o, d, g, u);
                    if (m[h(139)] = s, m[h(190)] = o, this[h(226)][h(216)](m.id, m), !f) {
                        const e = this[h(232)][h(196)](i[h(231)]);
                        null != e && (t.default[h(133)](n.BalancerTag, h(203) + e[h(146)] + " " + (null == e ? void 0 : e[h(218)]) + h(233) + e[h(252)] + h(172) + i), m[h(248)] = e.targetDuration, m[h(217)] = e, !e.isAudio && (this[h(147)].currentRenditionBandwidth = e[h(146)], this[h(147)][h(193)] = e[h(218)] + 1, this[h(147)][h(140)] = this[h(232)][h(134)]()[h(222)]));
                    }
                    this[h(232)] && this[h(232)][h(223)]();
                    const v = e.default[h(145)]()[h(184)](de.default.Products.VIDEO_ANALYTICS, de.default[h(200)][h(149)]);
                    let y = e.default.getInstance()[h(128)]() + (v ? "_" + v : "");
                    return !y && (y = this[h(185)]), this[h(249)][h(268)](h(175), y, this._accountCode, this[h(225)][h(164)], i[h(182)]()), m[h(127)] = f, m[h(188)] = p, s && (m.on(r.yL[h(230)], (e)=>{
                        var t, i, s, n;
                        return t = this, i = void 0, n = function*() {
                            this.onProcessSegmentSuccess(m), a[0](m);
                        }, new (s = void 0, s = Promise)(function(e, r) {
                            function a(e) {
                                const t = hi;
                                try {
                                    d(n[t(228)](e));
                                } catch (e) {
                                    r(e);
                                }
                            }
                            function o(e) {
                                try {
                                    d(n.throw(e));
                                } catch (e) {
                                    r(e);
                                }
                            }
                            function d(t) {
                                const i = hi;
                                var n;
                                t[i(251)] ? e(t[i(246)]) : (n = t[i(246)], n instanceof s ? n : new s(function(e) {
                                    e(n);
                                }))[i(269)](a, o);
                            }
                            d((n = n[hi(165)](t, i || [])).next());
                        });
                    }), m.on(r.yL[h(189)], (e)=>{
                        const i = h;
                        this[i(178)](m, !0), 0 == m[i(245)] && a[i(150)] > 1 && a[1](), t.default[i(194)](n.BalancerTag, "Segment request failed, no more retries " + m.route);
                    })), this[h(147)].updateUrl(m) !== h(179) ? this.CDNLoader.getActiveRequests()[h(216)](m.id, m) : (m[h(244)] = h(179), m[h(169)] = "P2P", this[h(155)][h(260)](m, void 0)), m.startTime = Date[h(214)](), m;
                }
                [li(178)](e, t) {
                    const i = li, s = e[i(244)];
                    e[i(157)] = !0, this.CDNLoader[i(166)](s, e), e[i(241)] && 1 == e[i(221)] && (e[i(221)] = !1, this[i(147)].updateUrl(e));
                }
                [li(258)](e) {
                    const t = li;
                    re.getInstance()[t(235)](e), Y[t(145)]()[t(235)](e), e.off(r.yL[t(230)]), e.off(r.yL[t(189)]);
                    const i = this[t(147)][t(130)](e[t(244)]);
                    i > 0 && (new jt).limit(i, e), this.CDNLoader[t(255)](e), this[t(147)].removeActiveSegment(e), this[t(155)][t(254)]() && e.isMedia && !this[t(155)][t(250)](e) && this.P2PLoader[t(183)](e), this[t(226)][t(224)](e.id);
                }
                [li(236)](e, i) {
                    const s = li;
                    return t.default[s(242)](n.BalancerTag, s(199)), this[s(262)](e, i);
                }
                setActive(e, t) {
                    const i = li;
                    return "P2P" === e ? (t ? this.P2PLoader.enable() : this[i(155)][i(143)](), !0) : this[i(147)][i(202)](e, t);
                }
                [li(138)](e, t) {
                    const i = li;
                    return e !== i(179) && (this[i(147)].setMaxBandwidth(e, t) || !1);
                }
                [li(137)](e, i) {
                    const s = li;
                    i && !i.failed && i.timeout && (t.default[s(206)](n.BalancerTag, s(180) + i[s(243)]), this[s(178)](i, !1));
                }
                [li(181)](e, t, i) {}
                [li(227)](e, t, i) {
                    const s = li;
                    null != t && i[s(247)] > 0 && this[s(155)].isEnabled() && t[s(188)] && !this.P2PLoader[s(250)](t) && e[s(131)] && e[s(131)][s(264)] && e[s(131)][s(264)] > 0 && (t.data = e[s(131)], t[s(205)] = i[s(247)], this[s(155)][s(183)](t));
                }
                [li(161)](e, i, s) {
                    const r = li;
                    null != i && (this.P2PLoader[r(254)]() && i.isMedia && !this[r(155)][r(250)](i) && e[r(131)] && e.response[r(264)] && e.response[r(264)] > 0 && (t.default.debug(n.BalancerTag, r(163) + e[r(261)]), i[r(186)] = e[r(131)], s[r(247)] > 0 && (i.realBodySize = s[r(247)]), this[r(155)][r(183)](i)), i[r(141)](e, s), this[r(147)].updateProgressStats());
                }
                [li(142)](e, i, s) {
                    const a = li;
                    switch(e[a(239)]){
                        case 2:
                            i && !i[a(229)] && (i[a(229)] = setTimeout(()=>this[a(208)](e, i), r._C[a(237)]));
                            break;
                        case 4:
                            if (null != i) {
                                if (clearTimeout(i[a(229)]), delete i[a(229)], i[a(158)] = e[a(261)], e[a(261)] >= 200 && e[a(261)] < 400) {
                                    const t = i.onSuccess(e.response, e[a(219)](a(170)) || "0", s[a(270)][a(213)]);
                                    return i[a(127)] && s[a(173)](i[a(243)]), t ? this.onProcessSegmentSuccess(i) : this[a(178)](i, !1), !0;
                                }
                                return t.default[a(206)](n.BalancerTag, a(192) + e[a(261)] + a(204) + i.id), this[a(178)](i, !1), !1;
                            }
                    }
                    return !0;
                }
                timeout(e, t) {
                    t[li(208)] = !0, e.abort();
                }
                loadEndEM(e, t, i) {}
                [li(253)](e, t, i) {}
                [li(177)]() {
                    const e = li, t = this[e(147)][e(177)](), i = this[e(155)][e(177)]();
                    let s = !1, n = 0;
                    return i && this.P2PLoader && this[e(147)][e(177)]()[e(234)] > 0 && (s = !0, n = 8 * i[e(263)] / (i[e(153)] / 1e3)), this[e(155)][e(254)]() && (t[e(171)].push({
                        downloadedBytes: i[e(263)] || 0,
                        downloadedChunks: i[e(174)] || 0,
                        bandwidth: Math[e(195)](n || 0),
                        instantBandwidth: Math[e(195)](0),
                        lastInstantBandwidth: Math[e(195)](0),
                        peakBandwidth: Math[e(195)](0),
                        failures: 0,
                        totalFailures: 0,
                        retries: 0,
                        downloadTime: i[e(153)],
                        provider: e(179),
                        profileName: e(179),
                        isActive: this[e(155)].isEnabled(),
                        ptb: 0,
                        usedOnce: s,
                        hugeChunks: 0,
                        firstHugeChunkSize: 0,
                        lastChunksLapse: 0,
                        maxBandwidth: 0,
                        banned: !1,
                        lastBandwidth: 0,
                        scoringBandwidth: 0
                    }), t[e(257)] = t[e(257)] + (i[e(198)] || 0), t.totalDownloadedBytes = t[e(234)] + (i[e(263)] || 0)), t;
                }
                [li(160)]() {
                    this[li(254)] = !0;
                }
                [li(143)]() {
                    this[li(254)] = !1;
                }
                [li(240)]() {
                    return this[li(254)];
                }
                constructor(e, t, i){
                    const s = li;
                    this._segments = new Map, this[s(267)] = new Map, this.isEnabled = !0, this._accountCode = e, this[s(225)] = t, this[s(232)] = new kt, this.storage = new me(this), this[s(152)] = i, this[s(225)][s(159)] && this._options[s(159)] >= 1e3 && (r.wc[s(176)] = this._options[s(159)]), this[s(155)] = new J(this._accountCode, t, this[s(215)]), this.CDNLoader = new he(t, this[s(232)], this[s(155)], this[s(152)]), this[s(249)] = ni[s(145)](this), re[s(145)](this), Y[s(145)](this.P2PLoader), this[s(185)] = ui();
                    const n = new Ft(this);
                    this._balancerBusinessObject = n, (t[s(220)] || t[s(144)]) && this[s(271)](!0);
                }
            }
            const gi = vi;
            !function(e) {
                const t = vi, i = e();
                for(;;)try {
                    if (128462 == parseInt(t(439)) / 1 * (-parseInt(t(478)) / 2) + parseInt(t(502)) / 3 + parseInt(t(520)) / 4 * (parseInt(t(561)) / 5) + parseInt(t(523)) / 6 * (-parseInt(t(625)) / 7) + -parseInt(t(482)) / 8 + parseInt(t(578)) / 9 + parseInt(t(456)) / 10) break;
                    i.push(i.shift());
                } catch (e) {
                    i.push(i.shift());
                }
            }(mi);
            function mi() {
                const e = [
                    "getStats",
                    "params",
                    "timeToFirstByte",
                    "map",
                    "lastDecisionTimestamp",
                    "signManifestUsingApi",
                    " ip: ",
                    "status",
                    "statusText",
                    "apply",
                    "retryBecauseNewHeaders",
                    "notice",
                    " byte length-> ",
                    "isTheoplayer",
                    "P2PLoader",
                    "undefined",
                    "length",
                    "getIp",
                    "resetP2PConnection",
                    "HTTP for -> ",
                    "toFixed",
                    "interceptors",
                    "defineProperty",
                    "isEnabled",
                    "removeInterceptors",
                    "loadend",
                    "_accountCode",
                    "isAudio",
                    "addEventListener",
                    "__awaiter",
                    "10cslCpZ",
                    " TIME: ",
                    " peer id -> ",
                    "host",
                    "segmentsMap",
                    "size",
                    "set",
                    "headers",
                    "reload",
                    "dispatchEvent",
                    "P2P TIMEOUTERROR ",
                    "pathname",
                    "useTheoplayer",
                    "ur: ",
                    "load",
                    "realBodySize",
                    "allResponseHeader",
                    "542583PlaiOn",
                    "getActiveRequests",
                    "debug",
                    "P2P DISPATCH LOAD ",
                    "join",
                    "stopMonitor",
                    "peers: ",
                    "balanceSubtitles",
                    "downloadedBytes",
                    "timeout",
                    "sendJoin",
                    "requestHeader",
                    "STREBOPX",
                    "apiHost",
                    "DONE",
                    "split",
                    " last length -> ",
                    "Sending join to tracker due to new manifest",
                    "p2pId",
                    "isAsync",
                    "body",
                    "loadStartEM",
                    "search",
                    "enable",
                    "useP2P",
                    "cdnName",
                    "balancer",
                    "Destroying CDN Balancer",
                    "elapsedTime",
                    "getInstance",
                    "provider",
                    "ms timeout: ",
                    "ifByteArrayToString",
                    "P2P Failure Update url on problems with p2p ",
                    "downloadedChunks",
                    "?rnpaw=",
                    "next",
                    "progressEM",
                    "blob",
                    "isSubtitles",
                    "options",
                    "components",
                    "includes",
                    " downloaded through P2P. Size: ",
                    "readyState",
                    "prototype",
                    "getUploadedUniqPeers",
                    "161dqDeWd",
                    "loadInterceptor",
                    "loadstart",
                    "Fetching segment via P2P for -> ",
                    "manifest",
                    "processSegment",
                    " real size-> ",
                    "disable",
                    "Range",
                    "responseType",
                    "string",
                    "readyStateChangeEM",
                    "loader",
                    "P2P DISPATCH LOAD END",
                    " peer version ",
                    "155fxYUvv",
                    "Fetching segment via CDN for -> ",
                    "balanceManifests",
                    "getAccountCode",
                    "responseURL",
                    "now",
                    "searchParams",
                    "throw",
                    "P2P",
                    " peer version: ",
                    "P2P Error on event load end",
                    "connectTimeoutMilliseconds",
                    "devHost",
                    "buffer",
                    "getSegment",
                    "byteLength",
                    "peer",
                    "1571890zNvNjo",
                    "getLoader",
                    "getUploadedChunks",
                    "updateP2PId",
                    "balanceAudio",
                    "getAllResponseHeaders",
                    "destroy",
                    "origRes",
                    "getPeersNothing",
                    " PEER ID -> ",
                    "getResponseHeader",
                    "error",
                    "addInterceptor",
                    "cdns",
                    "send",
                    "verbose",
                    "timeouts",
                    "resource",
                    "setOptions",
                    "forceHttp",
                    "overrideMimeType",
                    "getVersion",
                    "2042aGrMbx",
                    "&rnpaw=",
                    "CDNLoader",
                    "then",
                    "310120iJoqXq",
                    "getId",
                    "uploaded: (MB/#/%) ",
                    "getBitmovinSendHttpRequest",
                    " peer id: ",
                    "simpleRequest",
                    "P2P Error on event ready state change",
                    "setResourceInfo",
                    "isManifest",
                    " segmnet p2p id -> ",
                    "abort",
                    "data",
                    "response",
                    "toString",
                    "segments-> (",
                    "value",
                    "GET",
                    "setInterceptedRequests",
                    "updateUrl",
                    "ms id:",
                    "738213abOaRk",
                    "readystatechange",
                    "kb ",
                    "url",
                    "isBitmovin",
                    "startsWith",
                    "getRecommendedManifest",
                    "isMedia",
                    "open",
                    "Could not parse URL ",
                    "segment",
                    "openAndSend",
                    " UniqPeers: ",
                    "P2P DISPATCH LOAD START",
                    "call",
                    "responseHeader",
                    "setRequestHeader",
                    "getUploadRequests",
                    "56496AAwyOt",
                    "P2P/SMB Traffic ",
                    " TIMEOUTS ",
                    "43386tjqJwq",
                    "onreadystatechange",
                    "P2P Error on event load event",
                    "FORCE",
                    "getUploadRequestsFailed",
                    "rnpaw",
                    "arraybuffer",
                    "getNewUrl"
                ];
                return (mi = function() {
                    return e;
                })();
            }
            function vi(e, t) {
                const i = mi();
                return (vi = function(e, t) {
                    return i[e -= 439];
                })(e, t);
            }
            class yi extends w {
                [gi(462)]() {
                    const e = gi;
                    t.default[e(580)](n.BalancerTag, e(605)), re.getInstance()[e(583)](), this.loader[e(545)][e(462)](), this.isEnabled && (XMLHttpRequest.prototype[e(466)] = this[e(517)], XMLHttpRequest[e(623)][e(461)] = this.allResponseHeader, XMLHttpRequest[e(623)][e(492)] = this[e(492)], XMLHttpRequest[e(623)][e(476)] = this.overrideMimeType, XMLHttpRequest[e(623)][e(518)] = this.requestHeader, XMLHttpRequest.prototype[e(470)] = this[e(470)], XMLHttpRequest.prototype[e(510)] = this[e(510)]), this[e(552)][e(555)]();
                }
                [gi(442)]() {
                    return this[gi(557)];
                }
                [gi(474)](e) {
                    const t = gi;
                    var i;
                    for(const t in e)this.options[t] = e[t];
                    this[t(591)] = (null !== (i = this[t(618)][t(564)]) && void 0 !== i ? i : this[t(618)].isDev) ? r.df[t(451)] : r.df.host, this[t(637)] = new fi(this._accountCode, this.options, this[t(591)]);
                }
                [gi(513)](e, i) {
                    const s = gi;
                    var r, a, o;
                    try {
                        e[s(510)](s(498), i[s(530)](null !== (r = this[s(618)].signManifestUsingApi) && void 0 !== r && r)), (null === (a = i.headers) || void 0 === a ? void 0 : a[s(633)]) && e[s(518)]("Range", i.headers[s(633)]), e[s(470)]();
                    } catch (e) {
                        t.default[s(580)](n.BalancerTag, "Error on request " + i[s(530)](null !== (o = this[s(618)][s(536)]) && void 0 !== o && o));
                    }
                }
                request(e, t, i, s, n, r, a) {
                    const o = gi;
                    this[o(637)][o(630)](e, !0, i, s, n, r, a);
                }
                setManifestResource(e) {
                    const i = gi, s = Date[i(444)]() - this[i(535)];
                    e && (this[i(618)][i(473)] !== e || s > r.df.decisionCallWaitTime) && (this[i(618)][i(473)] = e, this[i(637)] && this[i(637)][i(545)] && this[i(637)].P2PLoader[i(554)]() && (t.default.debug(n.BalancerTag, i(595)), this[i(637)].P2PLoader[i(588)]()), !this.loader && (this[i(637)] = new fi(this[i(557)], this[i(618)], this[i(591)])), this.loader[i(480)][i(489)](e), this[i(637)].loadCDNBalancerData(), this[i(535)] = Date[i(444)]());
                }
                getLoader() {
                    return this[gi(637)];
                }
                [gi(468)](e, t) {
                    const i = gi;
                    this.interceptors[i(626)](e, t);
                }
                [gi(508)]() {
                    const e = gi;
                    return this[e(637)][e(480)][e(508)]();
                }
                [gi(573)]() {
                    this[gi(544)] = !0;
                }
                [gi(485)]() {
                    const e = gi;
                    return this[e(506)] = !0, function(t, i) {
                        const s = e;
                        return void 0 === t || !t[s(507)]("media") && !t[s(507)](s(629)) ? null : {
                            getResponse: ()=>new Promise((e)=>{
                                    const t = vi;
                                    var s;
                                    let n = Date[t(444)]();
                                    const r = {
                                        request: i,
                                        url: i[t(505)],
                                        headers: [],
                                        status: 0,
                                        statusText: "",
                                        body: void 0
                                    }, a = new XMLHttpRequest;
                                    a[t(634)] = null !== (s = i[t(634)]) && void 0 !== s ? s : t(529), a.onreadystatechange = function(i) {
                                        const s = t;
                                        if (2 === a[s(622)]) r[s(533)] = (Date[s(444)]() - n) / 1e3;
                                        else if (4 === a[s(622)]) {
                                            if (r.status = a[s(538)], r[s(539)] = a[s(539)], r[s(606)] = (Date[s(444)]() - n) / 1e3, a[s(538)] >= 200 && a.status < 400) {
                                                "arraybuffer" !== a[s(634)] && "blob" !== a.responseType ? (r[s(598)] = c[s(610)](a[s(494)]), r.length = r[s(598)][s(547)]) : (r[s(598)] = a.response, a[s(634)] === s(529) ? r[s(547)] = r.body[s(454)] : a.responseType === s(616) && (r[s(547)] = r.body.size));
                                                const t = a[s(461)]().trim().split(/[\r\n]+/)[s(534)]((e)=>{
                                                    const t = s, i = e[t(593)](": ");
                                                    return {
                                                        name: i.shift(),
                                                        value: i[t(582)](": ")
                                                    };
                                                });
                                                r.headers = t, e(r);
                                            } else e(r);
                                        }
                                    }, a[t(510)](i.method, i[t(505)]);
                                    for(const e in i[t(568)])a[t(518)](e, i[t(568)][e]);
                                    a.send(null == i ? void 0 : i.body);
                                }),
                            cancel () {},
                            setProgressListener () {}
                        };
                    };
                }
                [gi(549)]() {
                    const e = gi;
                    this[e(637)][e(545)][e(549)](), this.options[e(473)] = void 0;
                }
                [gi(487)](e, t, i) {
                    const s = gi;
                    var n;
                    x.default[s(607)]()[s(499)](!0);
                    const r = new URL(e), a = this.loader[s(630)](r, !1, [], i);
                    a[s(532)] = t;
                    const o = (null == i ? void 0 : i[s(633)]) || "";
                    return this[s(637)][s(565)][s(567)](a[s(530)](null !== (n = this.options[s(536)]) && void 0 !== n && n) + o, r[s(495)]()), a;
                }
                [gi(601)]() {
                    const e = gi;
                    this[e(554)] = !0, this[e(637)].enable(), this[e(637)][e(545)][e(601)]();
                }
                [gi(632)]() {
                    const e = gi;
                    this.isEnabled = !1, this[e(637)][e(632)](), this[e(637)][e(545)].disable();
                }
                getIsEnabled() {
                    return this.isEnabled;
                }
                [gi(569)](e) {
                    const t = gi;
                    null != e && (this[t(618)] = new T(e)), this[t(637)][t(545)][t(462)](), this[t(637)] = new fi(this._accountCode, this[t(618)], this[t(591)]), this.isEnabled = !0;
                }
                constructor(e, i){
                    const s = gi;
                    var a;
                    if (super(), this[s(554)] = !0, this.defaultChunkDownloadTimeout = 0, this[s(506)] = !1, this[s(544)] = !1, this[s(535)] = 0, this[s(591)] = "gnsnpaw.com", this._accountCode = e, this[s(618)] = new T, this[s(637)] = new fi(this[s(557)], this[s(618)], this[s(591)]), this[s(552)] = new v(this), i && typeof (null === (a = i[s(619)]) || void 0 === a ? void 0 : a[s(604)]) !== s(546) && !i.components[s(604)]) return this[s(554)] = !1, this[s(637)][s(632)](), void this[s(637)][s(545)][s(632)]();
                    const o = this;
                    this[s(517)] = XMLHttpRequest.prototype[s(466)], XMLHttpRequest.prototype[s(466)] = function(e) {
                        return o.responseHeader.call(this, e);
                    }, this[s(577)] = XMLHttpRequest[s(623)].getAllResponseHeaders, XMLHttpRequest.prototype[s(461)] = function() {
                        const e = s;
                        return o.allResponseHeader[e(516)](this);
                    }, this[s(492)] = XMLHttpRequest[s(623)][s(492)], XMLHttpRequest.prototype[s(492)] = function() {
                        const e = s, t = this[e(512)];
                        o[e(457)]().onAbort(this, t), o[e(492)][e(516)](this);
                    }, this[s(476)] = XMLHttpRequest[s(623)][s(476)], XMLHttpRequest[s(623)].overrideMimeType = function(e) {
                        const t = s;
                        o.overrideMimeType[t(516)](this, e);
                    }, this[s(589)] = XMLHttpRequest[s(623)].setRequestHeader, XMLHttpRequest[s(623)][s(518)] = function(e, t, ...i) {
                        const n = s, r = this.segment;
                        r && (r[n(568)][e] = t, r[n(541)] = 0 == r.retryBecauseNewHeaders ? 1 : r.retryBecauseNewHeaders), o[n(589)].call(this, e, t, ...i);
                    }, this.send = XMLHttpRequest[s(623)].send, XMLHttpRequest[s(623)][s(470)] = function(e, ...i) {
                        var s, a, d, c, u, l, h, p, f, g, m, v, y, T, S, E;
                        return y = this, T = void 0, E = function*() {
                            const y = vi;
                            (!this[y(587)] || this.timeout > r._C[y(450)]) && this.isAsync && (this.timeout = r._C.connectTimeoutMilliseconds);
                            const T = this[y(512)];
                            if ((!o[y(554)] || !T || T.isManifest) && (!T || !(null !== (s = o.options[y(441)]) && void 0 !== s && s || null !== (a = o[y(618)][y(536)]) && void 0 !== a && a))) return void o.send.call(this, e, ...i);
                            if (1 == T[y(541)]) return T[y(541)] = 2, T[y(459)](), void o[y(513)](this, T);
                            try {
                                const e = o[y(457)]()[y(531)]()[y(469)];
                                let i = 0, s = 0, r = 0, a = 0, p = 0, f = 0, g = (null === (d = o[y(457)]()) || void 0 === d ? void 0 : d[y(545)].getUploadedBytes()) || 0;
                                const m = (null === (c = o[y(457)]()) || void 0 === c ? void 0 : c[y(545)][y(458)]()) || 0;
                                g = g / 1024 / 1024;
                                for(let t = 0; t < e[y(547)]; t++)e[t].provider === y(447) ? (s += e[t][y(586)], a += e[t][y(612)]) : "STREBOOS" === e[t][y(608)] || e[t][y(608)] === y(590) ? (p += e[t].downloadedBytes, f += e[t][y(612)]) : (i += e[t][y(586)], r += e[t][y(612)]);
                                const v = null === (u = o.getLoader()) || void 0 === u ? void 0 : u[y(545)][y(519)](), T = null === (l = o.getLoader()) || void 0 === l ? void 0 : l.P2PLoader[y(527)](), S = null === (h = o.getLoader()) || void 0 === h ? void 0 : h[y(545)][y(624)]();
                                let E = 0, b = 0, A = 0;
                                try {
                                    E = s / (s + i + p) * 100, b = p / (s + i + p) * 100, A = g / ((s + i + p) / 1024 / 1024) * 100;
                                } catch (e) {}
                                const w = o[y(457)]()[y(545)].getPeers()[y(566)] || 0, _ = " (" + o[y(457)]()[y(545)].getPeersBehind() + "/" + o[y(457)]()[y(545)][y(464)]() + "/" + o[y(457)]()[y(545)].getPeersAhead() + ") ";
                                t.default[y(471)](n.BalancerTag, y(521) + E[y(551)](2) + "% " + b[y(551)](2) + "%\nMB(CDN/SB/P2P) " + (i / 1024 / 1024)[y(551)](2) + "/" + (p / 1024 / 1024).toFixed(2) + "/" + (s / 1024 / 1024)[y(551)](2) + "\n" + y(496) + r + "/" + f + "/" + a + ")\n" + y(584) + w + _ + "\n" + y(484) + g.toFixed(2) + "/" + m + "/" + A[y(551)](2) + "\n" + y(574) + v + "|" + T + y(514) + S);
                            } catch (e) {}
                            const S = Date.now();
                            T.updateP2PId();
                            let E = o[y(637)][y(545)][y(453)](T);
                            if ("P2P" !== T[y(603)] || T.forceHttp) t.default[y(471)](n.BalancerTag, (T.forceHttp ? y(526) : "") + y(550) + T[y(463)]), o[y(457)]()[y(480)][y(579)]()[y(567)](T.id, T), t.default[y(542)](n.BalancerTag, y(440) + T[y(463)]), o.send[y(516)](this, e, ...i);
                            else {
                                let e = !1;
                                t.default[y(542)](n.BalancerTag, y(628) + T[y(463)]), T[y(475)] = !0, T[y(602)] = !1;
                                let i = null == E ? void 0 : E[y(493)], s = E && (null == E ? void 0 : E[y(493)][y(454)]) > 0 && (null == i ? void 0 : i[y(454)]) === (null == E ? void 0 : E[y(576)]) && (null == E ? void 0 : E[y(576)]) && (null == E ? void 0 : E[y(576)]) > 0, a = 0;
                                for(; !s;)yield new Promise((e)=>setTimeout(e, 20)), E = o[y(637)][y(545)][y(453)](T), i = null == E ? void 0 : E[y(493)], a = (null == i ? void 0 : i.byteLength) || 0, s = E && (null == E ? void 0 : E[y(576)]) > 0 && (null == E ? void 0 : E[y(493)].byteLength) > 0 && (null == i ? void 0 : i[y(454)]) === (null == E ? void 0 : E[y(576)]) && null != (null == E ? void 0 : E.realBodySize), Date[y(444)]() - S > r.LI[y(587)] ? (s = !0, i = void 0, e = !0, t.default[y(471)](n.BalancerTag, "P2P TIMEOUTERROR BY ME: " + o[y(637)][y(545)].getId() + y(562) + (Date[y(444)]() - S) + y(486) + T[y(455)].id + y(448) + T[y(455)].getVersion() + " ip: " + T[y(455)][y(548)]() + " " + a / ((null == E ? void 0 : E[y(576)]) || 1) * 100 + "%")) : Date.now() - S > 2e3 && (null == E || null == E.data || a < 20) && (s = !0, i = void 0, e = !0, t.default.verbose(n.BalancerTag, "P2P TIMEOUTERROR BY NO DATA ME:" + o.loader[y(545)][y(483)]() + " " + (Date.now() - S > 2e3) + y(486) + T[y(455)].id + y(448) + T.peer[y(477)]() + " ip: " + T[y(455)][y(548)]() + y(594) + a));
                                if (i && (i = i.slice(0, i[y(454)])), e && (T[y(455)] && (T[y(455)][y(472)] = T[y(455)].timeouts + 1), t.default[y(471)](n.BalancerTag, y(571) + T[y(463)] + " " + T.id + " " + (null === (p = null == E ? void 0 : E.data) || void 0 === p ? void 0 : p[y(454)]) + " " + (null == E ? void 0 : E[y(576)]) + y(465) + (null === (f = T.peer) || void 0 === f ? void 0 : f.id) + y(522) + T[y(455)][y(472)])), t.default[y(471)](n.BalancerTag, "P2P READY FOR " + T[y(463)] + " " + (null == i ? void 0 : i[y(454)]) + " " + (null == E ? void 0 : E.realBodySize) + y(563) + T.peer.id + y(491) + T[y(596)]), E = o[y(637)][y(545)][y(453)](T), i && (null === (g = null == E ? void 0 : E[y(493)]) || void 0 === g ? void 0 : g[y(454)]) == (null == E ? void 0 : E[y(576)]) && null != (null == E ? void 0 : E[y(576)]) && (null == E ? void 0 : E[y(576)]) > 0) {
                                    t.default.notice(n.BalancerTag, T[y(463)] + y(621) + ((null === (m = null == E ? void 0 : E[y(493)]) || void 0 === m ? void 0 : m.byteLength) / 1048576).toFixed(2) + "MB"), i instanceof Uint8Array && (i = i[y(452)]);
                                    const e = new CustomEvent(y(503)), s = new CustomEvent(y(556)), r = new CustomEvent(y(575)), a = new CustomEvent(y(627));
                                    Object.defineProperty(this, y(494), {
                                        writable: !0
                                    }), Object.defineProperty(this, y(538), {
                                        writable: !0
                                    }), Object[y(553)](this, y(539), {
                                        writable: !0
                                    }), Object.defineProperty(this, y(622), {
                                        writable: !0
                                    }), Object[y(553)](this, y(454), {
                                        writable: !0
                                    }), Object[y(553)](this, y(443), {
                                        writable: !0
                                    }), Object.defineProperty(this, y(634), {
                                        writable: !0
                                    }), this.byteLength = i[y(454)], this[y(494)] = i, this.status = 200, this[y(539)] = "OK", this[y(622)] = XMLHttpRequest[y(592)], this[y(443)] = T.origRes, this.responseType = "arraybuffer", t.default[y(471)](n.BalancerTag, y(515));
                                    try {
                                        this[y(570)](a);
                                    } catch (e) {
                                        t.default[y(471)](n.BalancerTag, "P2P Error on event load start");
                                    }
                                    yield new Promise((e)=>setTimeout(e, 6)), t.default[y(471)](n.BalancerTag, "P2P DISPATCH READY STATE");
                                    try {
                                        this[y(570)](e);
                                    } catch (e) {
                                        t.default[y(471)](n.BalancerTag, y(488));
                                    }
                                    t.default[y(471)](n.BalancerTag, y(581));
                                    try {
                                        this[y(570)](r);
                                    } catch (e) {
                                        t.default[y(471)](n.BalancerTag, y(525));
                                    }
                                    t.default[y(471)](n.BalancerTag, y(638));
                                    try {
                                        this[y(570)](s);
                                    } catch (e) {
                                        t.default.verbose(n.BalancerTag, y(449));
                                    }
                                    t.default.verbose(n.BalancerTag, "P2P2 Download done -> " + (Date[y(444)]() - S) + y(501) + T.p2pId + " size -> " + i.byteLength / 1024 + y(504) + T[y(463)] + y(639) + T.peer.getVersion() + y(537) + T.peer[y(548)]());
                                } else t.default[y(471)](n.BalancerTag, y(611) + (Date[y(444)]() - S) + y(609) + r.LI[y(587)] + y(543) + (null === (v = null == E ? void 0 : E.data) || void 0 === v ? void 0 : v[y(454)]) + y(631) + (null == E ? void 0 : E[y(576)]) + " original -> " + T[y(463)]), T[y(475)] = !0, o[y(457)]().CDNLoader[y(579)]()[y(567)](T.id, T), o[y(457)]().CDNLoader[y(500)](T), o[y(513)](this, T);
                            }
                        }, new (S = void 0, S = Promise)(function(e, t) {
                            const i = vi;
                            function s(e) {
                                const i = vi;
                                try {
                                    r(E[i(614)](e));
                                } catch (e) {
                                    t(e);
                                }
                            }
                            function n(e) {
                                const i = vi;
                                try {
                                    r(E[i(446)](e));
                                } catch (e) {
                                    t(e);
                                }
                            }
                            function r(t) {
                                const i = vi;
                                var r;
                                t.done ? e(t[i(497)]) : (r = t[i(497)], r instanceof S ? r : new S(function(e) {
                                    e(r);
                                }))[i(481)](s, n);
                            }
                            r((E = E[i(540)](y, T || []))[i(614)]());
                        });
                    }, this.open = XMLHttpRequest[s(623)][s(510)], XMLHttpRequest[s(623)].open = function(e, i, r = !0, ...a) {
                        const d = s;
                        var u;
                        if (this[d(597)] = r, !o[d(554)]) return o[d(510)][d(516)](this, e, i, r, ...a);
                        let l = i;
                        typeof i !== d(635) && (l = i[d(495)]());
                        let h = l;
                        const p = h[d(593)]("?");
                        h = c.sliceByFirstSpecial(h, o[d(618)].allowSpecialDelimitersInUrl);
                        try {
                            const t = new URL(h), s = c[d(490)](t[d(572)]), n = c[d(509)](t.pathname), f = c[d(558)](t[d(572)]), g = c[d(617)](t[d(572)]);
                            if (null == this[d(512)] && Object[d(553)](this, d(512), {
                                writable: !0
                            }), !l.includes(d(479)) && !l[d(620)](d(613))) {
                                if ("GET" === e && (s || n || f && o[d(618)][d(460)] || g && o.options[d(585)])) {
                                    let t;
                                    p[d(547)] > 1 && (t = p[1]);
                                    let i = this.segment;
                                    null == i && (i = o[d(487)](p[0], t, {})), null == this[d(512)] && (this[d(512)] = i), this.addEventListener(d(575), function(e) {
                                        const t = d;
                                        o.getLoader()[t(599)](this, i, e);
                                    }), this[d(559)](d(627), function(e) {
                                        o[d(457)]().loadStartEM(this, i, e);
                                    });
                                    const s = this.onreadystatechange, n = (e)=>{
                                        const t = d;
                                        null == s || s[t(516)](this, e), o[t(457)]()[t(636)](this, i, o);
                                    };
                                    return o[d(506)] || o[d(544)] ? this[d(524)] = n : this[d(559)](d(503), n), this.addEventListener("progress", function(e) {
                                        const t = d;
                                        o[t(457)]()[t(615)](this, i, e);
                                    }), this[d(559)](d(556), function(e) {
                                        o[d(457)]().loadEndEM(this, i, e);
                                    }), this[d(559)](d(467), function(e) {}), o[d(510)][d(516)](this, e, i.getNewUrl(null !== (u = o[d(618)].signManifestUsingApi) && void 0 !== u && u), r, ...a);
                                }
                                {
                                    const e = new URL(i), t = e[d(445)];
                                    t.delete(d(528)), e[d(600)] = t[d(495)](), i = e[d(495)]();
                                }
                            }
                        } catch (e) {
                            t.default.debug(n.BalancerTag, d(511) + h);
                        }
                        return t.default[d(580)](n.BalancerTag, "XHR-not-intercepted -> " + i), o[d(510)][d(516)](this, e, i, r, ...a);
                    };
                }
            }
            var Ti = i(9264), Si = i.n(Ti), Ei = i(8661), bi = i.n(Ei), Ai = i(1516), wi = i.n(Ai), _i = i(5100), Ii = i.n(_i), Ni = i(7499), Di = i.n(Ni), Pi = i(3569), Ri = i.n(Pi);
            class Li {
                getService() {
                    return this.service;
                }
                getMethod() {
                    return this.method;
                }
                setMethod(e) {
                    this.method = e;
                }
                getParams() {
                    return this.params;
                }
                getOnSuccess() {
                    return this.onSuccessCallback;
                }
                getOnFail() {
                    return this.onFailCallback;
                }
                getParam(e) {
                    return this.params[e];
                }
                setParam(e, t) {
                    return this.params[e] = t, this;
                }
                setParams(e) {
                    this.params = e;
                }
                getBody() {
                    return this.body;
                }
                setBody(e) {
                    this.body = e;
                }
                isPost() {
                    return this.method === n.Method.POST;
                }
                constructor(e, t, i, s, r){
                    this.method = n.Method.GET, this.service = e, this.params = t || {}, this.body = i, this.onSuccessCallback = s, this.onFailCallback = r;
                }
            }
            var Ci = i(9794);
            class Oi {
                destroy() {
                    this._requests = [], this._waitingForToken = [], this.readyToSend = !1;
                }
                shouldSendStats() {
                    return this.readyToSend;
                }
                sendRequest(t) {
                    if ("" === e.default.getInstance().getFastDataSessionToken()) return void this._waitingForToken.push(t);
                    this._waitingForToken.forEach((e)=>this.prepareParams(e)), this._requests.push(...this._waitingForToken), this._waitingForToken = [];
                    let i = t.getParams(), s = t.getService();
                    const n = this.onWillSendAnalyticsRequestListeners;
                    for (const e of n)e(s, i);
                    this.prepareParams(t), this._requests.push(t), this._processRequests();
                }
                prepareParams(t) {
                    const i = t.getService();
                    t.setParam("sessionId", t.getParam("sessionId") || e.default.getInstance().getFastDataSessionToken()), i == Ci.A.Service.SESSION_START && t.setParam("beatTime", t.getParam("beatTime") || e.default.getInstance().getFastDataService().getBeatTime());
                }
                buildRequest(e, t, i, s, r, a) {
                    i = i || n.Method.GET;
                    const o = new Li(e, t, s, r, a);
                    return o.setMethod(i), o;
                }
                _processRequests() {
                    const t = this._requests;
                    this._requests = [];
                    const i = [];
                    for(; t.length;){
                        const s = t.shift();
                        if (-1 !== this.servicesToWait.indexOf(s.getService()) && (this.readyToSend = !0), this.readyToSend) for(e.default.getInstance().pushData(e.default.getInstance().getOptions().offline ? de.default.Consumer.BLACK_HOLE : de.default.Consumer.NQS, s.getService(), s.getMethod(), s.getParams(), s.getOnSuccess(), s.getOnFail()); i.length;){
                            const t = i.shift();
                            e.default.getInstance().pushData(e.default.getInstance().getOptions().offline ? de.default.Consumer.BLACK_HOLE : de.default.Consumer.NQS, t.getService(), t.getMethod(), t.getParams(), t.getOnSuccess(), t.getOnFail());
                        }
                        else i.push(s);
                    }
                    this._requests.push(...i);
                }
                constructor(){
                    this.readyToSend = !1, this.servicesToWait = [
                        Ci.A.Service.SESSION_START
                    ], this.onWillSendAnalyticsRequestListeners = [], this._requests = [], this._waitingForToken = [];
                }
            }
            var Bi = i(859), xi = i.n(Bi), Mi = i(9743), ki = i(9965), Ui = i.n(ki), Vi = i(6274), qi = i.n(Vi);
            class Fi {
                getUsername() {
                    return this.options["user.name"];
                }
                getPluginVersion() {
                    return e.default.getPluginVersion();
                }
                getRequestNumber() {
                    return Math.random();
                }
                getUserType() {
                    return this.options["user.type"];
                }
                getAnonymousUser() {
                    return this.options["user.anonymousId"];
                }
                getReferer() {
                    let e = this.options.referer || "";
                    return !e && "undefined" != typeof window && window.location && (e = window.location.href), e;
                }
                getReferral() {
                    let e = this.options.referral || "";
                    return e || "undefined" == typeof document || (e = document.referrer), e;
                }
                getPageName() {
                    let e = this.options.title || "";
                    return e || "undefined" == typeof document || (e = document.title), e;
                }
                getLanguage() {
                    return "undefined" != typeof navigator ? navigator.language : void 0;
                }
                getScreenResolution() {
                    let e;
                    try {
                        if (window && window.screen) {
                            const t = window.devicePixelRatio || 1;
                            e = window.screen.width * t + "x" + window.screen.height * t;
                        }
                    } catch (e) {}
                    return e;
                }
                getDeviceInfo() {
                    let e = {};
                    return this.getDeviceCode() && (e.deviceCode = this.getDeviceCode()), this.getModel() && (e.model = this.getModel()), this.getBrand() && (e.brand = this.getBrand()), this.getDeviceType() && (e.deviceType = this.getDeviceType()), this.getDeviceName() && (e.deviceName = this.getDeviceName()), this.getOsName() && (e.osName = this.getOsName()), this.getOsVersion() && (e.osVersion = this.getOsVersion()), this.getBrowserName() && (e.browserName = this.getBrowserName()), this.getBrowserVersion() && (e.browserVersion = this.getBrowserVersion()), this.getBrowserType() && (e.browserType = this.getBrowserType()), this.getBrowserEngine() && (e.browserEngine = this.getBrowserEngine()), 0 !== Object.keys(e).length ? e : void 0;
                }
                getDeviceCode() {
                    return this.options["device.code"];
                }
                getModel() {
                    return this.options["device.model"];
                }
                getBrand() {
                    return this.options["device.brand"];
                }
                getDeviceType() {
                    return this.options["device.type"];
                }
                getDeviceName() {
                    return this.options["device.name"];
                }
                getOsName() {
                    return this.options["device.osName"];
                }
                getOsVersion() {
                    return this.options["device.osVersion"];
                }
                getBrowserName() {
                    return this.options["device.browserName"];
                }
                getBrowserVersion() {
                    return this.options["device.browserVersion"];
                }
                getBrowserType() {
                    return this.options["device.browserType"];
                }
                getBrowserEngine() {
                    return this.options["device.browserEngine"];
                }
                getIsBlocked() {
                    return this.options["ad.blockerDetected"];
                }
                isMethodPostEnabled() {
                    return this.options.method && this.options.method.toUpperCase() === xi().POST;
                }
                getDeviceUUID() {
                    let e;
                    return this.options["device.isAnonymous"] || (e = this.options["device.id"] || (new (qi())).getKey()), e;
                }
                getLibVersion() {
                    return Ui();
                }
                getAppName() {
                    return this.options["app.name"];
                }
                getAppReleaseVersion() {
                    return this.options["app.releaseVersion"];
                }
                getIp() {
                    return this.options["network.ip"];
                }
                getIsp() {
                    return this.options["network.isp"];
                }
                getConnectionType() {
                    return this.options["network.connectionType"];
                }
                getEDID() {
                    const e = this.options["device.EDID"];
                    return e ? e.toString() : void 0;
                }
                getObfuscateIp() {
                    return this.options["user.obfuscateIp"];
                }
                getPrivacyProtocol() {
                    let e = this.options["user.privacyProtocol"];
                    return "string" == typeof e && (e = e.toLowerCase()), "optin" === e || "optout" === e ? e : void 0;
                }
                getCustomDimensions() {
                    const e = this.options["content.customDimensions"];
                    return "object" == typeof e ? e : void 0;
                }
                getExtraparam1() {
                    return this.options["content.customDimension.1"];
                }
                getExtraparam2() {
                    return this.options["content.customDimension.2"];
                }
                getExtraparam3() {
                    return this.options["content.customDimension.3"];
                }
                getExtraparam4() {
                    return this.options["content.customDimension.4"];
                }
                getExtraparam5() {
                    return this.options["content.customDimension.5"];
                }
                getExtraparam6() {
                    return this.options["content.customDimension.6"];
                }
                getExtraparam7() {
                    return this.options["content.customDimension.7"];
                }
                getExtraparam8() {
                    return this.options["content.customDimension.8"];
                }
                getExtraparam9() {
                    return this.options["content.customDimension.9"];
                }
                getExtraparam10() {
                    return this.options["content.customDimension.10"];
                }
                getExtraparam11() {
                    return this.options["content.customDimension.11"];
                }
                getExtraparam12() {
                    return this.options["content.customDimension.12"];
                }
                getExtraparam13() {
                    return this.options["content.customDimension.13"];
                }
                getExtraparam14() {
                    return this.options["content.customDimension.14"];
                }
                getExtraparam15() {
                    return this.options["content.customDimension.15"];
                }
                getExtraparam16() {
                    return this.options["content.customDimension.16"];
                }
                getExtraparam17() {
                    return this.options["content.customDimension.17"];
                }
                getExtraparam18() {
                    return this.options["content.customDimension.18"];
                }
                getExtraparam19() {
                    return this.options["content.customDimension.19"];
                }
                getExtraparam20() {
                    return this.options["content.customDimension.20"];
                }
                isParseManifest() {
                    return this.options["parse.manifest"];
                }
                isParseCdnNode() {
                    return this.options["parse.cdnNode"];
                }
                isCdnSwitch() {
                    return this.options["parse.cdnSwitchHeader"];
                }
                getParseCdnNodeList() {
                    return this.options["parse.cdnNode.list"];
                }
                getParseCdnNodeNameHeader() {
                    return this.options["parse.cdnNameHeader"];
                }
                getParseNodeHeader() {
                    return this.options["parse.cdnNodeHeader"];
                }
                canOverwriteAdapters() {
                    return Mi.default.parseBoolean(this.options["adapters.overwrite"]);
                }
                getAdaptersProperties() {
                    return this.options["adapters.properties"];
                }
                isAppAnalyticsAutoBegin() {
                    return Mi.default.parseBoolean(this.options["check.appAnalytics.autoBegin"]);
                }
                isAppAnalyticsEnabled() {
                    return Mi.default.parseBoolean(this.options["check.appAnalytics.enabled"]);
                }
                isVideoAnalyticsEnabled() {
                    return Mi.default.parseBoolean(this.options["check.videoAnalytics.enabled"]);
                }
                isRefreshLMAConfigurationEnabled() {
                    return Mi.default.parseBoolean(this.options["lma.refresh.configuration.enabled"]);
                }
                isPluginLogsEnabled() {
                    return Mi.default.parseBoolean(this.options["debug.pluginLogs.enabled"]);
                }
                isPlayerLogsEnabled() {
                    return Mi.default.parseBoolean(this.options["debug.playerLogs.enabled"]);
                }
                refreshLMAConfigurationSeconds() {
                    return this.options["lma.refresh.configuration.seconds"];
                }
                getPlayheadMonitorEnabled() {
                    return this.options["playhead.monitor"];
                }
                getReadyStateMonitorEnabled() {
                    return this.options["readyState.monitor"];
                }
                constructor(e){
                    this.options = e;
                }
            }
            class Xi {
                destroy() {
                    this._beat.stop(), this.analyticsRequestHandler.destroy();
                }
                setOptions(e) {
                    this.options = e;
                }
                getOptions() {
                    return this.options;
                }
                begin(e = {}) {
                    this.core.isUsingLegacy() || (this.appAnalyticsStarted || (this._logBeginEvent(e), this._registeredProperties = this.coreStorage.getAppAnalyticsRegisteredProperties()), this.fireSessionStart(e));
                }
                newSession(e, t = {}) {
                    this.core.isUsingLegacy() || (this._logFireNewSessionListener(null != e ? e : {}, t), (this.appAnalyticsStarted || this.appAnalyticsStopped) && this.endSession(), e && this.setOptions(e), this.begin(t));
                }
                endSession(e = {}) {
                    this.core.isUsingLegacy() || this.appAnalyticsStarted && this.fireSessionStop(e);
                }
                _setLastActive() {
                    this._firstActive || (this._firstActive = this.getFirstActive()), this.coreStorage.setLastActive((new Date).getTime().toString());
                }
                getAccountCode() {
                    return this.accountCode;
                }
                getFirstActive() {
                    return this.coreStorage.getLastActive() || 0;
                }
                getIsDataExpired() {
                    const e = (new Date).getTime();
                    return !this.coreStorage.isEnabled() || !this.coreStorage.getStoredData() || this.getFirstActive() < e - this.sessionExpire;
                }
                fireSessionStart(e = {}) {
                    this.core.isUsingLegacy() || (this._logFireSessionStartEvent(e), this.appAnalyticsStopped && (this.core.refreshSessionToken(), this.appAnalyticsStopped = !1), this.appAnalyticsStarted || (this.coreStorage.setAppAnalyticsStarted(!0), this.appAnalyticsStarted = !0, this._processSessionStart(this._getParamsJson(e, null, null, !0, !0)), this._setLastActive()));
                }
                fireSessionStop(e = {}) {
                    this.core.isUsingLegacy() || (this._logFireSessionStopEvent(e), this.appAnalyticsStarted && (this.appAnalyticsStopped = !0, this.appAnalyticsStarted = !1, this.coreStorage.removeAppAnalyticsStarted(), this._processSessionStop(e), this.coreStorage.removeStoredData(), this.coreStorage.removeSession(), this.coreStorage.removeLastActive(), this.core.refreshSessionToken()));
                }
                fireNav(e = {}) {
                    this.core.isUsingLegacy() || (this._logFireNavListener(e), this.isActive() && (this.appAnalyticsStarted = !0, this._processNavigation(this._getParamsJson(e, null, null, !0))));
                }
                fireEvent(e = "", t = {}, i = {}, s = {}) {
                    if (!this.core.isUsingLegacy() && (this._logFireEventListener(e), this.appAnalyticsStarted)) {
                        const n = this._getParamsJson(t, i, e);
                        bi().assign(n.params, s || {}), this._processCustomEvent(n), this._setLastActive();
                    }
                }
                register(e = {}, t = {}) {
                    this._registeredProperties = {
                        dimensions: e,
                        values: t
                    }, this.coreStorage.setAppAnalyticsRegisteredProperties(JSON.stringify(this._registeredProperties));
                }
                registerOnce(e, t) {
                    this._registeredProperties || this.register(e, t);
                }
                unregister() {
                    this._registeredProperties = null, this.coreStorage.removeAppAnalyticsRegisteredProperties();
                }
                _getParamsJson(e, t, i, s, n) {
                    const r = {};
                    if (i && (r.name = i), r.dimensions = e || {}, r.values = t || {}, this._registeredProperties) {
                        for(const e in this._registeredProperties.dimensions)r.dimensions[e] = this._registeredProperties.dimensions[e];
                        for(const e in this._registeredProperties.values)r.values[e] = this._registeredProperties.values[e];
                    }
                    const a = {
                        params: r
                    };
                    return s && (a.params.dimensions.page && (a.params.page = a.params.dimensions.page, delete a.params.dimensions.page), a.params.dimensions.route && (a.params.route = a.params.dimensions.route, delete a.params.dimensions.route), n || delete a.params.dimensions, delete a.params.values), a;
                }
                isActive() {
                    if (this.core.isUsingLegacy()) return !1;
                    if (this.appAnalyticsStarted || this.coreStorage.getAppAnalyticsStarted()) return !0;
                    const e = (new Date).getTime();
                    return this.coreStorage.getLastActive() + this.sessionExpire > e;
                }
                _sendAppAnalytics(e, t) {
                    if (!this.core.isUsingLegacy() && null !== (t = this.requestBuilder.buildParams(t, e, [
                        this,
                        new Fi(this.options)
                    ])) && this.options.enabled) {
                        const i = new Li(e, t);
                        this.isMethodPostEnabled() && i.setMethod(n.Method.POST), this.analyticsRequestHandler.prepareParams(i), this.analyticsRequestHandler.sendRequest(i);
                    }
                }
                addOnWillSendRequestListener(e) {
                    var t;
                    null === (t = this.analyticsRequestHandler) || void 0 === t || t.onWillSendAnalyticsRequestListeners.push(e);
                }
                removeOnWillSendRequestListener(e) {
                    var t;
                    this.analyticsRequestHandler && (this.analyticsRequestHandler.onWillSendAnalyticsRequestListeners = null === (t = this.analyticsRequestHandler) || void 0 === t ? void 0 : t.onWillSendAnalyticsRequestListeners.filter((t)=>t !== e));
                }
                _processNavigation(e) {
                    e = this._parseInternalParams(e), this._checkDifferentNavigation(e) ? (this._sendAppAnalytics(Ii().Service.NAV, e), this._beat.isRunning || this._beat.start(), t.default.notice(n.AppAnalyticsTag, "[" + this.core.getFastDataSessionToken() + "] " + Ii().Service.NAV + " " + e.route), this._lastNavigation.page = e.page, this._lastNavigation.route = e.route) : t.default.warn(n.AppAnalyticsTag, "Same navigation detected and ignored for Page and Route");
                }
                _processSessionStart(e) {
                    e = this._parseInternalParams(e), this._sendAppAnalytics(Ii().Service.SESSION_START, e), this._beat.isRunning || this._beat.start(), t.default.notice(n.AppAnalyticsTag, "[" + this.core.getFastDataSessionToken() + "] " + Ii().Service.SESSION_START + " " + e.route);
                }
                _processSessionStop(e) {
                    e = this._parseInternalParams(e), this._sendAppAnalytics(Ii().Service.SESSION_STOP, e), this._beat.isRunning && this._beat.stop(), t.default.notice(n.AppAnalyticsTag, "[" + this.core.getFastDataSessionToken() + "] " + Ii().Service.SESSION_STOP + " " + e.route);
                }
                _processCustomEvent(e) {
                    e = this._parseInternalParams(e), this._sendAppAnalytics(Ii().Service.EVENT, e), t.default.notice(n.AppAnalyticsTag, "[" + this.core.getFastDataSessionToken() + "] " + Ii().Service.EVENT + " " + e.name);
                }
                _parseInternalParams(e) {
                    return e && (e.params || e) || {};
                }
                _sendBeat(e) {
                    const i = {
                        diffTime: e
                    };
                    this._sendAppAnalytics(Ii().Service.BEAT, i), this && this._setLastActive(), t.default.verbose(n.AppAnalyticsTag, Ii().Service.BEAT);
                }
                _checkDifferentNavigation(e) {
                    e = e || {};
                    const t = this._lastNavigation && e.route === this._lastNavigation.route, i = this._lastNavigation && e.page === this._lastNavigation.page;
                    return !t || !i;
                }
                getSessionMetrics() {
                    return bi().getMetricsFrom(this.options["session.metrics"]);
                }
                isPlayerLogsEnabled() {
                    return t.default.debug(n.AppAnalyticsTag, "isPlayerLogsEnabled: " + this.options["debug.playerLogs.enabled"]), bi().parseBoolean(this.options["debug.playerLogs.enabled"]);
                }
                isPluginLogsEnabled() {
                    return t.default.debug(n.AppAnalyticsTag, "isPluginLogsEnabled: " + this.options["debug.pluginLogs.enabled"]), bi().parseBoolean(this.options["debug.pluginLogs.enabled"]);
                }
                isMethodPostEnabled() {
                    return this.options.method && this.options.method.toUpperCase() === Bi.POST;
                }
                _sendPluginLogs(e, i, s) {
                    if (!this.core.isUsingLegacy() && this.isPluginLogsEnabled()) {
                        try {
                            if (s && s.logType && s.logAction) {
                                const e = this.core.getFastDataSessionToken();
                                t.default.notice(n.AppAnalyticsTag, e.length ? "[" + e + "] " : s.logType + ": Action " + s.logAction);
                            }
                        } catch (e) {}
                        if (s.timemark = (new Date).getTime(), null !== (s = this.requestBuilder.buildParams(s, i)) && this.options.enabled) {
                            const e = new Li(i, s);
                            this.isMethodPostEnabled() && e.setMethod(n.Method.POST), this.analyticsRequestHandler.prepareParams(e), this.analyticsRequestHandler.sendRequest(e);
                        }
                    }
                }
                _logBeginEvent(e) {
                    const t = {
                        logs: {
                            data: e
                        },
                        logAction: "beginSession",
                        logType: "pluginMethod"
                    };
                    this._sendPluginLogs(Ii().WillSendLog.WILL_SEND_LOG_INFINITY_BEGIN, Ii().Service.APP_ANALYTICS_PLUGIN_LOGS, t);
                }
                _logFireSessionStartEvent(e) {
                    const t = {
                        logs: {
                            data: e
                        },
                        logAction: "startSession",
                        logType: "pluginMethod"
                    };
                    this._sendPluginLogs(Ii().WillSendLog.WILL_SEND_LOG_INFINITY_START, Ii().Service.APP_ANALYTICS_PLUGIN_LOGS, t);
                }
                _logFireSessionStopEvent(e) {
                    const t = {
                        logs: {
                            data: e
                        },
                        logAction: "stopSession",
                        logType: "pluginMethod"
                    };
                    this._sendPluginLogs(Ii().WillSendLog.WILL_SEND_LOG_INFINITY_START, Ii().Service.APP_ANALYTICS_PLUGIN_LOGS, t);
                }
                _logFireEventListener(e) {
                    const t = {
                        logs: {
                            data: e
                        },
                        logAction: "eventSession",
                        logType: "pluginMethod"
                    };
                    this._sendPluginLogs(Ii().WillSendLog.WILL_SEND_LOG_INFINITY_EVENT, Ii().Service.APP_ANALYTICS_PLUGIN_LOGS, t);
                }
                _logFireNavListener(e) {
                    const t = {
                        logs: {
                            data: e
                        },
                        logAction: "nav",
                        logType: "pluginMethod"
                    };
                    this._sendPluginLogs(Ii().WillSendLog.WILL_SEND_LOG_INFINITY_NAV, Ii().Service.APP_ANALYTICS_PLUGIN_LOGS, t);
                }
                _logFireNewSessionListener(e, t) {
                    const i = {
                        logs: {
                            data: e,
                            params: t
                        },
                        logAction: "newSession",
                        logType: "pluginMethod"
                    };
                    this._sendPluginLogs(Ii().WillSendLog.WILL_SEND_LOG_INFINITY_NAV, Ii().Service.APP_ANALYTICS_PLUGIN_LOGS, i);
                }
                constructor(t){
                    this.options = new (Di()), this.core = e.default.getInstance(), this.coreStorage = this.core.getCoreStorage(), this.analyticsRequestHandler = new Oi, this.accountCode = t, this.requestBuilder = new (Ri()), this._beat = new (wi())(this._sendBeat.bind(this), 3e4), this.sessionExpire = this.coreStorage.getSessionExpire() || 18e4, this.appAnalyticsStarted = !1, this.appAnalyticsStopped = !1, this._lastNavigation = {
                        page: "",
                        route: ""
                    }, this._registeredProperties = null;
                }
            }
            var Hi = i(668);
            i.g.LogLevel = t.LogLevel, i.g.NpawPluginOptions = Hi.A;
            class Gi {
                destroy() {
                    this.cdnBalancer.destroy(), this.videoAnalytics.videos.getVideoKeys().forEach((e)=>{
                        var t, i;
                        null === (t = this.videoAnalytics.getAdapter(e)) || void 0 === t || t.fireStop(), null === (i = this.videoAnalytics.getAdsAdapter(e)) || void 0 === i || i.fireStop();
                    }), this.videoAnalytics.destroy(), this.appAnalytics.destroy(), this.diagnostic.destroy(), this.core.destroy();
                }
                setLogLevel(e) {
                    t.default.setLogLevel(e);
                }
                setBalancerOptions(e) {
                    this.cdnBalancer.setOptions(e);
                }
                setManifestResource(e) {
                    this.cdnBalancer.setManifestResource(e);
                }
                addInterceptor(e, t) {
                    this.cdnBalancer.addInterceptor(e, t);
                }
                getBitmovinSendHttpRequest() {
                    return this.cdnBalancer.getBitmovinSendHttpRequest();
                }
                getRecommendedManifest() {
                    return this.cdnBalancer.getRecommendedManifest();
                }
                isBalancerEnabled() {
                    return this.cdnBalancer.getIsEnabled();
                }
                registerAdapter(e, t, i, s, n) {
                    this.core.isUsingLegacy() || this.registerAdapterInModule(!1, e, t, i, s, n);
                }
                registerAdapterFromClass(e, i, s, r, a) {
                    void 0 !== i && "function" == typeof i ? this.registerAdapterFromClassInModule(!1, e, new i, s, r, a) : t.default.error(n.AnalyticsTag, "Adapter is not valid");
                }
                registerAdapterFromString(e, i, s, r, a) {
                    void 0 !== i && "string" == typeof i ? (this.videoAnalytics.registerAdapter(e, i, s, r), null == a || a()) : t.default.error(n.AnalyticsTag, "The provided adapter is not from a valid type");
                }
                registerDefaultAdapter(e, t) {
                    this.core.isUsingLegacy() || this.videoAnalytics.registerAdapter(void 0, "{}", t, e);
                }
                removeAdapter(e) {
                    this.core.isUsingLegacy() || (e && this.videoAnalytics.videos.existsVideo(e) && this.getAdapter(e) && this.getAdapter(e).fireStop && this.getAdapter(e).fireStop(), this.videoAnalytics.removeAdapter(e));
                }
                getAdapter(e) {
                    return this.videoAnalytics.getAdapter(e);
                }
                getAdsAdapter(e) {
                    return this.videoAnalytics.getAdsAdapter(e);
                }
                registerAdsAdapter(e, t, i, s, n) {
                    this.core.isUsingLegacy() || this.registerAdapterInModule(!0, e, t, i, s, n);
                }
                registerAdsAdapterFromClass(e, i, s, r, a) {
                    void 0 !== i && "function" == typeof i ? this.registerAdapterFromClassInModule(!0, e, new i, s, r, a) : t.default.error(n.AnalyticsTag, "Adapter is not valid");
                }
                registerAdsAdapterFromString(e, i, s, r, a) {
                    void 0 !== i && "string" == typeof i ? (this.videoAnalytics.registerAdsAdapter(e, i, s, r), null == a || a()) : t.default.error(n.AnalyticsTag, "The provided adapter is not from a valid type");
                }
                updateAdsAdapter(e, i) {
                    i = null != i ? i : "default", void 0 !== e && "" != e ? this.videoAnalytics.updateAdsAdapter(e, i) : t.default.debug(n.AnalyticsTag, "Invalid ads adapter name");
                }
                registerDefaultAdsAdapter(e, t) {
                    this.core.isUsingLegacy() || this.videoAnalytics.registerAdsAdapter(void 0, "{}", t, e);
                }
                removeAdsAdapter(e) {
                    this.core.isUsingLegacy() || this.videoAnalytics.removeAdsAdapter(e);
                }
                setAnalyticsOptions(e) {
                    this.core.isUsingLegacy() || (this.videoAnalytics.setOptions(e), this.appAnalytics.setOptions(this.videoAnalytics.options), this.core.setOptions(this.videoAnalytics.options), this.diagnostic.setOptions(this.videoAnalytics.options));
                }
                setVideoOptions(e, i) {
                    e ? this.videoAnalytics.setVideoOptions(e, null != i ? i : "default") : t.default.debug(n.AnalyticsTag, "Provided options object is not valid");
                }
                fireOfflineEvents() {
                    this.core.isUsingLegacy() || (this.videoAnalytics.videos.getVideoKeys().length > 0 ? t.default.notice(n.AnalyticsTag, "Unable to send offline events because there's at least one adapter registered") : this.core.sendOfflineEvents());
                }
                registerAdapterFromClassInModule(e, t, i, s, n, r) {
                    e ? this.videoAnalytics.registerAdsAdapter(t, i, s, n) : this.videoAnalytics.registerAdapter(t, i, s, n), null == r || r();
                }
                registerAdapterInModule(e, i, s, n, r, a) {
                    if (0 === s.length && t.default.error("Adapter URL can't be empty!"), "undefined" != typeof fetch) fetch(s).then((e)=>e.json()).then((t)=>{
                        const s = JSON.stringify(t);
                        e ? this.videoAnalytics.registerAdsAdapter(i, s, n, r) : this.videoAnalytics.registerAdapter(i, s, n, r), null == a || a();
                    });
                    else {
                        const t = new XMLHttpRequest;
                        t.addEventListener("readystatechange", ()=>{
                            if (4 === t.readyState && t.status >= 200 && t.status < 400) {
                                const s = t.response;
                                e ? this.videoAnalytics.registerAdsAdapter(i, s, n, r) : this.videoAnalytics.registerAdapter(i, s, n, r), null == a || a();
                            }
                        }), t.open("GET", s), t.send();
                    }
                }
                constructor(t, i){
                    this.core = e.default.getInstance(t, i, !0), this.cdnBalancer = new yi(t, i), this.appAnalytics = new Xi(t), this.videoAnalytics = new (Si()).Plugin(this.appAnalytics), this.diagnostic = x.default.getInstance(!0), this.diagnostic.start(this);
                }
            }
        })(), s.default;
    })());

},{}],"k6xFh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Youbora7AampAdapter);
var _objectSpread = require("@swc/helpers/_/_object_spread");
var _npawPluginAdapters = require("npaw-plugin-adapters");
var _npawPluginAdaptersDefault = parcelHelpers.interopDefault(_npawPluginAdapters);
class Youbora7AampAdapter extends (0, _npawPluginAdaptersDefault.default).video.Html5 {
    checkExistsPlayer() {
        return true;
    }
    // // same as default adapter
    // getAudioCodec() {
    //     // called if 'content.encoding.audioCodec' is not set
    //     return null;
    // }
    getBitrate() {
        // if (this.player.playbackRate < 0 || this.player.playbackRate > 1) {
        //     // ignore bitrate/rendition when playing trick mode representation
        //     return null;
        // }
        return this.player.videoBitrate;
    }
    getDroppedFrames() {
        var _this_player;
        if (this.blocked) return null;
        return (_this_player = this.player) === null || _this_player === void 0 ? void 0 : _this_player.getDroppedFrames();
    }
    // // same as default adapter
    // getDuration() {
    //     return this.player.duration;
    // }
    getFramesPerSecond() {
        var _this_currentVideoBitrate;
        return (_this_currentVideoBitrate = this.currentVideoBitrate) === null || _this_currentVideoBitrate === void 0 ? void 0 : _this_currentVideoBitrate.framerate;
    }
    getIsLive() {
        // called if 'content.isLive' is not set
        return this.player.isLive;
    }
    getLatency() {
        // seconds behind live edge
        return this.player.liveLatency;
    }
    getPlayerName() {
        var _this_player_playResponseYoubora;
        return (_this_player_playResponseYoubora = this.player.playResponseYoubora) === null || _this_player_playResponseYoubora === void 0 ? void 0 : _this_player_playResponseYoubora.player;
    }
    getPlayerVersion() {
        var _this_player_playResponseYoubora;
        return (_this_player_playResponseYoubora = this.player.playResponseYoubora) === null || _this_player_playResponseYoubora === void 0 ? void 0 : _this_player_playResponseYoubora.playerVersion;
    }
    // same as default adapter
    // getPlayhead() {
    //     return this.player.currentTime;
    // }
    // same as default adapter
    // getPlayrate() {
    //     return this.player.playbackRate;
    // }
    getRendition() {
        var _this_currentVideoBitrate, _this_currentVideoBitrate1, _this_currentVideoBitrate2;
        // if (this.player.playbackRate < 0 || this.player.playbackRate > 1) {
        //     // ignore bitrate/rendition when playing trick mode representation
        //     return null;
        // }
        return this.getNpawUtils().buildRenditionString((_this_currentVideoBitrate = this.currentVideoBitrate) === null || _this_currentVideoBitrate === void 0 ? void 0 : _this_currentVideoBitrate.width, (_this_currentVideoBitrate1 = this.currentVideoBitrate) === null || _this_currentVideoBitrate1 === void 0 ? void 0 : _this_currentVideoBitrate1.height, (_this_currentVideoBitrate2 = this.currentVideoBitrate) === null || _this_currentVideoBitrate2 === void 0 ? void 0 : _this_currentVideoBitrate2.bitRate);
    }
    // same as default adapter
    // getResource() {
    //     // called if 'resource' is not set
    //     return this.player.currentSrc;
    // }
    // same as default adapter
    // getTitle() {
    //     // called if 'content.title' is not set
    //     return null;
    // }
    // same as default adapter
    // getThroughput() {
    //     // current throughput in bits per second
    //     return null;
    // }
    // same as default adapter
    // getVideoCodec() {
    //     // called if 'content.encoding.videoCodec' is not set
    //     return null;
    // }
    // same as default adapter
    // getVersion() {
    //     // adapter version
    //     return ADAPTER_VERSION;
    // }
    registerListeners() {
        this.monitorPlayhead(false, false);
        this.references = {
            play: this.playListener.bind(this),
            timeupdate: this.timeupdateListener.bind(this),
            pause: this.pauseListener.bind(this),
            playing: this.playingListener.bind(this),
            error: this.errorListener.bind(this),
            seeking: this.seekingListener.bind(this),
            seeked: this.seekedListener.bind(this),
            ended: this.endedListener.bind(this),
            loadstart: this.loadStartListener.bind(this),
            stalled: this.stalledListener.bind(this),
            waiting: this.bufferingListener.bind(this),
            canplay: this.canPlayListener.bind(this),
            canplaythrough: this.canPlayThroughListener.bind(this),
            loadedmediadata: this.loadedMediaDataListener.bind(this),
            loadeddata: this.loadedDataListener.bind(this),
            blocked: this.onBlocked.bind(this),
            bitrateChanged: this.onBitrateChanged.bind(this)
        };
        for(const key in this.references)this.player.addEventListener(key, this.references[key]);
    }
    unregisterListeners() {
        if (this.monitor) this.monitor.stop();
        if (this.player && this.references) for(const key in this.references){
            this.player.removeEventListener(key, this.references[key]);
            delete this.references[key];
        }
    }
    loadedDataListener() {
        if (this.player) {
            if (this.playhead || this.getVideo() && this.getVideo().getIsLive()) this.checkReadyState(this.player.readyState, "loadedDataListener");
        }
    }
    loadedMediaDataListener() {
        if (this.player) {
            if (this.playhead || this.getVideo() && this.getVideo().getIsLive()) this.checkReadyState(this.player.readyState, "loadedMediaDataListener");
        }
    }
    loadStartListener() {
        this.firePlayerLog("loadStartListener", {});
        if (this.flags.isJoined) this.fireStop({}, "loadStartListener");
    }
    pauseListener() {
        this.firePlayerLog("pauseListener", {});
        this.firePause({}, "pauseListener");
    }
    bufferingListener() {
        this.firePlayerLog("waitingListener", {});
        this.fireBufferBegin({}, false, "waitingListener");
    }
    stalledListener() {
        this.firePlayerLog("stalledListener", {});
        this.fireBufferBegin({}, false, "stalledListener");
    }
    canPlayListener() {
        if (this.player) {
            if (this.playhead || this.getVideo() && this.getVideo().getIsLive()) this.checkReadyState(this.player.readyState, "canPlayListener");
        }
    }
    canPlayThroughListener() {
        if (this.player) {
            if (this.playhead || this.getVideo() && this.getVideo().getIsLive()) this.checkReadyState(this.player.readyState, "canPlayThroughListener");
        }
    }
    playListener(e) {
        this.firePlayerLog("playListener", {});
        if (this.player && this.playhead) this.checkReadyState(this.player.readyState, "playListener");
        let metadata = {};
        try {
            var _e_detail_recovery, _e_detail, _e_detail_recovery1, _e_detail1;
            metadata = {
                recovery: (0, _objectSpread._)({}, (_e_detail = e.detail) === null || _e_detail === void 0 ? void 0 : (_e_detail_recovery = _e_detail.recovery) === null || _e_detail_recovery === void 0 ? void 0 : _e_detail_recovery.state, (_e_detail1 = e.detail) === null || _e_detail1 === void 0 ? void 0 : (_e_detail_recovery1 = _e_detail1.recovery) === null || _e_detail_recovery1 === void 0 ? void 0 : _e_detail_recovery1.settings)
            };
        } catch (e) {
            console.warn("could not get recovery fields");
        }
        this.fireStart({
            "content.metadata": metadata
        }, "playListener");
    }
    playingListener() {
        this.firePlayerLog("playingListener", {});
        this.fireJoin({}, "playingListener");
        this.fireResume({}, "playingListener");
        this.fireSeekEnd({}, "playingListener");
        if (this.flags.isBuffering) this.fireBufferEnd({}, "playingListener");
    }
    timeupdateListener() {
        if ((this.getPlayhead() > 0 || this.getVideo() && this.getVideo().getIsLive()) && !this.player.error) {
            this.fireStart({}, "timeupdateListener");
            this.fireJoin({}, "timeupdateListener");
        }
    }
    endedListener() {
        this.firePlayerLog("endedListener", {});
        this.fireStop({}, "endedListener");
    }
    errorListener(e) {
        var _e_target, _this_plugin_videos_videos_default, _this_plugin_videos_videos, _this_plugin_videos, _this_plugin;
        this.firePlayerLog("errorListener", {});
        const { code, message, metadata } = e === null || e === void 0 ? void 0 : (_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.error;
        // non-fatal, Youbora session continues, including /ping
        // this.fireError(code, message, metadata, null, 'errorListenerOverride');
        // fatal, /stop is immediately sent, ending the Youbora session
        this.fireFatalError(code, message, metadata, null, "errorListenerOverride");
        if ((_this_plugin = this.plugin) === null || _this_plugin === void 0 ? void 0 : (_this_plugin_videos = _this_plugin.videos) === null || _this_plugin_videos === void 0 ? void 0 : (_this_plugin_videos_videos = _this_plugin_videos.videos) === null || _this_plugin_videos_videos === void 0 ? void 0 : (_this_plugin_videos_videos_default = _this_plugin_videos_videos.default) === null || _this_plugin_videos_videos_default === void 0 ? void 0 : _this_plugin_videos_videos_default._lastErrorParams) // MIPA-166 _blockError() workaround
        this.plugin.videos.videos.default._lastErrorParams = undefined;
    }
    seekingListener() {
        this.firePlayerLog("seekingListener", {});
        this.fireSeekBegin({}, false, "seekingListener");
    }
    seekedListener() {
        this.firePlayerLog("seekedListener", {});
        this.fireSeekEnd({}, "seekedListener");
    }
    onBitrateChanged({ detail }) {
        this.currentVideoBitrate = detail;
    }
    onBlocked({ detail }) {
        var _this_flags, _this_flags1;
        if (((_this_flags = this.flags) === null || _this_flags === void 0 ? void 0 : _this_flags.isStarted) && !((_this_flags1 = this.flags) === null || _this_flags1 === void 0 ? void 0 : _this_flags1.isStopped)) {
            if ((detail === null || detail === void 0 ? void 0 : detail.blocked) !== this.blocked) {
                const eventName = (detail === null || detail === void 0 ? void 0 : detail.blocked) ? "parental_control_block" : "parental_control_unblock";
                const dimensions = {
                };
                const values = {
                };
                const topLevelDimensions = (0, _objectSpread._)({}, detail);
                this.fireEvent(eventName, dimensions, values, topLevelDimensions);
            }
        }
        this.blocked = detail === null || detail === void 0 ? void 0 : detail.blocked;
    }
}

},{"@swc/helpers/_/_object_spread":"lupAG","npaw-plugin-adapters":"b86qK","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"b86qK":[function(require,module,exports) {
var _defineProperty = require("@swc/helpers/_/_define_property");
!function(e, t) {
    module.exports = t();
}(self, ()=>(()=>{
        "use strict";
        var e = {
            d: (t, i)=>{
                for(var s in i)e.o(i, s) && !e.o(t, s) && Object.defineProperty(t, s, {
                    enumerable: !0,
                    get: i[s]
                });
            },
            o: (e, t)=>Object.prototype.hasOwnProperty.call(e, t)
        }, t = {};
        e.d(t, {
            default: ()=>S
        });
        class i {
            getVersion() {
                return "7.0.7-Bitmovin8-ads-jsclass";
            }
            getPlayhead() {
                let e = null;
                return this.player && this.flags && this.flags.isStarted && (e = this.player.getCurrentTime()), e;
            }
            getTitle() {
                return this.title;
            }
            getDuration() {
                return this.duration;
            }
            getResource() {
                return this.src;
            }
            getRendition() {
                return this.getNpawUtils().buildRenditionString(this.width, this.height, this.bitrate);
            }
            getBitrate() {
                return 1e3 * this.bitrate;
            }
            getAudioEnabled() {
                let e = !0;
                return this.player && (e = this.player.getVolume() > 0 && !this.player.isMuted()), e;
            }
            getIsSkippable() {
                return this.skippable;
            }
            getIsFullscreen() {
                let e = !1;
                return this.player && (e = "fullscreen" === this.player.getViewMode()), e;
            }
            getIsVisible() {
                let e = !1;
                return this.player && this.player.getVideoElement && this.player.getVideoElement() && (e = this.getNpawUtils().calculateAdViewability(this.player.getVideoElement())), e;
            }
            getCreativeId() {
                return this.creativeId;
            }
            getPosition() {
                let e = this.position;
                const t = this.getVideo().getAdapter();
                return t && !t.flags.isJoined && (e = this.getNpawReference().Constants.AdPosition.Preroll), e;
            }
            registerListeners() {
                const e = this.player.exports.PlayerEvent;
                this.monitorPlayhead(!0, !0), this.references = {}, this.references[e.AdBreakStarted] = this.breakStartListener.bind(this), this.references[e.AdBreakFinished] = this.breakEndListener.bind(this), this.references[e.AdStarted] = this.adStartListener.bind(this), this.references[e.AdFinished] = this.adEndListener.bind(this), this.references[e.AdQuartile] = this.quartileListener.bind(this), this.references[e.AdSkipped] = this.skipListener.bind(this), this.references[e.AdClicked] = this.clickListener.bind(this), this.references[e.AdError] = this.errorListener.bind(this), this.references[e.Destroy] = this.destroyListener.bind(this), this.references[e.Paused] = this.pauseListener.bind(this), this.references[e.Playing] = this.resumeListener.bind(this), this.references[e.TimeChanged] = this.timeupdateListener.bind(this);
                for(let e in this.references)this.player.on(e, this.references[e]);
            }
            pauseListener() {
                this.firePause();
            }
            resumeListener() {
                this.fireResume();
            }
            timeupdateListener() {
                this.lastPlayhead = this.getPlayhead();
            }
            unregisterListeners() {
                this.monitor && this.monitor.stop();
                try {
                    if (this.player && this.player.off && this.references) {
                        for(let e in this.references)this.player.off(e, this.references[e]);
                        delete this.references;
                    }
                } catch (e) {}
            }
            breakStartListener(e) {
                this.getVideo().fireInit();
                const t = this.getVideo().getAdapter();
                t && t.firePause();
                const i = e.adBreak.position;
                "pre" === i ? this.position = this.getNpawReference().Constants.AdPosition.Preroll : "post" === i || t && 0 !== t.getDuration() && (t.getPlayhead() || i) > t.getDuration() - 1 ? this.position = this.getNpawReference().Constants.AdPosition.Postroll : this.position = this.getNpawReference().Constants.AdPosition.Midroll;
            }
            breakEndListener(e) {
                if (this.fireBreakStop(), this.getVideo().requestBuilder.lastSent.adPosition !== this.getNpawReference().Constants.AdPosition.Postroll) {
                    const e = this.getVideo().getAdapter();
                    e && e.fireResume();
                } else this.getVideo().fireStop();
            }
            adStartListener(e) {
                e.ad && e.ad.data && (this.title = e.ad.data.adTitle, this.bitrate = e.ad.data.bitrate, this.creativeId = e.ad.data.creative ? e.ad.data.creative.id : void 0, this.src = e.ad.mediaFileUrl, this.height = e.ad.height, this.width = e.ad.width, this.skippable = e.ad.skippable, this.duration = e.ad.duration), this.lastPlayhead = 0, this.counter = 0, this.fireStart(), this.fireJoin();
            }
            adEndListener(e) {
                let t = this.getVideo().getPlayhead();
                this.fireStop({
                    adPlayhead: this.lastPlayhead,
                    playhead: t
                }), this.getVideo().requestBuilder.lastSent.adPosition === this.getNpawReference().Constants.AdPosition.Postroll && this.getVideo().fireStop(), this.lastPlayhead = 0;
            }
            quartileListener(e) {
                let t = 1;
                switch(e.quartile){
                    case "midpoint":
                        t = 2;
                        break;
                    case "thirdQuartile":
                        t = 3;
                }
                this.fireQuartile(t);
            }
            skipListener(e) {
                let t = this.getVideo().getPlayhead();
                this.fireSkip({
                    adPlayhead: this.lastPlayhead,
                    playhead: t
                }), this.getVideo().requestBuilder.lastSent.adPosition === this.getNpawReference().Constants.AdPosition.Postroll && this.getVideo().fireStop(), this.lastPlayhead = 0;
            }
            clickListener(e) {
                this.fireClick(e.clickThroughUrl);
            }
            errorListener(e) {
                const t = e.data ? e.data : e;
                this.fireError(t.code, t.message);
            }
            destroyListener(e) {
                this.player = null, this.tag = null;
                let t = this.getVideo().getPlayhead();
                this.fireStop({
                    adPlayhead: this.lastPlayhead,
                    playhead: t
                }), this.lastPlayhead = 0, this.getVideo().removeAdsAdapter();
            }
            constructor(){
                this.lastPlayhead = null;
            }
        }
        class s {
            getResource(e) {
                let t = "";
                const i = this._getShaka(e);
                return "function" == typeof i.getManifestUri ? t = i.getManifestUri() : "function" == typeof i.getCurrentSrc && (t = i.getCurrentSrc()), t;
            }
            getBitrate(e) {
                let t = -1;
                const i = this._getShaka(e);
                if ("function" == typeof i.getStats) t = i.getStats().streamBandwidth;
                else if ("function" == typeof i.getVideoTracks && "function" == typeof i.getVideoTrackCurrentIndex) {
                    const e = i.getVideoTrackCurrentIndex(), s = i.getVideoTracks();
                    for(let i in s){
                        const r = s[i];
                        r.index == e && (t = r.bitrate);
                    }
                }
                return t;
            }
            isUsed(e) {
                return !!this._getShaka(e);
            }
            getRendition(e) {
                const t = this._getShaka(e), i = t.getStats();
                let s = this.getNpawUtils().buildRenditionString(i.width, i.height, i.streamBandwidth);
                const r = t.getVariantTracks();
                for(let e in r){
                    const t = r[e];
                    if (t.active && "video" === t.type) {
                        s = this.getNpawUtils().buildRenditionString(t.width, t.height, t.bandwidth);
                        break;
                    }
                }
                return s;
            }
            _getShaka(e) {
                const t = e.getTech();
                return t.shakaPlayer || t._shakaplayerInstance;
            }
        }
        class r {
            getTech(e) {
                const t = e.getTech();
                return t.vhs || t.hls || t.hls_ || t.hlsplayer;
            }
            getRendition(e) {
                let t = null;
                const i = this.getTech(e).currentLevel;
                if (void 0 !== i && -1 !== i && this.getTech(e).levels) {
                    const s = this.getTech(e).levels[i];
                    s && (t = this.getNpawUtils().buildRenditionString(s.width, s.height, s.bitrate));
                }
                return t;
            }
            isUsed(e) {
                return !!this.getTech(e);
            }
            getHls(e) {
                return this.getTech(e);
            }
            getResource(e) {
                let t = null;
                return this.getTech(e) && this.getTech(e).url ? t = this.getTech(e).url : this.getHls(e) && this.getHls(e).source_ && (t = this.getHls(e).source_.src), t;
            }
            getBitrate(e) {
                let t = null;
                const i = this.getTech(e).currentLevel;
                if (void 0 !== i && -1 !== i && this.getTech(e).levels) {
                    const s = this.getTech(e).levels[i];
                    s && s.bitrate && (t = s.bitrate);
                }
                return t;
            }
        }
        class a {
            getTech(e) {
                return e.getTech().hlsProvider;
            }
            getRendition(e) {
                let t;
                const i = this.getTech(e).getQuality();
                return void 0 !== i && i.width && i.height && i.bitrate && (t = this.getNpawUtils().buildRenditionString(i.width, i.height, i.bitrate)), t;
            }
            isUsed(e) {
                return !!this.getTech(e);
            }
            getHls(e) {
                return this.getTech(e);
            }
            getResource(e) {
                let t = null;
                const i = this.getTech(e).getQuality();
                return void 0 !== i && i.url && i._urlId && (t = i.url[i._urlId]), t;
            }
            getBitrate(e) {
                let t;
                const i = this.getTech(e).getQuality();
                return void 0 !== i && i.bitrate && (t = i.bitrate), t;
            }
        }
        class n {
            getBitrate(e) {
                return e.player.dash.shakaPlayer.getStats().streamBandwidth;
            }
            getResource(e) {
                let t = "";
                const i = e.player.dash.shakaPlayer;
                return "function" == typeof i.getManifestUri ? t = i.getManifestUri() : "function" == typeof i.getAssetUri && (t = i.getAssetUri()), t;
            }
            isUsed(e) {
                return e.player.dash && e.player.dash.shakaPlayer;
            }
            getRendition(e) {
                const t = e.player.dash.shakaPlayer, i = t.getStats();
                let s = this.getNpawUtils().buildRenditionString(i.width, i.height, i.streamBandwidth);
                const r = t.getVariantTracks();
                for(let e in r){
                    const t = r[e];
                    t.active && "video" === t.type && (s = this.getNpawUtils().buildRenditionString(t.width, t.height, t.bandwidth));
                }
                return s;
            }
        }
        class h {
            getResource(e) {
                return this._getDashPlayer(e).getSource();
            }
            _getDashPlayer(e) {
                return e.player.dash.mediaPlayer;
            }
            isUsed(e) {
                return e.player.dash && e.player.dash.mediaPlayer && !e.player.dash.shakaPlayer;
            }
            getRendition(e) {
                let t = null;
                const i = this._getDashPlayer(e);
                if (i) {
                    const e = i.getQualityFor("video");
                    if (e) {
                        const s = i.getBitrateInfoListFor("video")[e];
                        s && (t = this.getNpawUtils().buildRenditionString(s.width, s.height, s.bitrate));
                    }
                }
                return t;
            }
            getBitrate(e) {
                let t = null;
                const i = this._getDashPlayer(e);
                if (i) {
                    const e = i.getQualityFor("video");
                    e && (t = i.getBitrateInfoListFor("video")[e].bitrate);
                }
                return t;
            }
        }
        class l {
            isUsed(e) {
                return !!this.getHls(e);
            }
            getRendition(e) {
                let t = null;
                const i = this.getHls(e).playlists.media();
                if (e.player.qualityLevels) {
                    const i = e.player.qualityLevels(), s = i[i.selectedIndex];
                    s && (t = this.getNpawUtils().buildRenditionString(s.width, s.height, s.bitrate));
                } else if (i && i.attributes) {
                    const e = i.attributes;
                    e.RESOLUTION ? t = this.getNpawUtils().buildRenditionString(e.RESOLUTION.width, e.RESOLUTION.height, e.BANDWIDTH) : e.BANDWIDTH ? t = this.getNpawUtils().buildRenditionString(e.BANDWIDTH) : e.NAME && (t = e.NAME);
                }
                return t;
            }
            getHls(e) {
                return e.getTech().vhs || e.getTech().hls || e.getTech().hls_ || e.getTech().hlsplayer;
            }
            getTotalBytes(e) {
                const t = this.getHls(e);
                let i = t.bytesReceived;
                return !i && t.stats && (i = t.stats.mediaBytesTransferred - e.acumBytes), i;
            }
            getBitrate(e) {
                let t = null;
                const i = this.getHls(e).playlists.media();
                if (e.player.qualityLevels) {
                    const i = e.player.qualityLevels(), s = i[i.selectedIndex];
                    s && (t = s.bitrate);
                } else i && i.attributes && i.attributes.BANDWIDTH ? t = i.attributes.BANDWIDTH : e.player.tech_ && e.player.tech_.vhs && e.player.tech_.vhs.stats ? t = e.player.tech_.vhs.stats.bandwidth : e.player.tech_ && e.player.tech_.hls && e.player.tech_.hls.bandwidth ? t = e.player.tech_.hls.bandwidth : e.player.hls && e.player.hls.bandwidth && (t = e.player.hls.bandwidth);
                return t;
            }
        }
        class d {
            initProperties() {
                this.isGeneric = !0;
            }
            getVersion() {
                return "7.0.9-videojs-ads-jsclass";
            }
            registerListeners() {
                if (this.references = {
                    adstart: this.adStartListener.bind(this),
                    adend: this.adEndListener.bind(this),
                    adskip: this.adSkipListener.bind(this),
                    adserror: this.errorListener.bind(this),
                    "ads-click": this.clickListener.bind(this)
                }, this.player) for(var e in this.references)this.player.on(e, this.references[e]);
            }
            unregisterListeners() {
                if (this.player && this.references) {
                    for(var e in this.references)this.player.off(e, this.references[e]);
                    delete this.references;
                }
            }
            adStartListener(e) {
                this.firePlayerLog("adStartListener", {}), this.fireStart(), this.fireJoin();
            }
            adEndListener(e) {
                this.firePlayerLog("adEndListener", {}), this.fireStop();
            }
            adSkipListener(e) {
                this.firePlayerLog("adSkipListener", {}), this.fireSkip();
            }
            errorListener(e) {
                this.firePlayerLog("adErrorListener", {}), this.fireError();
            }
            clickListener(e) {
                this.firePlayerLog("adClickListener", {}), this.fireClick();
            }
        }
        class o {
            isUsed() {
                return "undefined" != typeof google && this.player.ima3 && this.player.ads;
            }
            getVersion() {
                let e = null;
                return "undefined" != typeof google && google.ima && (e = "bcove-ima-jsclass " + google.ima.VERSION), e;
            }
            getPlayhead() {
                let e = this.getVideo().getAdapter().player;
                return this.player.ima3 && this.player.ima3 && this.player.ima3.adPlayer && (e = this.player.ima3.adPlayer), e.currentTime();
            }
            getDuration() {
                let e = null;
                if (this.player.ads && this.player.ads.ad && this.player.ads.ad.duration) e = this.player.ads.ad.duration;
                else {
                    let t = this.getVideo().getAdapter().player;
                    this.player.ima3 && (t = this.player.ima3.adPlayer), e = t && t.duration ? t.duration() : null;
                }
                return e;
            }
            getPosition() {
                let e = this.getNpawReference().Constants.AdPosition.Midroll;
                if (this.player.ads && this.player.ads.ad) switch(this.player.ads.ad.type){
                    case "PREROLL":
                        e = this.getNpawReference().Constants.AdPosition.Preroll;
                        break;
                    case "MIDROLL":
                        e = this.getNpawReference().Constants.AdPosition.Midroll;
                        break;
                    case "POSTROLL":
                        e = this.getNpawReference().Constants.AdPosition.Postroll;
                }
                else this.getVideo().getAdapter().getPlayhead() >= this.getVideo().getAdapter().getDuration() && (e = this.getNpawReference().Constants.AdPosition.Postroll);
                return this.getVideo().getAdapter().flags.isJoined || (e = this.getNpawReference().Constants.AdPosition.Preroll), e;
            }
            getResource() {
                let e = "unknown";
                return this.player.ima3 && (e = this.player.ima3.currentAd.getMediaUrl()), e;
            }
            getTitle() {
                let e = null;
                return this.player.ima3 && this.player.ima3.currentAd && (e = this.player.ima3.currentAd.getTitle()), e;
            }
            getPlayerVersion() {
                let e = null;
                return this.player.ima3 && (e = this.player.ima3.VERSION), e;
            }
            getGivenBreaks() {
                let e = null;
                return this.player.ima3 && (e = this.player.ima3.adsManager.getCuePoints().length), e;
            }
            getBreaksTime() {
                let e = null;
                if (this.player.ima3) {
                    const t = this.player.ima3.adsManager.getCuePoints();
                    for(let e in t)(!t[e] && 0 !== t[e] || -1 === t[e]) && (t[e] = this.getVideo().getAdapter().getDuration());
                    e = t;
                }
                return e;
            }
            getGivenAds() {
                let e = null;
                return this.player.ima3 && this.player.ima3.currentAd && this.player.ima3.currentAd.getAdPodInfo() && (e = this.player.ima3.currentAd.getAdPodInfo().getTotalAds()), e;
            }
            getAudioEnabled() {
                let e = null;
                return e = !this.player.muted() && !!this.player.volume(), e;
            }
            getIsSkippable() {
                let e = !1;
                return this.player.ima3 && (e = this.player.ima3.currentAd && this.player.ima3.currentAd.isSkippable()), e;
            }
            getIsFullscreen() {
                let e = null;
                if (this.getPlugin().deviceDetector.isIphone()) e = !this.getPlugin().deviceDetector.isInBackground;
                else {
                    let t = null;
                    this.player.ima3 && (t = this.player.ima3.el), e = !!t && window.innerHeight <= t.clientHeight + 30 && window.innerWidth <= t.clientWidth + 30;
                }
                return e;
            }
            getIsVisible() {
                let e = null;
                return this.getPlugin().deviceDetector.isIphone() ? e = !this.getPlugin().deviceDetector.isInBackground : this.player.ima3 && (e = this.getNpawUtils().calculateAdViewability(this.player.ima3.el)), e;
            }
            getBitrate() {
                let e = -1;
                return this.player.ima3 && this.player.ima3.currentAd && this.player.ima3.currentAd.getVastMediaBitrate() && (e = this.player.ima3.currentAd.getVastMediaBitrate()), e;
            }
            getCreativeId() {
                let e = null;
                return this.player.ima3 && this.player.ima3.currentAd ? e = this.player.ima3.currentAd.getCreativeAdId() || this.player.ima3.currentAd.getCreativeId() : this.titles && (e = this.titles[(this.getVideo().requestBuilder.lastSent.adNumber || 1) - 1]._creativeId), e;
            }
            registerListeners() {
                if (this.monitorPlayhead(!0, !1), this.references = {
                    "ima3-started": this.startJoinListener.bind(this),
                    "ima3-paused": this.pausedListener.bind(this),
                    "ima3-resumed": this.resumedListener.bind(this),
                    "ima3-complete": this.adEndedListener.bind(this),
                    "ima3-skipped": this.skippedListener.bind(this),
                    "ima3-ad-error": this.errorListener.bind(this),
                    "ads-pod-ended": this.podEndListener.bind(this),
                    "ads-click": this.clickListener.bind(this),
                    "ads-first-quartile": this.firstQuartileListener.bind(this),
                    "ads-midpoint": this.secondQuartileListener.bind(this),
                    "ads-third-quartile": this.thirdQuartileListener.bind(this)
                }, this.player) for(let e in this.references)this.player.on(e, this.references[e]);
            }
            startJoinListener(e) {
                this.getVideo().getAdapter() && this.getVideo().getAdapter().firePause(), this.fireStart(), this.fireJoin();
            }
            pausedListener(e) {
                this.firePause();
            }
            resumedListener(e) {
                this.fireResume();
            }
            skippedListener(e) {
                this.fireSkip(), this.getVideo().getAdapter() && this.getVideo().getAdapter().fireResume();
            }
            adEndedListener(e) {
                const t = this.getVideo().requestBuilder.lastSent.adPosition === this.getNpawReference().Constants.AdPosition.Preroll ? 0 : this.getVideo().getAdapter().lastPlayhead;
                this.fireStop({
                    playhead: t,
                    adPlayhead: this.getDuration()
                });
            }
            errorListener(e) {
                if (this.player.ima3) {
                    if (e.getError && e.getError()) {
                        const t = e.getError();
                        this.fireError(t.getCode(), t.getMessage());
                    } else this.fireError();
                }
            }
            clickListener(e) {
                if (this.player.ima3) {
                    let e = null;
                    this.player.ima3.currentAd && this.player.ima3.currentAd.g && (e = this.player.ima3.currentAd.g.clickThroughUrl), this.fireClick(e);
                }
            }
            firstQuartileListener(e) {
                this.fireQuartile(1);
            }
            secondQuartileListener(e) {
                this.fireQuartile(2);
            }
            thirdQuartileListener(e) {
                this.fireQuartile(3);
            }
            podEndListener(e) {
                this.fireBreakStop();
            }
            unregisterListeners() {
                if (this.monitor && this.monitor.stop(), this.player && this.references) {
                    for(let e in this.references)this.player.off(e, this.references[e]);
                    delete this.references;
                }
            }
            adPlayerErrorListener(e) {
                const t = e.data.AdError;
                [
                    1012,
                    1005,
                    301,
                    402,
                    302
                ].indexOf(t.getErrorCode()) >= 0 ? this.fireManifest(youbora.Constants.ManifestError.NO_RESPONSE, t.getMessage()) : [
                    1007,
                    1009,
                    303
                ].indexOf(t.getErrorCode()) >= 0 ? this.fireManifest(youbora.Constants.ManifestError.EMPTY, t.getMessage()) : [
                    403,
                    100,
                    503,
                    101,
                    102
                ].indexOf(t.getErrorCode()) >= 0 ? this.fireManifest(youbora.Constants.ManifestError.WRONG, t.getMessage()) : this.fireError(t.getErrorCode(), t.getMessage());
            }
        }
        class g {
            getVersion() {
                return "7.0.3-jwplayer-ads-jsclass";
            }
            getDuration() {
                return this.duration;
            }
            getResource() {
                return this.resource;
            }
            getPlayhead() {
                return this.playhead;
            }
            getTitle() {
                return this.title;
            }
            getPosition() {
                var e = this.getNpawReference().Constants.AdPosition.Midroll;
                return this.getVideo().getAdapter() && !this.getVideo().getAdapter().flags.isJoined ? e = this.getNpawReference().Constants.AdPosition.Preroll : this.position !== this.getNpawReference().Constants.AdPosition.Preroll && this.position !== this.getNpawReference().Constants.AdPosition.Midroll && this.position !== this.getNpawReference().Constants.AdPosition.Postroll || (e = this.position), e;
            }
            getGivenBreaks() {
                var e = null;
                return this.manager && this.manager.adsManager && this.manager.adsManager.getCuePoints && (e = this.manager.adsManager.getCuePoints().length), e;
            }
            getBreaksTime() {
                var e = null;
                if (this.manager && this.manager.adsManager && this.manager.adsManager.getCuePoints) {
                    var t = this.manager.adsManager.getCuePoints();
                    for(var i in t)(!t[i] && 0 !== t[i] || -1 === t[i]) && (t[i] = this.getVideo()._adapter.getDuration());
                    e = t;
                }
                return e;
            }
            getGivenAds() {
                return this.pod && this.pod.getTotalAds ? this.pod.getTotalAds() : null;
            }
            getAudioEnabled() {
                return !this.player.getMute();
            }
            getIsSkippable() {
                return this.skippable;
            }
            getIsFullscreen() {
                if ("function" == typeof this.player.getFullscreen) return this.player.getFullscreen();
                var e = this.player.getContainer();
                return window.innerHeight <= e.clientHeight + 30 && window.innerWidth <= e.clientWidth + 30;
            }
            getIsVisible() {
                return this.getNpawUtils().calculateAdViewability(this.player.getContainer());
            }
            getCreativeId() {
                return this.creativeId;
            }
            registerListeners() {
                for(var e in this.monitorPlayhead(!0, !1, 1200), this.references = {
                    adTime: this.adTimeListener.bind(this),
                    adStarted: this.adStartedListener.bind(this),
                    adImpression: this.adImpressionListener.bind(this),
                    adPause: this.adPauseListener.bind(this),
                    adPlay: this.adPlayListener.bind(this),
                    adSkipped: this.adSkippedListener.bind(this),
                    adComplete: this.adCompleteListener.bind(this),
                    adClick: this.adClickListener.bind(this),
                    adError: this.adErrorListener.bind(this),
                    adsManager: this.managerListener.bind(this)
                }, this.references)this.player.on(e, this.references[e]);
            }
            unregisterListeners() {
                if (this.monitor && this.monitor.stop(), this.player && this.references) {
                    for(var e in this.references)this.player.off(e, this.references[e]);
                    delete this.references;
                }
            }
            managerListener(e) {
                this.manager = e;
            }
            adTimeListener(e) {
                this.playhead = e.position, this.duration = e.duration, this.getVideo()._adapter && this.getVideo()._adapter.firePause(), e.ima && e.ima.ad && this._imaMetadata(e.ima.ad), this.firstStarted || (this.fireStart(), this.firstStarted = !0), this.fireJoin(), this._quartileHandler();
            }
            _imaMetadata(e) {
                this.creativeId = e.getCreativeId() || e.getCreativeAdId(), this.resource = e.getMediaUrl(), this.clickThrough = e.g ? e.g.clickThroughUrl : null, this.pod = e.getAdPodInfo(), this.skippable = !(e.getSkipTimeOffset() <= 0);
            }
            _quartileHandler() {
                var e = this.playhead / this.duration;
                e > .75 ? this.fireQuartile(3) : e > .5 ? this.fireQuartile(2) : e > .25 && this.fireQuartile(1);
            }
            adStartedListener(e) {
                this.position = e.adposition, this.resource = e.mediafile && e.mediafile.file ? e.mediafile.file : e.tag, this.title = e.adtitle;
            }
            adImpressionListener(e) {
                this.position = e.adposition, this.resource = e.mediafile && e.mediafile.file ? e.mediafile.file : e.tag, this.title = e.adtitle || e.tag, this.clickThrough = e.clickThroughUrl;
            }
            adPauseListener(e) {
                this.firePause();
            }
            adPlayListener(e) {
                this.fireResume();
            }
            adSkippedListener(e) {
                this.fireSkip(), this.firstStarted = !1;
            }
            adCompleteListener(e) {
                this.fireStop(), this.firstStarted = !1, this.resetValues();
            }
            adClickListener(e) {
                this.fireClick(this.clickThrough);
            }
            adErrorListener(e) {
                if (e.message) {
                    var t = e.message.toLowerCase();
                    t.indexOf("ad tag empty") > -1 ? this.fireManifest(this.getNpawReference().Constants.ManifestError.EMPTY, e.message) : t.indexOf("error loading ad tag") > -1 || t.indexOf("invalid ad tag") > -1 || t.indexOf("any valid ads") > -1 ? this.fireManifest(this.getNpawReference().Constants.ManifestError.WRONG, e.message) : !e.adErrorCode || 60006 !== e.adErrorCode && 10403 !== e.adErrorCode ? (this.fireError(e.adErrorCode, e.message), this.fireStop(), this.resetValues(), t.indexOf("timeout") > -1 && this.fireBreakStop()) : this.fireManifest(this.getNpawReference().Constants.ManifestError.WRONG, e.message);
                }
            }
            resetValues() {
                this.playhead = void 0, this.duration = void 0, this.position = void 0, this.resource = void 0, this.title = void 0;
            }
        }
        class p {
            getResource(e) {
                var t = "", i = this._getShaka(e);
                return "function" == typeof i.getManifestUri ? t = i.getManifestUri() : "function" == typeof i.getCurrentSrc && (t = i.getCurrentSrc()), t;
            }
            getBitrate(e) {
                var t = -1, i = this._getShaka(e);
                if ("function" == typeof i.getStats) t = i.getStats().streamBandwidth;
                else if ("function" == typeof i.getVideoTracks && "function" == typeof i.getVideoTrackCurrentIndex) {
                    var s = i.getVideoTrackCurrentIndex(), r = i.getVideoTracks();
                    for(var a in r){
                        var n = r[a];
                        n.index == s && (t = n.bitrate);
                    }
                }
                return t;
            }
            isUsed(e) {
                return !!this._getShaka(e);
            }
            getRendition(e) {
                var t = this._getShaka(e), i = t.getStats(), s = this.getNpawUtils().buildRenditionString(i.width, i.height, i.streamBandwidth), r = t.getVariantTracks();
                for(var a in r){
                    var n = r[a];
                    if (n.active && "video" === n.type) {
                        s = this.getNpawUtils().buildRenditionString(n.width, n.height, n.bandwidth);
                        break;
                    }
                }
                return s;
            }
            _getShaka(e) {
                var t = e.getTech();
                return t.shakaPlayer || t._shakaplayerInstance;
            }
        }
        class u {
            getTech(e) {
                var t = e.getTech();
                return t.vhs || t.hls || t.hls_ || t.hlsplayer;
            }
            getRendition(e) {
                var t = null, i = this.getTech(e).currentLevel;
                if (void 0 !== i && -1 !== i && this.getTech(e).levels) {
                    var s = this.getTech(e).levels[i];
                    s && (t = this.getNpawUtils().buildRenditionString(s.width, s.height, s.bitrate));
                }
                return t;
            }
            isUsed(e) {
                return !!this.getTech(e);
            }
            getHls(e) {
                return this.getTech(e);
            }
            getResource(e) {
                var t = null;
                return this.getTech(e) && this.getTech(e).url ? t = this.getTech(e).url : this.getHls(e) && this.getHls(e).source_ && (t = this.getHls(e).source_.src), t;
            }
            getBitrate(e) {
                var t = null, i = this.getTech(e).currentLevel;
                if (void 0 !== i && -1 !== i && this.getTech(e).levels) {
                    var s = this.getTech(e).levels[i];
                    s && s.bitrate && (t = s.bitrate);
                }
                return t;
            }
        }
        class y {
            getBitrate(e) {
                return e.player.dash.shakaPlayer.getStats().streamBandwidth;
            }
            getResource(e) {
                var t = "", i = e.player.dash.shakaPlayer;
                return "function" == typeof i.getManifestUri ? t = i.getManifestUri() : "function" == typeof i.getAssetUri && (t = i.getAssetUri()), t;
            }
            isUsed(e) {
                return e.player.dash && e.player.dash.shakaPlayer;
            }
            getRendition(e) {
                var t = e.player.dash.shakaPlayer, i = t.getStats(), s = this.getNpawUtils().buildRenditionString(i.width, i.height, i.streamBandwidth), r = t.getVariantTracks();
                for(var a in r){
                    var n = r[a];
                    n.active && "video" === n.type && (s = this.getNpawUtils().buildRenditionString(n.width, n.height, n.bandwidth));
                }
                return s;
            }
        }
        class f {
            getResource(e) {
                return this._getDashPlayer(e).getSource();
            }
            _getDashPlayer(e) {
                return e.player.dash.mediaPlayer;
            }
            isUsed(e) {
                return e.player.dash && e.player.dash.mediaPlayer && !e.player.dash.shakaPlayer;
            }
            getRendition(e) {
                var t = null, i = this._getDashPlayer(e);
                if (i) {
                    var s = i.getQualityFor("video");
                    if (s) {
                        var r = i.getBitrateInfoListFor("video")[s];
                        r && (t = this.getNpawUtils().buildRenditionString(r.width, r.height, r.bitrate));
                    }
                }
                return t;
            }
            getBitrate(e) {
                var t = null, i = this._getDashPlayer(e);
                if (i) {
                    var s = i.getQualityFor("video");
                    s && (t = i.getBitrateInfoListFor("video")[s].bitrate);
                }
                return t;
            }
        }
        class c {
            isUsed(e) {
                return !!this.getHls(e);
            }
            getRendition(e) {
                var t = null, i = this.getHls(e).playlists.media();
                if (e.player.qualityLevels) {
                    var s = e.player.qualityLevels(), r = s[s.selectedIndex];
                    r && (t = this.getNpawUtils().buildRenditionString(r.width, r.height, r.bitrate));
                } else if (i && i.attributes) {
                    var a = i.attributes;
                    a.RESOLUTION ? t = this.getNpawUtils().buildRenditionString(a.RESOLUTION.width, a.RESOLUTION.height, a.BANDWIDTH) : a.BANDWIDTH ? t = this.getNpawUtils().buildRenditionString(a.BANDWIDTH) : a.NAME && (t = a.NAME);
                }
                return t;
            }
            getHls(e) {
                return e.getTech().vhs || e.getTech().hls || e.getTech().hls_ || e.getTech().hlsplayer;
            }
            getTotalBytes(e) {
                var t = this.getHls(e), i = t.bytesReceived;
                return !i && t.stats && (i = t.stats.mediaBytesTransferred - e.acumBytes), i;
            }
            getBitrate(e) {
                var t = null, i = this.getHls(e).playlists.media();
                if (e.player.qualityLevels) {
                    var s = e.player.qualityLevels(), r = s[s.selectedIndex];
                    r && (t = r.bitrate);
                } else i && i.attributes && i.attributes.BANDWIDTH ? t = i.attributes.BANDWIDTH : e.player.tech_ && e.player.tech_.vhs && e.player.tech_.vhs.stats ? t = e.player.tech_.vhs.stats.bandwidth : e.player.tech_ && e.player.tech_.hls && e.player.tech_.hls.bandwidth ? t = e.player.tech_.hls.bandwidth : e.player.hls && e.player.hls.bandwidth && (t = e.player.hls.bandwidth);
                return t;
            }
        }
        class L {
            initProperties() {
                this.isGeneric = !0;
            }
            getVersion() {
                return "7.0.4-videojs-ads-jsclass";
            }
            registerListeners() {
                if (this.references = {
                    adstart: this.adStartListener.bind(this),
                    adend: this.adEndListener.bind(this),
                    adskip: this.adSkipListener.bind(this),
                    adserror: this.errorListener.bind(this),
                    "ads-click": this.clickListener.bind(this),
                    "ima3-first-quartile": this.firstQuartileListener.bind(this),
                    "ima3-midpoint": this.secondQuartileListener.bind(this),
                    "ima3-third-quartile": this.thirdQuartileListener.bind(this),
                    "ads-first-quartile": this.firstQuartileListener.bind(this),
                    "ads-midpoint": this.secondQuartileListener.bind(this),
                    "ads-third-quartile": this.thirdQuartileListener.bind(this)
                }, this.player) for(var e in this.references)this.player.on(e, this.references[e]);
            }
            firstQuartileListener(e) {
                this.fireQuartile(1);
            }
            secondQuartileListener(e) {
                this.fireQuartile(2);
            }
            thirdQuartileListener(e) {
                this.fireQuartile(3);
            }
            unregisterListeners() {
                if (this.player && this.references) {
                    for(var e in this.references)this.player.off(e, this.references[e]);
                    delete this.references;
                }
            }
            adStartListener(e) {
                this.firePlayerLog("adStartListener", {}), this.fireStart(), this.fireJoin();
            }
            adEndListener(e) {
                this.firePlayerLog("adEndListener", {}), this.fireStop();
            }
            adSkipListener(e) {
                this.firePlayerLog("adSkipListener", {}), this.fireSkip();
            }
            errorListener(e) {
                this.firePlayerLog("adErrorListener", {}), this.fireError();
            }
            clickListener(e) {
                this.firePlayerLog("adClickListener", {}), this.fireClick();
            }
        }
        class P {
            isUsed() {
                return this.player.ima3 && this.player.ads;
            }
            getVersion() {
                var e;
                return "undefined" != typeof google && google.ima && (e = "bcove-ima-jsclass " + google.ima.VERSION), e;
            }
            getPlayhead() {
                var e = this.getVideo().getAdapter().player;
                return this.player.ads && this.player.ads.ad ? this.player.ads.ad.currentTime : e.currentTime();
            }
            getDuration() {
                let e;
                if (this.player.ads && this.player.ads.ad && this.player.ads.ad.duration) e = this.player.ads.ad.duration;
                else {
                    var t = this.getVideo().getAdapter().player;
                    if (this.player.ima3 && this.player.ima3.currentAdEventInfo) return this.player.ima3.currentAdEventInfo.creativeLength[0];
                    e = t && t.duration ? t.duration() : null;
                }
                return e;
            }
            getPosition() {
                let e = this.getNpawReference().Constants.AdPosition.Midroll;
                const t = this.getVideo().getAdapter();
                if (this.player.ads && this.player.ads.ad) switch(this.player.ads.ad.type){
                    case "PREROLL":
                        e = this.getNpawReference().Constants.AdPosition.Preroll;
                        break;
                    case "MIDROLL":
                        e = this.getNpawReference().Constants.AdPosition.Midroll;
                        break;
                    case "POSTROLL":
                        e = this.getNpawReference().Constants.AdPosition.Postroll;
                }
                else t.flags.isJoined ? t.getPlayhead() > .1 && t.getPlayhead() < t.getDuration() ? e = this.getNpawReference().Constants.AdPosition.Midroll : t.getPlayhead() >= t.getDuration() && (e = this.getNpawReference().Constants.AdPosition.Postroll) : e = this.getNpawReference().Constants.AdPosition.Preroll;
                return e;
            }
            getResource() {
                var e;
                return this.player.ima3 && (e = this.player.ima3.currentAd.getMediaUrl()), e;
            }
            getTitle() {
                var e;
                return this.player.ima3 && this.player.ima3.currentAd && (e = this.player.ima3.currentAd.getTitle()), e;
            }
            getPlayerVersion() {
                var e;
                return this.player.ima3 && (e = this.player.ima3.VERSION), e;
            }
            getGivenBreaks() {
                var e;
                return this.player.ima3 && (e = this.player.ima3.adsManager.getCuePoints().length), e;
            }
            getBreaksTime() {
                var e;
                if (this.player.ima3) {
                    var t = this.player.ima3.adsManager.getCuePoints();
                    for(var i in t)(!t[i] && 0 !== t[i] || -1 === t[i]) && (t[i] = this.getVideo().getAdapter().getDuration());
                    e = t;
                }
                return e;
            }
            getGivenAds() {
                var e;
                return this.player.ima3 && this.player.ima3.currentAd && this.player.ima3.currentAd.getAdPodInfo() && (e = this.player.ima3.currentAd.getAdPodInfo().getTotalAds()), e;
            }
            getAudioEnabled() {
                return !this.player.muted() && !!this.player.volume();
            }
            getIsSkippable() {
                var e = !1;
                return this.player.ima3 && (e = this.player.ima3.currentAd && this.player.ima3.currentAd.isSkippable()), e;
            }
            getIsFullscreen() {
                var e, t;
                return this.getPlugin().deviceDetector.isIphone() ? e = !this.getPlugin().deviceDetector.isInBackground : (this.player.ima3 && (t = this.player.ima3.el), e = !!t && window.innerHeight <= t.clientHeight + 30 && window.innerWidth <= t.clientWidth + 30), e;
            }
            getIsVisible() {
                var e;
                return this.getPlugin().deviceDetector.isIphone() ? e = !this.getPlugin().deviceDetector.isInBackground : this.player.ima3 && (e = this.getNpawUtils().calculateAdViewability(this.player.ima3.el)), e;
            }
            getBitrate() {
                var e;
                return this.player.ima3 && this.player.ima3.currentAd && this.player.ima3.currentAd.getVastMediaBitrate() && (e = this.player.ima3.currentAd.getVastMediaBitrate(), this.lastBitrate = e), this.lastBitrate && !e ? this.lastBitrate : -1;
            }
            getCreativeId() {
                var e;
                return this.player.ima3 && this.player.ima3.currentAd ? e = this.player.ima3.currentAd.getCreativeAdId() || this.player.ima3.currentAd.getCreativeId() : this.titles && (e = this.titles[(this.getVideo().requestBuilder.lastSent.adNumber || 1) - 1]._creativeId), e;
            }
            registerListeners() {
                if (this.monitorPlayhead(!0, !1), this.references = {
                    "ads-ad-started": this.startJoinListener.bind(this),
                    "ima3-paused": this.pausedListener.bind(this),
                    "ima3-resumed": this.resumedListener.bind(this),
                    "ima3-complete": this.adEndedListener.bind(this),
                    "ima3-skipped": this.skippedListener.bind(this),
                    "ima3-ad-error": this.errorListener.bind(this),
                    "ima3-first-quartile": this.firstQuartileListener.bind(this),
                    "ima3-midpoint": this.secondQuartileListener.bind(this),
                    "ima3-third-quartile": this.thirdQuartileListener.bind(this),
                    "ads-pod-ended": this.podEndListener.bind(this),
                    "ads-click": this.clickListener.bind(this),
                    "ads-first-quartile": this.firstQuartileListener.bind(this),
                    "ads-midpoint": this.secondQuartileListener.bind(this),
                    "ads-third-quartile": this.thirdQuartileListener.bind(this)
                }, this.player) for(var e in this.references)this.player.on(e, this.references[e]);
            }
            startJoinListener(e) {
                this.getVideo().getAdapter() && this.getVideo().getAdapter().firePause(), this.fireStart(), this.fireJoin();
            }
            pausedListener(e) {
                this.firePause();
            }
            resumedListener(e) {
                this.fireResume();
            }
            skippedListener(e) {
                this.fireSkip(), this.getVideo().getAdapter() && this.getVideo().getAdapter().fireResume();
            }
            adEndedListener(e) {
                var t = this.getVideo().requestBuilder.lastSent.adPosition === this.getNpawReference().Constants.AdPosition.Preroll ? 0 : this.getVideo().getAdapter().lastPlayhead;
                this.fireStop({
                    playhead: t,
                    adPlayhead: this.getDuration()
                }), this.lastBitrate = void 0;
            }
            errorListener(e) {
                if (this.player.ima3) {
                    if (e.getError && e.getError()) {
                        var t = e.getError();
                        this.fireError(t.getCode(), t.getMessage());
                    } else this.fireError();
                }
            }
            clickListener(e) {
                var t;
                this.player.ima3 && (this.player.ima3.currentAd && this.player.ima3.currentAd.g && (t = this.player.ima3.currentAd.g.clickThroughUrl), this.fireClick(t));
            }
            firstQuartileListener(e) {
                this.fireQuartile(1);
            }
            secondQuartileListener(e) {
                this.fireQuartile(2);
            }
            thirdQuartileListener(e) {
                this.fireQuartile(3);
            }
            podEndListener(e) {
                this.fireBreakStop();
            }
            unregisterListeners() {
                if (this.monitor && this.monitor.stop(), this.player && this.references) {
                    for(var e in this.references)this.player.off(e, this.references[e]);
                    delete this.references;
                }
            }
            adPlayerErrorListener(e) {
                var t = e.data.AdError;
                [
                    1012,
                    1005,
                    301,
                    402,
                    302
                ].indexOf(t.getErrorCode()) >= 0 ? this.fireManifest(youbora.Constants.ManifestError.NO_RESPONSE, t.getMessage()) : [
                    1007,
                    1009,
                    303
                ].indexOf(t.getErrorCode()) >= 0 ? this.fireManifest(youbora.Constants.ManifestError.EMPTY, t.getMessage()) : [
                    403,
                    100,
                    503,
                    101,
                    102
                ].indexOf(t.getErrorCode()) >= 0 ? this.fireManifest(youbora.Constants.ManifestError.WRONG, t.getMessage()) : this.fireError(t.getErrorCode(), t.getMessage());
            }
        }
        class m {
            isUsed() {
                return !this.player.ima3 && this.player.ads;
            }
            getVersion() {
                return "7.0.4-videojs-bcove-ads-jsclass";
            }
            getPlayhead() {
                if (this.player.ads.ad) return this.player.ads.ad.currentTime;
            }
            getPosition() {
                switch(this.player.ads.pod.ads_pod_index){
                    case 0:
                        return this.getNpawReference().Constants.AdPosition.Preroll;
                    case -1:
                        return this.getNpawReference().Constants.AdPosition.Postroll;
                }
                return this.getNpawReference().Constants.AdPosition.Midroll;
            }
            getResource() {
                if (this.player.ads.currentSrc) return this.player.ads.currentSrc;
            }
            getTitle() {
                if (this.player.ads.ad && this.player.ads.ad.title) return this.player.ads.ad.title;
            }
            getDuration() {
                if (this.player.ads.ad && this.player.ads.ad.duration) return this.lastDuration = this.player.ads.ad.duration, this.lastDuration;
            }
            getPlayerName() {
                return "bcove-ads";
            }
            getPlayerVersion() {
                return this.player.ads.VERSION;
            }
            registerListeners() {
                for(var e in this.monitorPlayhead(!0, !1), this.references = [], this.references["ads-ad-started"] = this.adStartListener.bind(this), this.references["ads-pause"] = this.adPausedListener.bind(this), this.references["ads-play"] = this.adResumedListener.bind(this), this.references["ads-ad-ended"] = this.adEndedListener.bind(this), this.references["ima3-skipped"] = this.adSkippedListener.bind(this), this.references["ima3-ad-error"] = this.errorListener.bind(this), this.references.adserror = this.errorListener.bind(this), this.references["ads-click"] = this.clickListener.bind(this), this.references["ads-first-quartile"] = this.firstQuartileListener.bind(this), this.references["ads-midpoint"] = this.secondQuartileListener.bind(this), this.references["ads-third-quartile"] = this.thirdQuartileListener.bind(this), this.references)this.player.on(e, this.references[e]);
            }
            firstQuartileListener(e) {
                this.fireQuartile(1);
            }
            secondQuartileListener(e) {
                this.fireQuartile(2);
            }
            thirdQuartileListener(e) {
                this.fireQuartile(3);
            }
            adStartListener(e) {
                this.getVideo().getAdapter() && this.getVideo().getAdapter().firePause(), this.fireStart(), this.fireJoin();
            }
            adPausedListener(e) {
                this.firePause();
            }
            adResumedListener(e) {
                this.fireResume();
            }
            adEndedListener(e) {
                this.fireStop({
                    adPlayhead: this.lastDuration
                });
                const t = this.getVideo().getAdapter();
                t && t.fireResume();
            }
            adSkippedListener(e) {
                this.fireStop({
                    skipped: !0
                });
                const t = this.getVideo().getAdapter();
                t && t.fireResume();
            }
            errorListener(e) {
                this.fireError("Ad error");
            }
            clickListener(e) {
                var t = null;
                this.player.ima3 && this.player.ima3.currentAd && this.player.ima3.currentAd.g && (t = this.player.ima3.currentAd.g.clickThroughUrl), this.fireClick({
                    url: t
                });
            }
            unregisterListeners() {
                if (this.monitor && this.monitor.stop(), this.player && this.references) {
                    for(var e in this.references)this.player.off(e, this.references[e]);
                    this.references = [];
                }
            }
        }
        class v {
            getPosition() {
                var e = this.getNpawReference().Constants.AdPosition, t = e.Midroll, i = this.getVideo();
                const s = "google-ima" === (this.player.ads.currentAdBreak.integration || "");
                if (i) {
                    var r = i.getAdapter();
                    if (r) {
                        const a = i.getPlayhead(), n = i.getDuration() || 0;
                        a < .1 || !s && !r.flags.isJoined ? t = e.Preroll : (s && a + 1 >= n || !s && a + 1 + this.getDuration() >= n) && (t = e.Postroll);
                    }
                }
                return t;
            }
            quartileListener(e) {
                var t = this.getPlayhead() / this.duration;
                t >= .25 && (this.fireQuartile(1), t >= .5 && (this.fireQuartile(2), t >= .75 && this.fireQuartile(3)));
            }
            resumeAdListener(e) {
                this.fireResume();
            }
            getIsVisible() {
                try {
                    var e = this.player ? this.player.element : null;
                } catch (e) {}
                return !!e && this.getNpawUtils().calculateAdViewability(e);
            }
            skipAdListener(e) {
                this.fireSkip();
            }
            _getCurrentAd() {
                var e = this.player.ads, t = null;
                return e && (e.currentAds && e.currentAds[0] ? t = e.currentAds[0] : e && e.currentAdBreak && e.currentAdBreak.ads[this.adCount - 1] && (t = e.currentAdBreak.ads[this.adCount - 1])), t;
            }
            errorAdListener(e) {
                this.fireError(), this.flags.isStarted || (this.adCount = (this.adCount || 0) + 1);
            }
            getGivenBreaks() {
                var e = null;
                return this.player.ads.scheduledAdBreaks && (e = this.player.ads.scheduledAdBreaks.length || e), e;
            }
            getIsSkippable() {
                var e = this._getCurrentAd();
                return !(!e || !e.skipOffset) && e.skipOffset >= 0;
            }
            getIsFullscreen() {
                var e = !1;
                return this.player.element && this.player.element.clientWidth && this.player.element.clientHeight && (e = window.innerHeight <= this.player.element.clientHeight + 30 && window.innerWidth <= this.player.element.clientWidth + 30), e;
            }
            getVersion() {
                return "7.0.13-theoplayer2-ads-jsclass";
            }
            getAudioEnabled() {
                return !this.player.muted && this.player.volume > 0;
            }
            unregisterListeners() {
                if (this.monitor && this.monitor.stop(), this.player && this.player.ads && this.references) {
                    for(var e in this.references)this.player.ads.removeEventListener(e, this.references[e]);
                    delete this.references;
                }
                if (this.player && this.playerReferences) {
                    for(var t in this.playerReferences)this.player.removeEventListener(t, this.playerReferences[t]);
                    delete this.playerReferences;
                }
            }
            breakBeginListener(e) {
                this.adCount = 0, this.actualSlot = e.ad;
            }
            registerListeners() {
                if (this.player.ads) {
                    for(var e in this.isDAI = !1, this.getNpawUtils().logAllEvents(this.player.ads), this.monitorPlayhead(!0, !1, 2e3), this.references = {
                        adbegin: this.playAdListener.bind(this),
                        adend: this.endedAdListener.bind(this),
                        aderror: this.errorAdListener.bind(this),
                        adskip: this.skipAdListener.bind(this),
                        adbreakbegin: this.breakBeginListener.bind(this),
                        adbreakend: this.breakEndListener.bind(this)
                    }, "undefined" != typeof google && google.ima.dai && (this.isDAI = !0), this.playerReferences = {
                        pause: this.pauseAdListener.bind(this),
                        playing: this.resumeAdListener.bind(this),
                        play: this.resumeAdListener.bind(this),
                        timeupdate: this.quartileListener.bind(this)
                    }, this.references)this.player.ads.addEventListener(e, this.references[e]);
                    for(var t in this.playerReferences)this.player.addEventListener(t, this.playerReferences[t]);
                }
            }
            getPlayhead() {
                let e = this.player.currentTime;
                return 1 == this.isDAI && (e = this.player.currentTime - this.playhead), e;
            }
            getDuration() {
                var e = this._getCurrentAd();
                return e && e.duration ? e.duration : this.player.duration;
            }
            pauseAdListener(e) {
                this.firePause();
            }
            breakEndListener(e) {
                this.fireBreakStop();
                const t = this.getVideo().getAdapter();
                t && t.fireResume(), this.getVideo().requestBuilder.lastSent.givenAds = void 0;
                const i = this.getNpawReference().Constants.AdPosition.Postroll;
                this.getPosition() === i && 0 === this.player.ads.scheduledAds.length && this.getVideo().getAdapter().fireStop({}, "breakEndListener");
            }
            getGivenAds() {
                return this.actualSlot ? this.actualSlot.ads.length : null;
            }
            endedAdListener(e) {
                const t = this.getVideo().getAdapter();
                t && !t.flags.isStarted && this.fireStart(), this.fireStop({
                    adPlayhead: this.duration
                });
            }
            getResource() {
                var e = null, t = this._getCurrentAd();
                return t && (t.mediaUrl ? e = t.mediaUrl : t.mediaFiles && (e = t.mediaFiles[0].resourceURI || t.mediaFiles[0].contentURL)), e;
            }
            getTitle() {
                var e = this._getCurrentAd();
                return e && e.title ? e.title : "unknown";
            }
            playAdListener(e) {
                this.adCount = (this.adCount || 0) + 1;
                var t = this.getVideo().getAdapter();
                t && (t.ended = !1, t.fireInit(), t.firePause()), this.fireStart({
                    adPlayhead: "0"
                }), this.fireJoin({
                    adPlayhead: "0"
                }), this.duration = this.getDuration(), this.playhead = this.player.currentTime;
            }
        }
        class A {
            getVersion() {
                return "7.0.3-chromecast-caf-ads-js";
            }
            getPlayerName() {
                return "Chromecast CAF Ads";
            }
            getPlayhead() {
                return this.player.getBreakClipCurrentTimeSec();
            }
            getDuration() {
                return this.player.getBreakClipDurationSec();
            }
            getPosition() {
                var e = this.getNpawReference().Constants.AdPosition.Midroll, t = this.plugin.getAdapter();
                return t && (!t.flags.isJoined || t.getPlayhead() < 1 ? e = this.getNpawReference().Constants.AdPosition.Preroll : t.getPlayhead() + 1 >= t.getDuration() && (e = this.getNpawReference().Constants.AdPosition.Postroll)), e;
            }
            getTitle() {
                return "unknown";
            }
            getResource() {
                return "unknown";
            }
            getCreativeId() {
                return this.clipId;
            }
            getIsVisible() {
                return !0;
            }
            getIsFullscreen() {
                return !0;
            }
            getIsSkippable() {
                return this.isSkippable;
            }
            getGivenAds() {
                return this.adsInBreak;
            }
            getBreaksTime() {
                var e = this.player.getBreaks(), t = [];
                for(var i in e){
                    var s = e[i].position, r = this.plugin ? this.plugin.getAdapter() : null;
                    -1 === s && r && (s = r.getDuration()), -1 === t.indexOf(s) && t.push(s);
                }
                return t;
            }
            getGivenBreaks() {
                var e = this.player.getBreaks(), t = [];
                for(var i in e){
                    var s = e[i].position, r = this.plugin ? this.plugin.getAdapter() : null;
                    -1 === s && r && (s = r.getDuration()), -1 === t.indexOf(s) && t.push(s);
                }
                return t.length;
            }
            registerListeners() {
                var e = cast.framework.events;
                for(var t in this.monitorPlayhead(!0, !1, 1200), this.references = {}, this.references[e.EventType.BREAK_CLIP_LOADING] = this.playListener.bind(this), this.references[e.EventType.BREAK_CLIP_STARTED] = this.joinListener.bind(this), this.references[e.EventType.BREAK_CLIP_ENDED] = this.stopListener.bind(this), this.references[e.EventType.BREAK_STARTED] = this.breakStartListener.bind(this), this.references[e.EventType.BREAK_ENDED] = this.breakEndListener.bind(this), this.references[e.EventType.PAUSE] = this.pauseListener.bind(this), this.references[e.EventType.PLAYING] = this.playingListener.bind(this), this.references)this.player.addEventListener(t, this.references[t]);
            }
            unregisterListeners() {
                if (this.monitor && this.monitor.stop(), this.player && this.references) {
                    for(var e in this.references)this.player.removeEventListener(e, this.references[e]);
                    this.references = {};
                }
            }
            playListener(e) {
                var t = this.plugin.getAdapter();
                t && (t.fireStart({}, "playListener-ads"), t.firePause({}, "playListener-ads")), void 0 !== e ? (this.isSkippable = void 0 !== e.whenSkippable, this.clipId = e.breakClipId) : (this.isSkippable = !1, this.clipId = null);
            }
            joinListener(e) {
                this._quartileTimer || (this._quartileTimer = setInterval(this.sendQuartile.bind(this), 1e3));
                var t = this.plugin ? this.plugin.getAdapter() : null;
                t && t.firePause({}, "joinListener-ads"), this.plugin && this.plugin.isBreakStarted && (this.fireStart({}, "joinListener"), this.fireJoin({}, "joinListener"));
            }
            breakStartListener(e) {
                this.adsInBreak = e.total, this.fireBreakStart(), this._quartileTimer || (this._quartileTimer = setInterval(this.sendQuartile.bind(this), 1e3)), this.fireStart({}, "breakStartListener"), this.fireJoin({}, "breakStartListener");
            }
            stopListener(e) {
                this.fireStop({}, "stopListener");
            }
            breakEndListener(e) {
                this.adsInBreak = void 0, this.fireBreakStop();
                var t = this.plugin ? this.plugin.getAdapter() : null;
                t && t.fireResume({}, "endListener-ads");
            }
            sendQuartile(e) {
                var t = this.getPlayhead(), i = this.getDuration();
                t > i / 4 && (this.fireQuartile(1), t > i / 2 && (this.fireQuartile(2), t > .75 * i && (this.fireQuartile(3), this._quartileTimer && (clearInterval(this._quartileTimer), this._quartileTimer = void 0))));
            }
            pauseListener(e) {
                this.flags.isBuffering || this.firePause({}, "pauseListener");
            }
            playingListener(e) {
                this.fireResume({}, "playingListener");
            }
        }
        class b {
            getVersion() {
                return "7.0.1-react-native-video-ads-jsclass";
            }
            getDuration() {
                return this.duration || 0;
            }
            getResource() {
                return this.resource || "N/A";
            }
            getPlayhead() {
                const e = this.getVideo().getAdapter();
                return e ? e.playhead : void 0;
            }
            getTitle() {
                return this.title || "N/A";
            }
            getPosition() {
                var e = this.getNpawReference().Constants.AdPosition.Midroll;
                return this.getVideo().getAdapter() && !this.getVideo().getAdapter().flags.isJoined && (e = this.getNpawReference().Constants.AdPosition.Preroll), e;
            }
            onAdEvent(e) {
                switch(e.event){
                    case "FIRST_QUARTILE":
                        this._quartileHandler(1);
                        break;
                    case "MIDPOINT":
                        this._quartileHandler(2);
                        break;
                    case "THIRD_QUARTILE":
                        this._quartileHandler(3);
                        break;
                    case "STARTED":
                        this.adStartedListener();
                        break;
                    case "COMPLETED":
                        this.adCompleteListener();
                        break;
                    case "CLICK":
                        this.adClickListener();
                        break;
                    case "PAUSED":
                        this.adPauseListener();
                        break;
                    case "RESUMED":
                        this.adPlayListener();
                        break;
                    case "ERROR":
                        this.adErrorListener();
                        break;
                    case "SKIPPED":
                        this.adSkippedListener();
                        break;
                    case "CONTENT_RESUME_REQUESTED":
                        this.adBreakFinished();
                        break;
                    case "CONTENT_PAUSE_REQUESTED":
                        const e1 = this.getVideo().getAdapter();
                        e1.flags.isPaused || (e1.firePause(), e1.lastPlayhead = e1.getPlayhead()), this.showingAds = !0;
                        break;
                    case "ALL_ADS_COMPLETED":
                        this.getVideo().getAdapter().reactPlatform && "ios" === this.getVideo().getAdapter().reactPlatform && this.getVideo().getAdapter().fireStop({}, "onAdEvent");
                }
            }
            isShowingAds() {
                return this.showingAds;
            }
            _quartileHandler(e) {
                this.fireQuartile(e);
            }
            adStartedListener(e) {
                this.getVideo().getAdapter() && this.getVideo().getAdapter().stopTimer && clearTimeout(this.getVideo().getAdapter().stopTimer), this.showingAds = !0, this.getVideo().getAdapter().cancelSeek(), this.fireStart({}, "adStartListener"), this.fireJoin({}, "adStartListener");
            }
            adPauseListener(e) {
                this.firePause({}, "adPauseListener");
            }
            adPlayListener(e) {
                this.fireResume({}, "adPlayListener");
            }
            adSkippedListener(e) {
                this.fireSkip({}, "adSkippedListener");
            }
            adCompleteListener(e) {
                this.fireStop({}, "adCompleteListener"), this.resetValues();
            }
            adClickListener(e) {
                this.fireClick(this.clickThrough);
            }
            adBreakFinished(e) {
                this.fireBreakStop({}, "adBreakFinished"), this.showingAds = !1;
            }
            adErrorListener(e) {
                if (e.message) {
                    var t = e.message.toLowerCase();
                    t.indexOf("ad tag empty") > -1 ? this.fireManifest(this.getNpawReference().Constants.ManifestError.EMPTY, e.message) : t.indexOf("error loading ad tag") > -1 || t.indexOf("invalid ad tag") > -1 || t.indexOf("any valid ads") > -1 ? this.fireManifest(this.getNpawReference().Constants.ManifestError.WRONG, e.message) : !e.adErrorCode || 60006 !== e.adErrorCode && 10403 !== e.adErrorCode ? (this.fireError(e.adErrorCode, e.message), this.fireStop(), this.resetValues(), t.indexOf("timeout") > -1 && this.fireBreakStop()) : this.fireManifest(this.getNpawReference().Constants.ManifestError.WRONG, e.message);
                }
            }
            resetValues() {
                this.playhead = void 0, this.duration = void 0, this.position = void 0, this.resource = void 0, this.title = void 0, this.showingAds = !1;
            }
        }
        const S = {
            video: {
                Hlsjs: class {
                    checkExistsPlayer() {
                        try {
                            return this.checkExistsObjectOnPage(this.player.media);
                        } catch (e) {
                            return !0;
                        }
                    }
                    getVersion() {
                        return "7.0.6-hlsjs-jsclass";
                    }
                    getPlayhead() {
                        var e = null;
                        return this.getVideo() && this.getVideo().isBreakStarted ? this._lastPlayhead : (this.tag && (e = this.tag.currentTime), e);
                    }
                    getPlayrate() {
                        var e = null;
                        return this.tag && (e = this.tag.playbackRate), e;
                    }
                    getDroppedFrames() {
                        var e = null;
                        return this.tag && (e = this.tag.webkitDroppedFrameCount), e;
                    }
                    getDuration() {
                        var e = null;
                        return this.tag && !this.getIsLive() && (e = this.tag.duration), e;
                    }
                    getBitrate() {
                        var e = null;
                        return -1 !== this.player.currentLevel && this.player.levels[this.player.currentLevel] && (e = this.player.levels[this.player.currentLevel].bitrate), e;
                    }
                    getRendition() {
                        var e = null;
                        if (-1 !== this.player.currentLevel) {
                            var t = this.player.levels[this.player.currentLevel];
                            t && (t.name ? e = t.name : t.bitrate && (e = this.getNpawUtils().buildRenditionString(t.width, t.height, t.bitrate)));
                        }
                        return e;
                    }
                    getIsLive() {
                        var e = null;
                        return this.player.levels && this.player.levels[this.player.currentLevel] && (e = this.player.levels[this.player.currentLevel].details.live), e;
                    }
                    getLatency() {
                        var e = this.player.latency;
                        return e ? 1e3 * e : void 0;
                    }
                    getResource() {
                        return this.player.url;
                    }
                    getPlayerVersion() {
                        return "undefined" != typeof Hls ? Hls.version : "unknown";
                    }
                    getPlayerName() {
                        return "Hls.js";
                    }
                    registerListeners() {
                        if (this._lastPlayhead = 0, this.mediaFound) for(var e in this.hlsReference || this.hlsMediaReference || (this.tag = this.player ? this.player.media : null, this._registerHlsRef()), this.references = {
                            play: this.playListener.bind(this),
                            pause: this.pauseListener.bind(this),
                            playing: this.playingListener.bind(this),
                            seeking: this.seekingListener.bind(this),
                            error: this.errorListener.bind(this),
                            ended: this.endedListener.bind(this),
                            progress: this.progressListener.bind(this),
                            waiting: this.bufferingListener.bind(this),
                            timeupdate: this.timeupdateListener.bind(this)
                        }, this.player.on(Hls.Events.LEVEL_SWITCHED, this.detectQualityChange.bind(this)), this.references)this.tag.addEventListener(e, this.references[e]);
                        else this._registerHlsRef();
                    }
                    detectQualityChange(e, t) {
                        let i;
                        const s = this.player.levels[t.level];
                        s && (s.name ? i = s.name : s.bitrate && (i = this.getNpawUtils().buildRenditionString(s.width, s.height, s.bitrate))), i && this.storeNewRendition(i);
                    }
                    _registerHlsRef() {
                        this.hlsReference = this.hlsErrorListener.bind(this), this.hlsMediaReference = this.getTagListener.bind(this), this.player.on("hlsError", this.hlsReference, this), this.player.on("hlsMediaAttached", this.hlsMediaReference);
                    }
                    unregisterListeners() {
                        if (this.monitor && this.monitor.stop(), this.player && (this.hlsReference && this.player.off("hlsError", this.hlsReference, this), this.hlsMediaReference && this.player.off("hlsMediaAttached", this.hlsMediaReference), this.player.off(Hls.Events.LEVEL_SWITCHED, this.detectQualityChange.bind(this)), this.hlsReference = null, this.hlsMediaReference = null), this.tag && this.references) {
                            for(var e in this.references)this.tag.removeEventListener(e, this.references[e]);
                            delete this.references;
                        }
                    }
                    progressListener(e) {
                        this._lastPlayhead = this.getPlayhead(), this.flags.isStarted ? !this.flags.isJoined && this.getVideo().getIsLive() && this.fireJoin({}, "progressListener") : this.getPlayhead() > 1 && (this.startedOnce || !this.getVideo().getIsLive()) && (this.fireStart({}, "progressListener"), this.fireJoin({}, "progressListener"));
                    }
                    timeupdateListener(e) {
                        this._lastPlayhead = this.getPlayhead(), this.flags.isStarted ? !this.flags.isJoined && this.getVideo().getIsLive() && this.fireJoin({}, "timeupdateListener") : this.getPlayhead() > 1 && (this.startedOnce || !this.getVideo().getIsLive()) && (this.fireStart({}, "timeupdateListener"), this.fireJoin({}, "timeupdateListener"));
                    }
                    playListener(e) {
                        this.fireStart({}, "playListener"), this.startedOnce = !0;
                    }
                    pauseListener(e) {
                        this.flags.isBuffering || (this.firePause({}, "pauseListener"), this.pauseStamp = e.timeStamp);
                    }
                    playingListener(e) {
                        this.fireJoin({}, "playingListener"), this.fireBufferEnd({}, "playingListener"), this.fireSeekEnd({}, "playingListener"), this.fireResume({}, "playingListener");
                    }
                    seekingListener(e) {
                        this.fireSeekBegin({}, !1, "seekingListener");
                    }
                    bufferingListener(e) {
                        this.tag && 2 !== this.tag.readyState || this.fireBufferBegin({}, !1, "bufferingListener");
                    }
                    errorListener(e) {
                        this.fireError(this.tag.error.code, "PLAY FAILURE", void 0, void 0, "errorListener");
                    }
                    endedListener(e) {
                        const t = this.getVideo().getAdsAdapter();
                        let i = !1;
                        t && void 0 !== t.isDAI && (t.isDAI || (i = t.player.getCuePoints().includes(-1))), i || this.fireStop({}, "endedListener");
                    }
                    hlsErrorListener(e, t) {
                        t.fatal && this.fireFatalError(t.details, "PLAYER FAILURE", void 0, void 0, "hlsErrorListener");
                    }
                    getTagListener() {
                        this.tag = this.player ? this.player.media : null, this.mediaFound = !0, this.registerListeners();
                    }
                },
                Bitmovin: class {
                    getVersion() {
                        return "7.0.6-bitmovin8-jsclass";
                    }
                    getPlayhead() {
                        let e = this.player ? this.player.getCurrentTime() : null;
                        return this.getVideo().getAdsAdapter() && this.getVideo().getAdsAdapter().flags.isStarted && (e = this.lastPlayhead || 0), e;
                    }
                    getPlayrate() {
                        return this.player ? this.player.getPlaybackSpeed() : null;
                    }
                    getStopParams() {
                        let e = {};
                        return this.getVideo().getPlayhead() > 0 && (e = {
                            playhead: this.getVideo().getPlayhead()
                        }), e;
                    }
                    getDroppedFrames() {
                        return this.player ? this.player.getDroppedVideoFrames() : null;
                    }
                    getDuration() {
                        let e = null;
                        return this.player && (this.lastDuration = this.player.getDuration() || this.lastDuration, e = this.lastDuration), e;
                    }
                    getBitrate() {
                        let e = null;
                        if (this.player) {
                            const t = this.player.getPlaybackVideoData(), i = this.player.getVideoQuality();
                            i && i.bitrate ? e = i.bitrate : t && t.bitrate && (e = t.bitrate);
                        }
                        return e;
                    }
                    getRendition() {
                        let e = null;
                        if (this.player) {
                            const t = this.player.getPlaybackVideoData(), i = this.player.getVideoQuality();
                            i && i.bitrate ? e = this.getNpawUtils().buildRenditionString(i.width, i.height, i.bitrate) : t && t.bitrate && (e = this.getNpawUtils().buildRenditionString(t.width, t.height, t.bitrate));
                        }
                        return e;
                    }
                    detectQualityChange(e) {
                        let t;
                        e.targetQuality && e.targetQuality.bitrate && (t = this.getNpawUtils().buildRenditionString(e.targetQuality.width, e.targetQuality.height, e.targetQuality.bitrate)), t && this.storeNewRendition && this.storeNewRendition(t);
                    }
                    getTitle() {
                        return this.player ? this.player.getSource().title : null;
                    }
                    getIsLive() {
                        return this.player ? this.player.isLive() : null;
                    }
                    getResource() {
                        let e = null;
                        if (this.player && this.player.getSource && this.player.getSource()) {
                            try {
                                if (this.player.getStreamType && this.player.getStreamType() && this.player.getSource()[this.player.getStreamType()]) return this.player.getSource()[this.player.getStreamType()];
                            } catch (e) {}
                            e = this.player.getSource().progressive || this.player.getSource().hls;
                        }
                        try {
                            this.player && this.player.getManifest && this.player.getManifest() && (e = this.player.getManifest().indexOf("MPD") > 0 ? this.player.getSource().dash : this.player.getSource().hls);
                        } catch (e) {
                            this.log.notice("Can't get manifest");
                        }
                        return e;
                    }
                    getPlayerVersion() {
                        return this.player ? this.player.version : null;
                    }
                    getPlayerName() {
                        return "Bitmovin";
                    }
                    _checkAdsAdapter() {
                        const e = this.getVideo().getAdsAdapter();
                        e ? e && !e.player && e.setPlayer(this.player) : (this.plugin.setAdsAdapter(this.getAdapterClass("nativeAdsAdapter"), this.getVideo().getVideoKey()), this.getVideo().getAdsAdapter().registerListeners());
                    }
                    registerListeners() {
                        const e = this.player.exports.PlayerEvent;
                        this.monitorPlayhead(!0, !1), this.references = {}, this.references[e.Play] = this.playListener.bind(this), this.references[e.Paused] = this.pauseListener.bind(this), this.references[e.Playing] = this.playingListener.bind(this), this.references[e.Error] = this.errorListener.bind(this), this.references[e.Seek] = this.seekingListener.bind(this), this.references[e.TimeShift] = this.seekingListener.bind(this), this.references[e.TimeShifted] = this.seekedListener.bind(this), this.references[e.PlaybackFinished] = this.endedListener.bind(this), this.references[e.TimeChanged] = this.timeupdateListener.bind(this), this.references[e.SourceUnloaded] = this.endedListener.bind(this), this.references[e.Destroy] = this.destroyListener.bind(this), this.references[e.Ready] = this.readyListener.bind(this), this.references[e.AdBreakStarted] = this._checkAdsAdapter.bind(this), this.references[e.VideoPlaybackQualityChanged] = this.detectQualityChange.bind(this);
                        for(let e in this.references)this.player.on(e, this.references[e]);
                        this.plugin.setAdsAdapter(this.getAdapterClass("nativeAdsAdapter"), this.getVideo().getVideoKey()), this.getVideo().getAdsAdapter().registerListeners();
                    }
                    unregisterListeners() {
                        this.monitor && this.monitor.stop();
                        try {
                            if (this.getVideo() && this.getVideo().removeAdsAdapter(), this.player && this.player.off && this.references) {
                                for(let e in this.references)this.player.off(e, this.references[e]);
                                delete this.references;
                            }
                        } catch (e) {}
                    }
                    readyListener(e) {
                        this._checkAdsAdapter();
                    }
                    playListener(e) {
                        this.firePlayerLog("playListener", {}), this.lastPlayhead = 0, this.fireStart(), this.failedView = !1;
                    }
                    timeupdateListener(e) {
                        this.getVideo().getAdsAdapter() && this.getVideo().getAdsAdapter().flags.isStarted || (this.lastPlayhead = this.player.getCurrentTime()), this.getPlayhead() > .2 && (this.getIsLive() || this.getPlayhead() + 1 < this.getDuration()) && (this.fireStart(), this.failedView = !1, this.flags.isJoined || (this.monitor.skipNextTick(), this.fireJoin())), !this.player.isPaused() && this.flags.isSeeking && (this.fireSeekEnd({}, "timeupdateListener"), this.monitor.skipNextTick());
                    }
                    pauseListener(e) {
                        this.firePlayerLog("pauseListener", {}), e.issuer && "ui-seek" === e.issuer ? this.fireSeekBegin({}, !1, "pauseListener") : this.firePause();
                    }
                    playingListener(e) {
                        this.firePlayerLog("playingListener", {}), this.fireStart(), this.failedView = !1, this.fireResume(), this.flags.isJoined || this.monitor.skipNextTick();
                    }
                    errorListener(e) {
                        this.firePlayerLog("errorListener", {}), this.failedView || (this.flags.isStarted || (this.failedView = !0), this.fireError(e.code, e.name), this.fireStop(this.getStopParams()));
                    }
                    seekingListener(e) {
                        this.firePlayerLog("seekingListener", {}), this.fireSeekBegin({}, !1, "seekingListener");
                    }
                    seekedListener(e) {
                        this.firePlayerLog("seekedListener", {}), this.fireSeekEnd({}, "seekedListener");
                    }
                    endedListener(e) {
                        this.firePlayerLog("endedListener", {}), this.fireStop(this.getStopParams());
                    }
                    destroyListener(e) {
                        this.player = null, this.tag = null, this.fireStop(), this.getVideo().removeAdapter();
                    }
                    constructor(){
                        (0, _defineProperty._)(this, "adsAdapters", {
                            nativeAdsAdapter: i
                        });
                    }
                },
                Videojs: class {
                    isInAds(e = !1) {
                        try {
                            const t = this.getVideo().getAdsAdapter();
                            return e && t && void 0 !== t.isDAI && !t.isDAI ? t.player.getCuePoints().includes(-1) : this.player.ads && this.player.ads.inAdBreak && "function" == typeof this.player.ads.inAdBreak && this.player.ads.inAdBreak();
                        } catch (e) {
                            return !1;
                        }
                    }
                    getBitrate() {
                        let e = null;
                        const t = this.getUsedTech();
                        return t && t.getBitrate && (e = t.getBitrate(this)), e;
                    }
                    checkExistsPlayer() {
                        try {
                            return this.checkExistsObjectOnPage(this.player.el());
                        } catch (e) {
                            return !0;
                        }
                    }
                    pauseListener(e) {
                        this.firePlayerLog("pauseListener", {}), this.firePause({}, "pauseListener");
                    }
                    bufferingListener(e) {
                        this.firePlayerLog("bufferingListener", {}), this.flags.isSeeking || this.fireBufferBegin({}, !1, "bufferingListener");
                    }
                    getRendition() {
                        let e = null;
                        const t = this.getUsedTech();
                        return t && t.getRendition && (e = t.getRendition(this)), e;
                    }
                    getPlayerVersion() {
                        let e = null;
                        return "undefined" != typeof videojs && (e = videojs.VERSION), e;
                    }
                    playListener(e) {
                        this.firePlayerLog("playListener", {}), this.isInAds() || (this.flags.isStarted ? this.lastSrc && this.lastSrc !== this.getResource() && (this.fireStop({}, "playListenerNewResource"), this.acumBytesFunc(), this.lastPlayhead = void 0, this._startEvent("playListenerNewResource"), this.lastSrc = this.getResource()) : (this.lastSrc = this.getResource(), this._startEvent("playListenerNotStarted")));
                    }
                    loadAdsAdapter() {
                        if (this.getVideo()) {
                            if (!this.getVideo().getAdsAdapter() || this.getVideo().getAdsAdapter().isGeneric) {
                                let e = null;
                                this.getAdapterClass("bcoveImaAdsAdapter").isUsed(this) ? e = this.getAdapterClass("bcoveImaAdsAdapter") : null === this.getVideo().getAdsAdapter() && (e = this.getAdapterClass("genericAdsAdapter"), e.initProperties()), e && this.getVideo().setAdsAdapter(e, this.plugin, !0);
                            } else this.getVideo().getAdsAdapter().registerImaEvents && this.getVideo().getAdsAdapter().registerImaEvents();
                        }
                    }
                    errorModifyer(e, t, i) {
                        this.fatalList = e || [], this.nonFatalList = t || [], this.ignoreList = i || [];
                    }
                    getPlayrate() {
                        return this.player.playbackRate();
                    }
                    timeupdateListener(e) {
                        this.isInAds() || (this.getPlayhead() > .1 && (this.fireJoin({}, "timeupdateListener"), this.joinPolling && this.joinPolling.stop(), !this.flags.isPaused && this.lastSeekPlayhead && this.lastSeekPlayhead !== this.getPlayhead() && (this.fireSeekEnd({}, "timeupdateListener"), this.lastSeekPlayhead = !1)), this.flags.isJoined || (void 0 === this.lastPlayhead && (this.lastPlayhead = this.getPlayhead()), this.lastPlayhead !== this.getPlayhead() && (this.player.options_ && this.plugin && !this.getVideo().options["content.id"] && (this.getVideo().options["content.id"] = this.player.options_["data-video-id"]), this.fireStart({}, "timeupdateListener"), this.fireJoin({}, "timeupdateListener"), this.joinPolling && this.joinPolling.stop(), this.lastPlayhead = void 0)), this.getVideo()._adsAdapter && !this.getVideo()._adsAdapter.flags.isStarted && (this.lastPlayhead = this.getPlayhead()));
                    }
                    getPlayhead() {
                        let e = this.player.currentTime();
                        return this.getVideo()._adsAdapter && this.getVideo()._adsAdapter.flags.isStarted && (e = this.lastPlayhead || e), e;
                    }
                    getDuration() {
                        var e = this.player.duration();
                        return this.player.mediainfo && void 0 !== this.player.mediainfo.duration && (e = this.player.mediainfo.duration), e;
                    }
                    aderrorListener(e) {
                        this.loadAdsAdapter(), this.getVideo().getAdsAdapter() && this.getVideo().getAdsAdapter().adPlayerErrorListener && this.getVideo().getAdsAdapter().adPlayerErrorListener(e);
                    }
                    _jointimePolling(e) {
                        this.getVideo() ? this.getVideo().getAdsAdapter() && this.getVideo().getAdsAdapter().flags.isStarted || (0 !== this.lastPlayhead && "number" == typeof this.lastPlayhead && this.lastPlayhead !== this.getPlayhead() && (this.fireJoin({}, "jointimePolling"), this.joinPolling && this.joinPolling.stop()), this.lastPlayhead = this.getPlayhead()) : this.joinPolling && this.joinPolling.stop();
                    }
                    acumBytesFunc() {
                        this.acumBytes += this.getTotalBytes() || 0;
                    }
                    adsEndedListener(e) {
                        this.firePlayerLog("adsEndedListener", {}), this.adsEnded = !0, this.getVideo().requestBuilder.lastSent.adPosition === this.getNpawReference().Constants.AdPosition.Postroll && (this.getVideo().getAdapter().fireStop({}, "adsEndedListener"), this.acumBytesFunc(), this.lastPlayhead = void 0);
                    }
                    getVersion() {
                        return "7.0.9-videojs-jsclass";
                    }
                    seekedListener(e) {
                        this.firePlayerLog("seekedListener", {}), this.fireSeekEnd({}, "seekedListener"), this.lastSeekPlayhead = this.getPlayhead();
                    }
                    getTech() {
                        return this.player.tech({
                            IWillNotUseThisInPlugins: !0
                        });
                    }
                    unregisterListeners() {
                        if (this.monitor && this.monitor.stop(), this.player && this.references) {
                            try {
                                for(var e in this.references)this.player.off(e, this.references[e]);
                            } catch (e) {}
                            delete this.references;
                        }
                    }
                    _startEvent(e) {
                        this.loadAdsAdapter(), this.player.options_ && this.plugin && !this.plugin.options["content.id"] && (this.plugin.options["content.id"] = this.player.options_["data-video-id"]), this.fireStart({}, e), this.flags.isJoined || (this.joinPolling || (this.joinPolling = new (this.getNpawReference()).Timer(this._jointimePolling.bind(this), 500)), this.joinPolling.start());
                    }
                    getIsLive() {
                        var e = null;
                        if (this.player.mediainfo && (e = !0, "number" == typeof this.player.mediainfo.duration && (e = this.player.mediainfo.duration < 1 || this.player.mediainfo.duration === 1 / 0)), this.player.duration && "function" == typeof this.player.duration) {
                            e = !0;
                            var t = this.player.duration();
                            "number" == typeof t && (e = t < 1 || t === 1 / 0);
                        }
                        return this.player.isLive && "function" === this.player.isLive && (e = this.player.isLive()), e;
                    }
                    conditionalStop(e) {
                        this.firePlayerLog("conditionalStop", {}), this.isInAds(!0) || this.plugin && (this.adsEnded = !1, this.fireStop({}, "conditionalStop"), this.plugin && !this.getVideo().options["content.id"] && (this.getVideo().options["content.id"] = null), this.acumBytesFunc(), this.lastPlayhead = void 0);
                    }
                    getTitle() {
                        var e = null;
                        return this.player.mediainfo && (e = this.player.mediainfo.name), e;
                    }
                    getTotalBytes() {
                        var e = null, t = this.getUsedTech();
                        return t && t.getTotalBytes && (e = t.getTotalBytes(this)), e;
                    }
                    registerListeners() {
                        if (this.monitorPlayhead(!1, !1, 1200), this.acumBytes = 0, this.ignoreList = [], this.fatalList = [], this.nonFatalList = [], this.references = {
                            loadstart: this.loadstartListener.bind(this),
                            adsready: this.loadAdsAdapter.bind(this),
                            play: this.playListener.bind(this),
                            timeupdate: this.timeupdateListener.bind(this),
                            pause: this.pauseListener.bind(this),
                            playing: this.playingListener.bind(this),
                            ended: this.conditionalStop.bind(this),
                            dispose: this.disposeListener.bind(this),
                            seeking: this.seekingListener.bind(this),
                            seeked: this.seekedListener.bind(this),
                            error: this.errorListener.bind(this),
                            adserror: this.aderrorListener.bind(this),
                            adsEnded: this.adsEndedListener.bind(this),
                            texttrackchange: this.textListener.bind(this),
                            waiting: this.bufferingListener.bind(this)
                        }, this.player) for(var e in this.references)this.player.on(e, this.references[e]);
                        setTimeout(this.loadAdsAdapter.bind(this), 50);
                    }
                    getResource() {
                        var e = null, t = this.getUsedTech();
                        return t && t.getResource && (e = t.getResource(this)), e || (e = this.player.currentSrc()), e;
                    }
                    textListener(e) {
                        if (this.player.textTracks) for(var t = this.player.textTracks(), i = t.length, s = 0; s < i; ++s)t[s] && "showing" === t[s].mode && (this.getVideo().options["content.subtitles"] = t[s].label || t[s].language);
                    }
                    seekingListener(e) {
                        this.firePlayerLog("seekingListener", {}), this.fireSeekBegin({}, !1, "seekingListener");
                    }
                    disposeListener(e) {
                        this.firePlayerLog("disposeListener", {}), this.plugin && (this.getVideo().fireStop({}, "disposeListener"), this.getVideo().removeAdsAdapter(), this.getVideo().removeAdapter());
                    }
                    loadstartListener(e) {
                        this.firePlayerLog("loadstartListener", {}), this.loadAdsAdapter();
                    }
                    getPlayerName() {
                        var e = "videojs";
                        return this.getAdapterClass("contribHlsTech").isUsed(this) ? e += "-hls" : this.getAdapterClass("hlsJsTech").isUsed(this) ? e += "-hlsjs" : this.getAdapterClass("shakaTech").isUsed(this) ? e += "-shaka" : this.getAdapterClass("dashShakaTech").isUsed(this) ? e += "-dash-shaka" : this.getAdapterClass("dashTech").isUsed(this) && (e += "-dash"), this.player.FreeWheelPlugin && (e += "-fw"), this.player.mediainfo && (e += "-bcove"), e;
                    }
                    playingListener(e) {
                        this.firePlayerLog("playingListener", {}), this._startEvent("playingListener"), this.isInAds() || this.flags.isAdPaused || this.fireResume({}, "playingListener"), this.getPlayhead() < 1 && this.fireSeekEnd({}, "playingListener"), this.fireBufferEnd({}, "playingListener");
                    }
                    getUsedTech() {
                        var e = null;
                        if (this.getPlugin().getAdaptersProperties().usedTech) {
                            switch(this.getPlugin().getAdaptersProperties().usedTech.toLowerCase()){
                                case "hls":
                                    this.getAdapterClass("contribHlsTech").isUsed(this) && (e = this.getAdapterClass("contribHlsTech"));
                                    break;
                                case "hlsjs":
                                    this.getAdapterClass("hlsJsTech").isUsed(this) && (e = this.getAdapterClass("hlsJsTech"));
                                    break;
                                case "shaka":
                                    this.getAdapterClass("shakaTech").isUsed(this) && (e = this.getAdapterClass("shakaTech"));
                                    break;
                                case "dashshaka":
                                    this.getAdapterClass("dashShakaTech").isUsed(this) && (e = this.getAdapterClass("dashShakaTech"));
                                    break;
                                case "streamrootHlsJsTech":
                                    this.getAdapterClass("streamrootHlsJsTech").isUsed(this) && (e = this.getAdapterClass("streamrootHlsJsTech"));
                                    break;
                                case "dash":
                                    this.getAdapterClass("dashTech").isUsed(this) && (e = this.getAdapterClass("dashTech"));
                            }
                            if (null != e) return e;
                        }
                        return this.getAdapterClass("contribHlsTech").isUsed(this) ? e = this.getAdapterClass("contribHlsTech") : this.getAdapterClass("hlsJsTech").isUsed(this) ? e = this.getAdapterClass("hlsJsTech") : this.getAdapterClass("shakaTech").isUsed(this) ? e = this.getAdapterClass("shakaTech") : this.getAdapterClass("dashShakaTech").isUsed(this) ? e = this.getAdapterClass("dashShakaTech") : this.getAdapterClass("dashTech").isUsed(this) ? e = this.getAdapterClass("dashTech") : this.getAdapterClass("streamrootHlsJsTech").isUsed(this) && (e = this.getAdapterClass("streamrootHlsJsTech")), e;
                    }
                    errorListener(e) {
                        this.firePlayerLog("errorListener", {});
                        var t = !1, i = !1, s = null, r = null;
                        this.player.error && this.player.error() && (s = Number(this.player.error().code), r = this.player.error().message), null !== s && (this.ignoreList.includes(s) && (t = !0), !i && this.fatalList.includes(s) ? i = !0 : i && this.nonFatalList.includes(s) && (i = !1)), t || (i ? (this.fireFatalError(s, r, void 0, void 0, "errorListener"), this.acumBytesFunc(), this.lastPlayhead = void 0, this.crashed = !0) : this.fireError(s, r, void 0, void 0, "errorListener"));
                    }
                    constructor(){
                        (0, _defineProperty._)(this, "adsAdapters", {
                            bcoveImaAdsAdapter: o,
                            genericAdsAdapter: d
                        });
                        (0, _defineProperty._)(this, "additionalContexts", {
                            contribHlsTech: l,
                            dashTech: h,
                            dashShakaTech: n,
                            hlsJsTech: r,
                            streamrootHlsJsTech: a,
                            shakaTech: s
                        });
                    }
                },
                Shaka: class {
                    checkExistsPlayer() {
                        try {
                            return this.checkExistsObjectOnPage(this._getTagFromPlayer());
                        } catch (e) {
                            return !0;
                        }
                    }
                    getBitrate() {
                        var e = this.player.getStats(), t = null;
                        return void 0 !== e.streamBandwidth && (t = e.streamBandwidth), void 0 !== e.streamStats && (t = e.streamStats.videoBandwidth), t;
                    }
                    pauseListener(e) {
                        this.firePlayerLog("pauseListener", {}), this.firePause({}, "pauseListener");
                    }
                    bufferingListener(e) {
                        this.firePlayerLog("bufferingListener-" + e.buffering, {}), this.flags.isJoined ? !0 === e.buffering ? this.fireBufferBegin({}, !1, "bufferingListenerEnabled") : !1 === e.buffering && (this.flags.isSeeking ? (this.fireSeekEnd({}, "bufferingListenerIsSeeking"), this.cancelBuffer()) : this.fireBufferEnd({}, "bufferingListenerDisabled")) : !0 === e.buffering ? this.fireBufferBegin({}, !1, "bufferingListenerEnabled") : !1 === e.buffering && this.fireJoin({}, "bufferingListenerNotJoined");
                    }
                    getLatency() {
                        var e = this.player.getStats().liveLatency;
                        return e ? 1e3 * e : void 0;
                    }
                    getRendition() {
                        var e = this._getActiveTrack();
                        return e ? this.getNpawUtils().buildRenditionString(e.width, e.height, e.bandwidth) : null;
                    }
                    getPlayerVersion() {
                        var e = null;
                        return "undefined" != typeof shaka && (shaka.Player && (e = shaka.Player.version), shaka.player && (e = shaka.player.Player.version)), e;
                    }
                    playListener(e) {
                        this.firePlayerLog("playListener", {}), this._callStart("playListener");
                    }
                    endedListener(e) {
                        const t = this.getVideo().getAdsAdapter();
                        let i = !1;
                        t && void 0 !== t.isDAI && (t.isDAI || (i = t.player.getCuePoints().includes(-1))), i || (this.firePlayerLog("endedListener", {}), this.fireStop({}, "endedListener"), this.bytes = 0, this.supportBytes = !1);
                    }
                    getPlayrate() {
                        return "function" == typeof this.player.getPlaybackRate && this.player.getPlaybackRate() || 1;
                    }
                    timeupdateListener(e) {
                        this.getPlayhead() !== this.initialPlayhead && "number" == typeof this.initialPlayhead ? this._callStart("timeupdateListener") : this.initialPlayhead = this.getPlayhead();
                    }
                    getPlayhead() {
                        var e = this.tag || this._getTagFromPlayer();
                        return e ? e.currentTime : null;
                    }
                    getDuration() {
                        var e = this.tag || this._getTagFromPlayer();
                        return e ? e.duration : null;
                    }
                    getFramesPerSecond() {
                        var e = this._getActiveTrack();
                        return e ? e.frameRate : null;
                    }
                    getThroughput() {
                        return this.player.getStats().estimatedBandwidth;
                    }
                    getDroppedFrames() {
                        return this.player.getStats().droppedFrames;
                    }
                    supportTotalBytes() {
                        return this.supportBytes;
                    }
                    getTotalBytes() {
                        return this.bytes;
                    }
                    _registerTag() {
                        if (this.tag = this.tag || this._getTagFromPlayer(), this.tag) for(var e in this.references)this.tag.addEventListener(e, this.references[e]);
                        else setTimeout(this._registerTag.bind(this), 50);
                    }
                    getVersion() {
                        return "7.0.5-shaka-jsclass";
                    }
                    seekedListener(e) {
                        this.firePlayerLog("seekedListener", {}), this.isPlayerOnBuffering() && this.existPlayerBufferingMethod || (this.flags.isBuffering ? this.fireBufferEnd({}, "seekedListener") : this.flags.isSeeking && this.fireSeekEnd({}, "seekedListener"));
                    }
                    unregisterListeners() {
                        this.bytes = 0, this.supportBytes = !1, this.monitor && this.monitor.stop();
                        var e = this.tag || this._getTagFromPlayer();
                        if (e && this.references) {
                            for(var t in this.references)e.removeEventListener(t, this.references[t]);
                            delete this.references;
                        }
                        if (this.player && this.referencesPlayer) {
                            for(var i in this.referencesPlayer)this.player.removeEventListener(i, this.referencesPlayer[i]);
                            delete this.referencesPlayer;
                        }
                    }
                    getIsLive() {
                        return !!this.player.isLive() || !this.getDuration();
                    }
                    _callStart(e) {
                        this.flags.isStarted || (this.fireStart({}, e), this.initialPlayhead = this.getPlayhead()), this._initialPlayheadChanged() && this.fireJoin({}, e);
                    }
                    getTitle() {
                        var e = this.tag || this._getTagFromPlayer();
                        return e ? e.title : null;
                    }
                    networkResponseFilter(e, t) {
                        try {
                            if (e != shaka.net.NetworkingEngine.RequestType.SEGMENT) return;
                            t && t.data && (this.bytes += t.data.byteLength);
                        } catch (e) {}
                    }
                    registerListeners() {
                        for(var e in this.bytes = 0, this.supportBytes = !1, this.existPlayerBufferingMethod = this.player.isBuffering && "function" == typeof this.player.isBuffering, this.monitorPlayhead(!1, !0), this.references = {
                            play: this.playListener.bind(this),
                            loadstart: this.autoplayListener.bind(this),
                            pause: this.pauseListener.bind(this),
                            playing: this.playingListener.bind(this),
                            seeking: this.seekingListener.bind(this),
                            seeked: this.seekedListener.bind(this),
                            ended: this.endedListener.bind(this),
                            timeupdate: this.timeupdateListener.bind(this)
                        }, this.referencesPlayer = {
                            error: this.errorListener.bind(this),
                            buffering: this.bufferingListener.bind(this),
                            loading: this.loadingListener.bind(this)
                        }, this.tag = null, this._registerTag(), this.referencesPlayer)this.player.addEventListener(e, this.referencesPlayer[e]);
                        this.player && this.player.getNetworkingEngine && "function" == typeof this.player.getNetworkingEngine && this.player.getNetworkingEngine().registerResponseFilter && "function" == typeof this.player.getNetworkingEngine().registerResponseFilter && (this.supportBytes = !0, this.player.getNetworkingEngine().registerResponseFilter(this.networkResponseFilter.bind(this)));
                    }
                    getResource() {
                        var e = this.tag || this._getTagFromPlayer(), t = e ? e.currentSrc : null;
                        return this.player.getAssetUri && this.player.getAssetUri() ? t = this.player.getAssetUri() : this.player.getManifestUri && this.player.getManifestUri() && (t = this.player.getManifestUri()), t;
                    }
                    _initialPlayheadChanged() {
                        var e = !1;
                        if (!this.flags.isJoined) {
                            var t = this.getPlayhead(), i = this.initialPlayhead || 0, s = this.getVideo() ? this.getVideo().getIsLive() : this.getIsLive();
                            (0 !== i && s || !s) && t > i ? e = !0 : s && (this.initialPlayhead = t);
                        }
                        return e;
                    }
                    seekingListener(e) {
                        this.firePlayerLog("seekingListener", {}), this.fireSeekBegin({}, !1, "seekingListener"), this.getVideo() && this.getVideo().getIsLive() && this.autoplayListener();
                    }
                    _getActiveTrack() {
                        var e = null;
                        if (this.player.getVariantTracks) {
                            var t = this.player.getVariantTracks();
                            for(var i in t){
                                var s = t[i];
                                !s.active || "video" !== s.type && "variant" !== s.type || (e = s);
                            }
                        } else if (this.player.getVideoTracks) {
                            var r = this.player.getVideoTracks();
                            for(var a in r){
                                var n = r[a];
                                n.active && (e = n);
                            }
                        }
                        return e;
                    }
                    getPlayerName() {
                        return "Shaka";
                    }
                    playingListener(e) {
                        this.firePlayerLog("playingListener", {}), this.fireResume({}, "playingListener"), this._callStart("playingListener"), this.isPlayerOnBuffering() && this.existPlayerBufferingMethod || this.fireJoin({}, "playingListener");
                    }
                    isPlayerOnBuffering() {
                        return !!this.existPlayerBufferingMethod && this.player.isBuffering();
                    }
                    loadingListener(e) {
                        this.firePlayerLog("loadingListener", {}), this.flags.isStarted && (this.fireStop({}, "loadingListener"), this.bytes = 0, this.supportBytes = !1);
                    }
                    autoplayListener(e) {
                        this.firePlayerLog("autoplayListener", {});
                        var t = this.tag || this._getTagFromPlayer();
                        t && t.autoplay && this._callStart("autoplayListener");
                    }
                    errorListener(e) {
                        this.firePlayerLog("errorListener", {});
                        var t = e.detail && e.detail.code ? e.detail.code : e.code, i = e.detail && e.detail.message ? e.detail.message : "unknown", s = e.detail && e.detail.category ? e.detail.category : e.category, r = e.detail && e.detail.severity ? e.detail.severity : e.severity;
                        s && s < 10 && s > 0 && (i = ({
                            1: "network",
                            2: "text",
                            3: "media",
                            4: "manifest",
                            5: "streaming",
                            6: "drm",
                            7: "player",
                            8: "cast",
                            9: "storage"
                        })[s] || i), 2 === r && -1 === [
                            1002,
                            3016
                        ].indexOf(t) ? this.fireFatalError(t, i, void 0, void 0, "errorListener") : this.fireError(t, i, void 0, void 0, "errorListener");
                    }
                    _getTagFromPlayer() {
                        return this.player.getMediaElement ? this.player.getMediaElement() : this.player.a;
                    }
                },
                Html5: class {
                    checkExistsPlayer() {
                        try {
                            return this.checkExistsObjectOnPage(this.player);
                        } catch (e) {
                            return !0;
                        }
                    }
                    pauseListener(e) {
                        this.firePlayerLog("pauseListener", {}), this.firePause({}, "pauseListener");
                    }
                    stalledListener(e) {
                        this.firePlayerLog("stalledListener", {}), this.fireBufferBegin({}, !1, "stalledListener");
                    }
                    bufferingListener(e) {
                        this.firePlayerLog("waitingListener", {}), this.fireBufferBegin({}, !1, "waitingListener");
                    }
                    getIsLive() {
                        return this.player.duration === 1 / 0;
                    }
                    playListener(e) {
                        this.firePlayerLog("playListener", {}), this.player && this.playhead && this.checkReadyState(this.player.readyState, "playListener"), (void 0 === this.lastResource || this.getResource() && this.lastResource !== this.getResource()) && (this.lastResource = this.getResource().split("?")[0]), this.fireStart({}, "playListener");
                    }
                    registerListeners() {
                        for(var e in this.monitorPlayhead(!1, !1), this.references = {
                            play: this.playListener.bind(this),
                            timeupdate: this.timeupdateListener.bind(this),
                            pause: this.pauseListener.bind(this),
                            playing: this.playingListener.bind(this),
                            error: this.errorListener.bind(this),
                            seeking: this.seekingListener.bind(this),
                            seeked: this.seekedListener.bind(this),
                            ended: this.endedListener.bind(this),
                            loadstart: this.loadStartListener.bind(this),
                            stalled: this.stalledListener.bind(this),
                            waiting: this.bufferingListener.bind(this),
                            canplay: this.canPlayListener.bind(this),
                            canplaythrough: this.canPlayThroughListener.bind(this),
                            loadedmetadata: this.loadedMetadataListener.bind(this),
                            loadeddata: this.loadedDataListener.bind(this)
                        }, this.references)this.player.addEventListener(e, this.references[e]);
                    }
                    endedListener(e) {
                        const t = this.getVideo().getAdsAdapter();
                        let i = !1;
                        t && void 0 !== t.isDAI && (t.isDAI || (i = t.player.getCuePoints().includes(-1))), i || (this.firePlayerLog("endedListener", {}), this.fireStop({}, "endedListener"));
                    }
                    getPlayrate() {
                        return this.player.playbackRate;
                    }
                    canPlayListener(e) {
                        this.player && (this.playhead || this.getVideo() && this.getVideo().getIsLive()) && this.checkReadyState(this.player.readyState, "canPlayListener");
                    }
                    canPlayThroughListener(e) {
                        this.player && (this.playhead || this.getVideo() && this.getVideo().getIsLive()) && this.checkReadyState(this.player.readyState, "canPlayThroughListener");
                    }
                    timeupdateListener(e) {
                        (this.getPlayhead() > 0 || this.getVideo() && this.getVideo().getIsLive()) && !this.player.error && (this.fireStart({}, "timeupdateListener"), this.fireJoin({}, "timeupdateListener"));
                    }
                    getResource() {
                        return this.player.currentSrc;
                    }
                    getPlayhead() {
                        return this.player.currentTime;
                    }
                    getDuration() {
                        return this.player.duration;
                    }
                    seekingListener(e) {
                        this.firePlayerLog("seekingListener", {}), this.fireSeekBegin({}, !1, "seekingListener");
                    }
                    getPlayerName() {
                        return "html5";
                    }
                    playingListener(e) {
                        this.firePlayerLog("playingListener", {}), this.fireJoin({}, "playingListener"), this.fireResume({}, "playingListener"), this.fireSeekEnd({}, "playingListener"), this.flags.isBuffering && this.fireBufferEnd({}, "playingListener");
                    }
                    errorListener(e) {
                        this.firePlayerLog("errorListener", {});
                        var t = null, i = null;
                        try {
                            e && e.target && e.target.error && (i = e.target.error.code, t = e.target.error.message);
                        } catch (e) {}
                        this.fireError(i, t, void 0, void 0, "errorListener");
                    }
                    loadedMetadataListener(e) {
                        this.player && (this.playhead || this.getVideo() && this.getVideo().getIsLive()) && this.checkReadyState(this.player.readyState, "loadedMetadataListener");
                    }
                    getVersion() {
                        return "7.0.4-html5-jsclass";
                    }
                    seekedListener(e) {
                        this.firePlayerLog("seekedListener", {}), this.fireSeekEnd({}, "seekedListener");
                    }
                    loadStartListener(e) {
                        this.firePlayerLog("loadStartListener", {}), this.flags.isJoined && this.getResource() && this.getResource().split("?")[0] !== this.lastResource && this.fireStop({}, "loadStartListener");
                    }
                    unregisterListeners() {
                        if (this.monitor && this.monitor.stop(), this.player && this.references) for(var e in this.references)this.player.removeEventListener(e, this.references[e]), delete this.references[e];
                    }
                    loadedDataListener(e) {
                        this.player && (this.playhead || this.getVideo() && this.getVideo().getIsLive()) && this.checkReadyState(this.player.readyState, "loadedDataListener");
                    }
                },
                Flvjs: class {
                    checkExistsPlayer() {
                        try {
                            return this.checkExistsObjectOnPage(this.player);
                        } catch (e) {
                            return !0;
                        }
                    }
                    pauseListener(e) {
                        this.firePlayerLog("pauseListener", {}), this.firePause({}, "pauseListener");
                    }
                    stalledListener(e) {
                        this.firePlayerLog("stalledListener", {}), this.fireBufferBegin({}, !1, "stalledListener");
                    }
                    bufferingListener(e) {
                        this.firePlayerLog("waitingListener", {}), this.fireBufferBegin({}, !1, "waitingListener");
                    }
                    getIsLive() {
                        return this.player.duration === 1 / 0;
                    }
                    playListener(e) {
                        this.firePlayerLog("playListener", {}), this.player && this.playhead && this.checkReadyState(this.player.readyState, "playListener"), this.fireStart({}, "playListener");
                    }
                    registerListeners() {
                        for(var e in this.monitorPlayhead(!1, !1), this.references = {
                            play: this.playListener.bind(this),
                            timeupdate: this.timeupdateListener.bind(this),
                            pause: this.pauseListener.bind(this),
                            playing: this.playingListener.bind(this),
                            error: this.errorListener.bind(this),
                            seeking: this.seekingListener.bind(this),
                            seeked: this.seekedListener.bind(this),
                            ended: this.endedListener.bind(this),
                            loadstart: this.loadStartListener.bind(this),
                            stalled: this.stalledListener.bind(this),
                            waiting: this.bufferingListener.bind(this),
                            canplay: this.canPlayListener.bind(this),
                            canplaythrough: this.canPlayThroughListener.bind(this),
                            loadedmediadata: this.loadedMediaDataListener.bind(this),
                            loadeddata: this.loadedDataListener.bind(this)
                        }, this.references)this.player.addEventListener(e, this.references[e]);
                    }
                    endedListener(e) {
                        const t = this.getVideo().getAdsAdapter();
                        let i = !1;
                        t && void 0 !== t.isDAI && (t.isDAI || (i = t.player.getCuePoints().includes(-1))), i || (this.firePlayerLog("endedListener", {}), this.fireStop({}, "endedListener"));
                    }
                    getPlayrate() {
                        return this.player.playbackRate;
                    }
                    canPlayListener(e) {
                        this.player && (this.playhead || this.getVideo() && this.getVideo().getIsLive()) && this.checkReadyState(this.player.readyState, "canPlayListener");
                    }
                    canPlayThroughListener(e) {
                        this.player && (this.playhead || this.getVideo() && this.getVideo().getIsLive()) && this.checkReadyState(this.player.readyState, "canPlayThroughListener");
                    }
                    timeupdateListener(e) {
                        (this.getPlayhead() > 0 || this.getVideo() && this.getVideo().getIsLive()) && !this.player.error && (this.fireStart({}, "timeupdateListener"), this.fireJoin({}, "timeupdateListener"));
                    }
                    getResource() {
                        return this.player.currentSrc;
                    }
                    getPlayhead() {
                        return this.player.currentTime;
                    }
                    getDuration() {
                        return this.player.duration;
                    }
                    seekingListener(e) {
                        this.firePlayerLog("seekingListener", {}), this.fireSeekBegin({}, !1, "seekingListener");
                    }
                    getPlayerName() {
                        return "flvjs";
                    }
                    playingListener(e) {
                        this.firePlayerLog("playingListener", {}), this.fireJoin({}, "playingListener"), this.fireResume({}, "playingListener"), this.fireSeekEnd({}, "playingListener"), this.flags.isBuffering && this.fireBufferEnd({}, "playingListener");
                    }
                    errorListener(e) {
                        this.firePlayerLog("errorListener", {});
                        var t = null, i = null;
                        try {
                            e && e.target && e.target.error && (i = e.target.error.code, t = e.target.error.message);
                        } catch (e) {}
                        this.fireError(i, t, void 0, void 0, "errorListener");
                    }
                    loadedMediaDataListener(e) {
                        this.player && (this.playhead || this.getVideo() && this.getVideo().getIsLive()) && this.checkReadyState(this.player.readyState, "loadedMediaDataListener");
                    }
                    getVersion() {
                        return "7.0.3-flvjs-jsclass";
                    }
                    seekedListener(e) {
                        this.firePlayerLog("seekedListener", {}), this.fireSeekEnd({}, "seekedListener");
                    }
                    loadStartListener(e) {
                        this.firePlayerLog("loadStartListener", {}), this.flags.isJoined && this.fireStop({}, "loadStartListener");
                    }
                    unregisterListeners() {
                        if (this.monitor && this.monitor.stop(), this.player && this.references) for(var e in this.references)this.player.removeEventListener(e, this.references[e]), delete this.references[e];
                    }
                    loadedDataListener(e) {
                        this.player && (this.playhead || this.getVideo() && this.getVideo().getIsLive()) && this.checkReadyState(this.player.readyState, "loadedDataListener");
                    }
                },
                Jwplayer: class {
                    getVersion() {
                        return "7.0.3-jwplayer-jsclass";
                    }
                    checkExistsPlayer() {
                        try {
                            return this.checkExistsObjectOnPage(this.player.getConfig().mediaElement);
                        } catch (e) {
                            return !0;
                        }
                    }
                    getPlayhead() {
                        if (this.getVideo() && this.getVideo().isBreakStarted) return this._lastPlayhead;
                        var e = this.player.getPosition();
                        return e && e < 0 && (e = Math.abs(e), this.monitor && this.monitor.stop()), e;
                    }
                    getPlayrate() {
                        var e = 1;
                        return this.tag && this.tag.playbackRate ? e = this.tag.playbackRate : this.player.getPlaybackRate && (e = this.player.getPlaybackRate()), e;
                    }
                    getDuration() {
                        return this.duration || this.player.getDuration() || null;
                    }
                    getBitrate() {
                        var e = -1, t = this.player.getVisualQuality();
                        return "number" == typeof this.player.getCurrentQuality() && this.player.getQualityLevels() && -1 !== this.player.getCurrentQuality() && (t = this.player.getQualityLevels()[this.player.getCurrentQuality()]) && t.bitrate && (e = t.bitrate), t = this.player.getVisualQuality(), e <= 0 && t && t.bitrate ? e = t.bitrate : e <= 0 && t && t.level && t.level.bitrate && (e = t.level.bitrate), e;
                    }
                    getRendition() {
                        var e = null, t = this.player.getVisualQuality();
                        return t && null !== t && t.level ? e = this.getNpawUtils().buildRenditionString(t.level.width, t.level.height, t.level.bitrate || 0) : "number" == typeof this.player.getCurrentQuality() && this.player.getQualityLevels() && -1 !== this.player.getCurrentQuality() && ((t = this.player.getQualityLevels()[this.player.getCurrentQuality()]) && "auto" === t.label ? e = this.getNpawUtils().buildRenditionString(t.bandwidth) : t && t.label ? e = t.label : -1 === this.player.getCurrentQuality() && (e = "auto")), e;
                    }
                    getTitle() {
                        return this.title;
                    }
                    getIsLive() {
                        var e = !1;
                        return "boolean" == typeof this.isLive ? e = this.isLive : this.getDuration() <= 0 && (e = !0), e;
                    }
                    getResource() {
                        return this.player.getPlaylistItem().file;
                    }
                    getPlayerVersion() {
                        return this.player.version;
                    }
                    getPlayerName() {
                        return "JWPlayer";
                    }
                    setOptions(e) {
                        e && e.media && (this.isLive = e.media.isLive || this.isLive, this.title = e.media.title || this.title), e && (this.isLive = e["content.isLive"] || this.isLive, this.title = e["content.title"] || this.title), this.getVideo().mergeOptions(e);
                    }
                    registerListeners() {
                        for(var e in this._lastPlayhead = 0, this.monitorPlayhead(!0, !0), this.references = {
                            beforePlay: this.beforeplayListener.bind(this),
                            buffer: this.bufferListener.bind(this),
                            play: this.playListener.bind(this),
                            pause: this.pauseListener.bind(this),
                            error: this.errorListener.bind(this),
                            seek: this.seekingListener.bind(this),
                            seeked: this.seekedListener.bind(this),
                            complete: this.endedListener.bind(this),
                            meta: this.metaListener.bind(this),
                            playlistItem: this.playlistItemListener.bind(this),
                            setupError: this.setupErrorListener.bind(this),
                            idle: this.idleListener.bind(this),
                            firstFrame: this.firstFrameListener.bind(this),
                            time: this.timeListener.bind(this),
                            adsManager: this.managerListener.bind(this),
                            remove: this.removeListener.bind(this),
                            playbackRateChanged: this.playrateListener.bind(this)
                        }, this.references)this.player.on(e, this.references[e]);
                    }
                    unregisterListeners() {
                        if (this.monitor && this.monitor.stop(), this.player && this.references) {
                            for(var e in this.references)this.player.off(e, this.references[e]);
                            delete this.references;
                        }
                    }
                    timeListener(e) {
                        if (this._lastPlayhead = this.getPlayhead(), this.fatalErrored) return null;
                        0 !== e.position && this._start({}, "timeListener");
                        var t = e.position;
                        (e.currentTime || e.position) && ((this.previousPosition && this.previousPosition < t || this.getIsLive()) && this.fireJoin({}, "timeListener"), this.previousPosition = t);
                    }
                    playlistItemListener(e) {
                        this.firePlayerLog("playlistItemListener", {});
                        var t = this.player.getPlaylistItem();
                        if (t && t.file.indexOf("/VideoError.mp4") > -1) return null;
                        this.duration = void 0, this.throughput = -1, this.setOptions(this.player.getConfig().youbora), this.setOptions(t.youbora), this.fireStop({}, "playlistItemListener");
                    }
                    setupErrorListener(e) {
                        this.firePlayerLog("setupErrorListener", {}), this.fireError(e.message, void 0, void 0, void 0, "setupErrorListener");
                    }
                    checkForClientSideAds() {
                        var e = this.getVideo().getAdsAdapter(), t = !1;
                        return e && void 0 !== e.isDAI && (e.isDAI || (t = e.player.getCuePoints().includes(-1))), t;
                    }
                    idleListener(e) {
                        this.firePlayerLog("idleListener", {}), e.reason && "complete" !== e.reason || this.checkForClientSideAds() || this.fireStop({}, "idleListener");
                    }
                    firstFrameListener(e) {
                        this.firePlayerLog("firstFrameListener", {}), this.tag = this.player.getConfig().mediaElement, this.fireJoin({}, "firstFrameListener");
                    }
                    beforeplayListener(e) {
                        this.firePlayerLog("beforeplayListener", {}), this.duration = void 0, this.throughput = -1, this.player.getPlaylistItem().youbora || this.setOptions(this.player.getConfig().youbora), this.flags.isStarted || (this._start({}, "beforeplayListener"), this.tag = this.player.getConfig().mediaElement, this.fatalErrored = !1, this.getVideo().getAdsAdapter() || this.getVideo().setAdsAdapter(this.getAdapterClass("genericAdsAdapter"), this.plugin));
                    }
                    managerListener(e) {
                        this.firePlayerLog("managerListener", {}), this.getVideo().getAdsAdapter() || (this.getVideo().setAdsAdapter(this.getAdapterClass("genericAdsAdapter"), this.plugin), this.getVideo().getAdsAdapter().managerListener(e));
                    }
                    bufferListener(e) {
                        this.firePlayerLog("bufferListener", {}), this.flags.isPaused || this.fireBufferBegin({}, !1, "firstFrameListener");
                    }
                    playListener(e) {
                        this.firePlayerLog("playListener", {}), this.fireBufferEnd({}, "playListener"), this.fireSeekEnd({}, "playListener"), this.fireResume({}, "playListener"), this.monitor.skipNextTick();
                    }
                    pauseListener(e) {
                        this.firePlayerLog("pauseListener", {}), this.flags.isSeeking && this.fireSeekEnd({}, "playListener"), this.firePause({}, "pauseListener");
                    }
                    errorListener(e) {
                        this.firePlayerLog("errorListener", {}), e.message && e.message.toLowerCase().includes("casting failed to load") || (e.code ? this.fireError(e.code, e.message, void 0, void 0, "errorListener") : this.fireError(e.message, void 0, void 0, void 0, "errorListener"), (!e.message || e.message.toLowerCase().includes("network error") || e.message.toLowerCase().includes("could not be played") || e.message.toLowerCase().includes("cannot load") || e.message.toLowerCase().includes("cannot be played") || e.message.toLowerCase().includes("down") || e.message.toLowerCase().includes("fragloaderror") || e.message.toLowerCase().includes("levelloadtimeout") || e.message.toLowerCase().includes("file not found")) && this.fireStop({}, "errorListener"), e.code && (e.code < 3e5 || e.code > 309e3) && (this.fireStop({}, "errorListener"), this.fatalErrored = !0));
                    }
                    seekingListener(e) {
                        this.firePlayerLog("seekingListener", {}), this.fireSeekBegin({}, !1, "seekingListener");
                    }
                    seekedListener(e) {
                        this.firePlayerLog("seekedListener", {}), "paused" !== this.player.getState() && (this.fireSeekEnd({}, "seekedListener"), this.monitor.skipNextTick());
                    }
                    endedListener(e) {
                        this.checkForClientSideAds() || (this.firePlayerLog("endedListener", {}), this.fireStop({}, "endedListener"));
                    }
                    removeListener(e) {
                        this.firePlayerLog("removeListener", {}), this.getVideo().fireStop({}, "removeListener");
                    }
                    playrateListener(e) {
                        this.monitor && this.monitor.skipNextTick();
                    }
                    _start(e, t) {
                        !this.flags.isStarted && this.player && this.getVideo() && (this._getDrm(), this.fireStart(e, t));
                    }
                    _getDrm(e) {
                        var t = this.player.getPlaylistItem(this.player.getPlaylistIndex());
                        for(var i in t.allSources){
                            var s = t.allSources[i];
                            if (s.file === t.file && s.drm && "function" == typeof Object.keys) {
                                var r = Object.keys(s.drm);
                                1 === r.length && this.getVideo().mergeOptions({
                                    "content.drm": r[0]
                                });
                                break;
                            }
                        }
                    }
                    metaListener(e) {
                        this.duration = e.duration || this.duration, e.metadata && (this.duration = e.metadata.duration || this.duration);
                    }
                    constructor(){
                        (0, _defineProperty._)(this, "adsAdapters", {
                            genericAdsAdapter: g
                        });
                    }
                },
                Dashjs: class {
                    checkExistsPlayer() {
                        try {
                            return this.checkExistsObjectOnPage(this.player.getVideoElement());
                        } catch (e) {
                            return !0;
                        }
                    }
                    getVersion() {
                        return "7.0.12-dashjs-jsclass";
                    }
                    getPlayhead() {
                        var e = null;
                        return this.player && (e = this.isLive ? this.player.timeAsUTC() : this.player.time()), e;
                    }
                    getDroppedFrames() {
                        var e = 0;
                        return this.player && (e = this.player.getDashMetrics().getCurrentDroppedFrames()), e;
                    }
                    getDuration() {
                        var e = null;
                        return this.player && (e = this.player.duration()), e;
                    }
                    getBitrate() {
                        var e = this._getRenditionInfo();
                        return e ? e.bitrate : null;
                    }
                    getRendition() {
                        var e = this._getRenditionInfo();
                        return e ? this.getNpawUtils().buildRenditionString(e.width, e.height, e.bitrate) : null;
                    }
                    _getRenditionInfo() {
                        var e = null;
                        if (this.player) {
                            var t = this.player.getQualityFor("video");
                            t && (e = this.player.getBitrateInfoListFor("video")[t]);
                        }
                        return e;
                    }
                    getThroughput() {
                        if (this.getCdnTraffic() && 0 !== this.getCdnTraffic() && this.plugin && this.plugin.getPingTime()) {
                            this.lastDataValue || (this.lastDataValue = 0);
                            var e = this.lastDataValue;
                            return this.lastDataValue = this.getCdnTraffic() + this.getP2PTraffic(), Math.round((this.lastDataValue - e) / this.plugin.getPingTime());
                        }
                        if (!this.throughput && this.player && this.player.getMetricsFor) {
                            var t = this.player.getMetricsFor("video"), i = this.player.getDashMetrics().getHttpRequests(t);
                            if (!i) return null;
                            for(var s = 0, r = 0, a = 0; a < i.length; a++){
                                var n = i[a];
                                if ("MediaSegment" === n.type && n.responsecode >= 200 && n.responsecode < 400 && "video" === n._stream) {
                                    var h = n._responseHeaders.match(/Content-Length: (.+)/i);
                                    if (h) {
                                        var l = (n.interval - (n.tresponse - n.trequest)) / 1e3;
                                        s += h[1] / l * 8, r++;
                                    }
                                }
                            }
                            if (!s) return null;
                            this.throughput = s / r;
                        }
                        if (!this.throughput && this.player && this.player.getAverageThroughput) {
                            var d = this.player.getAverageThroughput("video"), o = this.player.getAverageThroughput("audio");
                            this.throughput = 1e3 * (d + o);
                        }
                        return this.throughput;
                    }
                    getIsLive() {
                        return this.isLive || (this.isLive = !1), this.isLive;
                    }
                    getResource() {
                        var e = null;
                        if (this.player) try {
                            var t = this.player.getSource();
                            "string" == typeof t && (e = t);
                        } catch (e) {}
                        return e;
                    }
                    getPlayrate() {
                        return this.player ? this.player.getPlaybackRate() : 1;
                    }
                    getPlayerName() {
                        return "dashJS";
                    }
                    getPlayerVersion() {
                        var e = null;
                        return this.player && (e = this.player.getVersion()), e;
                    }
                    getLatency() {
                        var e = null;
                        return this.getIsLive() && this.player && this.player.getCurrentLiveLatency && (e = 1e3 * this.player.getCurrentLiveLatency()), e;
                    }
                    registerListeners() {
                        this.emptyVideoBuffer = !1, this.emptyAudioBuffer = !1, this.emptyTextBuffer = !1;
                        var e = dashjs.MediaPlayer.events;
                        if (this.references = {}, this.references[e.MANIFEST_LOADED] = this.manifestLoaded.bind(this), this.references[e.PLAYBACK_STARTED] = this.playbackStarted.bind(this), this.references[e.PLAYBACK_WAITING] = this.playbackWaiting.bind(this), this.references[e.PLAYBACK_STALLED] = this.playbackStalled.bind(this), this.references[e.PLAYBACK_PLAYING] = this.playbackPlaying.bind(this), this.references[e.PLAYBACK_SEEKED] = this.playbackPlaying.bind(this), this.references[e.PLAYBACK_PAUSED] = this.playbackPaused.bind(this), this.references[e.PLAYBACK_ENDED] = this.playbackEnded.bind(this), this.references[e.ERROR] = this.errorListener.bind(this), this.references[e.PLAYBACK_ERROR] = this.playbackError.bind(this), this.references[e.PLAYBACK_SEEKING] = this.playbackSeeking.bind(this), this.references[e.BUFFER_LOADED] = this.processBufferLoaded.bind(this), this.references[e.BUFFER_EMPTY] = this.processBufferEmpty.bind(this), this.player) for(var t in this.references)this.player.on(t, this.references[t]);
                    }
                    unregisterListeners() {
                        if (this.emptyVideoBuffer = !1, this.emptyAudioBuffer = !1, this.emptyTextBuffer = !1, this.player && this.references) {
                            for(var e in this.references)this.player.off(e, this.references[e]);
                            delete this.references;
                        }
                    }
                    processBufferEmpty(e) {
                        "video" === e.mediaType ? this.emptyVideoBuffer = !0 : "audio" === e.mediaType ? this.emptyAudioBuffer = !0 : "text" === e.mediaType && (this.emptyTextBuffer = !0);
                    }
                    processBufferLoaded(e) {
                        "video" === e.mediaType ? this.emptyVideoBuffer = !1 : "audio" === e.mediaType ? this.emptyAudioBuffer = !1 : "text" === e.mediaType && (this.emptyTextBuffer = !1);
                    }
                    manifestLoaded(e) {
                        this.firePlayerLog("manifestLoaded", {}), this.isLive = e.data && "dynamic" === e.data.type;
                    }
                    playbackStarted(e) {
                        this.firePlayerLog("playbackStarted", {}), this.fireStart({}, "playbackStarted");
                    }
                    playbackPaused(e) {
                        this.firePlayerLog("playbackPaused", {}), this.firePause({}, "playbackPaused");
                    }
                    playbackPlaying(e) {
                        this.firePlayerLog("playbackPlaying", {}), this.flags.isSeeking ? this.fireSeekEnd({}, "playbackPlaying") : this.flags.isPaused && this.fireResume({}, "playbackPlaying"), this.fireBufferEnd({}, "playbackPlaying"), this.fireJoin({}, "playbackPlaying");
                    }
                    playbackWaiting(e) {
                        var t = this.isLegacyBufferBehaviourEnabled();
                        this.firePlayerLog("playbackWaiting", {}), t && !this.emptyVideoBuffer || this.fireBufferBegin({}, !1, "playbackWaiting");
                    }
                    playbackStalled(e) {
                        this.firePlayerLog("playbackStalled", {}), this.fireBufferBegin({}, !1, "playbackStalled");
                    }
                    errorListener(e) {
                        this.firePlayerLog("errorListener", {}), e.error.code ? this.fireError(e.error.code, e.error.message, void 0, void 0, "errorListener") : this.fireError(e.error, "Error", void 0, void 0, "errorListener");
                    }
                    playbackError(e) {
                        this.firePlayerLog("playbackError", {}), e.error.code ? this.fireError(e.error.code, e.error.message, void 0, void 0, "playbackError") : this.fireError(e.error, "Playback error", void 0, void 0, "playbackError");
                    }
                    playbackSeeking(e) {
                        this.firePlayerLog("playbackSeeking", {}), this.isLive && this.fireStart({}, "playbackSeeking"), this.fireSeekBegin({}, !1, "playbackSeeking");
                    }
                    playbackEnded(e) {
                        const t = this.getVideo().getAdsAdapter();
                        let i = !1;
                        t && void 0 !== t.isDAI && (t.isDAI || (i = t.player.getCuePoints().includes(-1))), e.isLast && !i && (this.firePlayerLog("playbackEnded", {}), this.fireStop({}, "playbackEnded"));
                    }
                    getCdnTraffic() {
                        if (this.player.getMetricsFor) {
                            var e = this.player.getMetricsFor("p2pweb");
                            if (!e) return this.getNpawReference().Adapter.prototype.getCdnTraffic();
                            var t = e.metricsP2PWeb;
                            return t.videoAvgLength * t.chunksFromCDN + t.audioAvgLength * t.chunksFromCDN;
                        }
                        return null;
                    }
                    getP2PTraffic() {
                        if (this.player.getMetricsFor) {
                            var e = this.player.getMetricsFor("p2pweb");
                            if (!e) return this.getNpawReference().Adapter.prototype.getP2PTraffic();
                            var t = e.metricsP2PWeb;
                            return t.videoAvgLength * t.chunksFromP2P + t.audioAvgLength * t.chunksFromP2P;
                        }
                        return null;
                    }
                },
                Nagra: class {
                    checkExistsPlayer() {
                        try {
                            return this.checkExistsObjectOnPage(this.player.el_);
                        } catch (e) {
                            return !0;
                        }
                    }
                    pauseListener(e) {
                        this.firePlayerLog("pauseListener", {}), this.firePause({}, "pauseListener");
                    }
                    stalledListener(e) {
                        this.firePlayerLog("stalledListener", {}), this.fireBufferBegin({}, !1, "stalledListener");
                    }
                    bufferingListener(e) {
                        this.firePlayerLog("waitingListener", {}), this.fireBufferBegin({}, !1, "waitingListener");
                    }
                    getIsLive() {
                        return !!this.player.el_ && this.player.el_.duration === 1 / 0;
                    }
                    playListener(e) {
                        this.firePlayerLog("playListener", {}), this.player && this.checkReadyState(this.player.readyState, "playListener"), this.fireStart({}, "playListener");
                    }
                    registerListeners() {
                        for(var e in this.monitorPlayhead(!1, !1), this.references = {
                            play: this.playListener.bind(this),
                            timeupdate: this.timeupdateListener.bind(this),
                            pause: this.pauseListener.bind(this),
                            playing: this.playingListener.bind(this),
                            error: this.errorListener.bind(this),
                            seeking: this.seekingListener.bind(this),
                            seeked: this.seekedListener.bind(this),
                            ended: this.endedListener.bind(this),
                            loadstart: this.loadStartListener.bind(this),
                            stalled: this.stalledListener.bind(this),
                            waiting: this.bufferingListener.bind(this),
                            canplay: this.canPlayListener.bind(this),
                            canplaythrough: this.canPlayThroughListener.bind(this),
                            loadedmediadata: this.loadedMediaDataListener.bind(this),
                            loadeddata: this.loadedDataListener.bind(this)
                        }, this.references)this.player.on(e, this.references[e]);
                    }
                    endedListener(e) {
                        this.firePlayerLog("endedListener", {}), this.fireStop({}, "endedListener");
                    }
                    getPlayrate() {
                        return this.player.playbackRate();
                    }
                    canPlayListener(e) {
                        this.player && this.checkReadyState(this.player.readyState, "canPlayListener");
                    }
                    canPlayThroughListener(e) {
                        this.player && this.checkReadyState(this.player.readyState, "canPlayThroughListener");
                    }
                    timeupdateListener(e) {
                        (this.getPlayhead() > .1 || this.getVideo() && this.getVideo().getIsLive()) && !this.player.el_.error && (this.fireStart({}, "timeupdateListener"), this.fireJoin({}, "timeupdateListener"));
                    }
                    getResource() {
                        return this.player.currentSrc();
                    }
                    getPlayhead() {
                        return this.player.currentTime();
                    }
                    getDuration() {
                        return this.player.duration();
                    }
                    seekingListener(e) {
                        this.firePlayerLog("seekingListener", {}), this.fireSeekBegin({}, !1, "seekingListener");
                    }
                    getPlayerName() {
                        return "nagra";
                    }
                    playingListener(e) {
                        this.firePlayerLog("playingListener", {}), this.fireResume({}, "playingListener"), this.fireSeekEnd({}, "playingListener"), this.flags.isBuffering && this.fireBufferEnd({}, "playingListener");
                    }
                    errorListener(e) {
                        this.firePlayerLog("errorListener", {});
                        var t = null, i = null;
                        try {
                            e && e.target && e.target.error && (i = e.target.error.code, t = e.target.error.message);
                        } catch (e) {}
                        this.fireError(i, t, void 0, void 0, "errorListener");
                    }
                    loadedMediaDataListener(e) {
                        this.player && this.checkReadyState(this.player.readyState, "loadedMediaDataListener");
                    }
                    getVersion() {
                        return "7.0.1-nagra-jsclass";
                    }
                    seekedListener(e) {
                        this.firePlayerLog("seekedListener", {}), this.fireSeekEnd({}, "seekedListener");
                    }
                    loadStartListener(e) {
                        this.firePlayerLog("loadStartListener", {}), this.flags.isJoined && this.fireStop({}, "loadStartListener");
                    }
                    unregisterListeners() {
                        if (this.monitor && this.monitor.stop(), this.player && this.references) for(var e in this.references)this.player.removeEventListener(e, this.references[e]), delete this.references[e];
                    }
                    loadedDataListener(e) {
                        this.player && this.checkReadyState(this.player.readyState, "loadedDataListener");
                    }
                    getPlayerVersion() {
                        var e = "Nagra";
                        return window.OTV.versions.product && (e += window.OTV.versions.product), e;
                    }
                    getThroughput() {
                        return this.player && this.player.otvtoolkit().networkStatistics.getNetworkUsage().downloadBitrate ? this.player.otvtoolkit().networkStatistics.getNetworkUsage().downloadBitrate : null;
                    }
                    getBitrate() {
                        return this.player && this.player.otvtoolkit().playbackStatistics.getStreamBitrate() ? this.player.otvtoolkit().playbackStatistics.getStreamBitrate() : null;
                    }
                    getDroppedFrames() {
                        let e = 0;
                        return this.player.otvtoolkit().renderingStatistics.getFrameDrops() && (e = this.player.otvtoolkit().renderingStatistics.getFrameDrops()), e;
                    }
                    getFramesPerSecond() {
                        let e = null;
                        return this.player.otvtoolkit().renderingStatistics.getFramesPerSecondNominal() && (e = this.player.otvtoolkit().renderingStatistics.getFramesPerSecondNominal()), e;
                    }
                    getRendition() {
                        let e, t, i, s = this.player.tech_.shaka_.getVariantTracks();
                        if (null !== s) for (const r of s)!0 === r.active && (e = r.width, t = r.height, i = r.bandwidth);
                        return this.getNpawUtils().buildRenditionString(e, t, i);
                    }
                },
                Brightcove: class {
                    isInAds() {
                        try {
                            return this.player.ads && this.player.ads.inAdBreak && "function" == typeof this.player.ads.inAdBreak && this.player.ads.inAdBreak();
                        } catch (e) {
                            return !1;
                        }
                    }
                    getBitrate() {
                        var e = null, t = this.getUsedTech();
                        return t && t.getBitrate && (e = t.getBitrate(this)), e;
                    }
                    checkExistsPlayer() {
                        try {
                            return this.checkExistsObjectOnPage(this.player.el());
                        } catch (e) {
                            return !0;
                        }
                    }
                    pauseListener(e) {
                        this.firePlayerLog("pauseListener", {}), this.firePause({}, "pauseListener");
                    }
                    bufferingListener(e) {
                        this.firePlayerLog("bufferingListener", {}), this.flags.isSeeking || this.fireBufferBegin({}, !1, "bufferingListener");
                    }
                    getRendition() {
                        var e = null, t = this.getUsedTech();
                        return t && t.getRendition && (e = t.getRendition(this)), e;
                    }
                    getPlayerVersion() {
                        var e = null;
                        return "undefined" != typeof videojs && (e = videojs.VERSION), e;
                    }
                    playListener(e) {
                        this.firePlayerLog("playListener", {}), this.isInAds() || (this.flags.isStarted ? this.lastSrc && this.lastSrc !== this.getResource() && (this.fireStop({}, "playListenerNewResource"), this.acumBytesFunc(), this.lastPlayhead = void 0, this._startEvent("playListenerNewResource"), this.lastSrc = this.getResource()) : (this.lastSrc = this.getResource(), this._startEvent("playListenerNotStarted")));
                    }
                    loadAdsAdapter() {
                        var e;
                        if (null === this.plugin.getAdsAdapter()) {
                            if (this.getAdapterClass("bcoveImaAdsAdapter").isUsed()) {
                                if (e = this.getAdapterClass("bcoveImaAdsAdapter")) {
                                    this.plugin.setAdsAdapter(e, this.getVideo().getVideoKey());
                                    const t = Object.keys(this.getAdapterClasses()).filter((e)=>e.toLowerCase().includes("ads"));
                                    for (const e of t)this.getAdapterClass(e).unregisterListeners();
                                    this.getVideo().getAdsAdapter().registerListeners();
                                }
                            } else this.loadVideoJSAdsAdapter();
                        }
                    }
                    loadVideoJSAdsAdapter() {
                        if (this.getVideo()) {
                            if (!this.getVideo().getAdsAdapter() || this.getVideo().getAdsAdapter().isGeneric) {
                                var e = null;
                                if (this.getAdapterClass("bcoveAdsAdapter").isUsed() ? e = this.getAdapterClass("bcoveAdsAdapter") : null === this.getVideo().getAdsAdapter() && (e = this.getAdapterClass("genericAdsAdapter")).initProperties(), e) {
                                    this.plugin.setAdsAdapter(e, this.getVideo().getVideoKey());
                                    const t = Object.keys(this.getAdapterClasses()).filter((e)=>e.toLowerCase().includes("ads"));
                                    for (const e of t)this.getAdapterClass(e).unregisterListeners();
                                    this.getVideo().getAdsAdapter().registerListeners();
                                }
                            } else this.getVideo().getAdsAdapter().registerImaEvents && this.getVideo().getAdsAdapter().registerImaEvents();
                        }
                    }
                    errorModifyer(e, t, i) {
                        this.fatalList = e || [], this.nonFatalList = t || [], this.ignoreList = i || [];
                    }
                    getPlayrate() {
                        return this.player.playbackRate();
                    }
                    timeupdateListener(e) {
                        this.isInAds() || (this.getPlayhead() > .1 && (this.fireJoin({}, "timeupdateListener"), this.joinPolling && this.joinPolling.stop(), !this.flags.isPaused && this.lastSeekPlayhead && this.lastSeekPlayhead !== this.getPlayhead() && (this.fireSeekEnd({}, "timeupdateListener"), this.lastSeekPlayhead = !1)), this.flags.isJoined || (void 0 === this.lastPlayhead && (this.lastPlayhead = this.getPlayhead()), this.lastPlayhead !== this.getPlayhead() && (this.player.options_ && this.plugin && !this.getVideo().options["content.id"] && (this.getVideo().options["content.id"] = this.player.options_["data-video-id"]), this.fireStart({}, "timeupdateListener"), this.fireJoin({}, "timeupdateListener"), this.joinPolling && this.joinPolling.stop(), this.lastPlayhead = void 0)), this.getVideo()._adsAdapter && !this.getVideo()._adsAdapter.flags.isStarted && (this.lastPlayhead = this.getPlayhead()));
                    }
                    getPlayhead() {
                        return this.player.currentTime();
                    }
                    getDuration() {
                        return this.player.mediainfo && void 0 !== this.player.mediainfo.duration ? this.player.mediainfo.duration : this.getVideoJSDuration();
                    }
                    getVideoJSDuration() {
                        var e = this.player.duration();
                        return this.player.mediainfo && void 0 !== this.player.mediainfo.duration && (e = this.player.mediainfo.duration), e;
                    }
                    aderrorListener(e) {
                        this.loadAdsAdapter(), this.getVideo().getAdsAdapter() && this.getVideo().getAdsAdapter().adPlayerErrorListener && this.getVideo().getAdsAdapter().adPlayerErrorListener(e);
                    }
                    _jointimePolling(e) {
                        this.getVideo() ? this.getVideo().getAdsAdapter() && this.getVideo().getAdsAdapter().flags.isStarted || (0 !== this.lastPlayhead && "number" == typeof this.lastPlayhead && this.lastPlayhead !== this.getPlayhead() && (this.fireJoin({}, "jointimePolling"), this.joinPolling && this.joinPolling.stop()), this.lastPlayhead = this.getPlayhead()) : this.joinPolling && this.joinPolling.stop();
                    }
                    acumBytesFunc() {
                        this.acumBytes += this.getTotalBytes() || 0;
                    }
                    adsEndedListener(e) {
                        this.firePlayerLog("adsEndedListener", {}), this.adsEnded = !0, this.getVideo().requestBuilder.lastSent.adPosition === this.getNpawReference().Constants.AdPosition.Postroll && (this.getVideo().fireStop({}, "adsEndedListener"), this.acumBytesFunc(), this.lastPlayhead = void 0);
                    }
                    getVersion() {
                        return "7.0.4-brightcove-videojs-jsclass";
                    }
                    seekedListener(e) {
                        this.firePlayerLog("seekedListener", {}), this.lastSeekPlayhead = this.getPlayhead();
                    }
                    getTech() {
                        return this.player.tech({
                            IWillNotUseThisInPlugins: !0
                        });
                    }
                    unregisterListeners() {
                        if (this.monitor && this.monitor.stop(), this.player && this.references) {
                            try {
                                for(var e in this.references)this.player.off(e, this.references[e]);
                            } catch (e) {}
                            delete this.references;
                        }
                    }
                    _startEvent(e) {
                        this.loadAdsAdapter(), this.player.options_ && this.plugin && !this.plugin.options["content.id"] && (this.plugin.options["content.id"] = this.player.options_["data-video-id"]), this.fireStart({}, e), this.flags.isJoined || (this.joinPolling || (this.joinPolling = new (this.getNpawReference()).Timer(this._jointimePolling.bind(this), 500)), this.joinPolling.start());
                    }
                    getIsLive() {
                        var e = null;
                        if (this.player.mediainfo && (e = !0, "number" == typeof this.player.mediainfo.duration && (e = this.player.mediainfo.duration < 1 || this.player.mediainfo.duration === 1 / 0)), this.player.duration && "function" == typeof this.player.duration) {
                            e = !0;
                            var t = this.player.duration();
                            "number" == typeof t && (e = t < 1 || t === 1 / 0);
                        }
                        return this.player.isLive && "function" === this.player.isLive && (e = this.player.isLive()), e;
                    }
                    conditionalStop(e) {
                        this.firePlayerLog("conditionalStop", {}), this.isInAds() || this.plugin && (this.adsEnded = !1, this.fireStop({}, "conditionalStop"), this.plugin && !this.getVideo().options["content.id"] && (this.getVideo().options["content.id"] = null), this.acumBytesFunc(), this.lastPlayhead = void 0);
                    }
                    getTitle() {
                        return this.player.mediainfo ? this.player.mediainfo.name : this.getVideoJSTitle();
                    }
                    getVideoJSTitle() {
                        var e = null;
                        return this.player.mediainfo && (e = this.player.mediainfo.name), e;
                    }
                    getTotalBytes() {
                        var e = null, t = this.getUsedTech();
                        return t && t.getTotalBytes && (e = t.getTotalBytes(this)), e;
                    }
                    registerListeners() {
                        if (this.monitorPlayhead(!1, !1, 1200), this.acumBytes = 0, this.ignoreList = [], this.fatalList = [], this.nonFatalList = [], this.references = {
                            loadstart: this.loadstartListener.bind(this),
                            adsready: this.loadAdsAdapter.bind(this),
                            play: this.playListener.bind(this),
                            timeupdate: this.timeupdateListener.bind(this),
                            pause: this.pauseListener.bind(this),
                            playing: this.playingListener.bind(this),
                            ended: this.conditionalStop.bind(this),
                            dispose: this.disposeListener.bind(this),
                            seeking: this.seekingListener.bind(this),
                            seeked: this.seekedListener.bind(this),
                            error: this.errorListener.bind(this),
                            adserror: this.aderrorListener.bind(this),
                            adsEnded: this.adsEndedListener.bind(this),
                            texttrackchange: this.textListener.bind(this),
                            waiting: this.bufferingListener.bind(this)
                        }, this.player) for(var e in this.references)this.player.on(e, this.references[e]);
                        setTimeout(this.loadAdsAdapter.bind(this), 50);
                    }
                    getResource() {
                        var e = null, t = this.getUsedTech();
                        return t && t.getResource && (e = t.getResource(this)), e || (e = this.player.currentSrc()), e;
                    }
                    textListener(e) {
                        if (this.player.textTracks) for(var t = this.player.textTracks(), i = t.length, s = 0; s < i; ++s)t[s] && "showing" === t[s].mode && (this.getVideo().options["content.subtitles"] = t[s].label || t[s].language);
                    }
                    seekingListener(e) {
                        this.firePlayerLog("seekingListener", {}), this.fireSeekBegin({}, !1, "seekingListener");
                    }
                    disposeListener(e) {
                        this.firePlayerLog("disposeListener", {}), this.plugin && (this.getVideo().fireStop({}, "disposeListener"), this.getVideo().removeAdsAdapter(), this.getVideo().removeAdapter());
                    }
                    loadstartListener(e) {
                        this.firePlayerLog("loadstartListener", {}), this.loadAdsAdapter();
                    }
                    getPlayerName() {
                        var e = this.getVideoJSPlayerName();
                        return this.player && this.player.mediainfo && (e += "-bcove"), e;
                    }
                    getVideoJSPlayerName() {
                        var e = "videojs";
                        return this.getAdapterClass("contribHlsTech").isUsed(this) ? e += "-hls" : this.getAdapterClass("hlsJsTech").isUsed(this) ? e += "-hlsjs" : this.getAdapterClass("shakaTech").isUsed(this) ? e += "-shaka" : this.getAdapterClass("dashShakaTech").isUsed(this) ? e += "-dash-shaka" : this.getAdapterClass("dashTech").isUsed(this) && (e += "-dash"), this.player.FreeWheelPlugin && (e += "-fw"), this.player.mediainfo && (e += "-bcove"), e;
                    }
                    playingListener(e) {
                        this.firePlayerLog("playingListener", {}), this._startEvent("playingListener"), this.fireResume({}, "playingListener"), this.getPlayhead() < 1 && this.fireSeekEnd({}, "playingListener"), this.fireBufferEnd({}, "playingListener");
                    }
                    getUsedTech() {
                        var e = null;
                        if (this.getPlugin().getAdaptersProperties().usedTech) {
                            switch(this.getPlugin().getAdaptersProperties().usedTech.toLowerCase()){
                                case "hls":
                                    this.getAdapterClass("contribHlsTech").isUsed(this) && (e = this.getAdapterClass("contribHlsTech"));
                                    break;
                                case "hlsjs":
                                    this.getAdapterClass("hlsJsTech").isUsed(this) && (e = this.getAdapterClass("hlsJsTech"));
                                    break;
                                case "shaka":
                                    this.getAdapterClass("shakaTech").isUsed(this) && (e = this.getAdapterClass("shakaTech"));
                                    break;
                                case "dashshaka":
                                    this.getAdapterClass("dashShakaTech").isUsed(this) && (e = this.getAdapterClass("dashShakaTech"));
                                    break;
                                case "dash":
                                    this.getAdapterClass("dashTech").isUsed(this) && (e = this.getAdapterClass("dashTech"));
                            }
                            if (null != e) return e;
                        }
                        return this.getAdapterClass("contribHlsTech").isUsed(this) ? e = this.getAdapterClass("contribHlsTech") : this.getAdapterClass("hlsJsTech").isUsed(this) ? e = this.getAdapterClass("hlsJsTech") : this.getAdapterClass("shakaTech").isUsed(this) ? e = this.getAdapterClass("shakaTech") : this.getAdapterClass("dashShakaTech").isUsed(this) ? e = this.getAdapterClass("dashShakaTech") : this.getAdapterClass("dashTech").isUsed(this) && (e = this.getAdapterClass("dashTech")), e;
                    }
                    errorListener(e) {
                        this.firePlayerLog("errorListener", {});
                        this.fireError(null, null, void 0, void 0, "errorListener");
                    }
                    constructor(){
                        (0, _defineProperty._)(this, "adsAdapters", {
                            bcoveAdsAdapter: m,
                            bcoveImaAdsAdapter: P,
                            genericAdsAdapter: L
                        });
                        (0, _defineProperty._)(this, "additionalContexts", {
                            contribHlsTech: c,
                            dashTech: f,
                            dashShakaTech: y,
                            hlsJsTech: u,
                            shakaTech: p
                        });
                    }
                },
                Theoplayer: class {
                    checkExistsPlayer() {
                        try {
                            if (this.player.element) return this.checkExistsObjectOnPage(this.player.element);
                        } catch (e) {
                            return !0;
                        }
                    }
                    getBitrate() {
                        var e = -1, t = this.getActiveQuality();
                        return t && t.bandwidth && (e = t.bandwidth), e;
                    }
                    pauseListener(e) {
                        this.firePlayerLog("pauseListener", {}), this.flags.isSeeking || this.firePause({}, "pauseListener");
                    }
                    offlineListener(e) {
                        this.firePlayerLog("offlineListener", {}), this.fireError("OFFLINE_SOURCE", "OFFLINE_SOURCE", void 0, void 0, "offlineListener");
                    }
                    getRendition() {
                        this._setLanguage();
                        var e = null, t = this.getActiveQuality();
                        return t ? e = t.name && isNaN(t.name) ? t.name : this.getNpawUtils().buildRenditionString(t.width, t.height, t.bandwidth) : this.player.videoHeight && this.player.videoWidth && (e = this.getNpawUtils().buildRenditionString(this.player.videoWidth, this.player.videoHeight, 0)), e;
                    }
                    getLatency() {
                        var e = null;
                        return this.getIsLive() && null !== this.player.currentProgramDateTime && (e = (new Date).getTime() - this.player.currentProgramDateTime), e;
                    }
                    getPlayerVersion() {
                        var e = "THEOplayer";
                        return "undefined" != typeof THEOplayer ? e += THEOplayer.version : "undefined" != typeof theoplayer && (e += theoplayer.version), e;
                    }
                    playListener(e) {
                        this.firePlayerLog("playListener", {}), this.player.autoplay || this.fireInit({}, "playListener");
                    }
                    endedListener(e) {
                        this.firePlayerLog("endedListener", {}), this.flags.isStarted && (this.fireStop({}, "endedListener"), this.ended = !0);
                    }
                    getPlayrate() {
                        try {
                            return this.player.playbackRate;
                        } catch (e) {}
                        return 0;
                    }
                    getActiveQuality() {
                        for(var e = this.player.videoTracks, t = 0; t < e.length; t++){
                            var i = e.item(t);
                            if (i.enabled) return i.activeQuality;
                        }
                        return {};
                    }
                    playrateListener(e) {
                        this.monitor && this.monitor.skipNextTick();
                    }
                    getPlayhead() {
                        var e = null;
                        try {
                            this.player.ads && this.player.ads.playing || this.flags.isSeeking && this.flags.isPaused ? e = this.lastPlayhead : (this.lastPlayhead = this.player.currentTime, e = this.player.currentTime);
                        } catch (e) {}
                        return e;
                    }
                    getDuration() {
                        var e = null;
                        return this.player.ads && this.player.ads.playing ? e = this.lastDuration || e : (this.lastDuration = this.player.duration, e = this.lastDuration), e;
                    }
                    getThroughput() {
                        return this.player && this.player.metrics && this.player.metrics.currentBandwidthEstimate ? this.player.metrics.currentBandwidthEstimate : null;
                    }
                    getDroppedFrames() {
                        return this.player.metrics ? this.player.metrics.droppedVideoFrames : null;
                    }
                    getVersion() {
                        return "7.0.13-theoplayer2-jsclass";
                    }
                    unregisterListeners() {
                        if (this.getVideo() && this.getVideo().removeAdsAdapter(), this.monitor && this.monitor.stop(), this.player && this.references) {
                            for(var e in this.references)this.player.removeEventListener(e, this.references[e]);
                            delete this.references;
                        }
                        if (this.player && this.player.network && this.networkReferences) {
                            for(var t in this.player.network.removeRequestInterceptor(this.requestInterceptor), this.player.network.removeResponseInterceptor(this.responseInterceptor), this.networkReferences)this.player.network.removeEventListener(t, this.networkReferences[t]);
                            delete this.networkReferences, delete this.requestInterceptor, delete this.responseInterceptor;
                        }
                    }
                    stateChangeListener(e) {
                        1 === e.readyState && this.player.src !== this.previousSrc && void 0 !== this.player.src && (this.fireInit({}, "stateChangeListener"), this.previousSrc = this.player.src), 0 === e.currentTime && 0 === e.readyState && this.player.src !== this.previousSrc && void 0 !== this.player.src && (this.fireStop(), this.previousSrc = this.player.src);
                    }
                    _segmentUrl() {
                        var e = null;
                        return this.getVideo() && this.getVideo().options && !this.getVideo().options["parse.manifest"] && this.parsedUrl && (e = {
                            parsedResource: this.parsedUrl
                        }), e;
                    }
                    getIsLive() {
                        return isNaN(this.player.duration) ? null : this.player.duration === 1 / 0;
                    }
                    _setLanguage() {
                        if (this.getVideo()) {
                            var e = this.player.audioTracks;
                            for(var t in e){
                                var i = e[t];
                                i.activeQuality && (this.getVideo().options["content.language"] = "und" === i.language ? i.name || i.label : i.language);
                            }
                        }
                    }
                    registerListeners() {
                        for(var e in this.getNpawUtils().logAllEvents(this.player), this.monitorPlayhead(!1, !0), this.references = {
                            play: this.playListener.bind(this),
                            playing: this.playingListener.bind(this),
                            pause: this.pauseListener.bind(this),
                            seeking: this.seekingListener.bind(this),
                            ended: this.endedListener.bind(this),
                            error: this.errorListener.bind(this),
                            readystatechange: this.stateChangeListener.bind(this),
                            sourcechange: this.endedListener.bind(this),
                            timeupdate: this.timeUpdateListener.bind(this),
                            ratechange: this.playrateListener.bind(this),
                            waiting: this.waitingListener.bind(this)
                        }, this.networkReferences = {
                            offline: this.offlineListener.bind(this)
                        }, this.references)this.player.addEventListener(e, this.references[e]);
                        if (this.player.network) for(var t in this.networkReferences)this.player.network.addEventListener(t, this.networkReferences[t]);
                        !this.getVideo().getAdsAdapter() && this.player.ads && (this.getAdapterClass("nativeAdsAdapter")._updatePlayer(this.player), this.plugin.setAdsAdapter(this.getAdapterClass("nativeAdsAdapter"), this.getVideo().getVideoKey()));
                    }
                    getResource() {
                        return this.player.src && !this.previousSrc && (this.previousSrc = this.player.src), this.player.src || null;
                    }
                    getURLToParse() {
                        return this.parsedUrl;
                    }
                    seekingListener(e) {
                        this.firePlayerLog("seekingListener", {}), this.fireSeekBegin({}, !1, "seekingListener");
                    }
                    timeUpdateListener(e) {
                        this.player.ads && this.player.ads.playing || (this.flags.isStarted || !e.currentTime || this.ended || (this.getIsLive() || e.currentTime + 1 < this.getDuration()) && (this.fireStart(this._segmentUrl(), "timeUpdateListener"), this.fireJoin(this._segmentUrl(), "timeUpdateListener")), this.flags.isPaused || (this.fireSeekEnd({}, "timeUpdateListener"), this.fireBufferEnd({}, "timeUpdateListener")));
                    }
                    getPlayerName() {
                        return "THEOplayer";
                    }
                    playingListener(e) {
                        this.firePlayerLog("playingListener", {}), this.getVideo().getAdsAdapter() && this.getVideo().getAdsAdapter().flags.isStarted || (this.flags.isSeeking && !this.flags.isPaused && this.fireSeekEnd({}, "playingListener"), this.flags.isBuffering && !this.flags.isPaused && this.fireBufferEnd({}, "playingListener"), this.fireResume({}, "playingListener"), this.player.ads && this.player.ads.playing || (this.ended = !1, this.fireStart(this._segmentUrl(), "playingListener")), this.fireJoin({}, "playingListener"));
                    }
                    waitingListener(e) {
                        this.firePlayerLog("waitingListener", {}), this.flags.isPaused || this.flags.isSeeking || this.fireBufferBegin({}, !1, "waitingListener");
                    }
                    errorListener(e) {
                        var t, i, s, r, a, n, h, l, d;
                        this.firePlayerLog("errorListener", {}), e.errorObject ? (t = e.errorObject.code, r = e.errorObject.message, h = !!e.errorObject.cause && e.errorObject.cause.message) : r = e.error, this.player && this.player.errorObject && (i = this.player.errorObject.code, a = this.player.errorObject.message, l = !!this.player.errorObject.cause && this.player.errorObject.cause.message), this.player && this.player.error && (s = this.player.error.code, n = this.player.error.message, d = this.player.error.cause);
                        var o = [];
                        r && o.push("event: " + r), a && o.push("player.errorObject: " + a), n && o.push("player.error: " + n);
                        var g = [];
                        h && g.push("event: " + h), l && g.push("player.errorObject: " + l), d && g.push("player.error: " + d);
                        var p = [];
                        t && p.push("event: " + t), i && p.push("player.errorObject: " + i), s && p.push("player.error: " + s);
                        var u = t || i || s || "GENERIC_ERROR", y = "[MESSAGES] " + o.join(" - ") + " - [CAUSES] " + g.join(" - ") + " - [CODES] " + p.join(" - ");
                        this.fireFatalError(u, y, void 0, void 0, "errorListener");
                    }
                    constructor(){
                        (0, _defineProperty._)(this, "adsAdapters", {
                            nativeAdsAdapter: v
                        });
                    }
                },
                NagraReactNative: class {
                    getVersion() {
                        return "7.0.1-nagra-react-native-jsclass";
                    }
                    getPlayhead() {
                        return this.playhead;
                    }
                    getIsLive() {
                        return !this.duration;
                    }
                    getDuration() {
                        return this.duration;
                    }
                    getResource() {
                        return this.resource;
                    }
                    setPlatform(e) {
                        this.reactPlatform = e;
                    }
                    getRendition() {
                        return this.width && this.height ? this.getNpawUtils().buildRenditionString(this.width, this.height) : null;
                    }
                    getPlayerName() {
                        return "Nagra React Native";
                    }
                    unregisterListeners() {
                        this.monitor && this.monitor.stop();
                    }
                    onLoad(e) {
                        var t = e.naturalSize;
                        t && (this.width = Math.round(t.width), this.height = Math.round(t.height)), this.duration = e.duration, this.fireStart();
                    }
                    onLoadStart(e) {
                        this.resource = e.src, this.fireStart(), this.flags.isJoined || (this.isWaiting = !1, this.fireJoin()), this.fireBufferEnd({}, "onLoadStart"), this.fireResume(), this.pausePlayhead = null;
                    }
                    onPlaying(e) {
                        this.fireStart(), this.flags.isJoined || (this.isWaiting = !1, this.fireJoin()), this.pausePlayhead && Math.abs(this.getPlayhead() - this.pausePlayhead) > .5 && !this.flags.isPaused && (this.fireSeekEnd({}, "onPlaying"), this.pausePlayhead = null), this.reactPlatform && "ios" == this.reactPlatform && !this.pausePlayhead && (this.fireSeekEnd({}, "onPlaying"), this.pausePlayhead = null), this.fireBufferEnd({}, "onPlaying"), this.fireResume();
                    }
                    onProgress(e) {
                        this.playhead = e.currentTime, this.fireStart(), this.playhead > .5 && !this.flags.isJoined && this.fireJoin(), this.pausePlayhead && !this.flags.isPaused && (Math.abs(this.getPlayhead() - this.pausePlayhead) > 2 ? this.fireSeekEnd({}, "onProgress") : this.isWaiting ? (this.fireBufferBegin({}, !0, "onProgress"), this.fireBufferEnd({}, "onProgress")) : (this.cancelSeek(), this.chronos.pause.pauseTime = null), this.isWaiting = !1, this.pausePlayhead = null);
                    }
                    onSeek(e) {
                        this.reactPlatform && "ios" == this.reactPlatform && this.fireSeekBegin({}, !1, "onSeek");
                    }
                    onWaiting(e) {
                        this.isWaiting = !0, this.fireBufferBegin({}, !1, "onWaiting");
                    }
                    onPaused(e) {
                        this.reactPlatform && "android" == this.reactPlatform && (this.pausePlayhead = this.getPlayhead(), this.fireSeekBegin({}, !0, "onPaused")), this.firePause(), this.reactPlatform && "android" == this.reactPlatform && (this.chronos.pause.startTime = (new Date).getTime());
                    }
                    onError(e) {
                        this.fireError(e.code, e.nativeError);
                    }
                    onStopped(e) {
                        this.fireStop();
                    }
                    onEnd(e) {
                        this.fireStop();
                    }
                },
                Chromecast: class {
                    getPlayhead() {
                        return this.player.getEstimatedTime || this.player.currentTime;
                    }
                    getVersion() {
                        return "7.0.2-chromecast-jsclass";
                    }
                    getDuration() {
                        return this.player.duration;
                    }
                    getBitrate() {
                        if (this.castPlayer && this.castPlayer.getStreamingProtocol) {
                            const e = this.castPlayer.getStreamingProtocol();
                            let t = 0;
                            try {
                                e.getStreamCount && e.getStreamCount() > 0 && (t = e.getStreamCount());
                            } catch (e) {}
                            for(let t = 0; t < e.getStreamCount(); t++){
                                const i = e.getStreamInfo(t);
                                if (0 === i.mimeType.indexOf("video/")) {
                                    const s = e.getQualityLevel(t);
                                    if (i.bitrates && i.bitrates[s]) return i.bitrates[s];
                                }
                            }
                        }
                    }
                    getRendition() {
                        let e;
                        if (this.player && this.player.videoHeight && this.player.videoWidth) {
                            let t = this.getVideo().getBitrate();
                            t <= 0 && (t = this.plugin.requestBuilder.lastSent.bitrate || -1), e = this.getNpawUtils().buildRenditionString(this.player.videoWidth, this.player.videoHeight, t);
                        }
                        return e;
                    }
                    getResource() {
                        let e;
                        return this.player.currentSrc.startsWith("blob:") ? this.castPlayer && (e = this.castPlayer.getHost().url) : e = this.player.currentSrc, e;
                    }
                    getPlayrate() {
                        return this.player.playbackRate;
                    }
                    getDroppedFrames() {
                        return this.player.webkitDroppedFrameCount;
                    }
                    getPlayerVersion() {
                        let e;
                        return "undefined" != typeof cast && cast.player && cast.player.api && (e = cast.player.api.VERSION), e;
                    }
                    getPlayerName() {
                        return "Chromecast";
                    }
                    registerListeners() {
                        this.getNpawUtils().logAllEvents(this.player), this.monitorPlayhead(!0, !1, 1200), this.references = {
                            loadstart: this.playListener.bind(this),
                            pause: this.pauseListener.bind(this),
                            playing: this.playingListener.bind(this),
                            error: this.errorListener.bind(this),
                            seeking: this.seekingListener.bind(this),
                            abort: this.endedListener.bind(this),
                            ended: this.endedListener.bind(this),
                            buffering: this.bufferingListener.bind(this)
                        }, this.hostReferences = {
                            onAutoPause: this.autoPauseListener.bind(this)
                        };
                        for(let e in this.references)this.player.addEventListener(e, this.references[e]);
                        if (this.castPlayer && this.castPlayer.getHost && this.castPlayer.getHost()) {
                            let e = this.castPlayer.getHost();
                            for(let t in this.hostReferences)e[t] = this.hostReferences[t];
                        }
                        this.registerModelVersion();
                    }
                    unregisterListeners() {
                        if (this.monitor && this.monitor.stop(), this.player && this.references) {
                            if ("function" == typeof this.player.removeEventListener) for(let e in this.references)this.player.removeEventListener(e, this.references[e]);
                            delete this.references;
                        }
                        if (this.castPlayer && this.castPlayer.getHost && this.castPlayer.getHost()) {
                            const e = this.castPlayer.getHost();
                            for(let t in this.hostReferences)e[t] = void 0;
                            delete this.hostReferences;
                        }
                    }
                    registerModelVersion() {
                        if (void 0 === this.getVideo().options["device.model"]) {
                            try {
                                const { hardwareConcurrency: e, userAgent: t } = window.navigator, i = cast.receiver.CastReceiverManager.getInstance();
                                if (i.canDisplayType('video/mp4; codecs="avc1.640033')) return void (this.getVideo().options["device.model"] = "Chromecast with Google TV");
                                if (t.includes("Android")) return void (this.getVideo().options["device.model"] = "Chromecast Android");
                                if (i.canDisplayType("video/mp4; codecs=hev1.1.6.L93.B0")) return void (this.getVideo().options["device.model"] = "Chromecast Ultra");
                                if (i.canDisplayType("video/mp4; codecs=avc1.64002A")) return void (this.getVideo().options["device.model"] = "Chromecast 3");
                                if (2 === e) return void (this.getVideo().options["device.model"] = "Chromecast 2");
                                if (1 === e) return void (this.getVideo().options["device.model"] = "Chromecast 1");
                            } catch (e) {}
                            this.getVideo().options["device.model"] = "Chromecast";
                        }
                    }
                    playListener(e) {
                        this.flags.isStarted && this.fireStop({}, "playListener"), this.fireStart({}, "playListener");
                    }
                    pauseListener(e) {
                        this.flags.isBuffering || this.firePause({}, "pauseListener");
                    }
                    playingListener(e) {
                        this.fireResume({}, "playingListener"), this.fireSeekEnd({}, "playingListener"), this.fireBufferEnd({}, "playingListener"), this.fireJoin({}, "playingListener");
                    }
                    errorListener(e) {
                        this.fireError(e);
                    }
                    endedListener(e) {
                        this.fireStop({}, "endedListener");
                    }
                    seekingListener(e) {
                        this.fireSeekBegin({}, !1, "seekingListener");
                    }
                    bufferingListener(e) {
                        this.flags.isPaused && this.fireResume({}, "bufferingListener"), this.fireBufferBegin({}, !1, "bufferingListener");
                    }
                    autoPauseListener(e) {
                        e ? (this.fireResume({}, "autoPauseListener"), this.fireBufferBegin({}, !1, "autoPauseListener")) : this.fireBufferEnd({}, "autoPauseListener");
                    }
                },
                ChromecastCaf: class {
                    getVersion() {
                        return "7.0.3-chromecast-caf-jsclass";
                    }
                    getPlayhead() {
                        return this.player.getCurrentTimeSec();
                    }
                    getPlayrate() {
                        let e = this.player.getPlaybackRate();
                        return e || this.flags.isPaused || (e = 1), e;
                    }
                    getDroppedFrames() {
                        return this.castMediaElement ? this.castMediaElement.webkitDroppedFrameCount : void 0;
                    }
                    getDuration() {
                        return this.player.getDurationSec();
                    }
                    getBitrate() {
                        return this.bitrate || 0;
                    }
                    getThroughput() {
                        let e = this.throughput || -1;
                        if (!this.throughput && this.castMediaElement && this.castMediaElement.webkitVideoDecodedByteCount && this.castMediaElement.webkitAudioDecodedByteCount) {
                            const t = this.castMediaElement.webkitVideoDecodedByteCount, i = this.castMediaElement.webkitAudioDecodedByteCount, s = this.actualCount || 0;
                            this.actualCount = t && i > t ? t : i + t;
                            const r = JSON.parse(this.plugin.getStoredData()).q.pt || 5;
                            e = Math.round((this.actualCount - s) / (r / 1e3));
                        }
                        return e;
                    }
                    getRendition() {
                        const e = this.castMediaElement ? this.castMediaElement.videoWidth : void 0, t = this.castMediaElement ? this.castMediaElement.videoHeight : void 0;
                        return this.getNpawUtils().buildRenditionString(e, t, this.getBitrate());
                    }
                    getTitle() {
                        return this.player.getMediaInformation().metadata.title;
                    }
                    getIsLive() {
                        return -1 === this.getDuration();
                    }
                    getResource() {
                        let e;
                        return this.player.getMediaInformation() && (e = this.player.getMediaInformation().contentUrl || this.player.getMediaInformation().contentId), e;
                    }
                    getPlayerVersion() {
                        return cast && cast.framework ? cast.framework.VERSION : void 0;
                    }
                    getPlayerName() {
                        return "Chromecast";
                    }
                    registerListeners() {
                        this.castMediaElement = void 0;
                        for(let e in this.player)if ("object" == typeof this.player[e]) for(let t in this.player[e])this.player[e][t] && "castMediaElement" === this.player[e][t].id && (this.castMediaElement = this.player[e][t]);
                        const e = cast.framework.events, t = cast.framework.events.DetailedErrorCode;
                        for(var i in this.errorFilter = [
                            t.MEDIAKEYS_UNKNOWN,
                            t.MEDIAKEYS_UNSUPPORTED,
                            t.MEDIAKEYS_WEBCRYPTO,
                            t.SEGMENT_NETWORK,
                            t.HLS_NETWORK_INVALID_SEGMENT,
                            t.DASH_MANIFEST_NO_MIMETYPE,
                            t.DASH_INVALID_SEGMENT_INFO,
                            t.TEXT_UNKNOWN,
                            t.SEGMENT_UNKNOWN,
                            t.BREAK_SEEK_INTERCEPTOR_ERROR,
                            t.APP,
                            t.IMAGE_ERROR,
                            t.LOAD_INTERRUPTED,
                            t.MEDIA_ERROR_MESSAGE
                        ], this.getNpawUtils().logAllEvents(this.player, [
                            null,
                            e.EventType.PLAY,
                            e.EventType.PAUSE,
                            e.EventType.PLAYING,
                            e.EventType.STALLED,
                            e.EventType.SEEKING,
                            e.EventType.SEEKED,
                            e.EventType.ERROR,
                            e.EventType.CLIP_ENDED,
                            e.EventType.BITRATE_CHANGED,
                            e.EventType.SEGMENT_DOWNLOADED,
                            e.EventType.BUFFERING,
                            e.EventType.EMSG,
                            e.EventType.ID3,
                            e.EventType.MEDIA_FINISHED,
                            e.EventType.MEDIA_STATUS,
                            e.EventType.CACHE_HIT,
                            e.EventType.BREAK_CLIP_STARTED,
                            e.EventType.BREAK_ENDED,
                            e.EventType.BREAK_CLIP_LOADING,
                            e.EventType.BREAK_CLIP_STARTED,
                            e.EventType.BREAK_CLIP_ENDED,
                            e.EventType.BREAK_STARTED
                        ]), this.monitorPlayhead(!0, !0), this.references = {}, this.references[e.EventType.PLAY] = this.playListener.bind(this), this.references[e.EventType.STALLED] = this.playListener.bind(this), this.references[e.EventType.BUFFERING] = this.bufferingListener.bind(this), this.references[e.EventType.PAUSE] = this.pauseListener.bind(this), this.references[e.EventType.BREAK_CLIP_STARTED] = this.pauseListener.bind(this), this.references[e.EventType.BREAK_ENDED] = this.resumeListener.bind(this), this.references[e.EventType.PLAYING] = this.playingListener.bind(this), this.references[e.EventType.SEEKING] = this.seekingListener.bind(this), this.references[e.EventType.MEDIA_FINISHED] = this.endedListener.bind(this), this.references[e.EventType.ERROR] = this.errorListener.bind(this), this.references[e.EventType.BITRATE_CHANGED] = this.bitrateChangedListener.bind(this), this.references[e.EventType.SEGMENT_DOWNLOADED] = this.segmentListener.bind(this), this.references[e.EventType.BREAK_STARTED] = this.playAdListener.bind(this), this.references[e.EventType.TIME_UPDATE] = this.timeUpdateListener.bind(this), this.hostReferences = {
                            onAutoPause: this.autoPauseListener.bind(this)
                        }, this.references)this.player.addEventListener(i, this.references[i]);
                        if (cast && cast.player && cast.player.api && cast.player.api.Player && cast.player.api.Player.getHost && cast.player.api.Player.getHost()) for(var s in this.hostReferences)cast.player.api.Player.getHost().addEventListener(s, this.hostReferences[s]);
                        this.getVideo().getAdsAdapter() || (this.getAdapterClass("nativeAdsAdapter")._updatePlayer(this.player), this.plugin.setAdsAdapter(this.getAdapterClass("nativeAdsAdapter"), this.getVideo().getVideoKey())), this.registerModelVersion();
                    }
                    unregisterListeners() {
                        if (this.monitor && this.monitor.stop(), this.player && this.references) {
                            for(var e in this.references)this.player.removeEventListener(e, this.references[e]);
                            if (this.references = {}, cast && cast.player && cast.player.api && cast.player.api.Player && cast.player.api.Player.getHost && cast.player.api.Player.getHost() && this.hostReferences) {
                                for(var t in this.hostReferences)this.player.getHost().removeEventListener(t, this.hostReferences[t]);
                                this.hostReferences = {};
                            }
                        }
                    }
                    registerModelVersion() {
                        if (void 0 === this.getVideo().options["device.model"]) {
                            try {
                                const { hardwareConcurrency: e, userAgent: t } = window.navigator, i = cast.framework.CastReceiverContext.getInstance();
                                if (i.canDisplayType('video/mp4; codecs="avc1.640033')) return void (this.getVideo().options["device.model"] = "Chromecast with Google TV");
                                if (t.includes("Android")) return void (this.getVideo().options["device.model"] = "Chromecast Android");
                                if (i.canDisplayType("video/mp4; codecs=hev1.1.6.L93.B0")) return void (this.getVideo().options["device.model"] = "Chromecast Ultra");
                                if (i.canDisplayType("video/mp4; codecs=avc1.64002A")) return void (this.getVideo().options["device.model"] = "Chromecast 3");
                                if (2 === e) return void (this.getVideo().options["device.model"] = "Chromecast 2");
                                if (1 === e) return void (this.getVideo().options["device.model"] = "Chromecast 1");
                            } catch (e) {}
                            this.getVideo().options["device.model"] = "Chromecast";
                        }
                    }
                    playListener(e) {
                        this.flags.isStarted || (this.lastPlayhead = void 0, this.fireStart({}, "playListener"));
                    }
                    playAdListener(e) {
                        this.playListener(), this.firePause({}, "playAdListener");
                    }
                    bufferingListener(e) {
                        this.flags.isPaused ? this.plugin && this.getVideo().isBreakStarted || (this.fireResume({}, "bufferingListener"), this.fireBufferBegin({}, !1, "bufferingListener")) : this.fireBufferBegin({}, !1, "bufferingListener"), this.flags.isStarted || (this.lastPlayhead = void 0, this.fireStart({}, "bufferingListener"));
                    }
                    pauseListener(e) {
                        this.flags.isBuffering || this.firePause({}, "pauseListener");
                    }
                    resumeListener(e) {
                        this.fireResume({}, "resumeListener");
                    }
                    playingListener(e) {
                        this.plugin && this.getVideo().isBreakStarted || (this.fireResume({}, "playingListener"), this.fireBufferEnd({}, "playingListener"), this.fireJoin({}, "playingListener"));
                    }
                    errorListener(e) {
                        const t = e.error, i = e.detailedErrorCode;
                        if (i) {
                            if (this.errorFilter.indexOf(i) >= 0) return;
                            const e = cast.framework.events.DetailedErrorCode;
                            let s = Object.keys(e).find(function(t) {
                                return e[t] === i;
                            }) || i;
                            t && t.shakaErrorCode && (s = "Shaka: " + t.shakaErrorCode + " , " + s), "LOAD_CANCELLED" === t ? (this.fireFatalError(i, s), this._reset()) : this.fireError(i, s);
                        }
                    }
                    seekingListener(e) {
                        this.fireSeekBegin({}, !1, "seekingListener");
                    }
                    endedListener(e) {
                        this.fireStop({}, "endedListener"), this._reset();
                    }
                    bitrateChangedListener(e) {
                        this.bitrate = e.totalBitrate;
                    }
                    segmentListener(e) {
                        this.throughput = e.size / (e.downloadTime / 1e3);
                    }
                    timeUpdateListener(e) {
                        this.flags.isJoined || (null === this.lastPlayhead || void 0 === this.lastPlayhead ? this.lastPlayhead = this.getPlayhead() : this.lastPlayhead < this.getPlayhead() && this.plugin && (!this.plugin.getAdsAdapter() || this.plugin.getAdsAdapter() && !this.plugin.getAdsAdapter().flags.isStarted) && this.fireJoin({}, "timeUpdateListener"));
                    }
                    autoPauseListener(e) {
                        e ? (this.fireResume({}, "autoPauseListener"), this.fireBufferBegin({}, !1, "autoPauseListener")) : this.fireBufferEnd({}, "autoPauseListener");
                    }
                    _reset(e) {
                        this.lastPlayhead = void 0, this.actualCount = 0, this.bitrate = void 0;
                    }
                    constructor(){
                        (0, _defineProperty._)(this, "adsAdapters", {
                            nativeAdsAdapter: A
                        });
                    }
                },
                ViaccessOrca: class {
                    _getTagFromPlayer() {
                        return this.player.videoElement ? this.player.videoElement : null;
                    }
                    checkExistsPlayer() {
                        try {
                            if (this._getTagFromPlayer()) return this.checkExistsObjectOnPage(this._getTagFromPlayer());
                        } catch (e) {
                            return !0;
                        }
                    }
                    getVersion() {
                        return "7.0.2-viaccessorca-js";
                    }
                    getPlayhead() {
                        return this.player.currentTime;
                    }
                    getPlayrate() {
                        return this.flags.isPaused ? 0 : this.player.videoElement.playbackRate || 1;
                    }
                    getDroppedFrames() {
                        return this.player.videoElement.webkitDroppedFrameCount;
                    }
                    getDuration() {
                        return this.player.duration;
                    }
                    getBitrate() {
                        if (this.player.quality >= 0 && this.player.qualities && this.player.qualities.length) {
                            var e = this.player.qualities[this.player.quality];
                            return e.bitrate || e.bandwidth;
                        }
                        return null;
                    }
                    getRendition() {
                        if (this.player.quality >= 0 && this.player.qualities && this.player.qualities.length) {
                            var e = this.player.qualities[this.player.quality], t = e.width, i = e.height;
                            return t && i || (t = this.player.videoElement.videoWidth, i = this.player.videoElement.videoHeight), this.getNpawUtils().buildRenditionString(t, i, e.bitrate || e.bandwidth);
                        }
                        return null;
                    }
                    getTitle() {
                        return this.player.videoElement.title || "Unknown";
                    }
                    getIsLive() {
                        return "function" == typeof this.player.isLive ? this.player.isLive() : this.player.isLive;
                    }
                    getResource() {
                        return this.player && this.player.media ? this.player.media.url : void 0;
                    }
                    getPlayerVersion() {
                        return this.player.version;
                    }
                    getPlayerName() {
                        return "Viaccess Orca";
                    }
                    registerListeners() {
                        for(var e in this.monitorPlayhead(!1, !1), this.references = {
                            play: this.playListener.bind(this),
                            pause: this.pauseListener.bind(this),
                            playing: this.playingListener.bind(this),
                            error: this.errorListener.bind(this),
                            seeking: this.seekingListener.bind(this),
                            seeked: this.seekedListener.bind(this),
                            buffering: this.bufferingListener.bind(this),
                            ended: this.endedListener.bind(this),
                            abort: this.endedListener.bind(this),
                            destroyed: this.destroyedListener.bind(this),
                            timeupdate: this.timeupdateListener.bind(this),
                            trackschanged: this.changedListener.bind(this)
                        }, this.references)this.player.addEventListener && this.player.addEventListener(e, this.references[e]), this.player.on && this.player.on(e, this.references[e]);
                    }
                    unregisterListeners() {
                        if (this.monitor && this.monitor.stop(), this.player && this.references) for(var e in this.references)this.player.removeEventListener && (this.player.removeEventListener(e, this.references[e]), delete this.references[e]), this.player.off && (this.player.off(e, this.references[e]), delete this.references[e]);
                    }
                    playListener(e) {
                        this.firePlayerLog("playListener", {}), this.fireStart({}, "playListener"), this.fireResume({}, "playListener");
                    }
                    pauseListener(e) {
                        this.firePlayerLog("pauseListener", {}), this.firePause({}, "pauseListener");
                    }
                    playingListener(e) {
                        this.firePlayerLog("playingListener", {}), this.fireJoin({}, "playingListener"), this.fireBufferEnd({}, "playingListener");
                    }
                    errorListener(e) {
                        this.firePlayerLog("errorListener", {});
                        try {
                            var t = e.data ? e.data : e;
                            this.fireError(t.code, t.message, void 0, void 0, "errorListener"), this.fireStop({}, !1, "errorListener");
                        } catch (e) {
                            this.fireError("unknown", "unknown", void 0, void 0, "errorListener"), this.fireStop({}, !1, "errorListener");
                        }
                    }
                    seekingListener(e) {
                        this.firePlayerLog("seekingListener", {}), this.fireSeekBegin({}, !1, "seekingListener");
                    }
                    seekedListener(e) {
                        this.firePlayerLog("seekedListener", {}), this.fireSeekEnd({}, "seekedListener");
                    }
                    bufferingListener(e) {
                        this.firePlayerLog("bufferingListener", {
                            buffering: e.buffering
                        }), !0 === e.buffering ? this.flags.isPaused || this.flags.isSeeking || this.fireBufferBegin({}, !1, "bufferingListener") : !1 === e.buffering && this.fireBufferEnd({}, "bufferingListener");
                    }
                    endedListener(e) {
                        this.firePlayerLog("endedListener", {}), this.fireStop({}, "endedListener");
                    }
                    destroyedListener(e) {
                        this.firePlayerLog("destroyedListener", {}), this.fireStop({}, "destroyedListener");
                    }
                    changedListener(e) {
                        e.emittedBy && "manifest" === e.emittedBy && (this.firePlayerLog("changedListener", {}), this.flags.isJoined && this.fireStop({}, "changedListener"));
                    }
                    timeupdateListener(e) {}
                },
                Hbbtv: class {
                    checkExistsPlayer() {
                        try {
                            return this.checkExistsObjectOnPage(this.player);
                        } catch (e) {
                            return !0;
                        }
                    }
                    getPlayerName() {
                        return "Hbbtv";
                    }
                    registerListeners() {
                        this.states = [
                            "STOPPED",
                            "PLAYING",
                            "PAUSED",
                            "CONNECTING",
                            "BUFFERING",
                            "FINISHED",
                            "ERROR"
                        ], this.monitorPlayhead(!1, !0), this.player ? this.player.onPlayStateChange = (function(e) {
                            this.playStateChangeListener();
                        }).bind(this) : Log.error("The player reference set to the adapter is invalid.");
                    }
                    getResource() {
                        return this.player.data || this.player.src;
                    }
                    playStateChangeListener() {
                        switch(this.firePlayerLog("stateValue" + this.player.playState, {}), this.player.playState){
                            case 0:
                                this.firePlayerLog("stopState", {}), this.fireStop({}, "stopState");
                                break;
                            case 1:
                                this.bufferPlayhead && Math.abs(this.bufferPlayhead - this.player.playPosition) > 10 && (this.fireSeekBegin({}, !0, "playingState"), this.bufferPlayhead = void 0), this.firePlayerLog("playingState", {}), this.fireResume({}, "playingState"), this.fireSeekEnd({}, "playingState"), this.fireBufferEnd({}, "playingState"), this.fireJoin({}, "playingState");
                                break;
                            case 2:
                                this.firePlayerLog("pausedState", {}), this.firePause({}, "pausedState");
                                break;
                            case 3:
                                this.firePlayerLog("connectionState", {}), this.fireStart({}, "connectionState");
                                break;
                            case 4:
                                this.bufferPlayhead = this.player.playPosition, this.firePlayerLog("bufferingState", {}), this.fireStart({}, "bufferingState"), this.fireBufferBegin({}, !1, "bufferingState");
                                break;
                            case 5:
                                this.firePlayerLog("finishedState", {}), this.fireStop({}, "finishedState");
                                break;
                            case 6:
                                this.firePlayerLog("errorState", {}), this.fireError("FAILURE", "FAILURE", null, null, "errorState");
                        }
                    }
                    getPlayhead() {
                        return this.player.playPosition / 1e3;
                    }
                    getDuration() {
                        return this.player.playTime / 1e3;
                    }
                    getVersion() {
                        return "7.0.3-hbbtvhtml5-js";
                    }
                },
                ReactNativeVideo: class {
                    getVersion() {
                        return "7.0.1-react-native-video-jsclass";
                    }
                    getPlayhead() {
                        const e = this.getVideo().getAdsAdapter();
                        return e && e.isShowingAds() ? this.lastPlayhead : this.playhead;
                    }
                    getIsLive() {
                        return void 0 !== this.duration ? !this.duration : void 0;
                    }
                    getDuration() {
                        return this.duration;
                    }
                    getResource() {
                        return this.resource;
                    }
                    getRendition() {
                        if (this.width && this.height) return this.getNpawUtils().buildRenditionString(this.width, this.height);
                    }
                    getPlayerName() {
                        return "React Native Video";
                    }
                    setPlatform(e) {
                        this.reactPlatform = e;
                    }
                    registerListeners() {
                        this.reactPlatform && "ios" == this.reactPlatform && this.monitorPlayhead(!0, !0, 400), this.getVideo().getAdsAdapter() || this.plugin.setAdsAdapter(this.getAdapterClass("genericAdsAdapter"), this.getVideo().getVideoKey());
                    }
                    unregisterListeners() {
                        this.monitor && this.monitor.stop();
                    }
                    onLoad(e) {
                        this.reactPlatform && "ios" == this.reactPlatform && !this.monitor && this.monitorPlayhead(!0, !0, 400);
                        const t = e.naturalSize;
                        t && (this.width = Math.round(t.width), this.height = Math.round(t.height)), this.duration = e.duration, this.fireStart({}, "onLoad"), this.flags.isJoined || (this.onBuffering = !1, this.fireJoin({}, "onLoadStart"), this.reactPlatform && "ios" == this.reactPlatform && this.monitor && this.monitor.skipNextTick()), this.pausePlayhead && Math.abs(this.getPlayhead() - this.pausePlayhead) > .5 ? this.fireSeekEnd({}, "onLoadStart") : this.pausePlayhead && (this.chronos.pause.pauseTime = void 0), this.pausePlayhead = void 0, this.fireResume({}, "onLoadStart");
                    }
                    onLoadStart(e) {
                        this.reactPlatform && "ios" == this.reactPlatform && !this.monitor && this.monitorPlayhead(!0, !0, 400), e.src && (this.resource = e.src.uri), this.fireStart({}, "onLoadStart");
                    }
                    onPlaybackRateChange(e) {
                        this.playrate = e.playbackRate, this.getVideo().getAdsAdapter() && this.getVideo().getAdsAdapter().isShowingAds() || (this.playrate && this.playhead > .1 ? (this.fireStart({}, "onPlaybackRateChange"), this.flags.isJoined || (this.onBuffering = !1, this.reactPlatform && "ios" == this.reactPlatform && !this.monitor && this.monitorPlayhead(!0, !0, 400), this.fireJoin({}, "onPlaybackRateChange"), this.reactPlatform && "ios" == this.reactPlatform && this.monitor && this.monitor.skipNextTick()), this.pausePlayhead && Math.abs(this.getPlayhead() - this.pausePlayhead) > .5 && !this.flags.isPaused ? (this.fireSeekEnd({}, "onPlaybackRateChange"), this.pausePlayhead = void 0) : this.pausePlayhead && Math.abs(this.getPlayhead() - this.pausePlayhead) < .5 && !this.onBuffering && (this.cancelSeek(), this.pausePlayhead = void 0), this.fireResume({}, "onPlaybackRateChange")) : this.playhead > .1 && (this.reactPlatform && "android" == this.reactPlatform && (this.pausePlayhead = this.getPlayhead(), this.fireSeekBegin({}, !0, "onPlaybackRateChange")), this.reactPlatform && "ios" == this.reactPlatform && (this.lastPlayhead = this.playhead), this.firePause({}, "onPlaybackRateChange"), this.reactPlatform && "android" == this.reactPlatform && (this.chronos.pause.startTime = (new Date).getTime())));
                    }
                    onProgress(e) {
                        const t = this.getVideo().getAdsAdapter();
                        t && t.isShowingAds() && this.reactPlatform && "android" == this.reactPlatform && !this.lastPlayhead ? this.lastPlayhead = this.playhead : !t || t.isShowingAds() || this.flags.isPaused || (this.lastPlayhead = void 0), !t || t.isShowingAds() || this.duration || (this.duration = e.seekableDuration), this.playhead = e.currentTime, e.playableDuration - e.currentTime > .5 && this.fireStart({}, "onProgress"), this.playhead > .5 && !this.flags.isJoined && (this.onBuffering = !1, this.fireJoin({}, "onProgress"), this.reactPlatform && "ios" == this.reactPlatform && this.monitor && this.monitor.skipNextTick()), this.pausePlayhead && !this.flags.isPaused && (Math.abs(this.getPlayhead() - this.pausePlayhead) > 2 ? this.fireSeekEnd({}, "onProgress") : this.onBuffering ? (this.fireBufferBegin({}, !0, "onProgress"), this.fireBufferEnd({}, "onProgress"), this.onBuffering = !1) : this.chronos.pause.pauseTime = void 0, this.pausePlayhead = void 0), this.playrate && (this.onBuffering = !1);
                    }
                    onBuffer(e) {
                        e.isBuffering && void 0 !== this.getPlayhead() && this.reactPlatform && "android" == this.reactPlatform && (this.onBuffering = !0, this.fireBufferBegin({}, !1, "onBuffer"));
                    }
                    onError(e) {
                        let t, i;
                        this.reactPlatform && "android" == this.reactPlatform ? (t = e.error.errorCode, i = e.error.errorException) : this.reactPlatform && "ios" == this.reactPlatform && (t = e.error.code, i = e.error.localizedDescription), this.fireError(t, i);
                    }
                    onEnd(e) {
                        this.reactPlatform && "ios" == this.reactPlatform && this.getVideo().getAdsAdapter() ? this.stopTimer = setTimeout(()=>{
                            this.fireStop();
                        }, this.getVideo().options["ad.postRollTimeout"] || 1e3) : this.fireStop();
                    }
                    onAdEvent(e) {
                        this.getVideo() && this.getVideo().getAdsAdapter() && this.getVideo().getAdsAdapter().onAdEvent(e);
                    }
                    constructor(){
                        (0, _defineProperty._)(this, "adsAdapters", {
                            genericAdsAdapter: b
                        });
                    }
                },
                Visualon: class {
                    getVersion() {
                        return "7.0.2-visualon-analytics-js";
                    }
                    getPlayhead() {
                        return this.player.getPosition();
                    }
                    getFramesPerSecond() {
                        const e = this.player.getAnalyticsInfo();
                        if (e && e.streamingFps) try {
                            return parseInt(e.streamingFps, 10);
                        } catch (e) {
                            return 0;
                        }
                        return 0;
                    }
                    getDroppedFrames() {
                        const e = this.player.getAnalyticsInfo();
                        return e && e.droppedFrames ? e.droppedFrames : 0;
                    }
                    getDuration() {
                        return this.player.getDuration();
                    }
                    getBitrate() {
                        return this.targetBitrate;
                    }
                    getTotalBytes() {
                        var e = this.player.getAnalyticsInfo();
                        if (e && e.downloadBytes) return e.downloadBytes;
                    }
                    getRendition() {
                        return this.getNpawUtils().buildRenditionString(this.width, this.height, this.targetBitrate);
                    }
                    getIsLive() {
                        return this.player.isLive();
                    }
                    getResource() {
                        var e = this.player.getAnalyticsInfo();
                        return e && e.videoLinkURL ? e.videoLinkURL : null;
                    }
                    getPlayerVersion() {
                        return this.player.getVersion();
                    }
                    getPlayerName() {
                        return "VisualON";
                    }
                    registerListeners() {
                        if ("undefined" != typeof voPlayer && this.player) for(var e in this.references = {}, this.references[voPlayer.events.VO_OSMP_SRC_CB_OPEN_FINISHED] = this.openListener.bind(this), this.references[voPlayer.events.VO_OSMP_CB_PLAY_STARTED] = this.playListener.bind(this), this.references[voPlayer.events.VO_OSMP_CB_PLAY_PLAYING] = this.playingListener.bind(this), this.references[voPlayer.events.VO_OSMP_CB_PLAY_WAITING] = this.bufferListener.bind(this), this.references[voPlayer.events.VO_OSMP_CB_PLAY_PAUSED] = this.pauseListener.bind(this), this.references[voPlayer.events.VO_OSMP_CB_PLAY_COMPLETE] = this.endListener.bind(this), this.references[voPlayer.events.VO_OSMP_CB_SEEK_START] = this.seekListener.bind(this), this.references[voPlayer.events.VO_OSMP_CB_SEEK_COMPLETE] = this.seekEndListener.bind(this), this.references[voPlayer.events.VO_OSMP_CB_PLAY_TIME_UPDATED] = this.timeUpdatedListener.bind(this), this.references[voPlayer.events.VO_OSMP_CB_ERROR_EVENTS] = this.errorListener.bind(this), this.references[voPlayer.events.VO_OSMP_SRC_ADAPTIVE_STREAMING_INFO_EVENT_BITRATE_CHANGE] = this.bitrateChangeListener.bind(this), this.references)this.player.addEventListener(e, this.references[e]);
                        this._reset();
                    }
                    unregisterListeners() {
                        if ("undefined" != typeof voPlayer && this.player && this.references) {
                            for(let e in this.references)this.player.off(e, this.references[e]);
                            delete this.references;
                        }
                    }
                    bitrateChangeListener(e) {
                        e.mediaType && "video" === e.mediaType && (this.targetBitrate = e.bandwidth, this.width = e.width, this.height = e.height);
                    }
                    openListener(e) {
                        this.fireStop({}, "openListener"), this._reset();
                    }
                    timeUpdatedListener(e) {}
                    playListener(e) {
                        this.fireStart({}, "playListener");
                    }
                    pauseListener(e) {
                        this.firePause({}, "pauseListener");
                    }
                    playingListener(e) {
                        this.fireStart({}, "playingListener"), this.fireJoin({}, "playingListener"), this.fireResume({}, "playingListener"), this.fireSeekEnd({}, "playingListener"), this.fireBufferEnd({}, "playingListener");
                    }
                    seekListener(e) {
                        this.fireSeekBegin({}, !1, "seekListener");
                    }
                    seekEndListener(e) {
                        this.fireSeekEnd({}, "seekEndListener");
                    }
                    endListener(e) {
                        this.fireStop({}, "endListener"), this._reset();
                    }
                    bufferListener(e) {
                        this.fireBufferBegin({}, !1, "bufferListener");
                    }
                    errorListener(e) {
                        this.fireError(e.code, e.message, void 0, void 0, "errorListener");
                    }
                    _reset() {
                        this.width = null, this.height = null, this.targetBitrate = null;
                    }
                },
                BitmovinReactNative: class {
                    onSourceLoaded(e) {
                        this.duration = e.source.duration;
                    }
                    onAudioChanged(e) {}
                    onVideoDownloadQualityChanged(e) {}
                    onVideoPlaybackQualityChanged(e) {
                        this.width = e.newVideoQuality.width, this.height = e.newVideoQuality.height, this.bitrate = e.newVideoQuality.bitrate;
                    }
                    onReady(e) {}
                    onPlay(e) {
                        this.flags.isStarted || this.fireStart({}, e.name), this.flags.isStarted && this.fireResume({}, e.name);
                    }
                    onPlaying(e) {
                        this.flags.isJoined || this.fireJoin({}, e.name), this.flags.isStarted && this.fireResume({}, e.name);
                    }
                    onTimeChanged(e) {
                        this.playhead = e.currentTime;
                    }
                    onPaused(e) {
                        this.firePause({}, e.name);
                    }
                    onSeek(e) {
                        this.isSeeking = !0, this.fireSeekBegin({}, !1, e.name);
                    }
                    onSeeked(e) {
                        this.seekIntervalId && clearInterval(this.seekIntervalId), this.isSeeking = !1, this.seekIntervalId = setInterval(()=>{
                            this.isSeeking || (this.fireSeekEnd({}, e.name), clearInterval(this.seekIntervalId), this.seekIntervalId = null);
                        }, 500);
                    }
                    onPlaybackFinished(e) {
                        this.fireStop({}, e.name);
                    }
                    onStallStarted(e) {
                        this.fireBufferBegin({}, !1, e.name);
                    }
                    onStallEnded(e) {
                        this.chronos.buffer.getDeltaTime(!1) < 50 ? this.cancelBuffer() : this.fireBufferEnd({}, e.name);
                    }
                    onPlayerWarning(e) {
                        this.fireError(e.code, e.message);
                    }
                    onPlayerError(e) {
                        this.fireError(e.code, e.message);
                    }
                    onSourceError(e) {
                        this.fireError(e.code, e.message);
                    }
                    onSourceWarning(e) {
                        this.fireError(e.code, e.message);
                    }
                    getBitrate() {
                        return this.bitrate;
                    }
                    onDestroy(e) {
                        this.fireStop();
                    }
                    getVersion() {
                        return "7.0.1-bitmovin-react-native-jsclass";
                    }
                    getPlayhead() {
                        return this.playhead;
                    }
                    getIsLive() {
                        return !this.duration;
                    }
                    getDuration() {
                        return this.duration;
                    }
                    getResource() {
                        return this.player && this.player.source && this.player.source.config ? this.player.source.config.url : null;
                    }
                    getTitle() {
                        return this.player && this.player.source && this.player.source.config ? this.player.source.config.title : null;
                    }
                    setPlatform(e) {
                        this.reactPlatform = e;
                    }
                    getRendition() {
                        if (this.width && this.height) return this.getNpawUtils().buildRenditionString(this.width, this.height);
                    }
                    getPlayerName() {
                        return "Bitmovin React Native";
                    }
                }
            },
            ads: {
                Ima: class {
                    pauseListener(e) {
                        this.firePause();
                    }
                    getAdInsertionType() {
                        return this.isDAI ? this.getNpawReference().Constants.AdInsertionType.ServerSide : this.getNpawReference().Constants.AdInsertionType.ClientSide;
                    }
                    progressDAIListener(e) {
                        e.getStreamData && e.getStreamData() ? this.playhead = e.getStreamData().adProgressData.currentTime : "function" == typeof e.getAdData && e.getAdData() && (this.playhead = e.getAdData().currentTime), this.fireJoin();
                    }
                    getRendition() {
                        let e = null;
                        if (this.player) {
                            if (this.isDAI) this.width && this.height && (e = this.width + "x" + this.height);
                            else {
                                const t = this.player.getCurrentAd();
                                e = t.getVastMediaWidth().toString() + "x" + t.getVastMediaHeight().toString();
                            }
                        }
                        return e;
                    }
                    startDAIListener(e) {
                        this.isDAI = !0, this.playhead = 0;
                    }
                    getPlayerVersion() {
                        return google.ima.VERSION;
                    }
                    playListener(e) {
                        this.isDAI = !1, this.adPosition = this.getAdPosition();
                        const t = "function" == typeof e.getAdData ? e.getAdData() : null;
                        this.totalAds = t && t.adPodInfo ? t.adPodInfo.totalAds : null, this.plugin.fireInit(void 0, "playListener", this.getVideo().getVideoKey()), this.getVideo().getAdapter() && this.getVideo().getAdapter().firePause(), this.fireStart({
                            adPlayhead: "0"
                        });
                    }
                    getTitle2() {
                        let e = this.advertiser;
                        return this.player && !this.isDAI && (e = this.player.getCurrentAd().getAdvertiserName()), e;
                    }
                    errorDAIListener(e) {
                        this.fireError(), this.fireStop();
                    }
                    secondQuartileListener(e) {
                        this.fireQuartile(2);
                    }
                    endedListener(e) {
                        this.lastDuration ? this.fireStop({
                            adPlayhead: this.lastDuration
                        }) : this.fireStop();
                    }
                    getGivenBreaks() {
                        let e = null;
                        return this.player && this.player.getCuePoints && (e = this.player.getCuePoints().length), e;
                    }
                    loadedListener(e) {
                        const t = "function" == typeof e.getAdData ? e.getAdData() : null;
                        this.totalAds = t && t.adPodInfo ? t.adPodInfo.totalAds : void 0, this.clickUrl = t ? t.clickThroughUrl : void 0, this.plugin.isBreakStarted && this.playListener(e);
                    }
                    getPlayhead() {
                        let e = this.playhead;
                        return this.flags.isJoined ? this.player && !this.isDAI && (e = this.getDuration() - this.player.getRemainingTime()) : e = 0, e;
                    }
                    getDuration() {
                        let e = this.duration;
                        return this.player && !this.isDAI && (this.player.getCurrentAd && this.player.getCurrentAd() && (this.lastDuration = this.player.getCurrentAd().getDuration()), e = this.lastDuration), e;
                    }
                    getGivenAds() {
                        return this.totalAds;
                    }
                    getIsSkippable() {
                        let e = null;
                        return this.player && this.player.getCurrentAd && (e = this.player.getCurrentAd().g.skippable), e;
                    }
                    getCreativeId() {
                        let e = null;
                        return !this.isDAI && this.player.getCurrentAd() && (e = this.player.getCurrentAd().getCreativeId()), e;
                    }
                    thirdQuartileListener(e) {
                        this.fireQuartile(3);
                    }
                    getAudioEnabled() {
                        let e = null;
                        return this.player && (e = !this.player.getVolume || 0 !== this.player.getVolume()), e;
                    }
                    getVersion() {
                        return "7.0.9-ima-jsclass";
                    }
                    logListener(e) {
                        if ("function" == typeof e.getAdData && e.getAdData().adError) {
                            const t = e.getAdData().adError;
                            this.fireError(t.getErrorCode(), t.getMessage()), this.fireStop();
                        }
                    }
                    unregisterListeners() {
                        if (this.monitor && this.monitor.stop(), this.player && this.references) {
                            for(let e in this.references)this.player.removeEventListener(e, this.references[e]);
                            this.references = {};
                        }
                    }
                    clickListener(e) {
                        let t = this.clickUrl;
                        const i = this.player.getCurrentAd();
                        i && i.g && i.g.clickThroughUrl && (t = i.g.clickThroughUrl);
                        const s = (new Date).getTime();
                        this.lastUrl === t && s < (this.lastTime || 0) + 2e3 || (this.lastUrl = t, this.lastTime = s, this.fireClick(t));
                    }
                    getAdPosition() {
                        let e = this.getNpawReference().Constants.AdPosition.Midroll;
                        if (this.isDAI) {
                            const t = this.getVideo().getAdapter();
                            t && (!t.flags.isJoined || t.getPlayhead() < 1) ? e = this.getNpawReference().Constants.AdPosition.Preroll : t && t.flags.isJoined && t.getPlayhead() + this.duration + 1 >= t.getDuration() && (e = this.getNpawReference().Constants.AdPosition.Postroll);
                        } else switch(this.player.getCurrentAd().getAdPodInfo().getTimeOffset()){
                            case 0:
                                e = this.getNpawReference().Constants.AdPosition.Preroll;
                                break;
                            case -1:
                                e = this.getNpawReference().Constants.AdPosition.Postroll;
                        }
                        return e;
                    }
                    firstQuartileListener(e) {
                        this.fireQuartile(1);
                    }
                    getIsLive() {
                        let e = null;
                        return this.player.levels && this.player.levels[this.player.currentLevel] && (e = this.player.levels[this.player.currentLevel].details.live), e;
                    }
                    getTitle() {
                        let e = this.title;
                        return this.player && !this.isDAI && (e = this.player.getCurrentAd().getTitle()), e;
                    }
                    registerListeners() {
                        if (this.references = {}, google.ima.AdEvent) {
                            this.monitorPlayhead(!0, !1);
                            const e = google.ima.AdEvent.Type;
                            this.references[e.CONTENT_PAUSE_REQUESTED] = this.playListener.bind(this), this.references[e.LOADED] = this.loadedListener.bind(this), this.references[e.PAUSED] = this.pauseListener.bind(this), this.references[e.STARTED] = this.playingListener.bind(this), this.references[e.RESUMED] = this.playingListener.bind(this), this.references[google.ima.AdErrorEvent.Type.AD_ERROR] = this.errorListener.bind(this), this.references[e.COMPLETE] = this.endedListener.bind(this), this.references[e.CONTENT_RESUME_REQUESTED] = this.endedListener.bind(this), this.references[e.SKIPPED] = this.skippedListener.bind(this), this.references[e.CLICK] = this.clickListener.bind(this), this.references[e.ALL_ADS_COMPLETED] = this.endedViewListener.bind(this), this.references[e.LOG] = this.logListener.bind(this), this.references[e.FIRST_QUARTILE] = this.firstQuartileListener.bind(this), this.references[e.MIDPOINT] = this.secondQuartileListener.bind(this), this.references[e.THIRD_QUARTILE] = this.thirdQuartileListener.bind(this), this.references[e.CONTENT_RESUME_REQUESTED] = this.breakEndListener.bind(this);
                        }
                        if (google.ima.dai) {
                            const e = google.ima.dai.api.StreamEvent.Type;
                            this.references[e.SKIPPED] = this.skippedL.bind(this), this.references[e.ERROR] = this.errorDAIListener.bind(this), this.references[e.AD_BREAK_STARTED] = this.startDAIListener.bind(this), this.references[e.AD_BREAK_ENDED] = this.stopDAIListener.bind(this), this.references[e.AD_PROGRESS] = this.progressDAIListener.bind(this), this.references[e.CLICK] = this.clickDAIListener.bind(this), this.references[e.STARTED] = this.joinDAIListener.bind(this), this.references[e.LOADED] = this.loadedDAIListener.bind(this), this.references[e.COMPLETE] = this.completeDAIListener.bind(this), this.references[e.FIRST_QUARTILE] = this.firstQuartileListener.bind(this), this.references[e.MIDPOINT] = this.secondQuartileListener.bind(this), this.references[e.THIRD_QUARTILE] = this.thirdQuartileListener.bind(this), this.references[e.PAUSED] = this.pauseDAIListener.bind(this), this.references[e.RESUMED] = this.resumeDAIListener.bind(this);
                        }
                        if (this.player) for(let e in this.references)this.player.addEventListener(e, this.references[e]);
                    }
                    loadedDAIListener(e) {
                        if (e.getStreamData) {
                            const t = e.getStreamData();
                            t && (this.resource = t.url);
                        }
                    }
                    stopDAIListener(e) {
                        this.fireStop({
                            adPlayhead: this.duration
                        }), this.getVideo().getAdapter() && this.getVideo().getAdapter().fireResume(), this.fireBreakStop();
                    }
                    getResource() {
                        let e = null;
                        return !this.isDAI && this.player.getCurrentAd() ? e = this.player.getCurrentAd().getMediaUrl() : this.isDAI && (e = this.resource), e;
                    }
                    getProvider() {
                        let e = null;
                        return !this.isDAI && this.player.getCurrentAd() && (e = this.player.getCurrentAd().getAdSystem()), e;
                    }
                    skippedL() {
                        this.fireSkip();
                    }
                    skippedListener(e) {
                        this.fireSkip({
                            adPlayhead: this.getPlayhead()
                        });
                    }
                    joinDAIListener(e) {
                        const t = e.getAd();
                        t && (this.duration = t.getDuration(), this.title = t.getTitle(), this.width = t.getVastMediaWidth(), this.height = t.getVastMediaHeight(), this.advertiser = t.getAdvertiserName(), this.adPosition = this.getAdPosition()), this.getVideo().getAdapter() && this.getVideo().getAdapter().firePause(), this.plugin.fireInit(void 0, "joinDAIListener", this.getVideo().getVideoKey()), this.fireStart(), this.fireJoin();
                    }
                    completeDAIListener(e) {
                        this.fireStop({}, "completeDAIListener");
                    }
                    getPlayerName() {
                        return "IMA";
                    }
                    getIsVisible() {
                        let e = null;
                        if (this.player) {
                            if (!this.contentPlayer) for(const e in this.player){
                                const t = this.player[e];
                                if (t && t.videoHeight && t.clientHeight) {
                                    this.contentPlayer = t;
                                    break;
                                }
                            }
                            e = this.getNpawUtils().calculateAdViewability(this.contentPlayer);
                        }
                        return e;
                    }
                    playingListener(e) {
                        this.fireStart({
                            adPlayhead: "0"
                        }), this.fireResume(), this.fireSeekEnd(), this.fireBufferEnd(), this.fireJoin({
                            adPlayhead: "0"
                        });
                    }
                    endedViewListener(e) {
                        this.getPosition() === this.getNpawReference().Constants.AdPosition.Postroll && this.getVideo().getAdapter().fireStop({}, "endedViewListener");
                    }
                    getPosition() {
                        let e = null;
                        return this.player && (e = this.getVideo().getAdapter() && !this.getVideo().getAdapter().flags.isJoined ? this.getNpawReference().Constants.AdPosition.Preroll : this.getIsLive() ? this.getNpawReference().Constants.AdPosition.Midroll : this.adPosition || this.getNpawReference().Constants.AdPosition.Midroll), e;
                    }
                    errorListener(e) {
                        this.fireError(), this.fireStop();
                    }
                    breakEndListener(e) {
                        this.fireBreakStop();
                    }
                    getBreaksTime() {
                        let e = null;
                        return this.player && this.player.getCuePoints && (e = this.player.getCuePoints(), e.forEach((function(t, i) {
                            -1 !== e[i] && null !== e[i] && void 0 !== e[i] || (e[i] = this.plugin._adapter.getDuration());
                        }).bind(this))), e;
                    }
                    clickDAIListener(e) {
                        this.fireClick(this.clickUrl);
                    }
                    pauseDAIListener(e) {
                        this.firePause();
                        var t = this.getVideo().getAdapter();
                        t && (t.flags.isAdPaused = !0);
                    }
                    resumeDAIListener(e) {
                        this.fireResume();
                        var t = this.getVideo().getAdapter();
                        t && (t.flags.isAdPaused = !1);
                    }
                }
            }
        };
        return t.default;
    })());

},{"@swc/helpers/_/_define_property":"9kWBJ"}],"erYsf":[function(require,module,exports) {
/* eslint-disable no-console */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>User);
var _defineProperty = require("@swc/helpers/_/_define_property");
var _objectSpread = require("@swc/helpers/_/_object_spread");
var _objectSpreadProps = require("@swc/helpers/_/_object_spread_props");
var _jwtDecode = require("jwt-decode");
var _jwtDecodeDefault = parcelHelpers.interopDefault(_jwtDecode);
var _utils = require("../../../utils/utils");
var _newRelicLog = require("../../../utils/new-relic-log");
var _newRelicLogDefault = parcelHelpers.interopDefault(_newRelicLog);
var _utils1 = require("./utils");
var _configs = require("./configs");
class User {
    async setGlassToken(newGlassToken, reuseExistingGlassToken = false) {
        // also known as XSCT
        const currentGlassToken = reuseExistingGlassToken ? this.getGlassToken() : false;
        if (newGlassToken === currentGlassToken) console.log("glassToken matches existing");
        else {
            console.log("glassToken is new");
            this.storeGlassToken(newGlassToken);
            this.deleteStreamotionToken();
        }
    }
    storeGlassToken(glassToken) {
        this.storedGlassToken = glassToken;
    }
    getGlassToken() {
        if (!this.storedGlassToken) return undefined;
        return this.storedGlassToken;
    }
    async fetchStreamotionToken(previousToken) {
        const configName = `${this.partnerId}-${this.deviceBrand === "SOIP-PCK" ? "puck" : "tv"}`;
        const authConfig = (0, _configs.AUTH_CONFIG)[configName];
        const headers = {
            "Content-Type": "application/json"
        };
        if (previousToken) // MIPA-178 if previous or expired streamotionToken exists then attach it as bearer token
        headers.Authorization = `Bearer ${previousToken}`;
        return fetch((0, _utils.addProxyIp)(`${authConfig.domain}/v2/xsct/oauth/token`), {
            method: "POST",
            headers,
            body: JSON.stringify((0, _objectSpreadProps._)((0, _objectSpread._)({}, authConfig.body), {
                token: this.getGlassToken()
            }))
        }).then(async (response)=>{
            var _response_headers_get;
            let responseBody;
            if (((_response_headers_get = response.headers.get("Content-Type")) === null || _response_headers_get === void 0 ? void 0 : _response_headers_get.indexOf("json")) > -1) responseBody = await response.json();
            else responseBody = await response.text();
            if (response.ok) return responseBody;
            else if (response instanceof Response) throw {
                url: response.url,
                status: response.status,
                statusText: response.statusText,
                type: response.type,
                headers: Object.fromEntries(response.headers.entries()),
                body: responseBody
            };
            else throw `unknown error fetching token ${response}`;
        });
    }
    async getStreamotionToken(expiryBufferSeconds = 20) {
        if (this.storedStreamotionToken) {
            const payload = (0, _jwtDecodeDefault.default)(this.storedStreamotionToken);
            if ((0, _utils1.getExpiresInMs)(payload) > expiryBufferSeconds * 1000) return [
                this.storedStreamotionToken,
                payload
            ];
        }
        return await this.fetchStreamotionToken(localStorage.getItem("au.com.foxtel_refreshToken")).then((body)=>{
            var _this_videoElement;
            this.storeStreamotionToken(body);
            (_this_videoElement = this.videoElement) === null || _this_videoElement === void 0 ? void 0 : _this_videoElement.addRequestHeaders([
                {
                    key: "Authorization",
                    value: `Bearer ${this.storedStreamotionToken}`,
                    isLicenseRequest: true
                }
            ]);
            const payload = (0, _jwtDecodeDefault.default)(this.storedStreamotionToken);
            (0, _utils1.getExpiresInMs)(payload);
            return [
                this.storedStreamotionToken,
                payload
            ];
        });
    }
    storeStreamotionToken({ access_token: accessToken, scope }) {
        this.storedStreamotionToken = accessToken;
        try {
            localStorage.setItem("au.com.foxtel_refreshToken", accessToken);
        } catch (error) {
            const localStorageCharacterLength = {};
            for (const key of Object.keys(localStorage))localStorageCharacterLength[key] = localStorage[key].length;
            console.warn("could not stash refreshToken");
            (0, _newRelicLogDefault.default)("could not stash refreshToken, /token will hit XMP", {
                level: "WARN",
                response: error,
                responseString: `${error}`,
                localStorageCharacterLength
            });
        }
        this.storedScope = scope;
    }
    deleteStreamotionToken() {
        this.storedStreamotionToken = undefined;
        this.storedScope = undefined;
    }
    deleteStoredTokens() {
        this.storedGlassToken = undefined;
        this.deleteStreamotionToken();
    }
    async logoutUser() {
        this.deleteStoredTokens();
    }
    setVideoElement(videoElement) {
        this.videoElement = videoElement;
    }
    constructor(partnerId, deviceBrand){
        (0, _defineProperty._)(this, "authConfig", {});
        (0, _defineProperty._)(this, "storedGlassToken", null);
        (0, _defineProperty._)(this, "storedStreamotionToken", null);
        (0, _defineProperty._)(this, "storedScope", null);
        this.partnerId = partnerId;
        this.deviceBrand = deviceBrand;
    }
}

},{"@swc/helpers/_/_define_property":"9kWBJ","@swc/helpers/_/_object_spread":"lupAG","@swc/helpers/_/_object_spread_props":"8Y68S","jwt-decode":"gi3cf","../../../utils/utils":"fvIy3","../../../utils/new-relic-log":"1mCWG","./utils":"4bxdT","./configs":"gxXiF","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"gi3cf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InvalidTokenError", ()=>n);
function e(e) {
    this.message = e;
}
e.prototype = new Error, e.prototype.name = "InvalidCharacterError";
var r = "undefined" != typeof window && window.atob && window.atob.bind(window) || function(r) {
    var t = String(r).replace(/=+$/, "");
    if (t.length % 4 == 1) throw new e("'atob' failed: The string to be decoded is not correctly encoded.");
    for(var n, o, a = 0, i = 0, c = ""; o = t.charAt(i++); ~o && (n = a % 4 ? 64 * n + o : o, a++ % 4) && (c += String.fromCharCode(255 & n >> (-2 * a & 6))))o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(o);
    return c;
};
function t(e) {
    var t = e.replace(/-/g, "+").replace(/_/g, "/");
    switch(t.length % 4){
        case 0:
            break;
        case 2:
            t += "==";
            break;
        case 3:
            t += "=";
            break;
        default:
            throw "Illegal base64url string!";
    }
    try {
        return function(e) {
            return decodeURIComponent(r(e).replace(/(.)/g, function(e, r) {
                var t = r.charCodeAt(0).toString(16).toUpperCase();
                return t.length < 2 && (t = "0" + t), "%" + t;
            }));
        }(t);
    } catch (e) {
        return r(t);
    }
}
function n(e) {
    this.message = e;
}
function o(e, r) {
    if ("string" != typeof e) throw new n("Invalid token specified");
    var o = !0 === (r = r || {}).header ? 0 : 1;
    try {
        return JSON.parse(t(e.split(".")[o]));
    } catch (e) {
        throw new n("Invalid token specified: " + e.message);
    }
}
n.prototype = new Error, n.prototype.name = "InvalidTokenError";
exports.default = o;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"1mCWG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>sendNewRelicLog);
var _objectSpread = require("@swc/helpers/_/_object_spread");
var _utils = require("./utils");
async function sendNewRelicLog(message, attributes) {
    const requestBody = (0, _objectSpread._)({
        hostname: "jspp.resources.streamotion.com.au",
        logtype: "jspp",
        message,
        timestamp: new Date().toISOString()
    }, attributes);
    fetch((0, _utils.addProxyIp)("https://log-api.newrelic.com/log/v1"), {
        method: "POST",
        headers: {
            "Api-Key": "f476a78d10f213e60031a460a952d58dFFFFNRAL",
            "Content-Type": "application/json"
        },
        body: JSON.stringify(requestBody)
    }).catch((error)=>{
        console.error("New Relic log failed to send", error);
    });
}

},{"@swc/helpers/_/_object_spread":"lupAG","./utils":"fvIy3","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"4bxdT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fetchWithTimeout", ()=>fetchWithTimeout);
parcelHelpers.export(exports, "fetchWithTimeoutAndRetry", ()=>fetchWithTimeoutAndRetry);
parcelHelpers.export(exports, "getVideoAdBreaks", ()=>getVideoAdBreaks);
parcelHelpers.export(exports, "getExpiresInMs", ()=>getExpiresInMs);
parcelHelpers.export(exports, "convertMsToTime", ()=>convertMsToTime);
parcelHelpers.export(exports, "getFileName", ()=>getFileName);
parcelHelpers.export(exports, "getCmsId", ()=>getCmsId);
var _objectSpread = require("@swc/helpers/_/_object_spread");
var _objectSpreadProps = require("@swc/helpers/_/_object_spread_props");
var _constants = require("../../../utils/constants");
async function fetchWithTimeout(url, opts = {}, timeout = 5000) {
    // Create the AbortController instance, get AbortSignal
    // eslint-disable-next-line compat/compat
    const abortController = new AbortController();
    const { signal } = abortController;
    // Make the fetch request
    const _fetchPromise = fetch(url, (0, _objectSpreadProps._)((0, _objectSpread._)({}, opts), {
        signal
    }));
    // Start the timer
    const timer = setTimeout(()=>abortController.abort(), timeout);
    // Await the fetch with a catch in case it's aborted which signals an error
    try {
        const result = await _fetchPromise;
        clearTimeout(timer);
        return result;
    } catch (e) {
        clearTimeout(timer);
        throw e;
    }
}
async function fetchWithTimeoutAndRetry(url, opts = {}, timeout = 5000, retries = 2, delayBetweenRetries = 0) {
    const isRecoverableError = (statusCode)=>statusCode in (0, _constants.RECOVERABLE_HTTP_STATUS_CODES);
    const attemptFetch = async (retriesRemaining)=>{
        // eslint-disable-next-line compat/compat
        const abortController = new AbortController();
        const { signal } = abortController;
        const _fetchPromise = fetch(url, (0, _objectSpreadProps._)((0, _objectSpread._)({}, opts), {
            signal
        }));
        const timer = setTimeout(()=>abortController.abort(), timeout);
        try {
            const result = await _fetchPromise;
            clearTimeout(timer);
            if (!result.ok && isRecoverableError(result.status) && retriesRemaining > 0) {
                await new Promise((resolve)=>setTimeout(resolve, delayBetweenRetries));
                return attemptFetch(retriesRemaining - 1);
            }
            return result;
        } catch (e) {
            clearTimeout(timer);
            if (retriesRemaining > 0 && (e.name === "AbortError" || e.response && isRecoverableError(e.response.status))) {
                await new Promise((resolve)=>setTimeout(resolve, delayBetweenRetries));
                return attemptFetch(retriesRemaining - 1);
            } else throw e;
        }
    };
    return attemptFetch(retries);
}
function getVideoAdBreaks(adTrackingResponseBody) {
    const getVideoAdFromPodAd = ({ adId, startTimeInSeconds, durationInSeconds })=>({
            id: adId,
            startTime: startTimeInSeconds * 1000,
            duration: durationInSeconds * 1000,
            watched: false
        });
    const getVideoAdBreakFromPod = ({ startTimeInSeconds, ads })=>({
            adBreakPlacementType: startTimeInSeconds === 0 ? "preroll" : "midroll",
            ads: ads.map(getVideoAdFromPodAd)
        });
    if (adTrackingResponseBody) return adTrackingResponseBody.avails.map(getVideoAdBreakFromPod).filter((videoAdBreak)=>{
        var _videoAdBreak_ads;
        return (videoAdBreak === null || videoAdBreak === void 0 ? void 0 : (_videoAdBreak_ads = videoAdBreak.ads) === null || _videoAdBreak_ads === void 0 ? void 0 : _videoAdBreak_ads.length) > 0;
    });
    else return [];
}
function getExpiresInMs(payload, currentTime = new Date().getTime()) {
    let expiresIn = 0;
    if (payload === null || payload === void 0 ? void 0 : payload.exp) expiresIn = payload.exp * 1000 - currentTime;
    console.log(`getStreamotionToken() |expiresIn=${convertMsToTime(expiresIn)}`); // eslint-disable-line no-console
    return expiresIn;
}
function convertMsToTime(milliseconds) {
    const totalSeconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(totalSeconds / 60);
    return `${minutes}m${totalSeconds % 60}s`;
}
function getFileName(url) {
    if (url) {
        const lastSlashIndex = url.lastIndexOf("/");
        const lastDotIndex = url.lastIndexOf(".");
        if (lastDotIndex !== -1 && lastDotIndex > lastSlashIndex) return url.substring(lastSlashIndex + 1, lastDotIndex);
        else return url.substring(lastSlashIndex + 1);
    }
    return "";
}
function getCmsId(glassAssetId) {
    if (glassAssetId) {
        const startIndex = glassAssetId.indexOf(":");
        const endIndex = glassAssetId.includes("_") ? glassAssetId.indexOf("_") : glassAssetId.length;
        if (startIndex > -1 && endIndex > -1 && endIndex > startIndex) return glassAssetId.substring(startIndex + 1, endIndex).replace("-LIVOD", "");
    }
    return "";
}

},{"@swc/helpers/_/_object_spread":"lupAG","@swc/helpers/_/_object_spread_props":"8Y68S","../../../utils/constants":"b0RZX","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"b0RZX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IFRAME_MANAGER_URL_PATH", ()=>IFRAME_MANAGER_URL_PATH);
parcelHelpers.export(exports, "IFRAME_MANAGER_TIMEOUT_LOADING_PROVIDER_IN_SECONDS", ()=>IFRAME_MANAGER_TIMEOUT_LOADING_PROVIDER_IN_SECONDS);
parcelHelpers.export(exports, "PLAYBACK_STATES", ()=>PLAYBACK_STATES);
parcelHelpers.export(exports, "RECOVERABLE_HTTP_STATUS_CODES", ()=>RECOVERABLE_HTTP_STATUS_CODES);
const IFRAME_MANAGER_URL_PATH = "./iframe-manager/index.html";
const IFRAME_MANAGER_TIMEOUT_LOADING_PROVIDER_IN_SECONDS = 10;
const PLAYBACK_STATES = {
    0: "idle",
    1: "initializing",
    2: "initialized",
    3: "preparing",
    4: "prepared",
    5: "buffering",
    6: "paused",
    7: "seeking",
    8: "playing",
    9: "stopping",
    10: "stopped",
    11: "complete",
    12: "error",
    13: "released",
    14: "blocked"
};
const RECOVERABLE_HTTP_STATUS_CODES = {
    408: "Request Timeout",
    429: "Too Many Requests",
    500: "Internal Server Error",
    502: "Bad Gateway",
    503: "Service Unavailable",
    504: "Gateway Timeout"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"gxXiF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AUTH_CONFIG", ()=>AUTH_CONFIG);
parcelHelpers.export(exports, "PLAY_URL", ()=>PLAY_URL);
const AUTH_CONFIG = {
    "foxtel-puck": {
        domain: "https://tokenservice.streamotion.com.au",
        body: {
            client_id: "LAkxJxi5XdDC6MuGDg1ubQlPpZ3lDt4U",
            // environment: 'APAC',
            scope: "open"
        }
    },
    "foxtel-tv": {
        domain: "https://tokenservice.streamotion.com.au",
        body: {
            client_id: "4YCZyf7RxUc9rrrmw7iQ2J4OsvwXCEEO",
            // environment: 'APAC',
            scope: "open"
        }
    },
    "foxtel-dev-puck": {
        domain: "https://tokenservice-staging.streamotion.com.au",
        body: {
            client_id: "qmGFlcs1QgxBjVEXNmd0kFBbwrQt2fOJ",
            // environment: 'EU',
            scope: "open"
        }
    },
    "foxtel-dev-tv": {
        domain: "https://tokenservice-staging.streamotion.com.au",
        body: {
            client_id: "d7d5YKPDn0ANnOsGaiFzGvgUpEiCLq33",
            // environment: 'EU',
            scope: "open"
        }
    }
};
const PLAY_URL = {
    "foxtel": "https://play.hubbl.com.au/play",
    "foxtel-dev": "https://play-staging.hubbl.com.au/play"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"1ECAn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getMagnetoAsset);
var _objectSpread = require("@swc/helpers/_/_object_spread");
var _integratedPlayerError = require("../../../utils/integrated-player-error");
var _integratedPlayerErrorDefault = parcelHelpers.interopDefault(_integratedPlayerError);
var _utils = require("../../../utils/utils");
var _utils1 = require("./utils");
var _configs = require("./configs");
async function getMagnetoAsset({ authToken: glassAuthToken, glassAssetLocator, glassContentOptions, config, deviceInfo, user }) {
    const fileName = (0, _utils1.getFileName)(glassAssetLocator.pathname);
    const cmsId = (0, _utils1.getCmsId)(glassContentOptions.assetId);
    let streamotionToken;
    user.setGlassToken(glassAuthToken); // also known as XSCT
    try {
        [streamotionToken] = await user.getStreamotionToken(20);
    } catch (error) {
        console.error(`could not fetch token ${JSON.stringify(error)}`, error);
        let message = "";
        for (const key of [
            "status",
            "statusText",
            "type"
        ])if (typeof error[key] !== "undefined") message += ` ${error[key]}`;
        throw new (0, _integratedPlayerErrorDefault.default)({
            major: 20000,
            minor: 101,
            desc: `token service failed to return${message}`
        }, {
            response: error,
            responseString: `${error}`
        });
    }
    return await fetchStreamotionPlay(glassContentOptions.assetType === "IVOD" ? "" : cmsId, fileName, glassContentOptions.mediaGuid, streamotionToken, deviceInfo, glassContentOptions.resumePosition, glassAssetLocator.searchParams).then((playResponse)=>{
        if (playResponse.streams.length < 1) throw "no streams available";
        // uncomment to test fallback
        // playResponse.streams[0]?.manifest = 'http://httpstat.us/403?sleep=500';
        // playResponse.streams[1]?.manifest = 'http://httpstat.us/404?sleep=500';
        // playResponse.streams[2]?.manifest = 'http://httpstat.us/500?sleep=500';
        // playResponse.streams[0]?.licenseAcquisitionUrl['com.microsoft.playready'] = 'http://httpstat.us/404?sleep=1000';
        // const streams = [{
        //     url: 'https://rdmedia.bbc.co.uk/testcard/vod/manifests/avc-full.mpd',
        // }];
        const getRequestHeadersFunction = async function() {
            try {
                [streamotionToken] = await user.getStreamotionToken(20);
                return [
                    {
                        key: "Authorization",
                        value: `Bearer ${streamotionToken}`,
                        isLicenseRequest: true
                    }
                ];
            } catch (error) {
                console.error(`could not fetch token for DRM Authorization header ${JSON.stringify(error)}`, error);
            }
            return null;
        };
        const streams = playResponse.streams.map(({ drm, manifest, licenseAcquisitionUrl, adTrackingUrl })=>{
            const streamUrl = new URL(manifest);
            let drmConfig = {};
            if (drm) drmConfig = {
                "com.microsoft.playready": licenseAcquisitionUrl["com.microsoft.playready"],
                "preferredKeysystem": "com.microsoft.playready"
            };
            // currently adTrackingUrl is only relevant to VOD assets that expect scrubbing/trickplay to be disabled during an ad segment
            // if true, ad cannot be skipped by the user, adTrackingUrl must return before playback can play the first frame
            // if false, adTrackingUrl should be ignored
            const isFetchAdTrackingUrlRequired = adTrackingUrl && glassContentOptions.assetType === "VOD";
            // && (playResponse.configurations?.isScrubbingEnabledForAds === false);
            return {
                url: `${streamUrl}`,
                drmConfig,
                requestHeadersFunction: drm ? getRequestHeadersFunction : null,
                autoPlay: !isFetchAdTrackingUrlRequired
            };
        });
        return {
            streams,
            playResponse,
            aampInitConfigOverrides: (0, _objectSpread._)({
                enableSeekableRange: true,
                useAbsoluteTimeline: true,
                enableLiveLatencyCorrection: true
            }, config === null || config === void 0 ? void 0 : config.aampInitConfigRemoteOverrides),
            // recoverySettings: config?.recoverySettings, // TODO MIPA-236 remote config for phase 2
            recoverySettings: {
                // Phase 1: pre-stream and mid-stream fallback to different stream
                sourceRetryCountMax: 0,
                minimumUninterruptedPlayback: 0
            }
        };
    }).catch((error)=>{
        var _error_body;
        console.error(`could not fetch streams ${JSON.stringify(error)}`, error);
        if (error === null || error === void 0 ? void 0 : (_error_body = error.body) === null || _error_body === void 0 ? void 0 : _error_body.title) {
            const PLAY_NOT_ENTITLED_ERRORS = [
                "MISSING_CONTENT_PACKAGE",
                "UNSUFFICIENT_QUALITY_ENTITLEMENTS",
                "DRM_ENTITLEMENTS_NOT_FOUND"
            ];
            if (PLAY_NOT_ENTITLED_ERRORS.includes(error.body.title)) throw new (0, _integratedPlayerErrorDefault.default)({
                major: 40,
                desc: `not entitled ${error.body.title}`
            }, {
                response: error
            });
        }
        let message = "";
        for (const key of [
            "status",
            "statusText",
            "type"
        ])if (typeof error[key] !== "undefined") message += ` ${error[key]}`;
        throw new (0, _integratedPlayerErrorDefault.default)({
            major: 20000,
            minor: 102,
            desc: `play service failed to return${message}`
        }, {
            response: error,
            responseString: `${error}`
        });
    });
}
// eslint-disable-next-line max-params
async function fetchStreamotionPlay(cmsId, foxtelAssetId, mediaGuid, streamotionToken, deviceInfo, resumePosition, locatorSearchParams) {
    const { partnerId } = deviceInfo.glassConfigure;
    const preference = {
        trackKeys: true,
        trickPlay: true
    };
    if (window.localStorage.getItem("FORCE_ADS")) preference.forceAds = true;
    const resolution = mediaGuid === null || mediaGuid === void 0 ? void 0 : mediaGuid.split("_")[1];
    switch(resolution){
        case "UHD":
            // if not entitled to 4K/UHD, then /play returns 403 UNSUFFICIENT_QUALITY_ENTITLEMENTS
            preference.restrictToUHD = true;
            break;
        case "HD":
            // /play returns 1080p or lower
            preference.resolution = "fhd";
            break;
        case "SD":
            // /play returns 540p or lower
            preference.resolution = "sd";
            break;
        default:
            break;
    }
    const body = {
        assetId: foxtelAssetId,
        cmsId,
        foxtelAssetId,
        ads: {
            optOut: true
        },
        application: {
            appId: deviceInfo.appName,
            name: "magneto",
            version: deviceInfo.appVersion
        },
        // browser: {
        //     name: 'TODO',
        //     version: 'TODO',
        // },
        capabilities: {
            codecs: [
                "avc",
                "hevc"
            ],
            drm: [
                "playready"
            ]
        },
        device: {
            brand: deviceInfo.glassConfigure.manufacturer,
            id: deviceInfo.glassConfigure.estbMacAddress,
            model: deviceInfo.glassConfigure.model,
            type: deviceInfo.glassConfigure.brand === "SOIP-PCK" ? "stb" : "tv"
        },
        os: {
            name: "Magneto",
            version: deviceInfo.glassConfigure.osVersion
        },
        player: {
            name: deviceInfo.playerName,
            version: deviceInfo.playerVersion
        },
        preference,
        session: {
            startPos: resumePosition ? resumePosition / 1000 : null
        }
    };
    if (locatorSearchParams) [
        "start",
        "end"
    ].forEach((key)=>{
        if (locatorSearchParams.has(key)) body.session[key] = locatorSearchParams.get(key).replace(" ", "+");
    });
    return fetch((0, _utils.addProxyIp)((0, _configs.PLAY_URL)[partnerId]), {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${streamotionToken}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify(body)
    }).then(async (response)=>{
        var _response_headers_get;
        let responseBody;
        if (((_response_headers_get = response.headers.get("Content-Type")) === null || _response_headers_get === void 0 ? void 0 : _response_headers_get.indexOf("json")) > -1) responseBody = await response.json();
        else responseBody = await response.text();
        if (response.ok) return {
            requestUrl: response.url,
            responseBody
        };
        else if (response instanceof Response) throw {
            url: response.url,
            status: response.status,
            statusText: response.statusText,
            type: response.type,
            headers: Object.fromEntries(response.headers.entries()),
            body: responseBody
        };
        else throw `unknown error fetching streams ${response}`;
    }).then(({ responseBody, requestUrl })=>{
        console.debug(`${requestUrl} response ${JSON.stringify(responseBody)}`); // eslint-disable-line no-console
        return responseBody;
    });
}

},{"@swc/helpers/_/_object_spread":"lupAG","../../../utils/integrated-player-error":"5jMEP","../../../utils/utils":"fvIy3","./utils":"4bxdT","./configs":"gxXiF","@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}],"5jMEP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>IntegratedPlayerError);
class IntegratedPlayerError extends Error {
    getDetail() {
        return this.detail;
    }
    getMediaFailedPayload() {
        return {
            error: {
                major: this.major,
                minor: this.minor,
                desc: this.description
            }
        };
    }
    constructor(integratedPlayerErrorPayload, detail){
        super(integratedPlayerErrorPayload.desc);
        this.major = integratedPlayerErrorPayload.major;
        this.minor = integratedPlayerErrorPayload.minor;
        this.description = integratedPlayerErrorPayload.desc;
        this.detail = detail;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"840Gs"}]},["gIJED"], null, "parcelRequire0a42")

//# sourceMappingURL=index.js.map
